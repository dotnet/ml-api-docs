<Type Name="ISingleCanSavePfa" FullName="Microsoft.ML.Runtime.Model.Pfa.ISingleCanSavePfa">
  <TypeSignature Language="C#" Value="public interface ISingleCanSavePfa : Microsoft.ML.Runtime.Model.Pfa.ICanSavePfa" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISingleCanSavePfa implements class Microsoft.ML.Runtime.Model.Pfa.ICanSavePfa" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Model.Pfa.ISingleCanSavePfa" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISingleCanSavePfa&#xA;Implements ICanSavePfa" />
  <TypeSignature Language="F#" Value="type ISingleCanSavePfa = interface&#xA;    interface ICanSavePfa" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.Model.Pfa.ICanSavePfa</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            For simple mappers. Intended to be used for <see cref="T:Microsoft.ML.Runtime.Data.IValueMapper" /> and
            <see cref="T:Microsoft.ML.Runtime.Internal.Calibration.ICalibrator" /> instances.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="SaveAsPfa">
      <MemberSignature Language="C#" Value="public Newtonsoft.Json.Linq.JToken SaveAsPfa (Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext ctx, Newtonsoft.Json.Linq.JToken input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Newtonsoft.Json.Linq.JToken SaveAsPfa(class Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext ctx, class Newtonsoft.Json.Linq.JToken input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Model.Pfa.ISingleCanSavePfa.SaveAsPfa(Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext,Newtonsoft.Json.Linq.JToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveAsPfa (ctx As BoundPfaContext, input As JToken) As JToken" />
      <MemberSignature Language="F#" Value="abstract member SaveAsPfa : Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext * Newtonsoft.Json.Linq.JToken -&gt; Newtonsoft.Json.Linq.JToken" Usage="iSingleCanSavePfa.SaveAsPfa (ctx, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Newtonsoft.Json.Linq.JToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext" />
        <Parameter Name="input" Type="Newtonsoft.Json.Linq.JToken" />
      </Parameters>
      <Docs>
        <param name="ctx">The PFA context</param>
        <param name="input">The PFA token representing the input. In the case of
            a predictor, for example, this would be a reference to the variable holding
            the features array.</param>
        <summary>
            Implementors of this method are responsible for providing the PFA expression that
            computes the output of this object. Note that this method does not control what name
            will be given to the output, and is not responsible for declaring the variable into
            which the output will be returned. (Though, the method may of course declare other
            variables, cells, or such to enable this computation.)
            </summary>
        <returns>A PFA expression</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>