<Type Name="ExceptionMarshaller" FullName="Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller">
  <TypeSignature Language="C#" Value="public sealed class ExceptionMarshaller : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExceptionMarshaller extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExceptionMarshaller&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type ExceptionMarshaller = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An object that serves as a source of a cancellation token, as well as having the ability
            for anything to push an exception into the message, to trigger the cancellation. The general
            intended usage is that, prior to creating a bunch of collaborating thread workers, this
            object is created and made accessible to them, somehow. Each thread worker will work as they
            would be engineered without this class, except they will wrap their contents in a try-catch
            block to push any exceptions (hopefully none) into this marshaller, using <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Set(System.String,System.Exception)" />.
            Further, any potentially blocking operation of the thread workers must be changed to use
            <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Token" /> as the cancellation token (this token is cancelled iff <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Set(System.String,System.Exception)" />
            is ever called). The controlling thread, whatever that may be, once it is either sure
            <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Set(System.String,System.Exception)" /> has been called (possibly by receiving the cancellation) or is sure somehow
            that the workers have finished by its own means, will call <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.ThrowIfSet(Microsoft.ML.Runtime.IExceptionContext)" /> to throw
            the set exception as an inner exception, in the wrapping thread.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExceptionMarshaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="exceptionMarshaller.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (string component, Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set(string component, class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Set(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set (component As String, ex As Exception)" />
      <MemberSignature Language="F#" Value="member this.Set : string * Exception -&gt; unit" Usage="exceptionMarshaller.Set (component, ex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.String" />
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="component">The type of worker that threw the exception, used
            in the description of the wrapping exception</param>
        <param name="ex">The exception that will become the inner exception</param>
        <summary>
            Store an exception and set the cancellation token. If this was already
            called, this newly passed in exception is ignored. (Important, since a
            common source of exceptions would be the exceptions relating to the cancellation.)
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfSet">
      <MemberSignature Language="C#" Value="public void ThrowIfSet (Microsoft.ML.Runtime.IExceptionContext ectx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfSet(class Microsoft.ML.Runtime.IExceptionContext ectx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.ThrowIfSet(Microsoft.ML.Runtime.IExceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfSet (ectx As IExceptionContext)" />
      <MemberSignature Language="F#" Value="member this.ThrowIfSet : Microsoft.ML.Runtime.IExceptionContext -&gt; unit" Usage="exceptionMarshaller.ThrowIfSet ectx" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ectx" Type="Microsoft.ML.Runtime.IExceptionContext" />
      </Parameters>
      <Docs>
        <param name="ectx">To be added.</param>
        <summary>
            If an exception was ever set through <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Set(System.String,System.Exception)" />, raise it as an appropriate
            inner exception. This should only be called just prior to dispose, when the workers
            have already finished. If there is no stored exception, this will do nothing. Note
            that this does not "expire" the exception, that is, if you were to call this again,
            it would throw the same exception.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken Token" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Token" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Token As CancellationToken" />
      <MemberSignature Language="F#" Value="member this.Token : System.Threading.CancellationToken" Usage="Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Token" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A cancellation token, whose source will be cancelled if <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ExceptionMarshaller.Set(System.String,System.Exception)" /> is ever called.
            Any thread blocking operation of a family of thread workers using this structure
            must use this cancellation token, or else there is a strong possibility for threads
            to stop responding if an exception is thrown at any point.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>