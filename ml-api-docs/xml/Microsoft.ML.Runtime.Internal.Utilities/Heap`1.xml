<Type Name="Heap&lt;T&gt;" FullName="Microsoft.ML.Runtime.Internal.Utilities.Heap&lt;T&gt;">
  <TypeSignature Language="C#" Value="public sealed class Heap&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Heap`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Internal.Utilities.Heap`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Heap(Of T)" />
  <TypeSignature Language="F#" Value="type Heap&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>
            Implements a heap.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Heap (Func&lt;T,T,bool&gt; fnReverse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`3&lt;!T, !T, bool&gt; fnReverse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.#ctor(System.Func{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fnReverse As Func(Of T, T, Boolean))" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Internal.Utilities.Heap&lt;'T&gt; : Func&lt;'T, 'T, bool&gt; -&gt; Microsoft.ML.Runtime.Internal.Utilities.Heap&lt;'T&gt;" Usage="new Microsoft.ML.Runtime.Internal.Utilities.Heap&lt;'T&gt; fnReverse" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fnReverse" Type="System.Func&lt;T,T,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="fnReverse">A delegate that takes two <c>T</c> objects, and if
            it returns true then the second object should be popped before the first</param>
        <summary>
            A Heap structure gives efficient access to the ordered next element.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Heap (Func&lt;T,T,bool&gt; fnReverse, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`3&lt;!T, !T, bool&gt; fnReverse, int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.#ctor(System.Func{`0,`0,System.Boolean},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fnReverse As Func(Of T, T, Boolean), capacity As Integer)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Internal.Utilities.Heap&lt;'T&gt; : Func&lt;'T, 'T, bool&gt; * int -&gt; Microsoft.ML.Runtime.Internal.Utilities.Heap&lt;'T&gt;" Usage="new Microsoft.ML.Runtime.Internal.Utilities.Heap&lt;'T&gt; (fnReverse, capacity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fnReverse" Type="System.Func&lt;T,T,System.Boolean&gt;" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fnReverse">A delegate that takes two <c>T</c> objects, and if
            it returns true then the second object should be popped before the first</param>
        <param name="capacity">The initial capacity of the heap</param>
        <summary>
            A Heap structure gives efficient access to the ordered next element.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As T)" />
      <MemberSignature Language="F#" Value="member this.Add : 'T -&gt; unit" Usage="heap.Add item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">The item to add</param>
        <summary>
            Add a new element to the heap
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="heap.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Discard all elements currently in the heap
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Heap&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Current count of elements remaining in the heap
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FnReverse">
      <MemberSignature Language="C#" Value="public Func&lt;T,T,bool&gt; FnReverse { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`3&lt;!T, !T, bool&gt; FnReverse" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.FnReverse" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FnReverse As Func(Of T, T, Boolean)" />
      <MemberSignature Language="F#" Value="member this.FnReverse : Func&lt;'T, 'T, bool&gt;" Usage="Microsoft.ML.Runtime.Internal.Utilities.Heap&lt;'T&gt;.FnReverse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;T,T,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Func tests true if first element should be after the second
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public T Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As T" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; 'T" Usage="heap.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Remove and return the first element in the heap
            </summary>
        <returns>The first element in the heap</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public T Top { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Top" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.Heap`1.Top" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Top As T" />
      <MemberSignature Language="F#" Value="member this.Top : 'T" Usage="Microsoft.ML.Runtime.Internal.Utilities.Heap&lt;'T&gt;.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Peek at the first element in the heap
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>