<Type Name="ServerChannel+IServer" FullName="Microsoft.ML.Runtime.ServerChannel+IServer">
  <TypeSignature Language="C#" Value="public interface ServerChannel.IServer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class nested public interface auto ansi abstract ServerChannel/IServer implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.ServerChannel.IServer" />
  <TypeSignature Language="VB.NET" Value="Public Interface ServerChannel.IServer&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type ServerChannel.IServer = interface&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public: interface class ServerChannel::IServer : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             Classes that want to publish the bundles from server channels in some fashion should implement
             this interface. The intended simple use case is that this will be some form of in-process web
             server, and then when disposed, they should stop themselves.
            
             Note that the primary communication with the server from the client code's perspective is not
             through method calls on this interface, but rather communication through an
             <see cref="T:Microsoft.ML.Runtime.IPipe`1" /> that the server will listen to throughout its
             lifetime.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public Uri BaseAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseAddress" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.ServerChannel.IServer.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseAddress As Uri" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : Uri" Usage="Microsoft.ML.Runtime.ServerChannel.IServer.BaseAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseAddress { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            This should return the base address where the server is. If this server is not actually
            serving content at any URL, this property should be null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>