<Type Name="IExceptionContext" FullName="Microsoft.ML.Runtime.IExceptionContext">
  <TypeSignature Language="C#" Value="public interface IExceptionContext" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IExceptionContext" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.IExceptionContext" />
  <TypeSignature Language="VB.NET" Value="Public Interface IExceptionContext" />
  <TypeSignature Language="F#" Value="type IExceptionContext = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Interface for "processing" exceptions before they are thrown. This can
            be used to add context to the exception, wrap the exception in another one,
            totally replace the exception, etc. It is not legal to return null from
            Process (unless null was passed in, which really shouldn't happen).
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ContextDescription">
      <MemberSignature Language="C#" Value="public string ContextDescription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextDescription" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.IExceptionContext.ContextDescription" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContextDescription As String" />
      <MemberSignature Language="F#" Value="member this.ContextDescription : string" Usage="Microsoft.ML.Runtime.IExceptionContext.ContextDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A string describing the context itself.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Process&lt;TException&gt;">
      <MemberSignature Language="C#" Value="public TException Process&lt;TException&gt; (TException ex) where TException : Exception;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TException Process&lt;(class System.Exception) TException&gt;(!!TException ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.IExceptionContext.Process``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Process(Of TException As Exception) (ex As TException) As TException" />
      <MemberSignature Language="F#" Value="abstract member Process : 'Exception -&gt; 'Exception (requires 'Exception :&gt; Exception)" Usage="iExceptionContext.Process ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TException</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TException">
          <Constraints>
            <BaseTypeName>System.Exception</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ex" Type="TException" />
      </Parameters>
      <Docs>
        <typeparam name="TException">To be added.</typeparam>
        <param name="ex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>