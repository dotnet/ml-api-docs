<Type Name="ITrainer&lt;TDataSet,TPredictor&gt;" FullName="Microsoft.ML.Runtime.ITrainer&lt;TDataSet,TPredictor&gt;">
  <TypeSignature Language="C#" Value="public interface ITrainer&lt;in TDataSet,out TPredictor&gt; : Microsoft.ML.Runtime.ITrainer&lt;in TDataSet&gt; where TPredictor : IPredictor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITrainer`2&lt;- TDataSet, (class Microsoft.ML.Runtime.IPredictor) + TPredictor&gt; implements class Microsoft.ML.Runtime.ITrainer, class Microsoft.ML.Runtime.ITrainer`1&lt;!TDataSet&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.ITrainer`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITrainer(Of In TDataSet, Out TPredictor)&#xA;Implements ITrainer(Of In TDataSet)" />
  <TypeSignature Language="F#" Value="type ITrainer&lt;'DataSet, 'Predictor (requires 'Predictor :&gt; IPredictor)&gt; = interface&#xA;    interface ITrainer&lt;'DataSet&gt;&#xA;    interface ITrainer" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TDataSet, typename TPredictor&gt;&#xA; where TPredictor : IPredictorpublic interface class ITrainer : Microsoft::ML::Runtime::ITrainer&lt;TDataSet&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TDataSet">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TPredictor">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
        <InterfaceName>Microsoft.ML.Runtime.IPredictor</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.ITrainer&lt;TDataSet&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TDataSet"> Type of the training dataset</typeparam>
    <typeparam name="TPredictor"> Type of predictor produced</typeparam>
    <summary>
            Strongly typed generic interface for a trainer. A trainer object takes
            supervision data and produces a predictor.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreatePredictor">
      <MemberSignature Language="C#" Value="public TPredictor CreatePredictor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TPredictor CreatePredictor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.ITrainer`2.CreatePredictor" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePredictor () As TPredictor" />
      <MemberSignature Language="F#" Value="abstract member CreatePredictor : unit -&gt; 'Predictor" Usage="iTrainer.CreatePredictor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TPredictor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Returns the trained predictor.
            </summary>
        <returns>Trained predictor ready to make predictions</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>