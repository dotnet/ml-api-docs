<Type Name="LowFragmentationStream" FullName="Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream">
  <TypeSignature Language="C#" Value="public class LowFragmentationStream : System.IO.FileStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LowFragmentationStream extends System.IO.FileStream" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream" />
  <TypeSignature Language="VB.NET" Value="Public Class LowFragmentationStream&#xA;Inherits FileStream" />
  <TypeSignature Language="F#" Value="type LowFragmentationStream = class&#xA;    inherit FileStream" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.FileStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This is a writable FileStream that reduces the fragmentation by
            extending the output in chunks.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LowFragmentationStream (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream : string -&gt; Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream" Usage="new Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">the name of the file to write to</param>
        <summary>
             Construct a writable Stream outputting to the given file.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurs</exception>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The access needed is not permitted by the operating system for the specified <paramref name="fileName" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LowFragmentationStream (string fileName, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, append As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream : string * bool -&gt; Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream" Usage="new Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream (fileName, append)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fileName">the name of the file to write to</param>
        <param name="append">if true, append to the file; otherwise, overwrite</param>
        <summary>
             Construct a writable Stream outputting to the given file.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileNotFoundException">Append is specified, and the file cannot be found.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs</exception>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The access needed is not permitted by the operating system for the specified <paramref name="fileName" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LowFragmentationStream (string fileName, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, bufferSize As Integer)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream : string * int -&gt; Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream" Usage="new Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream (fileName, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">the name of the file to write to</param>
        <param name="bufferSize">the size of the buffer to use, in bytes</param>
        <summary>
             Construct a writable Stream outputting to the given file.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> is negative or zero.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs</exception>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The access needed is not permitted by the operating system for the specified <paramref name="fileName" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LowFragmentationStream (string fileName, bool append, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, bool append, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.#ctor(System.String,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, append As Boolean, bufferSize As Integer)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream : string * bool * int -&gt; Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream" Usage="new Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream (fileName, append, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">the name of the file to write to</param>
        <param name="append">if true, append to the file; otherwise, overwrite</param>
        <param name="bufferSize">the size of the buffer to use, in bytes</param>
        <summary>
             Construct a writable Stream outputting to the given file.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> is negative or zero.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Append is specified, and the file cannot be found.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs</exception>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The access needed is not permitted by the operating system for the specified <paramref name="fileName" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginWrite (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="lowFragmentationStream.BeginWrite (buffer, offset, count, callback, stateObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer to write data to.</param>
        <param name="offset">The zero based byte offset at which to begin writing.</param>
        <param name="count">The maximum number of bytes to write.</param>
        <param name="callback">The method to be called when the asynchronous write operation is completed.</param>
        <param name="stateObject">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
        <summary>
            Begins an asynchronous write.
            </summary>
        <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous write.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
        <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get whether the stream can read.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get whether the stream can seek.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get whether the stream can write.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="lowFragmentationStream.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Close the stream.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="lowFragmentationStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true if disposing</param>
        <summary>
            Release the resources used by this instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="lowFragmentationStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">The pending asynchronous I/O request.</param>
        <summary>
            Ends an asynchronous write, blocking until the I/O operation has completed.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" /> .</exception>
        <exception cref="T:System.ArgumentException">This <see cref="T:System.IAsyncResult" /> object was not created by calling <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" /> is called multiple times.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtensionFactor">
      <MemberSignature Language="C#" Value="public static float ExtensionFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property float32 ExtensionFactor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.ExtensionFactor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ExtensionFactor As Single" />
      <MemberSignature Language="F#" Value="member this.ExtensionFactor : single with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.ExtensionFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the factor by which a file wll be extended when needed.
            Defaults to 0.5, and must be greater than 0.0 and less than or equal to 1.0.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~LowFragmentationStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="lowFragmentationStream.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clean up the stream - truncate the file length as needed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="lowFragmentationStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Write any pending data, without truncating.
            </summary>
        <remarks>
            Note that this does not truncate the file!
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (bool truncate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(bool truncate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (truncate As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Flush : bool -&gt; unit" Usage="lowFragmentationStream.Flush truncate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="truncate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="truncate">if true, also truncate the file; if false, do not.</param>
        <summary>
            Write any pending data and optionally truncate.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the length of the file.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxExtension">
      <MemberSignature Language="C#" Value="public static long MaxExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 MaxExtension" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.MaxExtension" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property MaxExtension As Long" />
      <MemberSignature Language="F#" Value="member this.MaxExtension : int64 with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.MaxExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the maximum size increment by which a file will be extended, in bytes.
            Defaults to 2GB.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinExtension">
      <MemberSignature Language="C#" Value="public static long MinExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 MinExtension" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.MinExtension" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property MinExtension As Long" />
      <MemberSignature Language="F#" Value="member this.MinExtension : int64 with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.MinExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the minimum size increment by which a file will be extended, in bytes.
            Defaults to 50MB.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the position in the file.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reserve">
      <MemberSignature Language="C#" Value="public void Reserve (long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reserve(int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Reserve(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reserve (length As Long)" />
      <MemberSignature Language="F#" Value="member this.Reserve : int64 -&gt; unit" Usage="lowFragmentationStream.Reserve length" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="length">the number of bytes to allocate</param>
        <summary>
            Extend the capacity to be at least a certain number of bytes.
            </summary>
        <remarks>
            This is useful when the approximate or exact size of the output is known.
            It will not affect the final length of the file, but it can help with efficiency
            and fragmentation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public long Seek (long offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Seek(int64 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Seek(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (offset As Long) As Long" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 -&gt; int64" Usage="lowFragmentationStream.Seek offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">The byte number to seek to.</param>
        <summary>
          <para>Sets the current position of this stream to the given value.</para>
        </summary>
        <returns>
          <para>The new position in the stream.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <exception cref="T:System.ArgumentException">Attempted seeking before the beginning of the stream.</exception>
        <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="lowFragmentationStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">The point relative to <paramref name="origin" /> to seek to, in bytes.</param>
        <param name="origin">Specifies the beginning, the end, or the current position as a reference point for <paramref name="origin" /> , using a value of type <see cref="T:System.IO.SeekOrigin" /> .</param>
        <summary>
          <para>Sets the current position of this stream to the given value.</para>
        </summary>
        <returns>
          <para>The new position in the stream.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <exception cref="T:System.ArgumentException">Attempted seeking before the beginning of the stream.</exception>
        <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="lowFragmentationStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">the length to set it to, in bytes</param>
        <summary>
            Set the file length - avoid using this manually except for truncation,
            since the size is normally automatically extended.
            </summary>
        <remarks>
            To simply ensure a predicted length, use <see cref="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Reserve(System.Int64)" /> instead.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimOverextension">
      <MemberSignature Language="C#" Value="public static bool TrimOverextension (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TrimOverextension(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.TrimOverextension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TrimOverextension (fileName As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member TrimOverextension : string -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.TrimOverextension fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">the file to trim</param>
        <summary>
            Remove allocated space that was not written to.
            </summary>
        <returns>true if the file is resized; false otherwise</returns>
        <remarks>
            This is not normally needed. The LowFragmentationStream trims itself upon finalization.
            However, if the runtime is terminated abruptly, it is possible for a file to be left
            with unused space. In that case, this method will remove the unused space.
            </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Append is specified, and the file cannot be found.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs</exception>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The access needed is not permitted by the operating system for the specified <paramref name="fileName" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="lowFragmentationStream.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">the buffer to read the data from</param>
        <param name="offset">the starting index in buffer</param>
        <param name="count">the maximum number of bytes to write</param>
        <summary>
            Write data from the buffer.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="lowFragmentationStream.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">the byte to write</param>
        <summary>
            Write a single byte.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>