<Type Name="ZStreamIn" FullName="Microsoft.ML.Runtime.Internal.IO.ZStreamIn">
  <TypeSignature Language="C#" Value="public class ZStreamIn" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ZStreamIn extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Internal.IO.ZStreamIn" />
  <TypeSignature Language="VB.NET" Value="Public Class ZStreamIn" />
  <TypeSignature Language="F#" Value="type ZStreamIn = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Class to create input Streams given file paths.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowLibraryFallback">
      <MemberSignature Language="C#" Value="public static bool AllowLibraryFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AllowLibraryFallback" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamIn.AllowLibraryFallback" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AllowLibraryFallback As Boolean" />
      <MemberSignature Language="F#" Value="member this.AllowLibraryFallback : bool with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamIn.AllowLibraryFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set whether to allow fallback to the compression library if executables
            are not found in the path. false by default. Using the fallback may result in
            slower performance and larger files. This setting is shared with ZStreamIn,
            ZStreamOut, ZStreamReader, and ZStreamWriter.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecompressionArchiveExtensions">
      <MemberSignature Language="C#" Value="public static string[] DecompressionArchiveExtensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string[] DecompressionArchiveExtensions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamIn.DecompressionArchiveExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecompressionArchiveExtensions As String()" />
      <MemberSignature Language="F#" Value="member this.DecompressionArchiveExtensions : string[]" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamIn.DecompressionArchiveExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the set of extensions (such as ".gz") that are accepted for decompression
            as archives that can act as directories.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecompressionExtensions">
      <MemberSignature Language="C#" Value="public static string[] DecompressionExtensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string[] DecompressionExtensions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamIn.DecompressionExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecompressionExtensions As String()" />
      <MemberSignature Language="F#" Value="member this.DecompressionExtensions : string[]" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamIn.DecompressionExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the set of extensions (such as ".gz") that are accepted for decompression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultUnbuffered">
      <MemberSignature Language="C#" Value="public static bool DefaultUnbuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool DefaultUnbuffered" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamIn.DefaultUnbuffered" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultUnbuffered As Boolean" />
      <MemberSignature Language="F#" Value="member this.DefaultUnbuffered : bool with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamIn.DefaultUnbuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set whether the Open method should use unbuffered I/O whenever possible.
            false, by default.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FallbackExtension">
      <MemberSignature Language="C#" Value="public static string FallbackExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string FallbackExtension" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamIn.FallbackExtension" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property FallbackExtension As String" />
      <MemberSignature Language="F#" Value="member this.FallbackExtension : string with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamIn.FallbackExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set extension to look to append when the given filename does not exist.
            If set to empty string (the default), try all known extensions;
            if set to null, disable.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Stream Open (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream Open(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamIn.Open(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (fileName As String) As Stream" />
      <MemberSignature Language="F#" Value="static member Open : string -&gt; System.IO.Stream" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamIn.Open fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenBuffered">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenBuffered (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenBuffered(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamIn.OpenBuffered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenBuffered (fileName As String) As Stream" />
      <MemberSignature Language="F#" Value="static member OpenBuffered : string -&gt; System.IO.Stream" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamIn.OpenBuffered fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenUnbuffered">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenUnbuffered (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenUnbuffered(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamIn.OpenUnbuffered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenUnbuffered (fileName As String) As Stream" />
      <MemberSignature Language="F#" Value="static member OpenUnbuffered : string -&gt; System.IO.Stream" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamIn.OpenUnbuffered fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">name of the file to open</param>
        <summary>
            Open the specified file (with unbuffered I/O, if possible).
            </summary>
        <returns>A Stream for the data</returns>
        <remarks>
          <para>
            Unbuffered I/O can give better performance, especially on fast RAID arrays.
            It does not use the system file cache. This is the only way to get speeds over
            60 MB/sec or more on reading (350 MB/sec or more is possible on a good array).
            </para>
          <para>
            While compressed files and special stream names will be understood, unbuffered I/O will
            not be enabled on anything but simple files.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">fileName is null.</exception>
        <exception cref="T:System.ArgumentException">fileName is invalid.</exception>
        <exception cref="T:System.IO.FileNotFoundException">fileName cannot be found.</exception>
        <exception cref="T:System.InvalidOperationException">The utilities needed to open a stream are not available.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenUnbuffered">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenUnbuffered (string fileName, bool async);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenUnbuffered(string fileName, bool async) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamIn.OpenUnbuffered(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenUnbuffered (fileName As String, async As Boolean) As Stream" />
      <MemberSignature Language="F#" Value="static member OpenUnbuffered : string * bool -&gt; System.IO.Stream" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamIn.OpenUnbuffered (fileName, async)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="async" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fileName">name of the file to open</param>
        <param name="async">whether to use asynchronous I/O</param>
        <summary>
            Open the specified file (with unbuffered I/O, if possible).
            </summary>
        <returns>A Stream for the data</returns>
        <remarks>
          <para>
            Unbuffered I/O can give better performance, especially on fast RAID arrays.
            It does not use the system file cache. This is the only way to get speeds over
            60 MB/sec or more on reading (350 MB/sec or more is possible on a good array).
            </para>
          <para>
            While compressed files and special stream names will be understood, unbuffered I/O will
            not be enabled on anything but simple files.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">fileName is null.</exception>
        <exception cref="T:System.ArgumentException">fileName is invalid.</exception>
        <exception cref="T:System.IO.FileNotFoundException">fileName cannot be found.</exception>
        <exception cref="T:System.InvalidOperationException">The utilities needed to open a stream are not available.</exception>
      </Docs>
    </Member>
  </Members>
</Type>