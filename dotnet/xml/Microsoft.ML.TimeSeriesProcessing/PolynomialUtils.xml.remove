<Type Name="PolynomialUtils" FullName="Microsoft.ML.TimeSeriesProcessing.PolynomialUtils">
  <TypeSignature Language="C#" Value="public static class PolynomialUtils" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit PolynomialUtils extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.TimeSeriesProcessing.PolynomialUtils" />
  <TypeSignature Language="VB.NET" Value="Public Class PolynomialUtils" />
  <TypeSignature Language="F#" Value="type PolynomialUtils = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="FindPolynomialCoefficients">
      <MemberSignature Language="C#" Value="public static bool FindPolynomialCoefficients (System.Numerics.Complex[] roots, ref double[] coefficients);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool FindPolynomialCoefficients(valuetype System.Numerics.Complex[] roots, float64[]&amp; coefficients) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesProcessing.PolynomialUtils.FindPolynomialCoefficients(System.Numerics.Complex[],System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindPolynomialCoefficients (roots As Complex(), ByRef coefficients As Double()) As Boolean" />
      <MemberSignature Language="F#" Value="static member FindPolynomialCoefficients : System.Numerics.Complex[] *  -&gt; bool" Usage="Microsoft.ML.TimeSeriesProcessing.PolynomialUtils.FindPolynomialCoefficients (roots, coefficients)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roots" Type="System.Numerics.Complex[]" />
        <Parameter Name="coefficients" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="roots">The input (complex) roots</param>
        <param name="coefficients">The output real coefficients</param>
        <summary>
             Computes the coefficients of a real monic polynomial given its real and complex roots.
             The final monic polynomial is represented as:
             coefficients[0] + coefficients[1] * X + coefficients[2] * X^2 + ... + coefficients[n-1] * X^(n-1) + X^n
            
             Note: the constant 1 coefficient of the highest degree term is implicit and not included in the output of the method.
             </summary>
        <returns>A boolean flag indicating whether the algorithm was successful.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindPolynomialRoots">
      <MemberSignature Language="C#" Value="public static bool FindPolynomialRoots (double[] coefficients, ref System.Numerics.Complex[] roots, int roundOffDigits = 6, double doublePrecision = 2.22E-100);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool FindPolynomialRoots(float64[] coefficients, valuetype System.Numerics.Complex[]&amp; roots, int32 roundOffDigits, float64 doublePrecision) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesProcessing.PolynomialUtils.FindPolynomialRoots(System.Double[],System.Numerics.Complex[]@,System.Int32,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindPolynomialRoots (coefficients As Double(), ByRef roots As Complex(), Optional roundOffDigits As Integer = 6, Optional doublePrecision As Double = 2.22E-100) As Boolean" />
      <MemberSignature Language="F#" Value="static member FindPolynomialRoots : double[] *  * int * double -&gt; bool" Usage="Microsoft.ML.TimeSeriesProcessing.PolynomialUtils.FindPolynomialRoots (coefficients, roots, roundOffDigits, doublePrecision)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="coefficients" Type="System.Double[]" />
        <Parameter Name="roots" Type="System.Numerics.Complex[]" RefType="ref" />
        <Parameter Name="roundOffDigits" Type="System.Int32" />
        <Parameter Name="doublePrecision" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="coefficients">The monic polynomial coefficients in the ascending order</param>
        <param name="roots">The computed (complex) roots</param>
        <param name="roundOffDigits">The number decimal digits to keep after round-off</param>
        <param name="doublePrecision">The machine precision</param>
        <summary>
            Computes the real and the complex roots of a real monic polynomial represented as:
            coefficients[0] + coefficients[1] * X + coefficients[2] * X^2 + ... + coefficients[n-1] * X^(n-1) + X^n
            by computing the eigenvalues of the Companion matrix. (https://en.wikipedia.org/wiki/Companion_matrix)
            </summary>
        <returns>A boolean flag indicating whether the algorithm was successful.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
