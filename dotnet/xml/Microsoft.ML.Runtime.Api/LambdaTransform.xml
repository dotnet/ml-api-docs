<Type Name="LambdaTransform" FullName="Microsoft.ML.Runtime.Api.LambdaTransform">
  <TypeSignature Language="C#" Value="public static class LambdaTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LambdaTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Api.LambdaTransform" />
  <TypeSignature Language="VB.NET" Value="Public Class LambdaTransform" />
  <TypeSignature Language="F#" Value="type LambdaTransform = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Api</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Utility class for creating transforms easily.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateFilter&lt;TSrc,TState&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.ITransformTemplate CreateFilter&lt;TSrc,TState&gt; (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView source, Func&lt;TSrc,TState,bool&gt; filterFunc, Action&lt;TState&gt; initStateAction, Microsoft.ML.Runtime.Api.SchemaDefinition inputSchemaDefinition = null) where TSrc : class, new() where TState : class, new();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.ITransformTemplate CreateFilter&lt;class .ctor TSrc, class .ctor TState&gt;(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView source, class System.Func`3&lt;!!TSrc, !!TState, bool&gt; filterFunc, class System.Action`1&lt;!!TState&gt; initStateAction, class Microsoft.ML.Runtime.Api.SchemaDefinition inputSchemaDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Api.LambdaTransform.CreateFilter``2(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.Func{``0,``1,System.Boolean},System.Action{``1},Microsoft.ML.Runtime.Api.SchemaDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFilter(Of TSrc As {Class, New}, TState As {Class, New}) (env As IHostEnvironment, source As IDataView, filterFunc As Func(Of TSrc, TState, Boolean), initStateAction As Action(Of TState), Optional inputSchemaDefinition As SchemaDefinition = null) As ITransformTemplate" />
      <MemberSignature Language="F#" Value="static member CreateFilter : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView * Func&lt;'Src, 'State, bool (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'State : null and 'State : (new : unit -&gt; 'State))&gt; * Action&lt;'State (requires 'State : null and 'State : (new : unit -&gt; 'State))&gt; * Microsoft.ML.Runtime.Api.SchemaDefinition -&gt; Microsoft.ML.Runtime.Data.ITransformTemplate (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'State : null and 'State : (new : unit -&gt; 'State))" Usage="Microsoft.ML.Runtime.Api.LambdaTransform.CreateFilter (env, source, filterFunc, initStateAction, inputSchemaDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Api</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.ITransformTemplate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSrc">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TState">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="source" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="filterFunc" Type="System.Func&lt;TSrc,TState,System.Boolean&gt;" />
        <Parameter Name="initStateAction" Type="System.Action&lt;TState&gt;" />
        <Parameter Name="inputSchemaDefinition" Type="Microsoft.ML.Runtime.Api.SchemaDefinition" />
      </Parameters>
      <Docs>
        <typeparam name="TSrc">The type that describes what 'source' columns are consumed from the
            input <see cref="T:Microsoft.ML.Runtime.Data.IDataView" />.</typeparam>
        <typeparam name="TState">The type of the state object to allocate per cursor.</typeparam>
        <param name="env">The host environment to use.</param>
        <param name="source">The input data to apply transformation to.</param>
        <param name="filterFunc">The user-defined function that determines whether to keep the row or discard it. First parameter
            is the current row's contents, the second parameter is the cursor-specific state object.</param>
        <param name="initStateAction">The function that is called once per cursor to initialize state. Can be null.</param>
        <param name="inputSchemaDefinition">The optional input schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TSrc" /> type.</param>
        <summary>
            This creates a filter transform that can 'accept' or 'decline' any row of the data based on the contents of the row
            or state of the cursor.
            This is a 'stateful non-savable' version of the filter: the filter function is guaranteed to be invoked once per
            every row of the data set, in sequence (non-parallelizable); one user-defined state object will be allocated per cursor and passed to the 
            filter function every time. 
            If <typeparamref name="TSrc" /> or <typeparamref name="TState" /> implement the <see cref="T:System.IDisposable" /> interface, they will be disposed after use.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilter&lt;TSrc,TState&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.ITransformTemplate CreateFilter&lt;TSrc,TState&gt; (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView source, Func&lt;TSrc,TState,bool&gt; filterFunc, Action&lt;TState&gt; initStateAction, Action&lt;System.IO.BinaryWriter&gt; saveAction, Microsoft.ML.Runtime.Api.LambdaTransform.LoadDelegate loadFunc, Microsoft.ML.Runtime.Api.SchemaDefinition inputSchemaDefinition = null) where TSrc : class, new() where TState : class, new();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.ITransformTemplate CreateFilter&lt;class .ctor TSrc, class .ctor TState&gt;(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView source, class System.Func`3&lt;!!TSrc, !!TState, bool&gt; filterFunc, class System.Action`1&lt;!!TState&gt; initStateAction, class System.Action`1&lt;class System.IO.BinaryWriter&gt; saveAction, class Microsoft.ML.Runtime.Api.LambdaTransform/LoadDelegate loadFunc, class Microsoft.ML.Runtime.Api.SchemaDefinition inputSchemaDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Api.LambdaTransform.CreateFilter``2(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.Func{``0,``1,System.Boolean},System.Action{``1},System.Action{System.IO.BinaryWriter},Microsoft.ML.Runtime.Api.LambdaTransform.LoadDelegate,Microsoft.ML.Runtime.Api.SchemaDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFilter(Of TSrc As {Class, New}, TState As {Class, New}) (env As IHostEnvironment, source As IDataView, filterFunc As Func(Of TSrc, TState, Boolean), initStateAction As Action(Of TState), saveAction As Action(Of BinaryWriter), loadFunc As LambdaTransform.LoadDelegate, Optional inputSchemaDefinition As SchemaDefinition = null) As ITransformTemplate" />
      <MemberSignature Language="F#" Value="static member CreateFilter : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView * Func&lt;'Src, 'State, bool (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'State : null and 'State : (new : unit -&gt; 'State))&gt; * Action&lt;'State (requires 'State : null and 'State : (new : unit -&gt; 'State))&gt; * Action&lt;System.IO.BinaryWriter&gt; * Microsoft.ML.Runtime.Api.LambdaTransform.LoadDelegate * Microsoft.ML.Runtime.Api.SchemaDefinition -&gt; Microsoft.ML.Runtime.Data.ITransformTemplate (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'State : null and 'State : (new : unit -&gt; 'State))" Usage="Microsoft.ML.Runtime.Api.LambdaTransform.CreateFilter (env, source, filterFunc, initStateAction, saveAction, loadFunc, inputSchemaDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Api</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.ITransformTemplate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSrc">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TState">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="source" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="filterFunc" Type="System.Func&lt;TSrc,TState,System.Boolean&gt;" />
        <Parameter Name="initStateAction" Type="System.Action&lt;TState&gt;" />
        <Parameter Name="saveAction" Type="System.Action&lt;System.IO.BinaryWriter&gt;" />
        <Parameter Name="loadFunc" Type="Microsoft.ML.Runtime.Api.LambdaTransform+LoadDelegate" />
        <Parameter Name="inputSchemaDefinition" Type="Microsoft.ML.Runtime.Api.SchemaDefinition" />
      </Parameters>
      <Docs>
        <typeparam name="TSrc">The type that describes what 'source' columns are consumed from the
            input <see cref="T:Microsoft.ML.Runtime.Data.IDataView" />.</typeparam>
        <typeparam name="TState">The type of the state object to allocate per cursor.</typeparam>
        <param name="env">The host environment to use.</param>
        <param name="source">The input data to apply transformation to.</param>
        <param name="filterFunc">The user-defined function that determines whether to keep the row or discard it. First parameter
            is the current row's contents, the second parameter is the cursor-specific state object.</param>
        <param name="initStateAction">The function that is called once per cursor to initialize state. Can be null.</param>
        <param name="saveAction">An action that allows us to save state to the serialization stream</param>
        <param name="loadFunc">A function that given the serialization stream and a data view, returns
            an <see cref="T:Microsoft.ML.Runtime.Data.ITransformTemplate" />. The intent is, this returned object should itself be the same
            as if we had recreated it using this method, but this is impossible to enforce. This transform
            will do its best to save a description of this method through assembly qualified names of the defining
            class, method name, and generic type parameters (if any), and then recover this same method on load,
            so it should be a static non-lambda method that this assembly can legally call.</param>
        <param name="inputSchemaDefinition">The optional input schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TSrc" /> type.</param>
        <summary>
            This creates a filter transform that can 'accept' or 'decline' any row of the data based on the contents of the row
            or state of the cursor.
            This is a 'stateful savable' version of the filter: the filter function is guaranteed to be invoked once per
            every row of the data set, in sequence (non-parallelizable); one user-defined state object will be allocated per cursor and passed to the 
            filter function every time; save and load routines must be provided.
            If <typeparamref name="TSrc" /> or <typeparamref name="TState" /> implement the <see cref="T:System.IDisposable" /> interface, they will be disposed after use.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMap&lt;TSrc,TDst&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.ITransformTemplate CreateMap&lt;TSrc,TDst&gt; (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView source, Action&lt;TSrc,TDst&gt; mapAction, Microsoft.ML.Runtime.Api.SchemaDefinition inputSchemaDefinition = null, Microsoft.ML.Runtime.Api.SchemaDefinition outputSchemaDefinition = null) where TSrc : class, new() where TDst : class, new();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.ITransformTemplate CreateMap&lt;class .ctor TSrc, class .ctor TDst&gt;(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView source, class System.Action`2&lt;!!TSrc, !!TDst&gt; mapAction, class Microsoft.ML.Runtime.Api.SchemaDefinition inputSchemaDefinition, class Microsoft.ML.Runtime.Api.SchemaDefinition outputSchemaDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Api.LambdaTransform.CreateMap``2(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.Action{``0,``1},Microsoft.ML.Runtime.Api.SchemaDefinition,Microsoft.ML.Runtime.Api.SchemaDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateMap(Of TSrc As {Class, New}, TDst As {Class, New}) (env As IHostEnvironment, source As IDataView, mapAction As Action(Of TSrc, TDst), Optional inputSchemaDefinition As SchemaDefinition = null, Optional outputSchemaDefinition As SchemaDefinition = null) As ITransformTemplate" />
      <MemberSignature Language="F#" Value="static member CreateMap : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView * Action&lt;'Src, 'Dst (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst))&gt; * Microsoft.ML.Runtime.Api.SchemaDefinition * Microsoft.ML.Runtime.Api.SchemaDefinition -&gt; Microsoft.ML.Runtime.Data.ITransformTemplate (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst))" Usage="Microsoft.ML.Runtime.Api.LambdaTransform.CreateMap (env, source, mapAction, inputSchemaDefinition, outputSchemaDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Api</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.ITransformTemplate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSrc">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDst">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="source" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="mapAction" Type="System.Action&lt;TSrc,TDst&gt;" />
        <Parameter Name="inputSchemaDefinition" Type="Microsoft.ML.Runtime.Api.SchemaDefinition" />
        <Parameter Name="outputSchemaDefinition" Type="Microsoft.ML.Runtime.Api.SchemaDefinition" />
      </Parameters>
      <Docs>
        <typeparam name="TSrc">The type that describes what 'source' columns are consumed from the
            input <see cref="T:Microsoft.ML.Runtime.Data.IDataView" />.</typeparam>
        <typeparam name="TDst">The type that describes what new columns are added by this transform.</typeparam>
        <param name="env">The host environment to use.</param>
        <param name="source">The input data to apply transformation to.</param>
        <param name="mapAction">The function that performs the transformation. This must be a 'pure'
            function which should only depend on the current <typeparamref name="TSrc" /> object and be
            re-entrant: the system may call the function on some (or all) the input rows, may do this in
            any order and from multiple threads at once. The function may utilize closures, as long as this
            is done in re-entrant fashion and without side effects.</param>
        <param name="inputSchemaDefinition">The optional input schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TSrc" /> type.</param>
        <param name="outputSchemaDefinition">The optional output schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TDst" /> type.</param>
        <summary>
            This creates a transform that generates additional columns to the provided <see cref="T:Microsoft.ML.Runtime.Data.IDataView" />.
            It does not change the number of rows, and can be seen as a result of application of the user's
            function to every row of the input data. Similarly to the existing <see cref="T:Microsoft.ML.Runtime.Data.IDataTransform" />'s,
            this object can be treated as both the 'transformation' algorithm (which can be then applied to
            different data by calling <see cref="M:Microsoft.ML.Runtime.Data.ITransformTemplate.ApplyToData(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView)" />), and the transformed data (which can be
            enumerated upon by calling <c>GetRowCursor</c> or <c>AsCursorable{TRow}</c>). If <typeparamref name="TSrc" /> or
            <typeparamref name="TDst" /> implement the <see cref="T:System.IDisposable" /> interface, they will be disposed after use.
            
            This is a 'stateless non-savable' version of the transform.
            </summary>
        <returns>A non-savable mapping transform from the input source to the destination</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMap&lt;TSrc,TDst&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.ITransformTemplate CreateMap&lt;TSrc,TDst&gt; (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView source, Action&lt;TSrc,TDst&gt; mapAction, Action&lt;System.IO.BinaryWriter&gt; saveAction, Microsoft.ML.Runtime.Api.LambdaTransform.LoadDelegate loadFunc, Microsoft.ML.Runtime.Api.SchemaDefinition inputSchemaDefinition = null, Microsoft.ML.Runtime.Api.SchemaDefinition outputSchemaDefinition = null) where TSrc : class, new() where TDst : class, new();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.ITransformTemplate CreateMap&lt;class .ctor TSrc, class .ctor TDst&gt;(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView source, class System.Action`2&lt;!!TSrc, !!TDst&gt; mapAction, class System.Action`1&lt;class System.IO.BinaryWriter&gt; saveAction, class Microsoft.ML.Runtime.Api.LambdaTransform/LoadDelegate loadFunc, class Microsoft.ML.Runtime.Api.SchemaDefinition inputSchemaDefinition, class Microsoft.ML.Runtime.Api.SchemaDefinition outputSchemaDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Api.LambdaTransform.CreateMap``2(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.Action{``0,``1},System.Action{System.IO.BinaryWriter},Microsoft.ML.Runtime.Api.LambdaTransform.LoadDelegate,Microsoft.ML.Runtime.Api.SchemaDefinition,Microsoft.ML.Runtime.Api.SchemaDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateMap(Of TSrc As {Class, New}, TDst As {Class, New}) (env As IHostEnvironment, source As IDataView, mapAction As Action(Of TSrc, TDst), saveAction As Action(Of BinaryWriter), loadFunc As LambdaTransform.LoadDelegate, Optional inputSchemaDefinition As SchemaDefinition = null, Optional outputSchemaDefinition As SchemaDefinition = null) As ITransformTemplate" />
      <MemberSignature Language="F#" Value="static member CreateMap : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView * Action&lt;'Src, 'Dst (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst))&gt; * Action&lt;System.IO.BinaryWriter&gt; * Microsoft.ML.Runtime.Api.LambdaTransform.LoadDelegate * Microsoft.ML.Runtime.Api.SchemaDefinition * Microsoft.ML.Runtime.Api.SchemaDefinition -&gt; Microsoft.ML.Runtime.Data.ITransformTemplate (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst))" Usage="Microsoft.ML.Runtime.Api.LambdaTransform.CreateMap (env, source, mapAction, saveAction, loadFunc, inputSchemaDefinition, outputSchemaDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Api</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.ITransformTemplate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSrc">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDst">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="source" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="mapAction" Type="System.Action&lt;TSrc,TDst&gt;" />
        <Parameter Name="saveAction" Type="System.Action&lt;System.IO.BinaryWriter&gt;" />
        <Parameter Name="loadFunc" Type="Microsoft.ML.Runtime.Api.LambdaTransform+LoadDelegate" />
        <Parameter Name="inputSchemaDefinition" Type="Microsoft.ML.Runtime.Api.SchemaDefinition" />
        <Parameter Name="outputSchemaDefinition" Type="Microsoft.ML.Runtime.Api.SchemaDefinition" />
      </Parameters>
      <Docs>
        <typeparam name="TSrc">The type that describes what 'source' columns are consumed from the
            input <see cref="T:Microsoft.ML.Runtime.Data.IDataView" />.</typeparam>
        <typeparam name="TDst">The type that describes what new columns are added by this transform.</typeparam>
        <param name="env">The host environment to use.</param>
        <param name="source">The input data to apply transformation to.</param>
        <param name="mapAction">The function that performs the transformation. This must be a 'pure'
            function which should only depend on the current <typeparamref name="TSrc" /> object and be
            re-entrant: the system may call the function on some (or all) the input rows, may do this in
            any order and from multiple threads at once. The function may utilize closures, as long as this
            is done in re-entrant fashion and without side effects.</param>
        <param name="saveAction">An action that allows us to save state to the serialization stream</param>
        <param name="loadFunc">A function that given the serialization stream and a data view, returns
            an <see cref="T:Microsoft.ML.Runtime.Data.ITransformTemplate" />. The intent is, this returned object should itself be the same
            as if we had recreated it using this method, but this is impossible to enforce. This transform
            will do its best to save a description of this method through assembly qualified names of the defining
            class, method name, and generic type parameters (if any), and then recover this same method on load,
            so it should be a static non-lambda method that this assembly can legally call.</param>
        <param name="inputSchemaDefinition">The optional input schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TSrc" /> type.</param>
        <param name="outputSchemaDefinition">The optional output schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TDst" /> type.</param>
        <summary>
            This creates a transform that generates additional columns to the provided <see cref="T:Microsoft.ML.Runtime.Data.IDataView" />.
            It does not change the number of rows, and can be seen as a result of application of the user's
            function to every row of the input data. Similarly to the existing <see cref="T:Microsoft.ML.Runtime.Data.IDataTransform" />'s,
            this object can be treated as both the 'transformation' algorithm (which can be then applied to
            different data by calling <see cref="M:Microsoft.ML.Runtime.Data.ITransformTemplate.ApplyToData(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView)" />), and the transformed data (which can  be
            enumerated upon by calling <c>GetRowCursor</c> or <c>AsCursorable{TRow}</c>). If <typeparamref name="TSrc" /> or
            <typeparamref name="TDst" /> implement the <see cref="T:System.IDisposable" /> interface, they will be disposed after use.
            
            This is a 'stateless savable' version of the transform: save and load routines must be provided.
            </summary>
        <returns>A savable mapping transform from the input source to the destination</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMap&lt;TSrc,TDst,TState&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.ITransformTemplate CreateMap&lt;TSrc,TDst,TState&gt; (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView source, Action&lt;TSrc,TDst,TState&gt; mapAction, Action&lt;TState&gt; initStateAction, Microsoft.ML.Runtime.Api.SchemaDefinition inputSchemaDefinition = null, Microsoft.ML.Runtime.Api.SchemaDefinition outputSchemaDefinition = null) where TSrc : class, new() where TDst : class, new() where TState : class, new();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.ITransformTemplate CreateMap&lt;class .ctor TSrc, class .ctor TDst, class .ctor TState&gt;(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView source, class System.Action`3&lt;!!TSrc, !!TDst, !!TState&gt; mapAction, class System.Action`1&lt;!!TState&gt; initStateAction, class Microsoft.ML.Runtime.Api.SchemaDefinition inputSchemaDefinition, class Microsoft.ML.Runtime.Api.SchemaDefinition outputSchemaDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Api.LambdaTransform.CreateMap``3(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.Action{``0,``1,``2},System.Action{``2},Microsoft.ML.Runtime.Api.SchemaDefinition,Microsoft.ML.Runtime.Api.SchemaDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateMap(Of TSrc As {Class, New}, TDst As {Class, New}, TState As {Class, New}) (env As IHostEnvironment, source As IDataView, mapAction As Action(Of TSrc, TDst, TState), initStateAction As Action(Of TState), Optional inputSchemaDefinition As SchemaDefinition = null, Optional outputSchemaDefinition As SchemaDefinition = null) As ITransformTemplate" />
      <MemberSignature Language="F#" Value="static member CreateMap : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView * Action&lt;'Src, 'Dst, 'State (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst) and 'State : null and 'State : (new : unit -&gt; 'State))&gt; * Action&lt;'State (requires 'State : null and 'State : (new : unit -&gt; 'State))&gt; * Microsoft.ML.Runtime.Api.SchemaDefinition * Microsoft.ML.Runtime.Api.SchemaDefinition -&gt; Microsoft.ML.Runtime.Data.ITransformTemplate (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst) and 'State : null and 'State : (new : unit -&gt; 'State))" Usage="Microsoft.ML.Runtime.Api.LambdaTransform.CreateMap (env, source, mapAction, initStateAction, inputSchemaDefinition, outputSchemaDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Api</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.ITransformTemplate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSrc">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDst">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TState">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="source" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="mapAction" Type="System.Action&lt;TSrc,TDst,TState&gt;" />
        <Parameter Name="initStateAction" Type="System.Action&lt;TState&gt;" />
        <Parameter Name="inputSchemaDefinition" Type="Microsoft.ML.Runtime.Api.SchemaDefinition" />
        <Parameter Name="outputSchemaDefinition" Type="Microsoft.ML.Runtime.Api.SchemaDefinition" />
      </Parameters>
      <Docs>
        <typeparam name="TSrc">The type that describes what 'source' columns are consumed from the
            input <see cref="T:Microsoft.ML.Runtime.Data.IDataView" />.</typeparam>
        <typeparam name="TDst">The type that describes what new columns are added by this transform.</typeparam>
        <typeparam name="TState">The type of the state object to allocate per cursor.</typeparam>
        <param name="env">The host environment to use.</param>
        <param name="source">The input data to apply transformation to.</param>
        <param name="mapAction">The function that performs the transformation. The function should transform its <typeparamref name="TSrc" />
            argument into its <typeparamref name="TDst" /> argument and can utilize the per-cursor <typeparamref name="TState" /> state.</param>
        <param name="initStateAction">The function that is called once per cursor to initialize state. Can be null.</param>
        <param name="inputSchemaDefinition">The optional input schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TSrc" /> type.</param>
        <param name="outputSchemaDefinition">The optional output schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TDst" /> type.</param>
        <summary>
            This is a 'stateful non-savable' version of the map transform: the mapping function is guaranteed to be invoked once per
            every row of the data set, in sequence; one user-defined state object will be allocated per cursor and passed to the 
            map function every time. If <typeparamref name="TSrc" />, <typeparamref name="TDst" />, or
            <typeparamref name="TState" /> implement the <see cref="T:System.IDisposable" /> interface, they will be disposed after use.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMap&lt;TSrc,TDst,TState&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.ITransformTemplate CreateMap&lt;TSrc,TDst,TState&gt; (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView source, Action&lt;TSrc,TDst,TState&gt; mapAction, Action&lt;TState&gt; initStateAction, Action&lt;System.IO.BinaryWriter&gt; saveAction, Microsoft.ML.Runtime.Api.LambdaTransform.LoadDelegate loadFunc, Microsoft.ML.Runtime.Api.SchemaDefinition inputSchemaDefinition = null, Microsoft.ML.Runtime.Api.SchemaDefinition outputSchemaDefinition = null) where TSrc : class, new() where TDst : class, new() where TState : class, new();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.ITransformTemplate CreateMap&lt;class .ctor TSrc, class .ctor TDst, class .ctor TState&gt;(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView source, class System.Action`3&lt;!!TSrc, !!TDst, !!TState&gt; mapAction, class System.Action`1&lt;!!TState&gt; initStateAction, class System.Action`1&lt;class System.IO.BinaryWriter&gt; saveAction, class Microsoft.ML.Runtime.Api.LambdaTransform/LoadDelegate loadFunc, class Microsoft.ML.Runtime.Api.SchemaDefinition inputSchemaDefinition, class Microsoft.ML.Runtime.Api.SchemaDefinition outputSchemaDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Api.LambdaTransform.CreateMap``3(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.Action{``0,``1,``2},System.Action{``2},System.Action{System.IO.BinaryWriter},Microsoft.ML.Runtime.Api.LambdaTransform.LoadDelegate,Microsoft.ML.Runtime.Api.SchemaDefinition,Microsoft.ML.Runtime.Api.SchemaDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateMap(Of TSrc As {Class, New}, TDst As {Class, New}, TState As {Class, New}) (env As IHostEnvironment, source As IDataView, mapAction As Action(Of TSrc, TDst, TState), initStateAction As Action(Of TState), saveAction As Action(Of BinaryWriter), loadFunc As LambdaTransform.LoadDelegate, Optional inputSchemaDefinition As SchemaDefinition = null, Optional outputSchemaDefinition As SchemaDefinition = null) As ITransformTemplate" />
      <MemberSignature Language="F#" Value="static member CreateMap : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView * Action&lt;'Src, 'Dst, 'State (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst) and 'State : null and 'State : (new : unit -&gt; 'State))&gt; * Action&lt;'State (requires 'State : null and 'State : (new : unit -&gt; 'State))&gt; * Action&lt;System.IO.BinaryWriter&gt; * Microsoft.ML.Runtime.Api.LambdaTransform.LoadDelegate * Microsoft.ML.Runtime.Api.SchemaDefinition * Microsoft.ML.Runtime.Api.SchemaDefinition -&gt; Microsoft.ML.Runtime.Data.ITransformTemplate (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst) and 'State : null and 'State : (new : unit -&gt; 'State))" Usage="Microsoft.ML.Runtime.Api.LambdaTransform.CreateMap (env, source, mapAction, initStateAction, saveAction, loadFunc, inputSchemaDefinition, outputSchemaDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Api</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.ITransformTemplate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSrc">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDst">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TState">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="source" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="mapAction" Type="System.Action&lt;TSrc,TDst,TState&gt;" />
        <Parameter Name="initStateAction" Type="System.Action&lt;TState&gt;" />
        <Parameter Name="saveAction" Type="System.Action&lt;System.IO.BinaryWriter&gt;" />
        <Parameter Name="loadFunc" Type="Microsoft.ML.Runtime.Api.LambdaTransform+LoadDelegate" />
        <Parameter Name="inputSchemaDefinition" Type="Microsoft.ML.Runtime.Api.SchemaDefinition" />
        <Parameter Name="outputSchemaDefinition" Type="Microsoft.ML.Runtime.Api.SchemaDefinition" />
      </Parameters>
      <Docs>
        <typeparam name="TSrc">The type that describes what 'source' columns are consumed from the
            input <see cref="T:Microsoft.ML.Runtime.Data.IDataView" />.</typeparam>
        <typeparam name="TDst">The type that describes what new columns are added by this transform.</typeparam>
        <typeparam name="TState">The type of the state object to allocate per cursor.</typeparam>
        <param name="env">The host environment to use.</param>
        <param name="source">The input data to apply transformation to.</param>
        <param name="mapAction">The function that performs the transformation. The function should transform its <typeparamref name="TSrc" /><param name="initStateAction">The function that is called once per cursor to initialize state. Can be null.</param><param name="saveAction">An action that allows us to save state to the serialization stream</param><param name="loadFunc">A function that given the serialization stream and a data view, returns
            an <see cref="T:Microsoft.ML.Runtime.Data.ITransformTemplate" />. The intent is, this returned object should itself be the same
            as if we had recreated it using this method, but this is impossible to enforce. This transform
            will do its best to save a description of this method through assembly qualified names of the defining
            class, method name, and generic type parameters (if any), and then recover this same method on load,
            so it should be a static non-lambda method that this assembly can legally call.</param>
            argument into its <typeparamref name="TDst" /> argument and can utilize the per-cursor <typeparamref name="TState" /> state.</param>
        <param name="initStateAction">To be added.</param>
        <param name="saveAction">To be added.</param>
        <param name="loadFunc">To be added.</param>
        <param name="inputSchemaDefinition">The optional input schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TSrc" /> type.</param>
        <param name="outputSchemaDefinition">The optional output schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TDst" /> type.</param>
        <summary>
            This is a 'stateful savable' version of the map transform: the mapping function is guaranteed to be invoked once per
            every row of the data set, in sequence (non-parallelizable); one user-defined state object will be allocated per cursor and passed to the 
            map function every time; save and load routines must be provided. If <typeparamref name="TSrc" />, <typeparamref name="TDst" />,
            or <typeparamref name="TState" /> implement the <see cref="T:System.IDisposable" /> interface, they will be disposed after use.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>