<Type Name="BatchPredictionEngine&lt;TSrc,TDst&gt;" FullName="Microsoft.ML.Runtime.Api.BatchPredictionEngine&lt;TSrc,TDst&gt;">
  <TypeSignature Language="C#" Value="public sealed class BatchPredictionEngine&lt;TSrc,TDst&gt; where TSrc : class where TDst : class, new()" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BatchPredictionEngine`2&lt;class TSrc, class .ctor TDst&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Api.BatchPredictionEngine`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BatchPredictionEngine(Of TSrc, TDst)" />
  <TypeSignature Language="F#" Value="type BatchPredictionEngine&lt;'Src, 'Dst (requires 'Src : null and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst))&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Api</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSrc">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TDst">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TSrc">The user-defined type that holds the example.</typeparam>
    <typeparam name="TDst">The user-defined type that holds the prediction.</typeparam>
    <summary>
            A class that runs the previously trained model (and the preceding transform pipeline) on the
            in-memory data in batch mode.
            This can also be used with trained pipelines that do not end with a predictor: in this case, the
            'prediction' will be just the outcome of all the transformations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Predict">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TDst&gt; Predict (System.Collections.Generic.IEnumerable&lt;TSrc&gt; examples, bool reuseRowObjects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!TDst&gt; Predict(class System.Collections.Generic.IEnumerable`1&lt;!TSrc&gt; examples, bool reuseRowObjects) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Api.BatchPredictionEngine`2.Predict(System.Collections.Generic.IEnumerable{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Predict (examples As IEnumerable(Of TSrc), reuseRowObjects As Boolean) As IEnumerable(Of TDst)" />
      <MemberSignature Language="F#" Value="member this.Predict : seq&lt;'Src (requires 'Src : null)&gt; * bool -&gt; seq&lt;'Dst (requires 'Dst : null and 'Dst : (new : unit -&gt; 'Dst))&gt;" Usage="batchPredictionEngine.Predict (examples, reuseRowObjects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Api</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TDst&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="examples" Type="System.Collections.Generic.IEnumerable&lt;TSrc&gt;" />
        <Parameter Name="reuseRowObjects" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="examples">The examples to run the prediction on.</param>
        <param name="reuseRowObjects">If <c>true</c>, the engine will not allocate memory per output, and
            the returned <typeparamref name="TDst" /> objects will actually always be the same object. The user is
            expected to clone the values himself if needed.</param>
        <summary>
            Run the prediction pipe. This will enumerate the <paramref name="examples" /> exactly once,
            cache all the examples (by reference) into its internal representation and then run
            the transformation pipe.
            </summary>
        <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains all the pipeline results.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>