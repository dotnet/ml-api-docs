<Type Name="TextFeaturizer" FullName="Microsoft.ML.Legacy.Transforms.TextFeaturizer">
  <TypeSignature Language="C#" Value="public sealed class TextFeaturizer : Microsoft.ML.Legacy.ILearningPipelineItem, Microsoft.ML.Runtime.EntryPoints.CommonInputs.ITransformInput" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TextFeaturizer extends System.Object implements class Microsoft.ML.Legacy.ILearningPipelineItem, class Microsoft.ML.Runtime.EntryPoints.CommonInputs/ITransformInput" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Legacy.Transforms.TextFeaturizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TextFeaturizer&#xA;Implements CommonInputs.ITransformInput, ILearningPipelineItem" />
  <TypeSignature Language="F#" Value="type TextFeaturizer = class&#xA;    interface CommonInputs.ITransformInput&#xA;    interface ILearningPipelineItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Legacy.ILearningPipelineItem</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
        A transform that turns a collection of text documents into numerical feature vectors.
        The feature vectors are normalized counts of (word and/or character) ngrams in a given tokenized text.
      </summary>
    <remarks>
        The TextFeaturizer transform gives user one-stop solution for doing:
        <list type="bullet"><item><description>Language Detection</description></item><item><description>Tokenzation​</description></item><item><description>Text normalization</description></item><item><description>Predefined and custom stopwords removal.</description></item><item><description>Word-based or character-based Ngram and SkipGram extraction.​</description></item><item><description>TF, IDF or TF-IDF.</description></item><item><description>L-p vector normalization.​</description></item></list>
        The TextFeaturizer will show the transformed text, after being applied.
        It converts a collection of text columns to a matrix of token  ngrams/skip-grams counts.
        Features are made of (word/character) n-grams/skip-grams​ and the number of features are equal to the vocabulary size found by analyzing the data.
      </remarks>
    <example>
      <code language="csharp">
          pipeline.Add(new TextFeaturizer("Features", "SentimentText")
          {
            KeepDiacritics = false,
            KeepPunctuations = false,
            TextCase = TextNormalizerTransformCaseNormalizationMode.Lower,
            OutputTokens = true,
            StopWordsRemover = new PredefinedStopWordsRemover(),
            VectorNormalizer = TextTransformTextNormKind.L2,
            CharFeatureExtractor = new NGramNgramExtractor() { NgramLength = 3, AllLengths = false },
            WordFeatureExtractor = new NGramNgramExtractor() { NgramLength = 2, AllLengths = true }
          });
        </code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFeaturizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Legacy.Transforms.TextFeaturizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFeaturizer (string outputColumn, params string[] inputColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outputColumn, string[] inputColumns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Legacy.Transforms.TextFeaturizer.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outputColumn As String, ParamArray inputColumns As String())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Legacy.Transforms.TextFeaturizer : string * string[] -&gt; Microsoft.ML.Legacy.Transforms.TextFeaturizer" Usage="new Microsoft.ML.Legacy.Transforms.TextFeaturizer (outputColumn, inputColumns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="inputColumns" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="outputColumn">To be added.</param>
        <param name="inputColumns">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddColumn">
      <MemberSignature Language="C#" Value="public void AddColumn (string name, params string[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddColumn(string name, string[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Legacy.Transforms.TextFeaturizer.AddColumn(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddColumn (name As String, ParamArray source As String())" />
      <MemberSignature Language="F#" Value="member this.AddColumn : string * string[] -&gt; unit" Usage="textFeaturizer.AddColumn (name, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="source" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyStep">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Legacy.ILearningPipelineStep ApplyStep (Microsoft.ML.Legacy.ILearningPipelineStep previousStep, Microsoft.ML.Runtime.Experiment experiment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Legacy.ILearningPipelineStep ApplyStep(class Microsoft.ML.Legacy.ILearningPipelineStep previousStep, class Microsoft.ML.Runtime.Experiment experiment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Legacy.Transforms.TextFeaturizer.ApplyStep(Microsoft.ML.Legacy.ILearningPipelineStep,Microsoft.ML.Runtime.Experiment)" />
      <MemberSignature Language="F#" Value="abstract member ApplyStep : Microsoft.ML.Legacy.ILearningPipelineStep * Microsoft.ML.Runtime.Experiment -&gt; Microsoft.ML.Legacy.ILearningPipelineStep&#xA;override this.ApplyStep : Microsoft.ML.Legacy.ILearningPipelineStep * Microsoft.ML.Runtime.Experiment -&gt; Microsoft.ML.Legacy.ILearningPipelineStep" Usage="textFeaturizer.ApplyStep (previousStep, experiment)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Legacy.ILearningPipelineItem.ApplyStep(Microsoft.ML.Legacy.ILearningPipelineStep,Microsoft.ML.Runtime.Experiment)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Legacy.ILearningPipelineStep</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousStep" Type="Microsoft.ML.Legacy.ILearningPipelineStep" />
        <Parameter Name="experiment" Type="Microsoft.ML.Runtime.Experiment" />
      </Parameters>
      <Docs>
        <param name="previousStep">To be added.</param>
        <param name="experiment">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CharFeatureExtractor">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.NgramExtractor CharFeatureExtractor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.NgramExtractor CharFeatureExtractor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.CharFeatureExtractor" />
      <MemberSignature Language="VB.NET" Value="Public Property CharFeatureExtractor As NgramExtractor" />
      <MemberSignature Language="F#" Value="member this.CharFeatureExtractor : Microsoft.ML.Runtime.NgramExtractor with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.CharFeatureExtractor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonConverter(typeof(Microsoft.ML.Runtime.ComponentSerializer))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.NgramExtractor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Ngram feature extractor to use for characters (WordBag/WordHashBag).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Legacy.Transforms.TextTransformColumn Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Legacy.Transforms.TextTransformColumn Column" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As TextTransformColumn" />
      <MemberSignature Language="F#" Value="member this.Column : Microsoft.ML.Legacy.Transforms.TextTransformColumn with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Legacy.Transforms.TextTransformColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            New column definition (optional form: name:srcs).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt; Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.EntryPoints.Var`1&lt;class Microsoft.ML.Runtime.Data.IDataView&gt; Data" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.Data" />
      <MemberSignature Language="VB.NET" Value="Public Property Data As Var(Of IDataView)" />
      <MemberSignature Language="F#" Value="member this.Data : Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt; with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.Data" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.Runtime.EntryPoints.CommonInputs.ITransformInput.Data</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Input dataset
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Legacy.Transforms.TermLoaderArguments Dictionary { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Legacy.Transforms.TermLoaderArguments Dictionary" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Public Property Dictionary As TermLoaderArguments" />
      <MemberSignature Language="F#" Value="member this.Dictionary : Microsoft.ML.Legacy.Transforms.TermLoaderArguments with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Legacy.Transforms.TermLoaderArguments</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A dictionary of whitelisted terms.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInputData">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt; GetInputData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.EntryPoints.Var`1&lt;class Microsoft.ML.Runtime.Data.IDataView&gt; GetInputData() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Legacy.Transforms.TextFeaturizer.GetInputData" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInputData () As Var(Of IDataView)" />
      <MemberSignature Language="F#" Value="abstract member GetInputData : unit -&gt; Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;&#xA;override this.GetInputData : unit -&gt; Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;" Usage="textFeaturizer.GetInputData " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Legacy.ILearningPipelineItem.GetInputData</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepDiacritics">
      <MemberSignature Language="C#" Value="public bool KeepDiacritics { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepDiacritics" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.KeepDiacritics" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepDiacritics As Boolean" />
      <MemberSignature Language="F#" Value="member this.KeepDiacritics : bool with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.KeepDiacritics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether to keep diacritical marks or remove them.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepNumbers">
      <MemberSignature Language="C#" Value="public bool KeepNumbers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepNumbers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.KeepNumbers" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepNumbers As Boolean" />
      <MemberSignature Language="F#" Value="member this.KeepNumbers : bool with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.KeepNumbers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether to keep numbers or remove them.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepPunctuations">
      <MemberSignature Language="C#" Value="public bool KeepPunctuations { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepPunctuations" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.KeepPunctuations" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepPunctuations As Boolean" />
      <MemberSignature Language="F#" Value="member this.KeepPunctuations : bool with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.KeepPunctuations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether to keep punctuation marks or remove them.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Legacy.Transforms.TextTransformLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.ML.Legacy.Transforms.TextTransformLanguage Language" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As TextTransformLanguage" />
      <MemberSignature Language="F#" Value="member this.Language : Microsoft.ML.Legacy.Transforms.TextTransformLanguage with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Legacy.Transforms.TextTransformLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Dataset language or 'AutoDetect' to detect language per row.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputTokens">
      <MemberSignature Language="C#" Value="public bool OutputTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OutputTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.OutputTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property OutputTokens As Boolean" />
      <MemberSignature Language="F#" Value="member this.OutputTokens : bool with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.OutputTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether to output the transformed text tokens as an additional column.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopWordsRemover">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.StopWordsRemover StopWordsRemover { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.StopWordsRemover StopWordsRemover" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.StopWordsRemover" />
      <MemberSignature Language="VB.NET" Value="Public Property StopWordsRemover As StopWordsRemover" />
      <MemberSignature Language="F#" Value="member this.StopWordsRemover : Microsoft.ML.Runtime.StopWordsRemover with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.StopWordsRemover" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonConverter(typeof(Microsoft.ML.Runtime.ComponentSerializer))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.StopWordsRemover</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Stopwords remover.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextCase">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Legacy.Transforms.TextNormalizerTransformCaseNormalizationMode TextCase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.ML.Legacy.Transforms.TextNormalizerTransformCaseNormalizationMode TextCase" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.TextCase" />
      <MemberSignature Language="VB.NET" Value="Public Property TextCase As TextNormalizerTransformCaseNormalizationMode" />
      <MemberSignature Language="F#" Value="member this.TextCase : Microsoft.ML.Legacy.Transforms.TextNormalizerTransformCaseNormalizationMode with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.TextCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Legacy.Transforms.TextNormalizerTransformCaseNormalizationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Casing text using the rules of the invariant culture.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VectorNormalizer">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Legacy.Transforms.TextTransformTextNormKind VectorNormalizer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.ML.Legacy.Transforms.TextTransformTextNormKind VectorNormalizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.VectorNormalizer" />
      <MemberSignature Language="VB.NET" Value="Public Property VectorNormalizer As TextTransformTextNormKind" />
      <MemberSignature Language="F#" Value="member this.VectorNormalizer : Microsoft.ML.Legacy.Transforms.TextTransformTextNormKind with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.VectorNormalizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Legacy.Transforms.TextTransformTextNormKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Normalize vectors (rows) individually by rescaling them to unit norm.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WordFeatureExtractor">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.NgramExtractor WordFeatureExtractor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.NgramExtractor WordFeatureExtractor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TextFeaturizer.WordFeatureExtractor" />
      <MemberSignature Language="VB.NET" Value="Public Property WordFeatureExtractor As NgramExtractor" />
      <MemberSignature Language="F#" Value="member this.WordFeatureExtractor : Microsoft.ML.Runtime.NgramExtractor with get, set" Usage="Microsoft.ML.Legacy.Transforms.TextFeaturizer.WordFeatureExtractor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonConverter(typeof(Microsoft.ML.Runtime.ComponentSerializer))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.NgramExtractor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Ngram feature extractor to use for words (WordBag/WordHashBag).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>