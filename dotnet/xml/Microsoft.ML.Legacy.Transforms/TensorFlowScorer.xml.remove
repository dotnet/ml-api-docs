<Type Name="TensorFlowScorer" FullName="Microsoft.ML.Legacy.Transforms.TensorFlowScorer">
  <TypeSignature Language="C#" Value="public sealed class TensorFlowScorer : Microsoft.ML.Legacy.ILearningPipelineItem, Microsoft.ML.Runtime.EntryPoints.CommonInputs.ITransformInput" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TensorFlowScorer extends System.Object implements class Microsoft.ML.Legacy.ILearningPipelineItem, class Microsoft.ML.Runtime.EntryPoints.CommonInputs/ITransformInput" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Legacy.Transforms.TensorFlowScorer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TensorFlowScorer&#xA;Implements CommonInputs.ITransformInput, ILearningPipelineItem" />
  <TypeSignature Language="F#" Value="type TensorFlowScorer = class&#xA;    interface CommonInputs.ITransformInput&#xA;    interface ILearningPipelineItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Legacy.ILearningPipelineItem</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
        The <see cref="!:TensorFlowTransform" /> is used in following two scenarios.
        <list type="number"><item><description>
            Scoring with pretrained TensorFlow model: In this mode, the transform extracts hidden layers' values from a pre-trained Tensorflow model and uses outputs as features in ML.Net pipeline.
          </description></item><item><description>
            Retraining of TensorFlow model: In this mode, the transform retrains a TensorFlow model using the user data passed through ML.Net pipeline. Once the model is trained, it's outputs can be used as features for scoring.
          </description></item></list></summary>
    <remarks>
      <para>
          The TensorFlowTransform extracts specified outputs using a pre-trained <a href="https://www.tensorflow.org">Tensorflow</a> model.
          Optionally, it can further retrain TensorFlow model on user data to adjust model parameters on the user data ( also know as "Transfer Learning").

          For scoring, the transform takes as inputs the pre-trained Tensorflow model, the names of the input nodes, and names of the output nodes whose values we want to extract.
          For retraining, the transform also requires training related parameters such as the names of optimization operation in the TensorFlow graph, the name of the learning rate operation in the graph and its value, name of the operations in the graph to compute loss and performance metric etc.
        </para>
      <para>
          This transform requires the <a href="https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.ML.TensorFlow">Microsoft.ML.TensorFlow</a> nuget to be installed.
          The TensorFlowTransform has the following assumptions regarding input, output and processing of data.
        </para>
      <list type="number">
        <item>
          <description>
              For the input model, currently the TensorFlowTransform supports both the <a href="https://www.tensorflow.org/mobile/prepare_models">Frozen model</a> format and also the <a href="https://www.tensorflow.org/guide/saved_model#build_and_load_a_savedmodel">SavedModel</a> format.
              However, retraining of the model is only possible for the <a href="https://www.tensorflow.org/guide/saved_model#build_and_load_a_savedmodel">SavedModel</a> format.
              <a href="https://www.tensorflow.org/guide/checkpoints">Checkpoint</a> format is currently neither supported for scoring nor for retraining due lack of TensorFlow C-API support for loading it.
            </description>
        </item>
        <item>
          <description>The transform supports scoring only one example at a time. However, retraining can be performed in batches.</description>
        </item>
        <item>
          <description>The name of input column(s) should match the name of input(s) in TensorFlow model.</description>
        </item>
        <item>
          <description>The name of each output column should match one of the operations in the TensorFlow graph.</description>
        </item>
        <item>
          <description>Currently, float, double, int, long, uint, ulong are the acceptable data types for input/output.</description>
        </item>
        <item>
          <description>Upon success, the transform will introduce a new column in <see cref="T:Microsoft.ML.Runtime.Data.IDataView" /> corresponding to each output column specified.</description>
        </item>
      </list>

        The inputs and outputs of a TensorFlow model can be obtained using the <see cref="!:TensorFlowModelInfo.GetModelSchema()" /> or <a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/graph_transforms/README.md#inspecting-graphs"><code>summarize_graph</code> tools.
        </a>.

      </remarks>
    <example>
      <code language="csharp">
          pipeline.Add(new TextLoader(dataFile).CreateFrom&lt;MNISTData&gt;(useHeader: false));
          pipeline.Add(new ColumnCopier(("NumericImageVec", "Input");
          pipeline.Add(new TensorFlowScorer()
          {
            Model = model_location;
            InputColumns = new[] { "Input" };
            OutputColumns = new[] { "Output" };
          }
        </code>
    </example>
    <example>
      <code language="csharp">
          var pipeline = new Legacy.LearningPipeline(seed: 1);
          pipeline.Add(new Microsoft.ML.Legacy.Data.TextLoader(dataFile).CreateFrom&lt;CifarData&gt;(useHeader: false));
          pipeline.Add(new ImageLoader(("ImagePath", "ImageReal"))
          {
            ImageFolder = imageFolder
          });

          pipeline.Add(new ImageResizer(("ImageReal", "ImageCropped"))
          {
            ImageHeight = imageHeight,
            ImageWidth = imageWidth,
            Resizing = ImageResizerTransformResizingKind.IsoCrop
          });

          pipeline.Add(new ImagePixelExtractor(("ImageCropped", "Input"))
          {
            UseAlpha = false,
            InterleaveArgb = true
          });

          pipeline.Add(new TensorFlowScorer()
          {
            Model = model_location,
            InputColumns = new[] { "Input" },
            OutputColumns = new[] { "Output" }
          });

        </code>
    </example>
    <example>
      <code language="csharp">
          pipeline.Add(new TextLoader(dataFile).CreateFrom&lt;MNISTData&gt;(useHeader: false));
          pipeline.Add(new ColumnCopier(("NumericImageVec", "Input");
          pipeline.Add(new TensorFlowScorer()
          {
            ModelLocation = model_location;
            InputColumns = new[] { "Input" };
            OutputColumns = new[] { "Output" };
          }
        </code>
    </example>
    <example>
      <code language="csharp">
          var pipeline = new Legacy.LearningPipeline(seed: 1);
          pipeline.Add(new Microsoft.ML.Legacy.Data.TextLoader(dataFile).CreateFrom&lt;CifarData&gt;(useHeader: false));
          pipeline.Add(new ImageLoader(("ImagePath", "ImageReal"))
          {
            ImageFolder = imageFolder
          });

          pipeline.Add(new ImageResizer(("ImageReal", "ImageCropped"))
          {
            ImageHeight = imageHeight,
            ImageWidth = imageWidth,
            Resizing = ImageResizerTransformResizingKind.IsoCrop
          });

          pipeline.Add(new ImagePixelExtractor(("ImageCropped", "Input"))
          {
            UseAlpha = false,
            InterleaveArgb = true
          });

          pipeline.Add(new TensorFlowScorer()
          {
            ModelLocation = model_location,
            InputColumns = new[] { "Input" },
            OutputColumns = new[] { "Output" }
          });

        </code>
    </example>
    <!-- No matching elements were found for the following include tag -->
    <include file="../Microsoft.ML.TensorFlow/doc.xml" path="doc/members/example[@name=&quot;TensorflowTransform&quot;]/*" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorFlowScorer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyStep">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Legacy.ILearningPipelineStep ApplyStep (Microsoft.ML.Legacy.ILearningPipelineStep previousStep, Microsoft.ML.Runtime.Experiment experiment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Legacy.ILearningPipelineStep ApplyStep(class Microsoft.ML.Legacy.ILearningPipelineStep previousStep, class Microsoft.ML.Runtime.Experiment experiment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.ApplyStep(Microsoft.ML.Legacy.ILearningPipelineStep,Microsoft.ML.Runtime.Experiment)" />
      <MemberSignature Language="F#" Value="abstract member ApplyStep : Microsoft.ML.Legacy.ILearningPipelineStep * Microsoft.ML.Runtime.Experiment -&gt; Microsoft.ML.Legacy.ILearningPipelineStep&#xA;override this.ApplyStep : Microsoft.ML.Legacy.ILearningPipelineStep * Microsoft.ML.Runtime.Experiment -&gt; Microsoft.ML.Legacy.ILearningPipelineStep" Usage="tensorFlowScorer.ApplyStep (previousStep, experiment)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Legacy.ILearningPipelineItem.ApplyStep(Microsoft.ML.Legacy.ILearningPipelineStep,Microsoft.ML.Runtime.Experiment)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Legacy.ILearningPipelineStep</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousStep" Type="Microsoft.ML.Legacy.ILearningPipelineStep" />
        <Parameter Name="experiment" Type="Microsoft.ML.Runtime.Experiment" />
      </Parameters>
      <Docs>
        <param name="previousStep">To be added.</param>
        <param name="experiment">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Number of samples to use for mini-batch training.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt; Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.EntryPoints.Var`1&lt;class Microsoft.ML.Runtime.Data.IDataView&gt; Data" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.Data" />
      <MemberSignature Language="VB.NET" Value="Public Property Data As Var(Of IDataView)" />
      <MemberSignature Language="F#" Value="member this.Data : Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt; with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.Data" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.Runtime.EntryPoints.CommonInputs.ITransformInput.Data</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Input dataset
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Epoch">
      <MemberSignature Language="C#" Value="public int Epoch { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Epoch" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.Epoch" />
      <MemberSignature Language="VB.NET" Value="Public Property Epoch As Integer" />
      <MemberSignature Language="F#" Value="member this.Epoch : int with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.Epoch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Number of training iterations.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInputData">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt; GetInputData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.EntryPoints.Var`1&lt;class Microsoft.ML.Runtime.Data.IDataView&gt; GetInputData() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.GetInputData" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInputData () As Var(Of IDataView)" />
      <MemberSignature Language="F#" Value="abstract member GetInputData : unit -&gt; Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;&#xA;override this.GetInputData : unit -&gt; Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;" Usage="tensorFlowScorer.GetInputData " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Legacy.ILearningPipelineItem.GetInputData</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputColumns">
      <MemberSignature Language="C#" Value="public string[] InputColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] InputColumns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.InputColumns" />
      <MemberSignature Language="VB.NET" Value="Public Property InputColumns As String()" />
      <MemberSignature Language="F#" Value="member this.InputColumns : string[] with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.InputColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The names of the model inputs
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LabelColumn">
      <MemberSignature Language="C#" Value="public string LabelColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LabelColumn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.LabelColumn" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelColumn As String" />
      <MemberSignature Language="F#" Value="member this.LabelColumn : string with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.LabelColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Training labels.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LearningRate">
      <MemberSignature Language="C#" Value="public float LearningRate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 LearningRate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.LearningRate" />
      <MemberSignature Language="VB.NET" Value="Public Property LearningRate As Single" />
      <MemberSignature Language="F#" Value="member this.LearningRate : single with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.LearningRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Learning rate to use during optimization.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LearningRateOperation">
      <MemberSignature Language="C#" Value="public string LearningRateOperation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LearningRateOperation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.LearningRateOperation" />
      <MemberSignature Language="VB.NET" Value="Public Property LearningRateOperation As String" />
      <MemberSignature Language="F#" Value="member this.LearningRateOperation : string with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.LearningRateOperation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The name of the operation in the TensorFlow graph which sets optimizer learning rate (Optional).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LossOperation">
      <MemberSignature Language="C#" Value="public string LossOperation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LossOperation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.LossOperation" />
      <MemberSignature Language="VB.NET" Value="Public Property LossOperation As String" />
      <MemberSignature Language="F#" Value="member this.LossOperation : string with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.LossOperation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The name of the operation in the TensorFlow graph to compute training loss (Optional)
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetricOperation">
      <MemberSignature Language="C#" Value="public string MetricOperation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MetricOperation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.MetricOperation" />
      <MemberSignature Language="VB.NET" Value="Public Property MetricOperation As String" />
      <MemberSignature Language="F#" Value="member this.MetricOperation : string with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.MetricOperation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The name of the operation in the TensorFlow graph to compute performance metric during training (Optional)
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModelLocation">
      <MemberSignature Language="C#" Value="public string ModelLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ModelLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.ModelLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property ModelLocation As String" />
      <MemberSignature Language="F#" Value="member this.ModelLocation : string with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.ModelLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            TensorFlow model used by the transform. Please see https://www.tensorflow.org/mobile/prepare_models for more details.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptimizationOperation">
      <MemberSignature Language="C#" Value="public string OptimizationOperation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OptimizationOperation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.OptimizationOperation" />
      <MemberSignature Language="VB.NET" Value="Public Property OptimizationOperation As String" />
      <MemberSignature Language="F#" Value="member this.OptimizationOperation : string with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.OptimizationOperation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The name of the optimization operation in the TensorFlow graph.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputColumns">
      <MemberSignature Language="C#" Value="public string[] OutputColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] OutputColumns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.OutputColumns" />
      <MemberSignature Language="VB.NET" Value="Public Property OutputColumns As String()" />
      <MemberSignature Language="F#" Value="member this.OutputColumns : string[] with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.OutputColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The name of the outputs
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReTrain">
      <MemberSignature Language="C#" Value="public bool ReTrain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReTrain" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.ReTrain" />
      <MemberSignature Language="VB.NET" Value="Public Property ReTrain As Boolean" />
      <MemberSignature Language="F#" Value="member this.ReTrain : bool with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.ReTrain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Retrain TensorFlow model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveLocationOperation">
      <MemberSignature Language="C#" Value="public string SaveLocationOperation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SaveLocationOperation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.SaveLocationOperation" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveLocationOperation As String" />
      <MemberSignature Language="F#" Value="member this.SaveLocationOperation : string with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.SaveLocationOperation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name of the input in TensorFlow graph that specifiy the location for saving/restoring models from disk.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveOperation">
      <MemberSignature Language="C#" Value="public string SaveOperation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SaveOperation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.SaveOperation" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveOperation As String" />
      <MemberSignature Language="F#" Value="member this.SaveOperation : string with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.SaveOperation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name of the input in TensorFlow graph that specifiy the location for saving/restoring models from disk.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorFlowLabel">
      <MemberSignature Language="C#" Value="public string TensorFlowLabel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TensorFlowLabel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Legacy.Transforms.TensorFlowScorer.TensorFlowLabel" />
      <MemberSignature Language="VB.NET" Value="Public Property TensorFlowLabel As String" />
      <MemberSignature Language="F#" Value="member this.TensorFlowLabel : string with get, set" Usage="Microsoft.ML.Legacy.Transforms.TensorFlowScorer.TensorFlowLabel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Legacy</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            TensorFlow label node.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
