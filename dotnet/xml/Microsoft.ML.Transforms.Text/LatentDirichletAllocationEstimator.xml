<Type Name="LatentDirichletAllocationEstimator" FullName="Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator">
  <TypeSignature Language="C#" Value="public sealed class LatentDirichletAllocationEstimator : Microsoft.ML.IEstimator&lt;Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LatentDirichletAllocationEstimator extends System.Object implements class Microsoft.ML.IEstimator`1&lt;class Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LatentDirichletAllocationEstimator&#xA;Implements IEstimator(Of LatentDirichletAllocationTransformer)" />
  <TypeSignature Language="F#" Value="type LatentDirichletAllocationEstimator = class&#xA;    interface IEstimator&lt;LatentDirichletAllocationTransformer&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.IEstimator&lt;Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             The LDA transform implements <a href="https://arxiv.org/abs/1412.1576">LightLDA</a>, a state-of-the-art implementation of Latent Dirichlet Allocation.
             </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | Yes |
             | Input column data type | Vector of <xref:System.Single> |
             | Output column data type | Vector of <xref:System.Single>|
             | Exportable to ONNX | No |
            
              Latent Dirichlet Allocation is a well-known [topic modeling](https://en.wikipedia.org/wiki/Topic_model) algorithm that infers semantic structure from text data,
              and ultimately helps answer the question on "what is this document about?".
              It can be used to featurize any text fields as low-dimensional topical vectors.
              LightLDA is an extremely efficient implementation of LDA that incorporates a number of
              optimization techniques.
              With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million words vocabulary
              on a 1-billion-token document set one a single machine in a few hours(typically, LDA at this scale takes days and requires large clusters).
              The most significant innovation is a super-efficient $O(1)$. [Metropolis-Hastings sampling algorithm](https://en.wikipedia.org/wiki/Metropolisâ€“Hastings_algorithm),
              whose running cost is agnostic of model size, allowing it to converges nearly an order of magnitude faster than other [Gibbs samplers](https://en.wikipedia.org/wiki/Gibbs_sampling).
            
              In an ML.NET pipeline, this estimator requires the output of some preprocessing, as its input.
              A typical pipeline operating on text would require text normalization, tokenization and producing n-grams to supply to the LDA estimator.
              See the example usage in the See Also section for usage suggestions.
            
              If we have the following three examples of text, as data points, and use the LDA transform with the number of topics set to 3,
              we would get the results displayed in the table below. Example documents:
              * I like to eat bananas.
              * I eat bananas everyday.
              * First celebrated in 1970, Earth Day now includes events in more than 193 countries,
                which are now coordinated globally by the Earth Day Network.
            
              Notice the similarity in values of the first and second row, compared to the third,
              and see how those values are indicative of similarities between those two (small) bodies of text.
            
              | Topic1  | Topic2  | Topic 3 |
              | ------- | ------- | ------- |
              |  0.5714 | 0.0000  | 0.4286  |
              |  0.5714 | 0.0000  | 0.4286  |
              |  0.2400 | 0.3200  | 0.4400  |
            
              For more technical details you can consult the following papers.
              * [LightLDA: Big Topic Models on Modest Computer Clusters](https://arxiv.org/abs/1412.1576)
              * [LightLDA](https://github.com/Microsoft/LightLDA)
            
             Check the See Also section for links to usage examples.
             ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.ML.TextCatalog.LatentDirichletAllocation(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />
  </Docs>
  <Members>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer Fit (Microsoft.ML.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer Fit(class Microsoft.ML.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.Fit(Microsoft.ML.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As LatentDirichletAllocationTransformer" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer&#xA;override this.Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer" Usage="latentDirichletAllocationEstimator.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.SchemaShape GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.SchemaShape GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape&#xA;override this.GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape" Usage="latentDirichletAllocationEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.GetOutputSchema(Microsoft.ML.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape" /> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
