<Type Name="NgramHashingEstimator" FullName="Microsoft.ML.Transforms.Text.NgramHashingEstimator">
  <TypeSignature Language="C#" Value="public sealed class NgramHashingEstimator : Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Transforms.Text.NgramHashingTransformer&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit NgramHashingEstimator extends System.Object implements class Microsoft.ML.Core.Data.IEstimator`1&lt;class Microsoft.ML.Transforms.Text.NgramHashingTransformer&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NgramHashingEstimator&#xA;Implements IEstimator(Of NgramHashingTransformer)" />
  <TypeSignature Language="F#" Value="type NgramHashingEstimator = class&#xA;    interface IEstimator&lt;NgramHashingTransformer&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Transforms.Text.NgramHashingTransformer&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             Produces a bag of counts of ngrams (sequences of consecutive words of length 1-n) in a given text.
             It does so by hashing each ngram and using the hash value as the index in the bag.
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" /> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" />
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> tokenizes text internally.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NgramHashingEstimator (Microsoft.ML.IHostEnvironment env, params Microsoft.ML.Transforms.Text.NgramHashingTransformer.ColumnInfo[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Transforms.Text.NgramHashingTransformer/ColumnInfo[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.NgramHashingEstimator.#ctor(Microsoft.ML.IHostEnvironment,Microsoft.ML.Transforms.Text.NgramHashingTransformer.ColumnInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, ParamArray columns As NgramHashingTransformer.ColumnInfo())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Text.NgramHashingEstimator : Microsoft.ML.IHostEnvironment * Microsoft.ML.Transforms.Text.NgramHashingTransformer.ColumnInfo[] -&gt; Microsoft.ML.Transforms.Text.NgramHashingEstimator" Usage="new Microsoft.ML.Transforms.Text.NgramHashingEstimator (env, columns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="columns" Type="Microsoft.ML.Transforms.Text.NgramHashingTransformer+ColumnInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="columns">Array of columns which specifies the behavior of the transformation.</param>
        <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="columns.inputs.inputs" />
             and outputs ngram vector for each output in <paramref name="columns.output.output" /><see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" /> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" />
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> tokenizes text internally.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NgramHashingEstimator (Microsoft.ML.IHostEnvironment env, ValueTuple&lt;string,string[]&gt;[] columns, int hashBits = 16, int ngramLength = 2, int skipLength = 0, bool allLengths = true, uint seed = 314489979, bool ordered = true, int invertHash = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, valuetype System.ValueTuple`2&lt;string, string[]&gt;[] columns, int32 hashBits, int32 ngramLength, int32 skipLength, bool allLengths, unsigned int32 seed, bool ordered, int32 invertHash) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.NgramHashingEstimator.#ctor(Microsoft.ML.IHostEnvironment,System.ValueTuple{System.String,System.String[]}[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, columns As ValueTuple(Of String, String())(), Optional hashBits As Integer = 16, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional ordered As Boolean = true, Optional invertHash As Integer = 0)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Text.NgramHashingEstimator : Microsoft.ML.IHostEnvironment * ValueTuple&lt;string, string[]&gt;[] * int * int * int * bool * uint32 * bool * int -&gt; Microsoft.ML.Transforms.Text.NgramHashingEstimator" Usage="new Microsoft.ML.Transforms.Text.NgramHashingEstimator (env, columns, hashBits, ngramLength, skipLength, allLengths, seed, ordered, invertHash)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String[]&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "outputColumnName", "inputColumnName" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="hashBits" Type="System.Int32" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.UInt32" />
        <Parameter Name="ordered" Type="System.Boolean" />
        <Parameter Name="invertHash" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="columns">Pairs of input columns to output column mappings on which to compute ngram vector.</param>
        <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="invertHash">During hashing we constuct mappings between original values and the produced hash values.
             Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
             <paramref name="invertHash" /> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
             <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="columns.inputs.inputs" />
             and outputs ngram vector for each output in <paramref name="columns.output.output" /><see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" /> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" />
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> tokenizes text internally.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NgramHashingEstimator (Microsoft.ML.IHostEnvironment env, string outputColumnName, string inputColumnName = null, int hashBits = 16, int ngramLength = 2, int skipLength = 0, bool allLengths = true, uint seed = 314489979, bool ordered = true, int invertHash = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, string outputColumnName, string inputColumnName, int32 hashBits, int32 ngramLength, int32 skipLength, bool allLengths, unsigned int32 seed, bool ordered, int32 invertHash) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.NgramHashingEstimator.#ctor(Microsoft.ML.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, outputColumnName As String, Optional inputColumnName As String = null, Optional hashBits As Integer = 16, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional ordered As Boolean = true, Optional invertHash As Integer = 0)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Text.NgramHashingEstimator : Microsoft.ML.IHostEnvironment * string * string * int * int * int * bool * uint32 * bool * int -&gt; Microsoft.ML.Transforms.Text.NgramHashingEstimator" Usage="new Microsoft.ML.Transforms.Text.NgramHashingEstimator (env, outputColumnName, inputColumnName, hashBits, ngramLength, skipLength, allLengths, seed, ordered, invertHash)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" Index="0" />
        <Parameter Name="outputColumnName" Type="System.String" Index="1" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="inputColumnName" Type="System.String" Index="2" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="hashBits" Type="System.Int32" Index="3" />
        <Parameter Name="ngramLength" Type="System.Int32" Index="4" />
        <Parameter Name="skipLength" Type="System.Int32" Index="5" />
        <Parameter Name="allLengths" Type="System.Boolean" Index="6" />
        <Parameter Name="seed" Type="System.UInt32" Index="7" />
        <Parameter Name="ordered" Type="System.Boolean" Index="8" />
        <Parameter Name="invertHash" Type="System.Int32" Index="9" />
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="outputColumnName">Name of output column, will contain the ngram vector. Null means <paramref name="inputColumnName" /> is replaced.</param>
        <param name="inputColumnName">Name of input column containing tokenized text.</param>
        <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="invertHash">During hashing we constuct mappings between original values and the produced hash values.
             Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
             <paramref name="invertHash" /> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
             <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumnName" />
             and outputs ngram vector as <paramref name="outputColumnName" /><see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" /> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" />
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> tokenizes text internally.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NgramHashingEstimator (Microsoft.ML.IHostEnvironment env, string outputColumnName, string[] inputColumnNames, int hashBits = 16, int ngramLength = 2, int skipLength = 0, bool allLengths = true, uint seed = 314489979, bool ordered = true, int invertHash = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, string outputColumnName, string[] inputColumnNames, int32 hashBits, int32 ngramLength, int32 skipLength, bool allLengths, unsigned int32 seed, bool ordered, int32 invertHash) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.NgramHashingEstimator.#ctor(Microsoft.ML.IHostEnvironment,System.String,System.String[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, outputColumnName As String, inputColumnNames As String(), Optional hashBits As Integer = 16, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional ordered As Boolean = true, Optional invertHash As Integer = 0)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Text.NgramHashingEstimator : Microsoft.ML.IHostEnvironment * string * string[] * int * int * int * bool * uint32 * bool * int -&gt; Microsoft.ML.Transforms.Text.NgramHashingEstimator" Usage="new Microsoft.ML.Transforms.Text.NgramHashingEstimator (env, outputColumnName, inputColumnNames, hashBits, ngramLength, skipLength, allLengths, seed, ordered, invertHash)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnNames" Type="System.String[]" />
        <Parameter Name="hashBits" Type="System.Int32" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.UInt32" />
        <Parameter Name="ordered" Type="System.Boolean" />
        <Parameter Name="invertHash" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="outputColumnName">Name of output column, will contain the ngram vector.</param>
        <param name="inputColumnNames">Name of input columns containing tokenized text.</param>
        <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="invertHash">During hashing we constuct mappings between original values and the produced hash values.
             Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
             <paramref name="invertHash" /> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
             <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumnNames" />
             and outputs ngram vector as <paramref name="outputColumnName" /><see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" /> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" />
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> tokenizes text internally.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Transforms.Text.NgramHashingTransformer Fit (Microsoft.Data.DataView.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Transforms.Text.NgramHashingTransformer Fit(class Microsoft.Data.DataView.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.NgramHashingEstimator.Fit(Microsoft.Data.DataView.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As NgramHashingTransformer" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.Data.DataView.IDataView -&gt; Microsoft.ML.Transforms.Text.NgramHashingTransformer&#xA;override this.Fit : Microsoft.Data.DataView.IDataView -&gt; Microsoft.ML.Transforms.Text.NgramHashingTransformer" Usage="ngramHashingEstimator.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Core.Data.IEstimator`1.Fit(Microsoft.Data.DataView.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.NgramHashingTransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.Data.DataView.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Core.Data.SchemaShape GetOutputSchema (Microsoft.ML.Core.Data.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Core.Data.SchemaShape GetOutputSchema(class Microsoft.ML.Core.Data.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.NgramHashingEstimator.GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.Core.Data.SchemaShape -&gt; Microsoft.ML.Core.Data.SchemaShape&#xA;override this.GetOutputSchema : Microsoft.ML.Core.Data.SchemaShape -&gt; Microsoft.ML.Core.Data.SchemaShape" Usage="ngramHashingEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Core.Data.IEstimator`1.GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Core.Data.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.Core.Data.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>