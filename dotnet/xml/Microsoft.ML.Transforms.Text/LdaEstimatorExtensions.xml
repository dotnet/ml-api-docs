<Type Name="LdaEstimatorExtensions" FullName="Microsoft.ML.Transforms.Text.LdaEstimatorExtensions">
  <TypeSignature Language="C#" Value="public static class LdaEstimatorExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LdaEstimatorExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.Text.LdaEstimatorExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module LdaEstimatorExtensions" />
  <TypeSignature Language="F#" Value="type LdaEstimatorExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extensions for statically typed <see cref="T:Microsoft.ML.Transforms.LdaEstimator" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ToLdaTopicVector">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.Vector&lt;float&gt; ToLdaTopicVector (this Microsoft.ML.StaticPipe.Vector&lt;float&gt; input, int numTopic = 100, Action&lt;Microsoft.ML.Runtime.TextAnalytics.LdaTransform.Arguments&gt; advancedSettings = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.Vector`1&lt;float32&gt; ToLdaTopicVector(class Microsoft.ML.StaticPipe.Vector`1&lt;float32&gt; input, int32 numTopic, class System.Action`1&lt;class Microsoft.ML.Runtime.TextAnalytics.LdaTransform/Arguments&gt; advancedSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.LdaEstimatorExtensions.ToLdaTopicVector(Microsoft.ML.StaticPipe.Vector{System.Single},System.Int32,System.Action{Microsoft.ML.Runtime.TextAnalytics.LdaTransform.Arguments})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLdaTopicVector (input As Vector(Of Single), Optional numTopic As Integer = 100, Optional advancedSettings As Action(Of LdaTransform.Arguments) = null) As Vector(Of Single)" />
      <MemberSignature Language="F#" Value="static member ToLdaTopicVector : Microsoft.ML.StaticPipe.Vector&lt;single&gt; * int * Action&lt;Microsoft.ML.Runtime.TextAnalytics.LdaTransform.Arguments&gt; -&gt; Microsoft.ML.StaticPipe.Vector&lt;single&gt;" Usage="Microsoft.ML.Transforms.Text.LdaEstimatorExtensions.ToLdaTopicVector (input, numTopic, advancedSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.Vector&lt;System.Single&gt;" RefType="this" />
        <Parameter Name="numTopic" Type="System.Int32" />
        <Parameter Name="advancedSettings" Type="System.Action&lt;Microsoft.ML.Runtime.TextAnalytics.LdaTransform+Arguments&gt;" />
      </Parameters>
      <Docs>
        <param name="input">The column to apply to.</param>
        <param name="numTopic">The number of topics in the LDA.</param>
        <param name="advancedSettings">A delegate to apply all the advanced arguments to the algorithm.</param>
        <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary>
        <returns>To be added.</returns>
        <remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para><para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a></para><para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet"><item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item><item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item></list></para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>