<Type Name="NgramExtractingEstimator" FullName="Microsoft.ML.Transforms.Text.NgramExtractingEstimator">
  <TypeSignature Language="C#" Value="public sealed class NgramExtractingEstimator : Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Transforms.Text.NgramExtractingTransformer&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit NgramExtractingEstimator extends System.Object implements class Microsoft.ML.Core.Data.IEstimator`1&lt;class Microsoft.ML.Transforms.Text.NgramExtractingTransformer&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.Text.NgramExtractingEstimator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NgramExtractingEstimator&#xA;Implements IEstimator(Of NgramExtractingTransformer)" />
  <TypeSignature Language="F#" Value="type NgramExtractingEstimator = class&#xA;    interface IEstimator&lt;NgramExtractingTransformer&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Transforms.Text.NgramExtractingTransformer&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Produces a bag of counts of ngrams(sequences of consecutive values of length 1-n) in a given vector of keys.
            It does so by building a dictionary of ngrams and using the id in the dictionary as the index in the bag.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NgramExtractingEstimator (Microsoft.ML.Runtime.IHostEnvironment env, params Microsoft.ML.Transforms.Text.NgramExtractingTransformer.ColumnInfo[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Transforms.Text.NgramExtractingTransformer/ColumnInfo[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.NgramExtractingTransformer.ColumnInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, ParamArray columns As NgramExtractingTransformer.ColumnInfo())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Text.NgramExtractingEstimator : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Transforms.Text.NgramExtractingTransformer.ColumnInfo[] -&gt; Microsoft.ML.Transforms.Text.NgramExtractingEstimator" Usage="new Microsoft.ML.Transforms.Text.NgramExtractingEstimator (env, columns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="columns" Type="Microsoft.ML.Transforms.Text.NgramExtractingTransformer+ColumnInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="columns">Array of columns with information how to transform data.</param>
        <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs" />
            and outputs bag of word vector for each output in <paramref name="columns.output.output" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NgramExtractingEstimator (Microsoft.ML.Runtime.IHostEnvironment env, ValueTuple&lt;string,string&gt;[] columns, int ngramLength = 2, int skipLength = 0, bool allLengths = true, int maxNumTerms = 10000000, Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria weighting = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns, int32 ngramLength, int32 skipLength, bool allLengths, int32 maxNumTerms, valuetype Microsoft.ML.Transforms.Text.NgramExtractingEstimator/WeightingCriteria weighting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, columns As ValueTuple(Of String, String)(), Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional maxNumTerms As Integer = 10000000, Optional weighting As NgramExtractingEstimator.WeightingCriteria = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Text.NgramExtractingEstimator : Microsoft.ML.Runtime.IHostEnvironment * ValueTuple&lt;string, string&gt;[] * int * int * bool * int * Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria -&gt; Microsoft.ML.Transforms.Text.NgramExtractingEstimator" Usage="new Microsoft.ML.Transforms.Text.NgramExtractingEstimator (env, columns, ngramLength, skipLength, allLengths, maxNumTerms, weighting)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "input", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="maxNumTerms" Type="System.Int32" />
        <Parameter Name="weighting" Type="Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria" />
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="columns">Pairs of columns to compute bag of word vector.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
        <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs" />
            and outputs bag of word vector for each output in <paramref name="columns.output.output" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NgramExtractingEstimator (Microsoft.ML.Runtime.IHostEnvironment env, string inputColumn, string outputColumn = null, int ngramLength = 2, int skipLength = 0, bool allLengths = true, int maxNumTerms = 10000000, Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria weighting = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, string inputColumn, string outputColumn, int32 ngramLength, int32 skipLength, bool allLengths, int32 maxNumTerms, valuetype Microsoft.ML.Transforms.Text.NgramExtractingEstimator/WeightingCriteria weighting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, inputColumn As String, Optional outputColumn As String = null, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional maxNumTerms As Integer = 10000000, Optional weighting As NgramExtractingEstimator.WeightingCriteria = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Text.NgramExtractingEstimator : Microsoft.ML.Runtime.IHostEnvironment * string * string * int * int * bool * int * Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria -&gt; Microsoft.ML.Transforms.Text.NgramExtractingEstimator" Usage="new Microsoft.ML.Transforms.Text.NgramExtractingEstimator (env, inputColumn, outputColumn, ngramLength, skipLength, allLengths, maxNumTerms, weighting)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="maxNumTerms" Type="System.Int32" />
        <Parameter Name="weighting" Type="Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria" />
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="inputColumn">The column containing text to compute bag of word vector.</param>
        <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn" /> is replaced.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
        <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumn" />
            and outputs bag of word vector as <paramref name="outputColumn" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Transforms.Text.NgramExtractingTransformer Fit (Microsoft.ML.Runtime.Data.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Transforms.Text.NgramExtractingTransformer Fit(class Microsoft.ML.Runtime.Data.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.Fit(Microsoft.ML.Runtime.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As NgramExtractingTransformer" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.ML.Runtime.Data.IDataView -&gt; Microsoft.ML.Transforms.Text.NgramExtractingTransformer&#xA;override this.Fit : Microsoft.ML.Runtime.Data.IDataView -&gt; Microsoft.ML.Transforms.Text.NgramExtractingTransformer" Usage="ngramExtractingEstimator.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Core.Data.IEstimator`1.Fit(Microsoft.ML.Runtime.Data.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.NgramExtractingTransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.Runtime.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Core.Data.SchemaShape GetOutputSchema (Microsoft.ML.Core.Data.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Core.Data.SchemaShape GetOutputSchema(class Microsoft.ML.Core.Data.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.Core.Data.SchemaShape -&gt; Microsoft.ML.Core.Data.SchemaShape&#xA;override this.GetOutputSchema : Microsoft.ML.Core.Data.SchemaShape -&gt; Microsoft.ML.Core.Data.SchemaShape" Usage="ngramExtractingEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Core.Data.IEstimator`1.GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Core.Data.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.Core.Data.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>