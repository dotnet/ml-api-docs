<Type Name="TextAnalytics" FullName="Microsoft.ML.Transforms.Text.TextAnalytics">
  <TypeSignature Language="C#" Value="public static class TextAnalytics" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TextAnalytics extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.Text.TextAnalytics" />
  <TypeSignature Language="VB.NET" Value="Public Class TextAnalytics" />
  <TypeSignature Language="F#" Value="type TextAnalytics = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Entry points for text anylytics transforms.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AnalyzeSentiment">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput AnalyzeSentiment (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Transforms.Text.SentimentAnalyzingTransformer.Arguments input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.EntryPoints.CommonOutputs/TransformOutput AnalyzeSentiment(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Transforms.Text.SentimentAnalyzingTransformer/Arguments input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.TextAnalytics.AnalyzeSentiment(Microsoft.ML.IHostEnvironment,Microsoft.ML.Transforms.Text.SentimentAnalyzingTransformer.Arguments)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AnalyzeSentiment (env As IHostEnvironment, input As SentimentAnalyzingTransformer.Arguments) As CommonOutputs.TransformOutput" />
      <MemberSignature Language="F#" Value="static member AnalyzeSentiment : Microsoft.ML.IHostEnvironment * Microsoft.ML.Transforms.Text.SentimentAnalyzingTransformer.Arguments -&gt; Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput" Usage="Microsoft.ML.Transforms.Text.TextAnalytics.AnalyzeSentiment (env, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.EntryPoints.TlcModule/EntryPoint(Desc="Uses a pretrained sentiment model to score input strings", Name="Transforms.SentimentAnalyzer", ShortName="Senti", UserName="Sentiment Analyzing Transform", XmlInclude=new System.String[] { "&lt;include file='../Microsoft.ML.Transforms/Text/doc.xml' path='doc/members/member[@name="SentimentAnalyzer"]/*' /&gt;", "&lt;include file='../Microsoft.ML.Transforms/Text/doc.xml' path='doc/members/example[@name="SentimentAnalyzer"]/*' /&gt;" })</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.EntryPoints.CommonOutputs+TransformOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Transforms.Text.SentimentAnalyzingTransformer+Arguments" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CharTokenize">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput CharTokenize (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Transforms.Text.TokenizingByCharactersTransformer.Arguments input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.EntryPoints.CommonOutputs/TransformOutput CharTokenize(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Transforms.Text.TokenizingByCharactersTransformer/Arguments input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.TextAnalytics.CharTokenize(Microsoft.ML.IHostEnvironment,Microsoft.ML.Transforms.Text.TokenizingByCharactersTransformer.Arguments)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CharTokenize (env As IHostEnvironment, input As TokenizingByCharactersTransformer.Arguments) As CommonOutputs.TransformOutput" />
      <MemberSignature Language="F#" Value="static member CharTokenize : Microsoft.ML.IHostEnvironment * Microsoft.ML.Transforms.Text.TokenizingByCharactersTransformer.Arguments -&gt; Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput" Usage="Microsoft.ML.Transforms.Text.TextAnalytics.CharTokenize (env, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.EntryPoints.TlcModule/EntryPoint(Desc="Character-oriented tokenizer where text is considered a sequence of characters.", Name="Transforms.CharacterTokenizer", ShortName="CharToken", UserName="Character Tokenizer Transform", XmlInclude=new System.String[] { "&lt;include file='../Microsoft.ML.Transforms/Text/doc.xml' path='doc/members/member[@name="CharacterTokenizer"]/*' /&gt;" })</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.EntryPoints.CommonOutputs+TransformOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Transforms.Text.TokenizingByCharactersTransformer+Arguments" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelimitedTokenizeTransform">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput DelimitedTokenizeTransform (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Transforms.Text.WordTokenizingTransformer.Arguments input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.EntryPoints.CommonOutputs/TransformOutput DelimitedTokenizeTransform(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Transforms.Text.WordTokenizingTransformer/Arguments input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.TextAnalytics.DelimitedTokenizeTransform(Microsoft.ML.IHostEnvironment,Microsoft.ML.Transforms.Text.WordTokenizingTransformer.Arguments)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelimitedTokenizeTransform (env As IHostEnvironment, input As WordTokenizingTransformer.Arguments) As CommonOutputs.TransformOutput" />
      <MemberSignature Language="F#" Value="static member DelimitedTokenizeTransform : Microsoft.ML.IHostEnvironment * Microsoft.ML.Transforms.Text.WordTokenizingTransformer.Arguments -&gt; Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput" Usage="Microsoft.ML.Transforms.Text.TextAnalytics.DelimitedTokenizeTransform (env, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.EntryPoints.TlcModule/EntryPoint(Desc="The input to this transform is text, and the output is a vector of text containing the words (tokens) in the original text. The separator is space, but can be specified as any other character (or multiple characters) if needed.", Name="Transforms.WordTokenizer", ShortName="TokenizeTextTransform", UserName="Tokenize Text Transform", XmlInclude=new System.String[] { "&lt;include file='../Microsoft.ML.Transforms/Text/doc.xml' path='doc/members/member[@name="WordTokenizer"]/*' /&gt;", "&lt;include file='../Microsoft.ML.Transforms/Text/doc.xml' path='doc/members/example[@name="WordTokenizer"]/*' /&gt;" })</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.EntryPoints.CommonOutputs+TransformOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Transforms.Text.WordTokenizingTransformer+Arguments" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LightLda">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput LightLda (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.Arguments input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.EntryPoints.CommonOutputs/TransformOutput LightLda(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer/Arguments input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.TextAnalytics.LightLda(Microsoft.ML.IHostEnvironment,Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.Arguments)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LightLda (env As IHostEnvironment, input As LatentDirichletAllocationTransformer.Arguments) As CommonOutputs.TransformOutput" />
      <MemberSignature Language="F#" Value="static member LightLda : Microsoft.ML.IHostEnvironment * Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.Arguments -&gt; Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput" Usage="Microsoft.ML.Transforms.Text.TextAnalytics.LightLda (env, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.EntryPoints.TlcModule/EntryPoint(Desc="The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.", Name="Transforms.LightLda", ShortName="LightLda", UserName="Latent Dirichlet Allocation Transform", XmlInclude=new System.String[] { "&lt;include file='../Microsoft.ML.Transforms/Text/doc.xml' path='doc/members/member[@name="LightLDA"]/*' /&gt;", "&lt;include file='../Microsoft.ML.Transforms/Text/doc.xml' path='doc/members/example[@name="LightLDA"]/*' /&gt;" })</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.EntryPoints.CommonOutputs+TransformOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer+Arguments" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NGramTransform">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput NGramTransform (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Transforms.Text.NgramExtractingTransformer.Arguments input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.EntryPoints.CommonOutputs/TransformOutput NGramTransform(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Transforms.Text.NgramExtractingTransformer/Arguments input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.TextAnalytics.NGramTransform(Microsoft.ML.IHostEnvironment,Microsoft.ML.Transforms.Text.NgramExtractingTransformer.Arguments)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NGramTransform (env As IHostEnvironment, input As NgramExtractingTransformer.Arguments) As CommonOutputs.TransformOutput" />
      <MemberSignature Language="F#" Value="static member NGramTransform : Microsoft.ML.IHostEnvironment * Microsoft.ML.Transforms.Text.NgramExtractingTransformer.Arguments -&gt; Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput" Usage="Microsoft.ML.Transforms.Text.TextAnalytics.NGramTransform (env, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.EntryPoints.TlcModule/EntryPoint(Desc="Produces a bag of counts of ngrams (sequences of consecutive values of length 1-n) in a given vector of keys. It does so by building a dictionary of ngrams and using the id in the dictionary as the index in the bag.", Name="Transforms.NGramTranslator", ShortName="NgramTransform", UserName="NGram Transform", XmlInclude=new System.String[] { "&lt;include file='../Microsoft.ML.Transforms/Text/doc.xml' path='doc/members/member[@name="NgramTranslator"]/*' /&gt;" })</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.EntryPoints.CommonOutputs+TransformOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Transforms.Text.NgramExtractingTransformer+Arguments" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TermTransform">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput TermTransform (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer.Arguments input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.EntryPoints.CommonOutputs/TransformOutput TermTransform(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer/Arguments input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.TextAnalytics.TermTransform(Microsoft.ML.IHostEnvironment,Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer.Arguments)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TermTransform (env As IHostEnvironment, input As ValueToKeyMappingTransformer.Arguments) As CommonOutputs.TransformOutput" />
      <MemberSignature Language="F#" Value="static member TermTransform : Microsoft.ML.IHostEnvironment * Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer.Arguments -&gt; Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput" Usage="Microsoft.ML.Transforms.Text.TextAnalytics.TermTransform (env, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.EntryPoints.TlcModule/EntryPoint(Desc="Converts input values (words, numbers, etc.) to index in a dictionary.", Name="Transforms.Dictionarizer", ShortName="TermTransform", UserName="Term Transform")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.EntryPoints.CommonOutputs+TransformOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer+Arguments" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextTransform">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput TextTransform (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Arguments input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.EntryPoints.CommonOutputs/TransformOutput TextTransform(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Transforms.Text.TextFeaturizingEstimator/Arguments input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.TextAnalytics.TextTransform(Microsoft.ML.IHostEnvironment,Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Arguments)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TextTransform (env As IHostEnvironment, input As TextFeaturizingEstimator.Arguments) As CommonOutputs.TransformOutput" />
      <MemberSignature Language="F#" Value="static member TextTransform : Microsoft.ML.IHostEnvironment * Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Arguments -&gt; Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput" Usage="Microsoft.ML.Transforms.Text.TextAnalytics.TextTransform (env, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.EntryPoints.TlcModule/EntryPoint(Desc="A transform that turns a collection of text documents into numerical feature vectors. The feature vectors are normalized counts of (word and/or character) ngrams in a given tokenized text.", Name="Transforms.TextFeaturizer", ShortName="Text", UserName="Text Transform", XmlInclude=new System.String[] { "&lt;include file='../Microsoft.ML.Transforms/Text/doc.xml' path='doc/members/member[@name="FeaturizeTextEstimator"]/*' /&gt;", "&lt;include file='../Microsoft.ML.Transforms/Text/doc.xml' path='doc/members/example[@name="FeaturizeTextEstimator"]/*' /&gt;" })</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.EntryPoints.CommonOutputs+TransformOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Transforms.Text.TextFeaturizingEstimator+Arguments" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WordEmbeddings">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput WordEmbeddings (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.Arguments input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.EntryPoints.CommonOutputs/TransformOutput WordEmbeddings(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer/Arguments input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Text.TextAnalytics.WordEmbeddings(Microsoft.ML.IHostEnvironment,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.Arguments)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WordEmbeddings (env As IHostEnvironment, input As WordEmbeddingsExtractingTransformer.Arguments) As CommonOutputs.TransformOutput" />
      <MemberSignature Language="F#" Value="static member WordEmbeddings : Microsoft.ML.IHostEnvironment * Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.Arguments -&gt; Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput" Usage="Microsoft.ML.Transforms.Text.TextAnalytics.WordEmbeddings (env, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.EntryPoints.TlcModule/EntryPoint(Desc="Word Embeddings transform is a text featurizer which converts vectors of text tokens into sentence vectors using a pre-trained model", Name="Transforms.WordEmbeddings", ShortName="WordEmbeddings", UserName="Word Embeddings Transform", XmlInclude=new System.String[] { "&lt;include file='../Microsoft.ML.Transforms/Text/doc.xml' path='doc/members/member[@name="WordEmbeddings"]/*' /&gt;", "&lt;include file='../Microsoft.ML.Transforms/Text/doc.xml' path='doc/members/example[@name="WordEmbeddings"]/*' /&gt;" })</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.EntryPoints.CommonOutputs+TransformOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer+Arguments" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>