<Type Name="DnnImageFeaturizerEstimator" FullName="Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerEstimator">
  <TypeSignature Language="C#" Value="public sealed class DnnImageFeaturizerEstimator : Microsoft.ML.IEstimator&lt;Microsoft.ML.Data.TransformerChain&lt;Microsoft.ML.Transforms.ColumnCopyingTransformer&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DnnImageFeaturizerEstimator extends System.Object implements class Microsoft.ML.IEstimator`1&lt;class Microsoft.ML.Data.TransformerChain`1&lt;class Microsoft.ML.Transforms.ColumnCopyingTransformer&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerEstimator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DnnImageFeaturizerEstimator&#xA;Implements IEstimator(Of TransformerChain(Of ColumnCopyingTransformer))" />
  <TypeSignature Language="F#" Value="type DnnImageFeaturizerEstimator = class&#xA;    interface IEstimator&lt;TransformerChain&lt;ColumnCopyingTransformer&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.IEstimator&lt;Microsoft.ML.Data.TransformerChain&lt;Microsoft.ML.Transforms.ColumnCopyingTransformer&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             Applies a pre-trained deep neural network (DNN) model to featurize input image data.
             </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | Vector of <xref:System.Single> |
             | Output column data type | Vector of <xref:System.Single>, the size of the vector depends on the pre-trained DNN |
             | Exportable to ONNX | No |
            
             NuGet requirements:
            	- Microsoft.ML.OnnxTransformer
             - Microsoft.ML.OnnxRuntime.Gpu (only if GPU processing is used)
             - Each pre-trained DNN model has a separate NuGet that must be included if that model is used:
               - Microsoft.ML.DnnImageFeaturizer.AlexNet
               - Microsoft.ML.DnnImageFeaturizer.ResNet18
               - Microsoft.ML.DnnImageFeaturizer.ResNet50
               - Microsoft.ML.DnnImageFeaturizer.ResNet101
            
             The resulting transformer creates a new column, named as specified in the output column name parameters,
             where a pre-trained deep neural network is applied to the input image data.
            
             This estimator is a wrapper around a <xref:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator> with the current
             available DNN pre-trained models and several <xref:Microsoft.ML.Transforms.ColumnCopyingEstimator>.
             The <xref:Microsoft.ML.Transforms.ColumnCopyingEstimator> are needed to allow arbitrary column input and output
             names, since otherwise the <xref:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator> would require the column names to match
             the names of the ONNX model nodes.
            
             Any platform requirement for this estimator will follow the requirements on the <xref:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator>.
            
             Check the See Also section for links to usage examples.
             ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.ML.OnnxCatalog.DnnFeaturizeImage(Microsoft.ML.TransformsCatalog,System.String,System.Func{Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerInput,Microsoft.ML.Data.EstimatorChain{Microsoft.ML.Transforms.ColumnCopyingTransformer}},System.String)" />
  </Docs>
  <Members>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.TransformerChain&lt;Microsoft.ML.Transforms.ColumnCopyingTransformer&gt; Fit (Microsoft.ML.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.TransformerChain`1&lt;class Microsoft.ML.Transforms.ColumnCopyingTransformer&gt; Fit(class Microsoft.ML.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerEstimator.Fit(Microsoft.ML.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As TransformerChain(Of ColumnCopyingTransformer)" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Data.TransformerChain&lt;Microsoft.ML.Transforms.ColumnCopyingTransformer&gt;&#xA;override this.Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Data.TransformerChain&lt;Microsoft.ML.Transforms.ColumnCopyingTransformer&gt;" Usage="dnnImageFeaturizerEstimator.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.TransformerChain&lt;Microsoft.ML.Transforms.ColumnCopyingTransformer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>
            Note that OnnxEstimator which this is based on is a trivial estimator, so this does not do any actual training,
            just verifies the schema.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.SchemaShape GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.SchemaShape GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape&#xA;override this.GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape" Usage="dnnImageFeaturizerEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.GetOutputSchema(Microsoft.ML.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
