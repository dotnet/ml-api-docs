<Type Name="ValueToKeyMappingEstimator" FullName="Microsoft.ML.Transforms.ValueToKeyMappingEstimator">
  <TypeSignature Language="C#" Value="public sealed class ValueToKeyMappingEstimator : Microsoft.ML.IEstimator&lt;Microsoft.ML.Transforms.ValueToKeyMappingTransformer&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ValueToKeyMappingEstimator extends System.Object implements class Microsoft.ML.IEstimator`1&lt;class Microsoft.ML.Transforms.ValueToKeyMappingTransformer&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.ValueToKeyMappingEstimator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ValueToKeyMappingEstimator&#xA;Implements IEstimator(Of ValueToKeyMappingTransformer)" />
  <TypeSignature Language="F#" Value="type ValueToKeyMappingEstimator = class&#xA;    interface IEstimator&lt;ValueToKeyMappingTransformer&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.IEstimator&lt;Microsoft.ML.Transforms.ValueToKeyMappingTransformer&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
        Converts input values (words, numbers, etc.) to index in a dictionary.
      </summary>
    <remarks>
        The ValueToKeyMappingEstimator builds up term vocabularies (dictionaries).
        If multiple columns are used, each column builds/uses exactly one vocabulary.
        The output columns are KeyDataViewType-valued.
        The Key value is the one-based index of the item in the dictionary.
        If the key is not found in the dictionary, it is assigned the missing value indicator.
        This dictionary mapping values to keys is most commonly learnt from the unique values in input data,
        but can be defined through other means: either with the mapping defined directly on the command line, or as loaded from an external file.
      </remarks>
  </Docs>
  <Members>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Transforms.ValueToKeyMappingTransformer Fit (Microsoft.ML.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Transforms.ValueToKeyMappingTransformer Fit(class Microsoft.ML.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.Fit(Microsoft.ML.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As ValueToKeyMappingTransformer" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Transforms.ValueToKeyMappingTransformer&#xA;override this.Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Transforms.ValueToKeyMappingTransformer" Usage="valueToKeyMappingEstimator.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.ValueToKeyMappingTransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.SchemaShape GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.SchemaShape GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape&#xA;override this.GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape" Usage="valueToKeyMappingEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.GetOutputSchema(Microsoft.ML.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape" /> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>