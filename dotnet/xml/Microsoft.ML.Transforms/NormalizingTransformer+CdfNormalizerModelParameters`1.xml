<Type Name="NormalizingTransformer+CdfNormalizerModelParameters&lt;TData&gt;" FullName="Microsoft.ML.Transforms.NormalizingTransformer+CdfNormalizerModelParameters&lt;TData&gt;">
  <TypeSignature Language="C#" Value="public sealed class NormalizingTransformer.CdfNormalizerModelParameters&lt;TData&gt; : Microsoft.ML.Transforms.NormalizingTransformer.NormalizerModelParametersBase" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit NormalizingTransformer/CdfNormalizerModelParameters`1&lt;TData&gt; extends Microsoft.ML.Transforms.NormalizingTransformer/NormalizerModelParametersBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NormalizingTransformer.CdfNormalizerModelParameters(Of TData)&#xA;Inherits NormalizingTransformer.NormalizerModelParametersBase" />
  <TypeSignature Language="F#" Value="type NormalizingTransformer.CdfNormalizerModelParameters&lt;'Data&gt; = class&#xA;    inherit NormalizingTransformer.NormalizerModelParametersBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TData" />
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.ML.Transforms.NormalizingTransformer+NormalizerModelParametersBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TData">To be added.</typeparam>
    <summary>
            The model parameters generated by cumulative distribution normalization transformations.
            The cumulative density function is parameterized by <see cref="P:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1.Mean" /> and
            the <see cref="P:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1.StandardDeviation" /> as observed during fitting.
            </summary>
    <remarks>To be added.</remarks>
    <example>
      <format type="text/markdown"><![CDATA[
            [!code-csharp[Normalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Normalizer.cs)]
            ]]></format>
    </example>
  </Docs>
  <Members>
    <Member MemberName="Mean">
      <MemberSignature Language="C#" Value="public TData Mean { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TData Mean" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1.Mean" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mean As TData" />
      <MemberSignature Language="F#" Value="member this.Mean : 'Data" Usage="Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters&lt;'Data&gt;.Mean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The mean(s). In the scalar case, this is a single value. In the vector case this is of length equal
            to the number of slots.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StandardDeviation">
      <MemberSignature Language="C#" Value="public TData StandardDeviation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TData StandardDeviation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1.StandardDeviation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardDeviation As TData" />
      <MemberSignature Language="F#" Value="member this.StandardDeviation : 'Data" Usage="Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters&lt;'Data&gt;.StandardDeviation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The standard deviation(s). In the scalar case, this is a single value. In the vector case this is of
            length equal to the number of slots.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLog">
      <MemberSignature Language="C#" Value="public bool UseLog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLog" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1.UseLog" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseLog As Boolean" />
      <MemberSignature Language="F#" Value="member this.UseLog : bool" Usage="Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters&lt;'Data&gt;.UseLog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether the we ought to apply a logarithm to the input first.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>