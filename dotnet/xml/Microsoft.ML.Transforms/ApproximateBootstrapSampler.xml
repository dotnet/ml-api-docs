<Type Name="ApproximateBootstrapSampler" FullName="Microsoft.ML.Transforms.ApproximateBootstrapSampler">
  <TypeSignature Language="C#" Value="public sealed class ApproximateBootstrapSampler : Microsoft.ML.ILearningPipelineItem, Microsoft.ML.Runtime.EntryPoints.CommonInputs.ITransformInput" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ApproximateBootstrapSampler extends System.Object implements class Microsoft.ML.ILearningPipelineItem, class Microsoft.ML.Runtime.EntryPoints.CommonInputs/ITransformInput" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.ApproximateBootstrapSampler" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ApproximateBootstrapSampler&#xA;Implements CommonInputs.ITransformInput, ILearningPipelineItem" />
  <TypeSignature Language="F#" Value="type ApproximateBootstrapSampler = class&#xA;    interface CommonInputs.ITransformInput&#xA;    interface ILearningPipelineItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApproximateBootstrapSampler sealed : Microsoft::ML::ILearningPipelineItem, Microsoft::ML::Runtime::EntryPoints::CommonInputs::ITransformInput" />
  <TypeSignature Language="C++ CX" Value="public ref class ApproximateBootstrapSampler sealed : Microsoft::ML::ILearningPipelineItem, Microsoft::ML::Runtime::EntryPoints::CommonInputs::ITransformInput" />
  <TypeSignature Language="C++ WINRT" Value="class ApproximateBootstrapSampler sealed : Microsoft::ML::ILearningPipelineItem, Microsoft::ML::Runtime::EntryPoints::CommonInputs::ITransformInput" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.ILearningPipelineItem</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Approximate bootstrap sampling.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApproximateBootstrapSampler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.ApproximateBootstrapSampler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApproximateBootstrapSampler();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; ApproximateBootstrapSampler();" />
      <MemberSignature Language="C++ WINRT" Value=" ApproximateBootstrapSampler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyStep">
      <MemberSignature Language="C#" Value="public Microsoft.ML.ILearningPipelineStep ApplyStep (Microsoft.ML.ILearningPipelineStep previousStep, Microsoft.ML.Runtime.Experiment experiment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.ILearningPipelineStep ApplyStep(class Microsoft.ML.ILearningPipelineStep previousStep, class Microsoft.ML.Runtime.Experiment experiment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.ApproximateBootstrapSampler.ApplyStep(Microsoft.ML.ILearningPipelineStep,Microsoft.ML.Runtime.Experiment)" />
      <MemberSignature Language="F#" Value="abstract member ApplyStep : Microsoft.ML.ILearningPipelineStep * Microsoft.ML.Runtime.Experiment -&gt; Microsoft.ML.ILearningPipelineStep&#xA;override this.ApplyStep : Microsoft.ML.ILearningPipelineStep * Microsoft.ML.Runtime.Experiment -&gt; Microsoft.ML.ILearningPipelineStep" Usage="approximateBootstrapSampler.ApplyStep (previousStep, experiment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::ML::ILearningPipelineStep ^ ApplyStep(Microsoft::ML::ILearningPipelineStep ^ previousStep, Microsoft::ML::Runtime::Experiment ^ experiment);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::ML::ILearningPipelineStep ^ ApplyStep(Microsoft::ML::ILearningPipelineStep ^ previousStep, Microsoft::ML::Runtime::Experiment ^ experiment);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::ML::ILearningPipelineStep ApplyStep(Microsoft::ML::ILearningPipelineStep const &amp; previousStep, Microsoft::ML::Runtime::Experiment const &amp; experiment);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ILearningPipelineItem.ApplyStep(Microsoft.ML.ILearningPipelineStep,Microsoft.ML.Runtime.Experiment)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.ILearningPipelineStep</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousStep" Type="Microsoft.ML.ILearningPipelineStep" />
        <Parameter Name="experiment" Type="Microsoft.ML.Runtime.Experiment" />
      </Parameters>
      <Docs>
        <param name="previousStep">To be added.</param>
        <param name="experiment">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complement">
      <MemberSignature Language="C#" Value="public bool Complement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Complement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.ApproximateBootstrapSampler.Complement" />
      <MemberSignature Language="VB.NET" Value="Public Property Complement As Boolean" />
      <MemberSignature Language="F#" Value="member this.Complement : bool with get, set" Usage="Microsoft.ML.Transforms.ApproximateBootstrapSampler.Complement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Complement { bool get(); void set(bool value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool Complement { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether this is the out-of-bag sample, that is, all those rows that are not selected by the transform.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt; Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.EntryPoints.Var`1&lt;class Microsoft.ML.Runtime.Data.IDataView&gt; Data" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.ApproximateBootstrapSampler.Data" />
      <MemberSignature Language="VB.NET" Value="Public Property Data As Var(Of IDataView)" />
      <MemberSignature Language="F#" Value="member this.Data : Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt; with get, set" Usage="Microsoft.ML.Transforms.ApproximateBootstrapSampler.Data" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ML::Runtime::EntryPoints::Var&lt;Microsoft::ML::Runtime::Data::IDataView ^&gt; ^ Data { Microsoft::ML::Runtime::EntryPoints::Var&lt;Microsoft::ML::Runtime::Data::IDataView ^&gt; ^ get(); void set(Microsoft::ML::Runtime::EntryPoints::Var&lt;Microsoft::ML::Runtime::Data::IDataView ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.Runtime.EntryPoints.CommonInputs.ITransformInput.Data</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Input dataset
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PoolSize">
      <MemberSignature Language="C#" Value="public int PoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PoolSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.ApproximateBootstrapSampler.PoolSize" />
      <MemberSignature Language="VB.NET" Value="Public Property PoolSize As Integer" />
      <MemberSignature Language="F#" Value="member this.PoolSize : int with get, set" Usage="Microsoft.ML.Transforms.ApproximateBootstrapSampler.PoolSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PoolSize { int get(); void set(int value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property int PoolSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            When shuffling the output, the number of output rows to keep in that pool. Note that shuffling of output is completely distinct from shuffling of input.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seed">
      <MemberSignature Language="C#" Value="public Nullable&lt;uint&gt; Seed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;unsigned int32&gt; Seed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.ApproximateBootstrapSampler.Seed" />
      <MemberSignature Language="VB.NET" Value="Public Property Seed As Nullable(Of UInteger)" />
      <MemberSignature Language="F#" Value="member this.Seed : Nullable&lt;uint32&gt; with get, set" Usage="Microsoft.ML.Transforms.ApproximateBootstrapSampler.Seed" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::UInt32&gt; Seed { Nullable&lt;System::UInt32&gt; get(); void set(Nullable&lt;System::UInt32&gt; value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The random seed. If unspecified random state will be instead derived from the environment.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShuffleInput">
      <MemberSignature Language="C#" Value="public bool ShuffleInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShuffleInput" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.ApproximateBootstrapSampler.ShuffleInput" />
      <MemberSignature Language="VB.NET" Value="Public Property ShuffleInput As Boolean" />
      <MemberSignature Language="F#" Value="member this.ShuffleInput : bool with get, set" Usage="Microsoft.ML.Transforms.ApproximateBootstrapSampler.ShuffleInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShuffleInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool ShuffleInput { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether we should attempt to shuffle the source data. By default on, but can be turned off for efficiency.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>