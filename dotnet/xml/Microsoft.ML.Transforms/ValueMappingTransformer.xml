<Type Name="ValueMappingTransformer" FullName="Microsoft.ML.Transforms.ValueMappingTransformer">
  <TypeSignature Language="C#" Value="public class ValueMappingTransformer : Microsoft.ML.Data.OneToOneTransformerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ValueMappingTransformer extends Microsoft.ML.Data.OneToOneTransformerBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.ValueMappingTransformer" />
  <TypeSignature Language="VB.NET" Value="Public Class ValueMappingTransformer&#xA;Inherits OneToOneTransformerBase" />
  <TypeSignature Language="F#" Value="type ValueMappingTransformer = class&#xA;    inherit OneToOneTransformerBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Data.OneToOneTransformerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
        The ValueMappingEstimator is a 1-1 mapping from a key to value. 
      </summary>
    <remarks>
        Given a set of keys and values, the ValueMappingEstimator builds up a dictionary so that when given a specific key it will return a 
        specific value. The ValueMappingEstimator supports keys and values of different <see cref="T:System.Type" /> to support different data types.
        Examples for using a ValueMappingEstimator are:
        <list type="bullet"><item><description>Converting a string value to a string value, this can be useful for grouping (i.e. 'cat', 'dog', 'horse' maps to 'mammals')</description></item><item><description>Converting a string value to a integer value (i.e. converting the text description like quality to an numeric where 'good' maps to 1, 'poor' maps to 0</description></item><item><description>
              Converting a integer value to a string value and have the string value represented as a <see cref="T:Microsoft.ML.Data.KeyType" />
              (i.e. convert zip codes to a state string value, which will generate a unique integer value that can be used as a label.
            </description></item></list>
        Values can be repeated to allow for multiple keys to map to the same value, however keys can not be repeated. The mapping between keys and values
        can be specified either through lists, where the key list and value list must be the same size or can be done through an <see cref="T:Microsoft.Data.DataView.IDataView" />.
      </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetPrimitiveType">
      <MemberSignature Language="C#" Value="protected static Microsoft.Data.DataView.PrimitiveDataViewType GetPrimitiveType (Type rawType, out bool isVectorType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Microsoft.Data.DataView.PrimitiveDataViewType GetPrimitiveType(class System.Type rawType, [out] bool&amp; isVectorType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.ValueMappingTransformer.GetPrimitiveType(System.Type,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetPrimitiveType (rawType As Type, ByRef isVectorType As Boolean) As PrimitiveDataViewType" />
      <MemberSignature Language="F#" Value="static member GetPrimitiveType : Type *  -&gt; Microsoft.Data.DataView.PrimitiveDataViewType" Usage="Microsoft.ML.Transforms.ValueMappingTransformer.GetPrimitiveType (rawType, isVectorType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Data.DataView.PrimitiveDataViewType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawType" Type="System.Type" />
        <Parameter Name="isVectorType" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rawType">To be added.</param>
        <param name="isVectorType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>