<Type Name="IFunctionProvider" FullName="Microsoft.ML.Transforms.IFunctionProvider">
  <TypeSignature Language="C#" Value="public interface IFunctionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFunctionProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.IFunctionProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFunctionProvider" />
  <TypeSignature Language="F#" Value="type IFunctionProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            This interface enables extending the ExprTransform language with additional functions.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] Lookup (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] Lookup(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.IFunctionProvider.Lookup(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lookup (name As String) As MethodInfo()" />
      <MemberSignature Language="F#" Value="abstract member Lookup : string -&gt; System.Reflection.MethodInfo[]" Usage="iFunctionProvider.Lookup name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
            Returns an array of overloads for the given function name. This may return null instead of an
            empty array. The returned MethodInfos should  be public static methods that can be freely invoked
            by IL in a different assembly. They should also be "pure" functions - with the output only
            depending on the inputs and NOT on any global state.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameSpace">
      <MemberSignature Language="C#" Value="public string NameSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NameSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.IFunctionProvider.NameSpace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameSpace As String" />
      <MemberSignature Language="F#" Value="member this.NameSpace : string" Usage="Microsoft.ML.Transforms.IFunctionProvider.NameSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The namespace for this provider. This should be a legal identifier in the expression language.
            Multiple providers may contribute to the same namespace.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveToConstant">
      <MemberSignature Language="C#" Value="public object ResolveToConstant (string name, System.Reflection.MethodInfo meth, object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ResolveToConstant(string name, class System.Reflection.MethodInfo meth, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.IFunctionProvider.ResolveToConstant(System.String,System.Reflection.MethodInfo,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveToConstant (name As String, meth As MethodInfo, values As Object()) As Object" />
      <MemberSignature Language="F#" Value="abstract member ResolveToConstant : string * System.Reflection.MethodInfo * obj[] -&gt; obj" Usage="iFunctionProvider.ResolveToConstant (name, meth, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="meth" Type="System.Reflection.MethodInfo" />
        <Parameter Name="values" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name">The name of the function.</param>
        <param name="meth">The MethodInfo provided by Lookup. When there are multiple overloads of
            a function with a given name, this can be used to determine which overload is being used.</param>
        <param name="values">The values of the input arguments, with null for the non-constant arguments. This should
            only be called if there is at least one null.</param>
        <summary>
            If the function's value can be determined by the given subset of its arguments, this should
            return the resulting value. Note that this should only be called if values is non-empty and
            contains at least one null. If all the arguments are non-null, then the MethodInfo will be
            invoked to produce the value.
            </summary>
        <returns>The constant value, when it can be determined; null otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
