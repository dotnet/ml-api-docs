<Type Name="TensorFlowTransform" FullName="Microsoft.ML.Transforms.TensorFlowTransform">
  <TypeSignature Language="C#" Value="public sealed class TensorFlowTransform : Microsoft.ML.Data.RowToRowTransformerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TensorFlowTransform extends Microsoft.ML.Data.RowToRowTransformerBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.TensorFlowTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TensorFlowTransform&#xA;Inherits RowToRowTransformerBase" />
  <TypeSignature Language="F#" Value="type TensorFlowTransform = class&#xA;    inherit RowToRowTransformerBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.TensorFlow</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="ml-dotnet">Microsoft.ML.Runtime.Data.RowToRowTransformerBase</BaseTypeName>
    <BaseTypeName FrameworkAlternate="ml-dotnet">Microsoft.ML.Data.RowToRowTransformerBase</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Docs>
    <summary>
        The <see cref="T:Microsoft.ML.Transforms.TensorFlowTransform" /> is used in following two scenarios.
        <list type="number"><item><description>
            Scoring with pretrained TensorFlow model: In this mode, the transform extracts hidden layers' values from a pre-trained Tensorflow model and uses outputs as features in ML.Net pipeline.
          </description></item><item><description>
            Retraining of TensorFlow model: In this mode, the transform retrains a TensorFlow model using the user data passed through ML.Net pipeline. Once the model is trained, it's outputs can be used as features for scoring.
          </description></item></list></summary>
    <remarks>
      <para>
          The TensorFlowTransform extracts specified outputs using a pre-trained <a href="https://www.tensorflow.org">Tensorflow</a> model.
          Optionally, it can further retrain TensorFlow model on user data to adjust model parameters on the user data ( also know as "Transfer Learning").

          For scoring, the transform takes as inputs the pre-trained Tensorflow model, the names of the input nodes, and names of the output nodes whose values we want to extract.
          For retraining, the transform also requires training related parameters such as the names of optimization operation in the TensorFlow graph, the name of the learning rate operation in the graph and its value, name of the operations in the graph to compute loss and performance metric etc.
        </para>
      <para>
          This transform requires the <a href="https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.ML.TensorFlow">Microsoft.ML.TensorFlow</a> nuget to be installed.
          The TensorFlowTransform has the following assumptions regarding input, output and processing of data.
        </para>
      <list type="number">
        <item>
          <description>
              For the input model, currently the TensorFlowTransform supports both the <a href="https://www.tensorflow.org/mobile/prepare_models">Frozen model</a> format and also the <a href="https://www.tensorflow.org/guide/saved_model#build_and_load_a_savedmodel">SavedModel</a> format.
              However, retraining of the model is only possible for the <a href="https://www.tensorflow.org/guide/saved_model#build_and_load_a_savedmodel">SavedModel</a> format.
              <a href="https://www.tensorflow.org/guide/checkpoints">Checkpoint</a> format is currently neither supported for scoring nor for retraining due lack of TensorFlow C-API support for loading it.
            </description>
        </item>
        <item>
          <description>The transform supports scoring only one example at a time. However, retraining can be performed in batches.</description>
        </item>
        <item>
          <description>The name of input column(s) should match the name of input(s) in TensorFlow model.</description>
        </item>
        <item>
          <description>The name of each output column should match one of the operations in the TensorFlow graph.</description>
        </item>
        <item>
          <description>Currently, float, double, int, long, uint, ulong are the acceptable data types for input/output.</description>
        </item>
        <item>
          <description>Upon success, the transform will introduce a new column in <see cref="T:Microsoft.ML.Data.IDataView" /> corresponding to each output column specified.</description>
        </item>
      </list>

        The inputs and outputs of a TensorFlow model can be obtained using the <see cref="M:Microsoft.ML.Transforms.TensorFlowModelInfo.GetModelSchema" /> or <a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/graph_transforms/README.md#inspecting-graphs"><code>summarize_graph</code> tools.
        </a>.

      </remarks>
    <example>
      <code language="csharp">
          pipeline.Add(new TextLoader(dataFile).CreateFrom&lt;MNISTData&gt;(useHeader: false));
          pipeline.Add(new ColumnCopier(("NumericImageVec", "Input");
          pipeline.Add(new TensorFlowScorer()
          {
            Model = model_location;
            InputColumns = new[] { "Input" };
            OutputColumns = new[] { "Output" };
          }
        </code>
    </example>
    <example>
      <code language="csharp">
          var pipeline = new Legacy.LearningPipeline(seed: 1);
          pipeline.Add(new Microsoft.ML.Legacy.Data.TextLoader(dataFile).CreateFrom&lt;CifarData&gt;(useHeader: false));
          pipeline.Add(new ImageLoader(("ImagePath", "ImageReal"))
          {
            ImageFolder = imageFolder
          });

          pipeline.Add(new ImageResizer(("ImageReal", "ImageCropped"))
          {
            ImageHeight = imageHeight,
            ImageWidth = imageWidth,
            Resizing = ImageResizerTransformResizingKind.IsoCrop
          });

          pipeline.Add(new ImagePixelExtractor(("ImageCropped", "Input"))
          {
            UseAlpha = false,
            InterleaveArgb = true
          });

          pipeline.Add(new TensorFlowScorer()
          {
            Model = model_location,
            InputColumns = new[] { "Input" },
            OutputColumns = new[] { "Output" }
          });

        </code>
    </example>
    <example>
      <code language="csharp">
          pipeline.Add(new TextLoader(dataFile).CreateFrom&lt;MNISTData&gt;(useHeader: false));
          pipeline.Add(new ColumnCopier(("NumericImageVec", "Input");
          pipeline.Add(new TensorFlowScorer()
          {
            ModelLocation = model_location;
            InputColumns = new[] { "Input" };
            OutputColumns = new[] { "Output" };
          }
        </code>
    </example>
    <example>
      <code language="csharp">
          var pipeline = new Legacy.LearningPipeline(seed: 1);
          pipeline.Add(new Microsoft.ML.Legacy.Data.TextLoader(dataFile).CreateFrom&lt;CifarData&gt;(useHeader: false));
          pipeline.Add(new ImageLoader(("ImagePath", "ImageReal"))
          {
            ImageFolder = imageFolder
          });

          pipeline.Add(new ImageResizer(("ImageReal", "ImageCropped"))
          {
            ImageHeight = imageHeight,
            ImageWidth = imageWidth,
            Resizing = ImageResizerTransformResizingKind.IsoCrop
          });

          pipeline.Add(new ImagePixelExtractor(("ImageCropped", "Input"))
          {
            UseAlpha = false,
            InterleaveArgb = true
          });

          pipeline.Add(new TensorFlowScorer()
          {
            ModelLocation = model_location,
            InputColumns = new[] { "Input" },
            OutputColumns = new[] { "Output" }
          });

        </code>
    </example>
  </Docs>
  <Members>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public static int BatchSize;" />
      <MemberSignature Language="ILAsm" Value=".field public static int32 BatchSize" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Transforms.TensorFlowTransform.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared BatchSize As Integer " />
      <MemberSignature Language="F#" Value=" staticval mutable BatchSize : int" Usage="Microsoft.ML.Transforms.TensorFlowTransform.BatchSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TensorFlow</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.IDataTransform Create (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Transforms.TensorFlowTransform.Arguments args, Microsoft.ML.Data.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.IDataTransform Create(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Transforms.TensorFlowTransform/Arguments args, class Microsoft.ML.Data.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.TensorFlowTransform.Create(Microsoft.ML.IHostEnvironment,Microsoft.ML.Transforms.TensorFlowTransform.Arguments,Microsoft.ML.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (env As IHostEnvironment, args As TensorFlowTransform.Arguments, input As IDataView) As IDataTransform" />
      <MemberSignature Language="F#" Value="static member Create : Microsoft.ML.IHostEnvironment * Microsoft.ML.Transforms.TensorFlowTransform.Arguments * Microsoft.ML.Data.IDataView -&gt; Microsoft.ML.Data.IDataTransform" Usage="Microsoft.ML.Transforms.TensorFlowTransform.Create (env, args, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TensorFlow</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.IDataTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="args" Type="Microsoft.ML.Transforms.TensorFlowTransform+Arguments" />
        <Parameter Name="input" Type="Microsoft.ML.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="args">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.IDataTransform Create (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Data.IDataView input, Microsoft.ML.Transforms.TensorFlowModelInfo tfModelInfo, string[] names, string[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.IDataTransform Create(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Data.IDataView input, class Microsoft.ML.Transforms.TensorFlowModelInfo tfModelInfo, string[] names, string[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.TensorFlowTransform.Create(Microsoft.ML.IHostEnvironment,Microsoft.ML.Data.IDataView,Microsoft.ML.Transforms.TensorFlowModelInfo,System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (env As IHostEnvironment, input As IDataView, tfModelInfo As TensorFlowModelInfo, names As String(), source As String()) As IDataTransform" />
      <MemberSignature Language="F#" Value="static member Create : Microsoft.ML.IHostEnvironment * Microsoft.ML.Data.IDataView * Microsoft.ML.Transforms.TensorFlowModelInfo * string[] * string[] -&gt; Microsoft.ML.Data.IDataTransform" Usage="Microsoft.ML.Transforms.TensorFlowTransform.Create (env, input, tfModelInfo, names, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TensorFlow</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.IDataTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Data.IDataView" />
        <Parameter Name="tfModelInfo" Type="Microsoft.ML.Transforms.TensorFlowModelInfo" />
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="source" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="env">Host Environment.</param>
        <param name="input">Input <see cref="T:Microsoft.ML.Data.IDataView" />. This is the output from previous transform or loader.</param>
        <param name="tfModelInfo">
          <see cref="T:Microsoft.ML.Transforms.TensorFlowModelInfo" /> object created with <see cref="M:Microsoft.ML.Transforms.TensorFlow.TensorFlowUtils.LoadTensorFlowModel(Microsoft.ML.IHostEnvironment,System.String)" />.</param>
        <param name="names">Name of the output column(s). Keep it same as in the Tensorflow model.</param>
        <param name="source">Name of the input column(s). Keep it same as in the Tensorflow model.</param>
        <summary>
            Creates <see cref="T:Microsoft.ML.Data.IDataTransform" /> using <see cref="T:Microsoft.ML.Transforms.TensorFlowTransform" />.
            This convenience method avoids reloading of TensorFlow model.
            It is useful in a situation where user has already loaded TensorFlow model using <see cref="M:Microsoft.ML.Transforms.TensorFlow.TensorFlowUtils.LoadTensorFlowModel(Microsoft.ML.IHostEnvironment,System.String)" /> for inspecting model schema.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.IDataTransform Create (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Data.IDataView input, string model, string[] names, string[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.IDataTransform Create(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Data.IDataView input, string model, string[] names, string[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.TensorFlowTransform.Create(Microsoft.ML.IHostEnvironment,Microsoft.ML.Data.IDataView,System.String,System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (env As IHostEnvironment, input As IDataView, model As String, names As String(), source As String()) As IDataTransform" />
      <MemberSignature Language="F#" Value="static member Create : Microsoft.ML.IHostEnvironment * Microsoft.ML.Data.IDataView * string * string[] * string[] -&gt; Microsoft.ML.Data.IDataTransform" Usage="Microsoft.ML.Transforms.TensorFlowTransform.Create (env, input, model, names, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TensorFlow</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.IDataTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Data.IDataView" />
        <Parameter Name="model" Type="System.String" />
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="source" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="env">Host Environment.</param>
        <param name="input">Input <see cref="T:Microsoft.ML.Data.IDataView" />. This is the output from previous transform or loader.</param>
        <param name="model">Path to the TensorFlow model. </param>
        <param name="names">Name of the output column(s). Keep it same as in the Tensorflow model.</param>
        <param name="source">Name of the input column(s). Keep it same as in the Tensorflow model.</param>
        <summary>
            Creates <see cref="T:Microsoft.ML.Data.IDataTransform" /> using <see cref="T:Microsoft.ML.Transforms.TensorFlowTransform" />.
            This convenience method get the model file as input and loads the model internally.
            If the model is already loaded please <see cref="M:Microsoft.ML.Transforms.TensorFlowTransform.Create(Microsoft.ML.IHostEnvironment,Microsoft.ML.Data.IDataView,Microsoft.ML.Transforms.TensorFlowModelInfo,System.String[],System.String[])" /> to avoid reloading of model.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TensorFlowTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.TensorFlowTransform.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="tensorFlowTransform.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TensorFlow</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inputs">
      <MemberSignature Language="C#" Value="public readonly string[] Inputs;" />
      <MemberSignature Language="ILAsm" Value=".field public initonly string[] Inputs" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Transforms.TensorFlowTransform.Inputs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Inputs As String() " />
      <MemberSignature Language="F#" Value="val mutable Inputs : string[]" Usage="Microsoft.ML.Transforms.TensorFlowTransform.Inputs" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TensorFlow</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Outputs">
      <MemberSignature Language="C#" Value="public readonly string[] Outputs;" />
      <MemberSignature Language="ILAsm" Value=".field public initonly string[] Outputs" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Transforms.TensorFlowTransform.Outputs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Outputs As String() " />
      <MemberSignature Language="F#" Value="val mutable Outputs : string[]" Usage="Microsoft.ML.Transforms.TensorFlowTransform.Outputs" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TensorFlow</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public override void Save (Microsoft.ML.Model.ModelSaveContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Save(class Microsoft.ML.Model.ModelSaveContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.TensorFlowTransform.Save(Microsoft.ML.Model.ModelSaveContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Save (ctx As ModelSaveContext)" />
      <MemberSignature Language="F#" Value="override this.Save : Microsoft.ML.Model.ModelSaveContext -&gt; unit" Usage="tensorFlowTransform.Save ctx" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TensorFlow</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.Model.ModelSaveContext" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorFlowScorer">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput TensorFlowScorer (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Transforms.TensorFlowTransform.Arguments input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.EntryPoints.CommonOutputs/TransformOutput TensorFlowScorer(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Transforms.TensorFlowTransform/Arguments input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.TensorFlowTransform.TensorFlowScorer(Microsoft.ML.IHostEnvironment,Microsoft.ML.Transforms.TensorFlowTransform.Arguments)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TensorFlowScorer (env As IHostEnvironment, input As TensorFlowTransform.Arguments) As CommonOutputs.TransformOutput" />
      <MemberSignature Language="F#" Value="static member TensorFlowScorer : Microsoft.ML.IHostEnvironment * Microsoft.ML.Transforms.TensorFlowTransform.Arguments -&gt; Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput" Usage="Microsoft.ML.Transforms.TensorFlowTransform.TensorFlowScorer (env, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TensorFlow</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.EntryPoints.TlcModule/EntryPoint(Desc="Transforms the data using the TensorFlow model.", Name="Transforms.TensorFlowScorer", ShortName="TFTransform", UserName="TensorFlowTransform", XmlInclude=new System.String[] { "&lt;include file='../Microsoft.ML.TensorFlow/doc.xml' path='doc/members/member[@name="TensorflowTransform"]/*' /&gt;", "&lt;include file='../Microsoft.ML.TensorFlow/doc.xml' path='doc/members/example[@name="TensorflowTransform"]/*' /&gt;" })</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.EntryPoints.CommonOutputs+TransformOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Transforms.TensorFlowTransform+Arguments" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>