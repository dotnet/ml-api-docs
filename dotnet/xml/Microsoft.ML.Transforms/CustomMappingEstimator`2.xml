<Type Name="CustomMappingEstimator&lt;TSrc,TDst&gt;" FullName="Microsoft.ML.Transforms.CustomMappingEstimator&lt;TSrc,TDst&gt;">
  <TypeSignature Language="C#" Value="public sealed class CustomMappingEstimator&lt;TSrc,TDst&gt; : Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.Transforms.CustomMappingTransformer&lt;TSrc,TDst&gt;&gt; where TSrc : class, new() where TDst : class, new()" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CustomMappingEstimator`2&lt;class .ctor TSrc, class .ctor TDst&gt; extends Microsoft.ML.Data.TrivialEstimator`1&lt;class Microsoft.ML.Transforms.CustomMappingTransformer`2&lt;!TSrc, !TDst&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.CustomMappingEstimator`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CustomMappingEstimator(Of TSrc, TDst)&#xA;Inherits TrivialEstimator(Of CustomMappingTransformer(Of TSrc, TDst))" />
  <TypeSignature Language="F#" Value="type CustomMappingEstimator&lt;'Src, 'Dst (requires 'Src : null and 'Src : (new : unit -&gt; 'Src) and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst))&gt; = class&#xA;    inherit TrivialEstimator&lt;CustomMappingTransformer&lt;'Src, 'Dst&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSrc">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TDst">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.Transforms.CustomMappingTransformer&lt;TSrc,TDst&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Microsoft.ML.Transforms.CustomMappingTransformer&lt;TSrc,TDst&gt;</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TSrc">To be added.</typeparam>
    <typeparam name="TDst">To be added.</typeparam>
    <summary>
            The <see cref="T:Microsoft.ML.IEstimator`1" /> to define a custom mapping of rows of an <see cref="T:Microsoft.ML.IDataView" />.
            For usage details, please see <see cref="M:Microsoft.ML.CustomMappingCatalog.CustomMapping``2(Microsoft.ML.TransformsCatalog,System.Action{``0,``1},System.String,Microsoft.ML.Data.SchemaDefinition,Microsoft.ML.Data.SchemaDefinition)" /></summary>
    <remarks>
            Calling <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)" /> in this estimator, produces an <see cref="T:Microsoft.ML.Transforms.CustomMappingTransformer`2" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.SchemaShape GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.ML.SchemaShape GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.CustomMappingEstimator`2.GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="override this.GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape" Usage="customMappingEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape" /> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>