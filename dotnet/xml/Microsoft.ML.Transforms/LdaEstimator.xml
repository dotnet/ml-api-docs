<Type Name="LdaEstimator" FullName="Microsoft.ML.Transforms.LdaEstimator">
  <TypeSignature Language="C#" Value="public sealed class LdaEstimator : Microsoft.ML.Runtime.Data.TrainedWrapperEstimatorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LdaEstimator extends Microsoft.ML.Runtime.Data.TrainedWrapperEstimatorBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.LdaEstimator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LdaEstimator&#xA;Inherits TrainedWrapperEstimatorBase" />
  <TypeSignature Language="F#" Value="type LdaEstimator = class&#xA;    inherit TrainedWrapperEstimatorBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Runtime.Data.TrainedWrapperEstimatorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary>
    <remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para><para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a></para><para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet"><item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item><item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item></list></para></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LdaEstimator (Microsoft.ML.Runtime.IHostEnvironment env, ValueTuple&lt;string,string&gt;[] columns, int numTopic = 100, Action&lt;Microsoft.ML.Runtime.TextAnalytics.LdaTransform.Arguments&gt; advancedSettings = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns, int32 numTopic, class System.Action`1&lt;class Microsoft.ML.Runtime.TextAnalytics.LdaTransform/Arguments&gt; advancedSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.LdaEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],System.Int32,System.Action{Microsoft.ML.Runtime.TextAnalytics.LdaTransform.Arguments})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, columns As ValueTuple(Of String, String)(), Optional numTopic As Integer = 100, Optional advancedSettings As Action(Of LdaTransform.Arguments) = null)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.LdaEstimator : Microsoft.ML.Runtime.IHostEnvironment * ValueTuple&lt;string, string&gt;[] * int * Action&lt;Microsoft.ML.Runtime.TextAnalytics.LdaTransform.Arguments&gt; -&gt; Microsoft.ML.Transforms.LdaEstimator" Usage="new Microsoft.ML.Transforms.LdaEstimator (env, columns, numTopic, advancedSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "input", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="numTopic" Type="System.Int32" />
        <Parameter Name="advancedSettings" Type="System.Action&lt;Microsoft.ML.Runtime.TextAnalytics.LdaTransform+Arguments&gt;" />
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="columns">Pairs of columns to compute LDA.</param>
        <param name="numTopic">The number of topics in the LDA.</param>
        <param name="advancedSettings">A delegate to apply all the advanced arguments to the algorithm.</param>
        <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary>
        <remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para><para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a></para><para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet"><item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item><item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item></list></para></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LdaEstimator (Microsoft.ML.Runtime.IHostEnvironment env, string inputColumn, string outputColumn = null, int numTopic = 100, Action&lt;Microsoft.ML.Runtime.TextAnalytics.LdaTransform.Arguments&gt; advancedSettings = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, string inputColumn, string outputColumn, int32 numTopic, class System.Action`1&lt;class Microsoft.ML.Runtime.TextAnalytics.LdaTransform/Arguments&gt; advancedSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.LdaEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Action{Microsoft.ML.Runtime.TextAnalytics.LdaTransform.Arguments})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, inputColumn As String, Optional outputColumn As String = null, Optional numTopic As Integer = 100, Optional advancedSettings As Action(Of LdaTransform.Arguments) = null)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.LdaEstimator : Microsoft.ML.Runtime.IHostEnvironment * string * string * int * Action&lt;Microsoft.ML.Runtime.TextAnalytics.LdaTransform.Arguments&gt; -&gt; Microsoft.ML.Transforms.LdaEstimator" Usage="new Microsoft.ML.Transforms.LdaEstimator (env, inputColumn, outputColumn, numTopic, advancedSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="numTopic" Type="System.Int32" />
        <Parameter Name="advancedSettings" Type="System.Action&lt;Microsoft.ML.Runtime.TextAnalytics.LdaTransform+Arguments&gt;" />
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="inputColumn">The column containing text to tokenize.</param>
        <param name="outputColumn">The column containing output tokens. Null means <paramref name="inputColumn" /> is replaced.</param>
        <param name="numTopic">The number of topics in the LDA.</param>
        <param name="advancedSettings">A delegate to apply all the advanced arguments to the algorithm.</param>
        <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary>
        <remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para><para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a></para><para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet"><item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item><item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item></list></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Runtime.Data.TransformWrapper Fit (Microsoft.ML.Runtime.Data.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.ML.Runtime.Data.TransformWrapper Fit(class Microsoft.ML.Runtime.Data.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.LdaEstimator.Fit(Microsoft.ML.Runtime.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Fit (input As IDataView) As TransformWrapper" />
      <MemberSignature Language="F#" Value="override this.Fit : Microsoft.ML.Runtime.Data.IDataView -&gt; Microsoft.ML.Runtime.Data.TransformWrapper" Usage="ldaEstimator.Fit input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.TransformWrapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.Runtime.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>