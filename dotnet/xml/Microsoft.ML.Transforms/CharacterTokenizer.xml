<Type Name="CharacterTokenizer" FullName="Microsoft.ML.Transforms.CharacterTokenizer">
  <TypeSignature Language="C#" Value="public sealed class CharacterTokenizer : Microsoft.ML.Runtime.Data.TrivialWrapperEstimator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CharacterTokenizer extends Microsoft.ML.Runtime.Data.TrivialWrapperEstimator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.CharacterTokenizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharacterTokenizer&#xA;Inherits TrivialWrapperEstimator" />
  <TypeSignature Language="F#" Value="type CharacterTokenizer = class&#xA;    inherit TrivialWrapperEstimator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="ml-dotnet">Microsoft.ML.Runtime.Data.TrivialWrapperEstimator</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Docs>
    <summary>
            Character tokenizer splits text into sequences of characters using a sliding window.
            </summary>
    <remarks>
      This transform is not typically used on its own, but it is one of the transforms composing the 
      <see cref="T:Microsoft.ML.Transforms.TextFeaturizer">Text Featurizer</see>. 
      </remarks>
    <altmember cref="T:Microsoft.ML.Transforms.WordTokenizer" />
    <altmember cref="!:Microsoft.ML.Transforms.TextToKey" />
    <altmember cref="T:Microsoft.ML.Transforms.NGramTranslator" />
    <altmember cref="T:Microsoft.ML.Transforms.TextFeaturizer" />
    <example>
      <code language="csharp">
          pipeline.Add(new CharacterTokenizer("TextCol1" , "TextCol2" ));
        </code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CharacterTokenizer (Microsoft.ML.Runtime.IHostEnvironment env, ValueTuple&lt;string,string&gt;[] columns, bool useMarkerCharacters = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns, bool useMarkerCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.CharacterTokenizer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, columns As ValueTuple(Of String, String)(), Optional useMarkerCharacters As Boolean = true)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.CharacterTokenizer : Microsoft.ML.Runtime.IHostEnvironment * ValueTuple&lt;string, string&gt;[] * bool -&gt; Microsoft.ML.Transforms.CharacterTokenizer" Usage="new Microsoft.ML.Transforms.CharacterTokenizer (env, columns, useMarkerCharacters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "input", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="useMarkerCharacters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="columns">Pairs of columns to run the tokenization on.</param>
        <param name="useMarkerCharacters">Whether to use marker characters to separate words.</param>
        <summary>
            Tokenize incoming text in input columns and output the tokens as output columns.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CharacterTokenizer (Microsoft.ML.Runtime.IHostEnvironment env, string inputColumn, string outputColumn = null, bool useMarkerCharacters = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, string inputColumn, string outputColumn, bool useMarkerCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.CharacterTokenizer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, inputColumn As String, Optional outputColumn As String = null, Optional useMarkerCharacters As Boolean = true)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.CharacterTokenizer : Microsoft.ML.Runtime.IHostEnvironment * string * string * bool -&gt; Microsoft.ML.Transforms.CharacterTokenizer" Usage="new Microsoft.ML.Transforms.CharacterTokenizer (env, inputColumn, outputColumn, useMarkerCharacters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="useMarkerCharacters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="inputColumn">The column containing text to tokenize.</param>
        <param name="outputColumn">The column containing output tokens. Null means <paramref name="inputColumn" /> is replaced.</param>
        <param name="useMarkerCharacters">Whether to use marker characters to separate words.</param>
        <summary>
            Tokenize incoming text in <paramref name="inputColumn" /> and output the tokens as <paramref name="outputColumn" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>