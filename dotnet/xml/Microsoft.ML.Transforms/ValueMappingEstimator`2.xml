<Type Name="ValueMappingEstimator&lt;TKey,TValue&gt;" FullName="Microsoft.ML.Transforms.ValueMappingEstimator&lt;TKey,TValue&gt;">
  <TypeSignature Language="C#" Value="public sealed class ValueMappingEstimator&lt;TKey,TValue&gt; : Microsoft.ML.Transforms.ValueMappingEstimator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ValueMappingEstimator`2&lt;TKey, TValue&gt; extends Microsoft.ML.Transforms.ValueMappingEstimator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.ValueMappingEstimator`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ValueMappingEstimator(Of TKey, TValue)&#xA;Inherits ValueMappingEstimator" />
  <TypeSignature Language="F#" Value="type ValueMappingEstimator&lt;'Key, 'Value&gt; = class&#xA;    inherit ValueMappingEstimator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.ML.Transforms.ValueMappingEstimator</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TKey">Specifies the key type.</typeparam>
    <typeparam name="TValue">Specifies the value type.</typeparam>
    <summary>
        The ValueMappingEstimator is a 1-1 mapping from a key to value. 
      </summary>
    <remarks>
        Given a set of keys and values, the ValueMappingEstimator builds up a dictionary so that when given a specific key it will return a 
        specific value. The ValueMappingEstimator supports keys and values of different <see cref="T:System.Type" /> to support different data types.
        Examples for using a ValueMappingEstimator are:
        <list type="bullet"><item><description>Converting a string value to a string value, this can be useful for grouping (i.e. 'cat', 'dog', 'horse' maps to 'mammals')</description></item><item><description>Converting a string value to a integer value (i.e. converting the text description like quality to an numeric where 'good' maps to 1, 'poor' maps to 0</description></item><item><description>
              Converting a integer value to a string value and have the string value represented as a <see cref="T:Microsoft.ML.Data.KeyDataViewType" />
              (i.e. convert zip codes to a state string value, which will generate a unique integer value that can be used as a label.
            </description></item></list>
        Values can be repeated to allow for multiple keys to map to the same value, however keys can not be repeated. The mapping between keys and values
        can be specified either through lists, where the key list and value list must be the same size or can be done through an <see cref="T:Microsoft.ML.IDataView" />.
      </remarks>
  </Docs>
  <Members />
</Type>