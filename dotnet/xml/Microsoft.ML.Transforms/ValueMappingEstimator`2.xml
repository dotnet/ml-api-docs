<Type Name="ValueMappingEstimator&lt;TKey,TValue&gt;" FullName="Microsoft.ML.Transforms.ValueMappingEstimator&lt;TKey,TValue&gt;">
  <TypeSignature Language="C#" Value="public sealed class ValueMappingEstimator&lt;TKey,TValue&gt; : Microsoft.ML.Transforms.ValueMappingEstimator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ValueMappingEstimator`2&lt;TKey, TValue&gt; extends Microsoft.ML.Transforms.ValueMappingEstimator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.ValueMappingEstimator`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ValueMappingEstimator(Of TKey, TValue)&#xA;Inherits ValueMappingEstimator" />
  <TypeSignature Language="F#" Value="type ValueMappingEstimator&lt;'Key, 'Value&gt; = class&#xA;    inherit ValueMappingEstimator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.ML.Transforms.ValueMappingEstimator</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TKey">Specifies the key type.</typeparam>
    <typeparam name="TValue">Specifies the value type.</typeparam>
    <summary>
             Estimator for <see cref="T:Microsoft.ML.Transforms.ValueMappingTransformer" /> creating a key-value map using the pairs of values in the input data
             <see cref="T:Microsoft.ML.Data.PrimitiveDataViewType" /></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | Vector or primitive numeric, boolean, text, [System.DateTime](xref:System.DateTime) and [key](xref:Microsoft.ML.Data.KeyDataViewType) type.|
             | Output column data type | Vector or primitive numeric, boolean, text, [System.DateTime](xref:System.DateTime) and [key](xref:Microsoft.ML.Data.KeyDataViewType) type.|
            
             Given two sets of values, one serving as the key, and the other as the value of a Dictionary, the ValueMappingEstimator builds up this dictionary so that when given a specific key it will return a
             specific value.The ValueMappingEstimator supports keys and values of different [System.Type](xref:System.Type) to support different data types.
             Examples for using a ValueMappingEstimator are:
             * Converting a string value to a string value, this can be useful for grouping (i.e. 'cat', 'dog', 'horse' maps to 'mammals').
             * Converting a string value to a integer value (i.e. converting the text description like quality to an numeric where 'good' maps to 1, 'poor' maps to 0.
             * Converting a integer value to a string value and have the string value represented as a [key](xref:Microsoft.ML.Data.KeyDataViewType) type.
             (i.e. convert zip codes to a state string value, which will generate a unique integer value that can be used as a label.
            
             Values can be repeated to allow for multiple keys to map to the same value, however keys can not be repeated. The mapping between keys and values
             can be specified either through lists, where the key list and value list must be the same size or can be done through an [System.IDataView](xref:Microsoft.ML.IDataView).
            
             Check the See Also section for links to usage examples.
             ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValue``2(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},Microsoft.ML.InputOutputColumnPair[])" />
    <altmember cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValue``2(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1[]}},Microsoft.ML.InputOutputColumnPair[])" />
    <altmember cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValue``2(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.String,System.Boolean)" />
  </Docs>
  <Members />
</Type>
