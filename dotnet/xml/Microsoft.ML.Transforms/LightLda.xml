<Type Name="LightLda" FullName="Microsoft.ML.Transforms.LightLda">
  <TypeSignature Language="C#" Value="public sealed class LightLda : Microsoft.ML.ILearningPipelineItem, Microsoft.ML.Runtime.EntryPoints.CommonInputs.ITransformInput" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LightLda extends System.Object implements class Microsoft.ML.ILearningPipelineItem, class Microsoft.ML.Runtime.EntryPoints.CommonInputs/ITransformInput" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.LightLda" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LightLda&#xA;Implements CommonInputs.ITransformInput, ILearningPipelineItem" />
  <TypeSignature Language="F#" Value="type LightLda = class&#xA;    interface CommonInputs.ITransformInput&#xA;    interface ILearningPipelineItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.ILearningPipelineItem</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary>
    <remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="http://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para><para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a></para><para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list><item><description><a href="http://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item><item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item></list></para></remarks>
    <example>
      <code language="csharp">
          pipeline.Add(new LightLda(("InTextCol" , "OutTextCol")));
        </code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LightLda ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.LightLda.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LightLda (params string[] inputColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] inputColumns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.LightLda.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray inputColumns As String())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.LightLda : string[] -&gt; Microsoft.ML.Transforms.LightLda" Usage="new Microsoft.ML.Transforms.LightLda inputColumns" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="inputColumns" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="inputColumns">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LightLda (params ValueTuple&lt;string,string&gt;[] inputOutputColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ValueTuple`2&lt;string, string&gt;[] inputOutputColumns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.LightLda.#ctor(System.ValueTuple{System.String,System.String}[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray inputOutputColumns As ValueTuple(Of String, String)())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.LightLda : ValueTuple&lt;string, string&gt;[] -&gt; Microsoft.ML.Transforms.LightLda" Usage="new Microsoft.ML.Transforms.LightLda inputOutputColumns" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="inputOutputColumns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="inputOutputColumns">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddColumn">
      <MemberSignature Language="C#" Value="public void AddColumn (string inputColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddColumn(string inputColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.LightLda.AddColumn(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddColumn (inputColumn As String)" />
      <MemberSignature Language="F#" Value="member this.AddColumn : string -&gt; unit" Usage="lightLda.AddColumn inputColumn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputColumn" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputColumn">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddColumn">
      <MemberSignature Language="C#" Value="public void AddColumn (string outputColumn, string inputColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddColumn(string outputColumn, string inputColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.LightLda.AddColumn(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddColumn (outputColumn As String, inputColumn As String)" />
      <MemberSignature Language="F#" Value="member this.AddColumn : string * string -&gt; unit" Usage="lightLda.AddColumn (outputColumn, inputColumn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="inputColumn" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outputColumn">To be added.</param>
        <param name="inputColumn">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlphaSum">
      <MemberSignature Language="C#" Value="public float AlphaSum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 AlphaSum" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.AlphaSum" />
      <MemberSignature Language="VB.NET" Value="Public Property AlphaSum As Single" />
      <MemberSignature Language="F#" Value="member this.AlphaSum : single with get, set" Usage="Microsoft.ML.Transforms.LightLda.AlphaSum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.Runtime.EntryPoints.TlcModule/SweepableDiscreteParam("AlphaSum", Mono.Cecil.CustomAttributeArgument[], false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Dirichlet prior on document-topic vectors
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyStep">
      <MemberSignature Language="C#" Value="public Microsoft.ML.ILearningPipelineStep ApplyStep (Microsoft.ML.ILearningPipelineStep previousStep, Microsoft.ML.Runtime.Experiment experiment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.ILearningPipelineStep ApplyStep(class Microsoft.ML.ILearningPipelineStep previousStep, class Microsoft.ML.Runtime.Experiment experiment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.LightLda.ApplyStep(Microsoft.ML.ILearningPipelineStep,Microsoft.ML.Runtime.Experiment)" />
      <MemberSignature Language="F#" Value="abstract member ApplyStep : Microsoft.ML.ILearningPipelineStep * Microsoft.ML.Runtime.Experiment -&gt; Microsoft.ML.ILearningPipelineStep&#xA;override this.ApplyStep : Microsoft.ML.ILearningPipelineStep * Microsoft.ML.Runtime.Experiment -&gt; Microsoft.ML.ILearningPipelineStep" Usage="lightLda.ApplyStep (previousStep, experiment)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ILearningPipelineItem.ApplyStep(Microsoft.ML.ILearningPipelineStep,Microsoft.ML.Runtime.Experiment)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.ILearningPipelineStep</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousStep" Type="Microsoft.ML.ILearningPipelineStep" />
        <Parameter Name="experiment" Type="Microsoft.ML.Runtime.Experiment" />
      </Parameters>
      <Docs>
        <param name="previousStep">To be added.</param>
        <param name="experiment">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta">
      <MemberSignature Language="C#" Value="public float Beta { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Beta" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.Beta" />
      <MemberSignature Language="VB.NET" Value="Public Property Beta As Single" />
      <MemberSignature Language="F#" Value="member this.Beta : single with get, set" Usage="Microsoft.ML.Transforms.LightLda.Beta" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.Runtime.EntryPoints.TlcModule/SweepableDiscreteParam("Beta", Mono.Cecil.CustomAttributeArgument[], false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Dirichlet prior on vocab-topic vectors
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Transforms.LdaTransformColumn[] Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Transforms.LdaTransformColumn[] Column" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As LdaTransformColumn()" />
      <MemberSignature Language="F#" Value="member this.Column : Microsoft.ML.Transforms.LdaTransformColumn[] with get, set" Usage="Microsoft.ML.Transforms.LightLda.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.LdaTransformColumn[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            New column definition(s) (optional form: name:srcs)
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt; Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.EntryPoints.Var`1&lt;class Microsoft.ML.Runtime.Data.IDataView&gt; Data" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.Data" />
      <MemberSignature Language="VB.NET" Value="Public Property Data As Var(Of IDataView)" />
      <MemberSignature Language="F#" Value="member this.Data : Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt; with get, set" Usage="Microsoft.ML.Transforms.LightLda.Data" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.Runtime.EntryPoints.CommonInputs.ITransformInput.Data</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Input dataset
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInputData">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt; GetInputData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.EntryPoints.Var`1&lt;class Microsoft.ML.Runtime.Data.IDataView&gt; GetInputData() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.LightLda.GetInputData" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInputData () As Var(Of IDataView)" />
      <MemberSignature Language="F#" Value="abstract member GetInputData : unit -&gt; Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;&#xA;override this.GetInputData : unit -&gt; Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;" Usage="lightLda.GetInputData " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ILearningPipelineItem.GetInputData</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.Data.IDataView&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LikelihoodInterval">
      <MemberSignature Language="C#" Value="public int LikelihoodInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LikelihoodInterval" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.LikelihoodInterval" />
      <MemberSignature Language="VB.NET" Value="Public Property LikelihoodInterval As Integer" />
      <MemberSignature Language="F#" Value="member this.LikelihoodInterval : int with get, set" Usage="Microsoft.ML.Transforms.LightLda.LikelihoodInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Compute log likelihood over local dataset on this iteration interval
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mhstep">
      <MemberSignature Language="C#" Value="public int Mhstep { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Mhstep" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.Mhstep" />
      <MemberSignature Language="VB.NET" Value="Public Property Mhstep As Integer" />
      <MemberSignature Language="F#" Value="member this.Mhstep : int with get, set" Usage="Microsoft.ML.Transforms.LightLda.Mhstep" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.Runtime.EntryPoints.TlcModule/SweepableDiscreteParam("Mhstep", Mono.Cecil.CustomAttributeArgument[], false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Number of Metropolis Hasting step
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumBurninIterations">
      <MemberSignature Language="C#" Value="public int NumBurninIterations { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumBurninIterations" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.NumBurninIterations" />
      <MemberSignature Language="VB.NET" Value="Public Property NumBurninIterations As Integer" />
      <MemberSignature Language="F#" Value="member this.NumBurninIterations : int with get, set" Usage="Microsoft.ML.Transforms.LightLda.NumBurninIterations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.Runtime.EntryPoints.TlcModule/SweepableDiscreteParam("NumBurninIterations", Mono.Cecil.CustomAttributeArgument[], false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The number of burn-in iterations
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumIterations">
      <MemberSignature Language="C#" Value="public int NumIterations { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumIterations" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.NumIterations" />
      <MemberSignature Language="VB.NET" Value="Public Property NumIterations As Integer" />
      <MemberSignature Language="F#" Value="member this.NumIterations : int with get, set" Usage="Microsoft.ML.Transforms.LightLda.NumIterations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.Runtime.EntryPoints.TlcModule/SweepableDiscreteParam("NumIterations", Mono.Cecil.CustomAttributeArgument[], false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Number of iterations
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumMaxDocToken">
      <MemberSignature Language="C#" Value="public int NumMaxDocToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumMaxDocToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.NumMaxDocToken" />
      <MemberSignature Language="VB.NET" Value="Public Property NumMaxDocToken As Integer" />
      <MemberSignature Language="F#" Value="member this.NumMaxDocToken : int with get, set" Usage="Microsoft.ML.Transforms.LightLda.NumMaxDocToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The threshold of maximum count of tokens per doc
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumSummaryTermPerTopic">
      <MemberSignature Language="C#" Value="public int NumSummaryTermPerTopic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumSummaryTermPerTopic" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.NumSummaryTermPerTopic" />
      <MemberSignature Language="VB.NET" Value="Public Property NumSummaryTermPerTopic As Integer" />
      <MemberSignature Language="F#" Value="member this.NumSummaryTermPerTopic : int with get, set" Usage="Microsoft.ML.Transforms.LightLda.NumSummaryTermPerTopic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The number of words to summarize the topic
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumThreads">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; NumThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; NumThreads" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.NumThreads" />
      <MemberSignature Language="VB.NET" Value="Public Property NumThreads As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.NumThreads : Nullable&lt;int&gt; with get, set" Usage="Microsoft.ML.Transforms.LightLda.NumThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The number of training threads. Default value depends on number of logical processors.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumTopic">
      <MemberSignature Language="C#" Value="public int NumTopic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumTopic" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.NumTopic" />
      <MemberSignature Language="VB.NET" Value="Public Property NumTopic As Integer" />
      <MemberSignature Language="F#" Value="member this.NumTopic : int with get, set" Usage="Microsoft.ML.Transforms.LightLda.NumTopic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.ML.Runtime.EntryPoints.TlcModule/SweepableDiscreteParam("NumTopic", Mono.Cecil.CustomAttributeArgument[], false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The number of topics in the LDA
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputTopicWordSummary">
      <MemberSignature Language="C#" Value="public bool OutputTopicWordSummary { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OutputTopicWordSummary" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.OutputTopicWordSummary" />
      <MemberSignature Language="VB.NET" Value="Public Property OutputTopicWordSummary As Boolean" />
      <MemberSignature Language="F#" Value="member this.OutputTopicWordSummary : bool with get, set" Usage="Microsoft.ML.Transforms.LightLda.OutputTopicWordSummary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether to output the topic-word summary in text format
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetRandomGenerator">
      <MemberSignature Language="C#" Value="public bool ResetRandomGenerator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetRandomGenerator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.LightLda.ResetRandomGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetRandomGenerator As Boolean" />
      <MemberSignature Language="F#" Value="member this.ResetRandomGenerator : bool with get, set" Usage="Microsoft.ML.Transforms.LightLda.ResetRandomGenerator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Reset the random number generator for each document
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>