<Type Name="FeatureContributionCalculatingEstimator" FullName="Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator">
  <TypeSignature Language="C#" Value="public sealed class FeatureContributionCalculatingEstimator : Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FeatureContributionCalculatingEstimator extends Microsoft.ML.Data.TrivialEstimator`1&lt;class Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FeatureContributionCalculatingEstimator&#xA;Inherits TrivialEstimator(Of FeatureContributionCalculatingTransformer)" />
  <TypeSignature Language="F#" Value="type FeatureContributionCalculatingEstimator = class&#xA;    inherit TrivialEstimator&lt;FeatureContributionCalculatingTransformer&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TTransformer">Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Estimator for <see cref="T:Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer" />. Computes model-specific per-feature contributions to the score of each input vector.
             </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | Known-sized vector of <xref:System.Single> |
             | Output column data type | Known-sized vector of <xref:System.Single> |
            
             Scoring a dataset with a trained model produces a score, or prediction, for each example. To understand and explain these predictions
             it can be useful to inspect which features influenced them most significantly. This transformer computes a model-specific
             list of per-feature contributions to the score for each example. These contributions can be positive (they make the score higher) or negative
             (they make the score lower).
            
             Feature Contribution Calculation is currently supported for the following models:
             - Regression:
               - <xref:Microsoft.ML.Trainers.OlsTrainer>
               - <xref:Microsoft.ML.Trainers.SdcaRegressionTrainer>
               - <xref:Microsoft.ML.Trainers.OnlineGradientDescentTrainer>
               - <xref:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.GamRegressionTrainer>
               - <xref:Microsoft.ML.Trainers.LightGbm.LightGbmRegressionTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.FastTreeRegressionTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.FastForestRegressionTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.FastTreeTweedieTrainer>
             - Binary Classification:
               - <xref:Microsoft.ML.Trainers.AveragedPerceptronTrainer>
               - <xref:Microsoft.ML.Trainers.LinearSvmTrainer>
               - <xref:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.SgdCalibratedTrainer>
               - <xref:Microsoft.ML.Trainers.SgdNonCalibratedTrainer>
               - <xref:Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.GamBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.FastForestBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.FastTreeBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.LightGbm.LightGbmBinaryTrainer>
             - Ranking:
               - <xref:Microsoft.ML.Trainers.FastTree.FastTreeRankingTrainer>
               - <xref:Microsoft.ML.Trainers.LightGbm.LightGbmRankingTrainer>
            
             For linear models, the contribution of a given feature is equal to the product of feature value times the corresponding weight. Similarly,
             for Generalized Additive Models (GAM), the contribution of a feature is equal to the shape function for the given feature evaluated at
             the feature value.
            
             For tree-based models, the calculation of feature contribution essentially consists in determining which splits in the tree have the most impact
             on the final score and assigning the value of the impact to the features determining the split. More precisely, the contribution of a feature
             is equal to the change in score produced by exploring the opposite sub-tree every time a decision node for the given feature is encountered.
             Consider a simple case with a single decision tree that has a decision node for the binary feature F1. Given an example that has feature F1
             equal to true, we can calculate the score it would have obtained if we chose the subtree corresponding to the feature F1 being equal to false
             while keeping the other features constant. The contribution of feature F1 for the given example is the difference between the original score
             and the score obtained by taking the opposite decision at the node corresponding to feature F1. This algorithm extends naturally to models with
             many decision trees.
            
             Check the See Also section for links to usage examples.
             ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.ML.ExplainabilityCatalog.CalculateFeatureContribution(Microsoft.ML.TransformsCatalog,Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Trainers.ICalculateFeatureContribution},System.Int32,System.Int32,System.Boolean)" />
    <altmember cref="M:Microsoft.ML.ExplainabilityCatalog.CalculateFeatureContribution``2(Microsoft.ML.TransformsCatalog,Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Calibrators.CalibratedModelParametersBase{``0,``1}},System.Int32,System.Int32,System.Boolean)" />
  </Docs>
  <Members>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.SchemaShape GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.ML.SchemaShape GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="override this.GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape" Usage="featureContributionCalculatingEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape" /> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>