<Type Name="LpNormalizer" FullName="Microsoft.ML.Transforms.LpNormalizer">
  <TypeSignature Language="C#" Value="public sealed class LpNormalizer : Microsoft.ML.Runtime.Data.TrivialWrapperEstimator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LpNormalizer extends Microsoft.ML.Runtime.Data.TrivialWrapperEstimator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.LpNormalizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LpNormalizer&#xA;Inherits TrivialWrapperEstimator" />
  <TypeSignature Language="F#" Value="type LpNormalizer = class&#xA;    inherit TrivialWrapperEstimator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="ml-dotnet">Microsoft.ML.Runtime.Data.TrivialWrapperEstimator</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Docs>
    <summary>
         The LpNormalizer transforms, normalizes vectors (rows) individually by rescaling them to unit norm (L2, L1 or LInf). 
         <para>Performs the following operation on a vector X:</para><para>Y = (X - M) / D</para><para>where M is mean and D is either L2 norm, L1 norm or LInf norm.</para></summary>
    <remarks>
        Scaling inputs to unit norms is a common operation for text classification or clustering.
        For more information see: <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf" /></remarks>
    <altmember cref="!: Microsoft.ML.Transforms.GcNormalize" />
    <example>
      <code language="csharp">
          pipeline.Add(new LpNormalizer("FeatureCol")
          { 
            NormKind = LpNormNormalizerTransformNormalizerKind.L1Norm
          });
        </code>
    </example>
    <altmember cref="T:Microsoft.ML.Transforms.GlobalContrastNormalizer" />
    <example>
      <code language="csharp">
          pipeline.Add(new LpNormalizer("FeatureCol")
          { 
              NormKind = LpNormNormalizerTransformNormalizerKind.L1Norm
          });
        </code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LpNormalizer (Microsoft.ML.Runtime.IHostEnvironment env, ValueTuple&lt;string,string&gt;[] columns, Microsoft.ML.Runtime.Data.LpNormNormalizerTransform.NormalizerKind normKind = Microsoft.ML.Runtime.Data.LpNormNormalizerTransform+NormalizerKind.L2Norm, bool subMean = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns, valuetype Microsoft.ML.Runtime.Data.LpNormNormalizerTransform/NormalizerKind normKind, bool subMean) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.LpNormalizer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],Microsoft.ML.Runtime.Data.LpNormNormalizerTransform.NormalizerKind,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, columns As ValueTuple(Of String, String)(), Optional normKind As LpNormNormalizerTransform.NormalizerKind = Microsoft.ML.Runtime.Data.LpNormNormalizerTransform+NormalizerKind.L2Norm, Optional subMean As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.LpNormalizer : Microsoft.ML.Runtime.IHostEnvironment * ValueTuple&lt;string, string&gt;[] * Microsoft.ML.Runtime.Data.LpNormNormalizerTransform.NormalizerKind * bool -&gt; Microsoft.ML.Transforms.LpNormalizer" Usage="new Microsoft.ML.Transforms.LpNormalizer (env, columns, normKind, subMean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "input", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="normKind" Type="Microsoft.ML.Runtime.Data.LpNormNormalizerTransform+NormalizerKind" />
        <Parameter Name="subMean" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="columns">Pairs of columns to run the tokenization on.</param>
        <param name="normKind">Type of norm to use to normalize each sample.</param>
        <param name="subMean">Subtract mean from each value before normalizing.</param>
        <summary>
         The LpNormalizer transforms, normalizes vectors (rows) individually by rescaling them to unit norm (L2, L1 or LInf). 
         <para>Performs the following operation on a vector X:</para><para>Y = (X - M) / D</para><para>where M is mean and D is either L2 norm, L1 norm or LInf norm.</para></summary>
        <remarks>
        Scaling inputs to unit norms is a common operation for text classification or clustering.
        For more information see: <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf" /></remarks>
        <altmember cref="T:Microsoft.ML.Transforms.GlobalContrastNormalizer" />
        <example>
          <code language="csharp">
          pipeline.Add(new LpNormalizer("FeatureCol")
          { 
              NormKind = LpNormNormalizerTransformNormalizerKind.L1Norm
          });
        </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LpNormalizer (Microsoft.ML.Runtime.IHostEnvironment env, string inputColumn, string outputColumn = null, Microsoft.ML.Runtime.Data.LpNormNormalizerTransform.NormalizerKind normKind = Microsoft.ML.Runtime.Data.LpNormNormalizerTransform+NormalizerKind.L2Norm, bool subMean = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, string inputColumn, string outputColumn, valuetype Microsoft.ML.Runtime.Data.LpNormNormalizerTransform/NormalizerKind normKind, bool subMean) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.LpNormalizer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Runtime.Data.LpNormNormalizerTransform.NormalizerKind,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, inputColumn As String, Optional outputColumn As String = null, Optional normKind As LpNormNormalizerTransform.NormalizerKind = Microsoft.ML.Runtime.Data.LpNormNormalizerTransform+NormalizerKind.L2Norm, Optional subMean As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.LpNormalizer : Microsoft.ML.Runtime.IHostEnvironment * string * string * Microsoft.ML.Runtime.Data.LpNormNormalizerTransform.NormalizerKind * bool -&gt; Microsoft.ML.Transforms.LpNormalizer" Usage="new Microsoft.ML.Transforms.LpNormalizer (env, inputColumn, outputColumn, normKind, subMean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="normKind" Type="Microsoft.ML.Runtime.Data.LpNormNormalizerTransform+NormalizerKind" />
        <Parameter Name="subMean" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="env">The environment.</param>
        <param name="inputColumn">The column containing text to tokenize.</param>
        <param name="outputColumn">The column containing output tokens. Null means <paramref name="inputColumn" /> is replaced.</param>
        <param name="normKind">Type of norm to use to normalize each sample.</param>
        <param name="subMean">Subtract mean from each value before normalizing.</param>
        <summary>
         The LpNormalizer transforms, normalizes vectors (rows) individually by rescaling them to unit norm (L2, L1 or LInf). 
         <para>Performs the following operation on a vector X:</para><para>Y = (X - M) / D</para><para>where M is mean and D is either L2 norm, L1 norm or LInf norm.</para></summary>
        <remarks>
        Scaling inputs to unit norms is a common operation for text classification or clustering.
        For more information see: <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf" /></remarks>
        <altmember cref="T:Microsoft.ML.Transforms.GlobalContrastNormalizer" />
        <example>
          <code language="csharp">
          pipeline.Add(new LpNormalizer("FeatureCol")
          { 
              NormKind = LpNormNormalizerTransformNormalizerKind.L1Norm
          });
        </code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>