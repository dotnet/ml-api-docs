<Type Name="ColumnConcatenatingEstimator" FullName="Microsoft.ML.Transforms.ColumnConcatenatingEstimator">
  <TypeSignature Language="C#" Value="public sealed class ColumnConcatenatingEstimator : Microsoft.ML.IEstimator&lt;Microsoft.ML.Data.ColumnConcatenatingTransformer&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ColumnConcatenatingEstimator extends System.Object implements class Microsoft.ML.IEstimator`1&lt;class Microsoft.ML.Data.ColumnConcatenatingTransformer&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.ColumnConcatenatingEstimator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ColumnConcatenatingEstimator&#xA;Implements IEstimator(Of ColumnConcatenatingTransformer)" />
  <TypeSignature Language="F#" Value="type ColumnConcatenatingEstimator = class&#xA;    interface IEstimator&lt;ColumnConcatenatingTransformer&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.IEstimator&lt;Microsoft.ML.Data.ColumnConcatenatingTransformer&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             Concatenates one or more input columns into a new output column.
             </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | Any, except [key](xref:Microsoft.ML.Data.KeyDataViewType) type. All input columns must have the same type.  |
             | Output column data type | A vector of the input columns' data type |
            
             The resulting <xref:Microsoft.ML.Data.ColumnConcatenatingTransformer> creates a new column,
             named as specified in the output column name parameters, where the input values are concatenated in a vector.
             The order of the concatenation follows the order in which the input columns are specified.
            
             If the input columns' data type is a vector the output column data type remains the same. However, the size of
             the vector will be the sum of the sizes of the input vectors.
            
             Check the See Also section for links to usage examples.
             ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.ML.TransformExtensionsCatalog.Concatenate(Microsoft.ML.TransformsCatalog,System.String,System.String[])" />
  </Docs>
  <Members>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.ColumnConcatenatingTransformer Fit (Microsoft.ML.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.ColumnConcatenatingTransformer Fit(class Microsoft.ML.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.ColumnConcatenatingEstimator.Fit(Microsoft.ML.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As ColumnConcatenatingTransformer" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Data.ColumnConcatenatingTransformer&#xA;override this.Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Data.ColumnConcatenatingTransformer" Usage="columnConcatenatingEstimator.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.ColumnConcatenatingTransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Data.ColumnConcatenatingTransformer" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.SchemaShape GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.SchemaShape GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.ColumnConcatenatingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape&#xA;override this.GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape" Usage="columnConcatenatingEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.GetOutputSchema(Microsoft.ML.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape" /> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>