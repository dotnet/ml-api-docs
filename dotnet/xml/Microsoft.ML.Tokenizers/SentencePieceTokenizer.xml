<Type Name="SentencePieceTokenizer" FullName="Microsoft.ML.Tokenizers.SentencePieceTokenizer">
  <TypeSignature Language="C#" Value="public class SentencePieceTokenizer : Microsoft.ML.Tokenizers.Tokenizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SentencePieceTokenizer extends Microsoft.ML.Tokenizers.Tokenizer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.SentencePieceTokenizer" />
  <TypeSignature Language="VB.NET" Value="Public Class SentencePieceTokenizer&#xA;Inherits Tokenizer" />
  <TypeSignature Language="F#" Value="type SentencePieceTokenizer = class&#xA;    inherit Tokenizer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Tokenizers.Tokenizer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            SentencePieceBpe is a tokenizer that splits the input into tokens using the SentencePiece Bpe model.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBeginningOfSentence">
      <MemberSignature Language="C#" Value="public bool AddBeginningOfSentence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddBeginningOfSentence" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.AddBeginningOfSentence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddBeginningOfSentence As Boolean" />
      <MemberSignature Language="F#" Value="member this.AddBeginningOfSentence : bool" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.AddBeginningOfSentence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicate emitting the beginning of sentence token during the encoding.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDummyPrefix">
      <MemberSignature Language="C#" Value="public bool AddDummyPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddDummyPrefix" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.AddDummyPrefix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddDummyPrefix As Boolean" />
      <MemberSignature Language="F#" Value="member this.AddDummyPrefix : bool" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.AddDummyPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicate emitting the prefix character U+2581 at the beginning of sentence token during the normalization and encoding.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEndOfSentence">
      <MemberSignature Language="C#" Value="public bool AddEndOfSentence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddEndOfSentence" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.AddEndOfSentence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddEndOfSentence As Boolean" />
      <MemberSignature Language="F#" Value="member this.AddEndOfSentence : bool" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.AddEndOfSentence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicate emitting the end of sentence token during the encoding.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginningOfSentenceId">
      <MemberSignature Language="C#" Value="public int BeginningOfSentenceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BeginningOfSentenceId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.BeginningOfSentenceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginningOfSentenceId As Integer" />
      <MemberSignature Language="F#" Value="member this.BeginningOfSentenceId : int" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.BeginningOfSentenceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The id of the beginning of sentence token.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginningOfSentenceToken">
      <MemberSignature Language="C#" Value="public string BeginningOfSentenceToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BeginningOfSentenceToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.BeginningOfSentenceToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginningOfSentenceToken As String" />
      <MemberSignature Language="F#" Value="member this.BeginningOfSentenceToken : string" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.BeginningOfSentenceToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The beginning of sentence token.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByteFallback">
      <MemberSignature Language="C#" Value="public bool ByteFallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ByteFallback" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.ByteFallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ByteFallback As Boolean" />
      <MemberSignature Language="F#" Value="member this.ByteFallback : bool" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.ByteFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies whether the model will do a byte fallback when it encounters unknown tokens during the encoding process.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="protected override int CountTokens (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 CountTokens(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.CountTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CountTokens (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As Integer" />
      <MemberSignature Language="F#" Value="override this.CountTokens : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; int" Usage="sentencePieceTokenizer.CountTokens (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of token Ids that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="public int CountTokens (ReadOnlySpan&lt;char&gt; text, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CountTokens(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.CountTokens(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountTokens (text As ReadOnlySpan(Of Char), addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="override this.CountTokens : ReadOnlySpan&lt;char&gt; * bool * bool * bool * bool -&gt; int" Usage="sentencePieceTokenizer.CountTokens (text, addBeginningOfSentence, addEndOfSentence, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of token Ids that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="public int CountTokens (string text, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CountTokens(string text, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.CountTokens(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountTokens (text As String, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="override this.CountTokens : string * bool * bool * bool * bool -&gt; int" Usage="sentencePieceTokenizer.CountTokens (text, addBeginningOfSentence, addEndOfSentence, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of token Ids that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="public int CountTokens (ReadOnlySpan&lt;char&gt; text, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization, out string? normalizedText, out int charsConsumed, int maxTokenCount = 2147483647);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CountTokens(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization, [out] string&amp; normalizedText, [out] int32&amp; charsConsumed, int32 maxTokenCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.CountTokens(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String@,System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountTokens (text As ReadOnlySpan(Of Char), addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, considerPreTokenization As Boolean, considerNormalization As Boolean, ByRef normalizedText As String, ByRef charsConsumed As Integer, Optional maxTokenCount As Integer = 2147483647) As Integer" />
      <MemberSignature Language="F#" Value="override this.CountTokens : ReadOnlySpan&lt;char&gt; * bool * bool * bool * bool * string * int * int -&gt; int" Usage="sentencePieceTokenizer.CountTokens (text, addBeginningOfSentence, addEndOfSentence, considerPreTokenization, considerNormalization, normalizedText, charsConsumed, maxTokenCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is false, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to null.</param>
        <param name="charsConsumed">The length of the text that encompasses the maximum encoded tokens.</param>
        <param name="maxTokenCount">The maximum number of tokens to encode.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of tokens that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="public int CountTokens (string text, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization, out string? normalizedText, out int charsConsumed, int maxTokenCount = 2147483647);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CountTokens(string text, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization, [out] string&amp; normalizedText, [out] int32&amp; charsConsumed, int32 maxTokenCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.CountTokens(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String@,System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountTokens (text As String, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, considerPreTokenization As Boolean, considerNormalization As Boolean, ByRef normalizedText As String, ByRef charsConsumed As Integer, Optional maxTokenCount As Integer = 2147483647) As Integer" />
      <MemberSignature Language="F#" Value="override this.CountTokens : string * bool * bool * bool * bool * string * int * int -&gt; int" Usage="sentencePieceTokenizer.CountTokens (text, addBeginningOfSentence, addEndOfSentence, considerPreTokenization, considerNormalization, normalizedText, charsConsumed, maxTokenCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is false, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to null.</param>
        <param name="charsConsumed">The length of the text that encompasses the maximum encoded tokens.</param>
        <param name="maxTokenCount">The maximum number of tokens to encode.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of tokens that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.SentencePieceTokenizer Create (System.IO.Stream modelStream, bool addBeginOfSentence = true, bool addEndOfSentence = false, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? specialTokens = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.SentencePieceTokenizer Create(class System.IO.Stream modelStream, bool addBeginOfSentence, bool addEndOfSentence, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; specialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.Create(System.IO.Stream,System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (modelStream As Stream, Optional addBeginOfSentence As Boolean = true, Optional addEndOfSentence As Boolean = false, Optional specialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing) As SentencePieceTokenizer" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * bool * bool * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; -&gt; Microsoft.ML.Tokenizers.SentencePieceTokenizer" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.Create (modelStream, addBeginOfSentence, addEndOfSentence, specialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.SentencePieceTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelStream" Type="System.IO.Stream" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="addBeginOfSentence" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" Index="2" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="specialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" Index="3" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="modelStream">The stream containing the SentencePiece Bpe or Unigram model.</param>
        <param name="addBeginOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="specialTokens">The additional tokens to add to the vocabulary.</param>
        <summary>
            Creates an instance of SentencePieceTokenizer. The model stream should contain a SentencePiece model as specified in the following documentation:
            https://github.com/google/sentencepiece/blob/master/src/sentencepiece_model.proto.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary stream is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public override string Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Decode (ids As IEnumerable(Of Integer)) As String" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; -&gt; string" Usage="sentencePieceTokenizer.Decode ids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <summary>
            Decode the given ids, back to a String.
            </summary>
        <returns>The decoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public string Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, bool considerSpecialTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decode (ids As IEnumerable(Of Integer), considerSpecialTokens As Boolean) As String" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; * bool -&gt; string" Usage="sentencePieceTokenizer.Decode (ids, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="considerSpecialTokens">Indicate whether to consider special tokens during decoding.</param>
        <summary>
            Decode the given ids, back to a String.
            </summary>
        <returns>The decoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public override System.Buffers.OperationStatus Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, Span&lt;char&gt; destination, out int idsConsumed, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Buffers.OperationStatus Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; idsConsumed, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Span{System.Char},System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Decode (ids As IEnumerable(Of Integer), destination As Span(Of Char), ByRef idsConsumed As Integer, ByRef charsWritten As Integer) As OperationStatus" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; * Span&lt;char&gt; * int * int -&gt; System.Buffers.OperationStatus" Usage="sentencePieceTokenizer.Decode (ids, destination, idsConsumed, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="idsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="destination">The span to store the decoded text.</param>
        <param name="idsConsumed">The number of ids consumed during the decoding.</param>
        <param name="charsWritten">The number of characters written to the destination span.</param>
        <summary>
            Decode the given ids back to text and store the result in the <paramref name="destination" /> span.
            </summary>
        <returns>The operation status indicates whether all IDs were successfully decoded or if the <paramref name="destination" /> is too small to contain the entire decoded result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public System.Buffers.OperationStatus Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, Span&lt;char&gt; destination, bool considerSpecialTokens, out int idsConsumed, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.OperationStatus Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, valuetype System.Span`1&lt;char&gt; destination, bool considerSpecialTokens, [out] int32&amp; idsConsumed, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Span{System.Char},System.Boolean,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decode (ids As IEnumerable(Of Integer), destination As Span(Of Char), considerSpecialTokens As Boolean, ByRef idsConsumed As Integer, ByRef charsWritten As Integer) As OperationStatus" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; * Span&lt;char&gt; * bool * int * int -&gt; System.Buffers.OperationStatus" Usage="sentencePieceTokenizer.Decode (ids, destination, considerSpecialTokens, idsConsumed, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" />
        <Parameter Name="idsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="destination">The span to store the decoded text.</param>
        <param name="considerSpecialTokens">Indicate whether to consider special tokens during decoding.</param>
        <param name="idsConsumed">The number of ids consumed during the decoding.</param>
        <param name="charsWritten">The number of characters written to the destination span.</param>
        <summary>
            Decode the given ids back to text and store the result in the <paramref name="destination" /> span.
            </summary>
        <returns>The operation status indicates whether all IDs were successfully decoded or if the <paramref name="destination" /> is too small to contain the entire decoded result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="protected override Microsoft.ML.Tokenizers.EncodeResults&lt;int&gt; EncodeToIds (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype Microsoft.ML.Tokenizers.EncodeResults`1&lt;int32&gt; EncodeToIds(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.EncodeToIds(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EncodeToIds (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As EncodeResults(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; Microsoft.ML.Tokenizers.EncodeResults&lt;int&gt;" Usage="sentencePieceTokenizer.EncodeToIds (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EncodeResults&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The encoded results containing the list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (ReadOnlySpan&lt;char&gt; text, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.EncodeToIds(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As ReadOnlySpan(Of Char), addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : ReadOnlySpan&lt;char&gt; * bool * bool * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="sentencePieceTokenizer.EncodeToIds (text, addBeginningOfSentence, addEndOfSentence, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (string text, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(string text, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.EncodeToIds(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As String, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : string * bool * bool * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="sentencePieceTokenizer.EncodeToIds (text, addBeginningOfSentence, addEndOfSentence, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (ReadOnlySpan&lt;char&gt; text, bool addBeginningOfSentence, bool addEndOfSentence, int maxTokenCount, out string? normalizedText, out int charsConsumed, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool addBeginningOfSentence, bool addEndOfSentence, int32 maxTokenCount, [out] string&amp; normalizedText, [out] int32&amp; charsConsumed, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.EncodeToIds(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As ReadOnlySpan(Of Char), addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, maxTokenCount As Integer, ByRef normalizedText As String, ByRef charsConsumed As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : ReadOnlySpan&lt;char&gt; * bool * bool * int * string * int * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="sentencePieceTokenizer.EncodeToIds (text, addBeginningOfSentence, addEndOfSentence, maxTokenCount, normalizedText, charsConsumed, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="maxTokenCount">The maximum number of tokens to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is false, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to null.</param>
        <param name="charsConsumed">The length of the text that encompasses the maximum encoded tokens.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids up to maximum number of tokens.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (string text, bool addBeginningOfSentence, bool addEndOfSentence, int maxTokenCount, out string? normalizedText, out int charsConsumed, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(string text, bool addBeginningOfSentence, bool addEndOfSentence, int32 maxTokenCount, [out] string&amp; normalizedText, [out] int32&amp; charsConsumed, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.EncodeToIds(System.String,System.Boolean,System.Boolean,System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As String, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, maxTokenCount As Integer, ByRef normalizedText As String, ByRef charsConsumed As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : string * bool * bool * int * string * int * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="sentencePieceTokenizer.EncodeToIds (text, addBeginningOfSentence, addEndOfSentence, maxTokenCount, normalizedText, charsConsumed, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="maxTokenCount">The maximum number of tokens to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is false, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to null.</param>
        <param name="charsConsumed">The length of the text that encompasses the maximum encoded tokens.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids up to maximum number of tokens.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToTokens">
      <MemberSignature Language="C#" Value="protected override Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype Microsoft.ML.Tokenizers.EncodeResults`1&lt;valuetype Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.EncodeToTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EncodeToTokens (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As EncodeResults(Of EncodedToken)" />
      <MemberSignature Language="F#" Value="override this.EncodeToTokens : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;" Usage="sentencePieceTokenizer.EncodeToTokens (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Encodes input text to a list of <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens (ReadOnlySpan&lt;char&gt; text, out string? normalizedText, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens(valuetype System.ReadOnlySpan`1&lt;char&gt; text, [out] string&amp; normalizedText, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.EncodeToTokens(System.ReadOnlySpan{System.Char},System.String@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToTokens (text As ReadOnlySpan(Of Char), ByRef normalizedText As String, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of EncodedToken)" />
      <MemberSignature Language="F#" Value="override this.EncodeToTokens : ReadOnlySpan&lt;char&gt; * string * bool * bool * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;" Usage="sentencePieceTokenizer.EncodeToTokens (text, normalizedText, addBeginningOfSentence, addEndOfSentence, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is false, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to null.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text a list of <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s with string value of the token, id, and offset.
            </summary>
        <returns>The tokenization result includes a list of <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s with string value of the token, id, and offset.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens (string text, out string? normalizedText, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens(string text, [out] string&amp; normalizedText, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.EncodeToTokens(System.String,System.String@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToTokens (text As String, ByRef normalizedText As String, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of EncodedToken)" />
      <MemberSignature Language="F#" Value="override this.EncodeToTokens : string * string * bool * bool * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;" Usage="sentencePieceTokenizer.EncodeToTokens (text, normalizedText, addBeginningOfSentence, addEndOfSentence, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is false, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to null.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text a list of <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s with string value of the token, id, and offset.
            </summary>
        <returns>The tokenization result includes a list of <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s with string value of the token, id, and offset.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfSentenceId">
      <MemberSignature Language="C#" Value="public int EndOfSentenceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EndOfSentenceId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.EndOfSentenceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfSentenceId As Integer" />
      <MemberSignature Language="F#" Value="member this.EndOfSentenceId : int" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.EndOfSentenceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The id of the end of sentence token.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfSentenceToken">
      <MemberSignature Language="C#" Value="public string EndOfSentenceToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EndOfSentenceToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.EndOfSentenceToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfSentenceToken As String" />
      <MemberSignature Language="F#" Value="member this.EndOfSentenceToken : string" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.EndOfSentenceToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The end of sentence token.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EscapeWhiteSpaces">
      <MemberSignature Language="C#" Value="public bool EscapeWhiteSpaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EscapeWhiteSpaces" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.EscapeWhiteSpaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EscapeWhiteSpaces As Boolean" />
      <MemberSignature Language="F#" Value="member this.EscapeWhiteSpaces : bool" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.EscapeWhiteSpaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicate if the spaces should be replaced with character U+2581 during the normalization and encoding.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCount">
      <MemberSignature Language="C#" Value="protected override int GetIndexByTokenCount (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings, bool fromEnd, out string? normalizedText, out int tokenCount);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 GetIndexByTokenCount(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings, bool fromEnd, [out] string&amp; normalizedText, [out] int32&amp; tokenCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.GetIndexByTokenCount(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings,System.Boolean,System.String@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetIndexByTokenCount (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings, fromEnd As Boolean, ByRef normalizedText As String, ByRef tokenCount As Integer) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCount : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings * bool * string * int -&gt; int" Usage="sentencePieceTokenizer.GetIndexByTokenCount (text, textSpan, settings, fromEnd, normalizedText, tokenCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
        <Parameter Name="fromEnd" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <param name="fromEnd">Indicate whether to find the index from the end of the text.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="settings" /> has <see cref="P:Microsoft.ML.Tokenizers.EncodeSettings.ConsiderNormalization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <summary>
            Find the index of the maximum encoding capacity without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            If <paramRef name="fromEnd" /> is <see langword="false" />, it represents the index immediately following the last character to be included. In cases where no tokens fit, the result will be 0; conversely,
            if all tokens fit, the result will be length of the input text or the <paramref name="normalizedText" /> if the normalization is enabled.
            If <paramRef name="fromEnd" /> is <see langword="true" />, it represents the index of the first character to be included. In cases where no tokens fit, the result will be the text length; conversely,
            if all tokens fit, the result will be zero.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCount">
      <MemberSignature Language="C#" Value="public int GetIndexByTokenCount (ReadOnlySpan&lt;char&gt; text, bool addBeginningOfSentence, bool addEndOfSentence, int maxTokenCount, out string? normalizedText, out int tokenCount, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetIndexByTokenCount(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool addBeginningOfSentence, bool addEndOfSentence, int32 maxTokenCount, [out] string&amp; normalizedText, [out] int32&amp; tokenCount, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.GetIndexByTokenCount(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexByTokenCount (text As ReadOnlySpan(Of Char), addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, maxTokenCount As Integer, ByRef normalizedText As String, ByRef tokenCount As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCount : ReadOnlySpan&lt;char&gt; * bool * bool * int * string * int * bool * bool -&gt; int" Usage="sentencePieceTokenizer.GetIndexByTokenCount (text, addBeginningOfSentence, addEndOfSentence, maxTokenCount, normalizedText, tokenCount, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="maxTokenCount">The maximum token count to limit the encoding capacity.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is false, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to null.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Find the index of the maximum encoding capacity from the start within the text without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index immediately following the last character to be included. In cases where no tokens fit, the result will be 0; conversely,
            if all tokens fit, the result will be length of the text or the <paramref name="normalizedText" /> if the normalization is enabled.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCount">
      <MemberSignature Language="C#" Value="public int GetIndexByTokenCount (string text, bool addBeginningOfSentence, bool addEndOfSentence, int maxTokenCount, out string? normalizedText, out int tokenCount, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetIndexByTokenCount(string text, bool addBeginningOfSentence, bool addEndOfSentence, int32 maxTokenCount, [out] string&amp; normalizedText, [out] int32&amp; tokenCount, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.GetIndexByTokenCount(System.String,System.Boolean,System.Boolean,System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexByTokenCount (text As String, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, maxTokenCount As Integer, ByRef normalizedText As String, ByRef tokenCount As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCount : string * bool * bool * int * string * int * bool * bool -&gt; int" Usage="sentencePieceTokenizer.GetIndexByTokenCount (text, addBeginningOfSentence, addEndOfSentence, maxTokenCount, normalizedText, tokenCount, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="maxTokenCount">The maximum token count to limit the encoding capacity.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is false, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to null.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Find the index of the maximum encoding capacity from the start within the text without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index immediately following the last character to be included. In cases where no tokens fit, the result will be 0; conversely,
            if all tokens fit, the result will be length of the text or the <paramref name="normalizedText" /> if the normalization is enabled.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCountFromEnd">
      <MemberSignature Language="C#" Value="public int GetIndexByTokenCountFromEnd (ReadOnlySpan&lt;char&gt; text, bool addBeginningOfSentence, bool addEndOfSentence, int maxTokenCount, bool considerNormalization, out string? normalizedText, out int tokenCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetIndexByTokenCountFromEnd(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool addBeginningOfSentence, bool addEndOfSentence, int32 maxTokenCount, bool considerNormalization, [out] string&amp; normalizedText, [out] int32&amp; tokenCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.GetIndexByTokenCountFromEnd(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Int32,System.Boolean,System.String@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexByTokenCountFromEnd (text As ReadOnlySpan(Of Char), addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, maxTokenCount As Integer, considerNormalization As Boolean, ByRef normalizedText As String, ByRef tokenCount As Integer) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCountFromEnd : ReadOnlySpan&lt;char&gt; * bool * bool * int * bool * string * int -&gt; int" Usage="sentencePieceTokenizer.GetIndexByTokenCountFromEnd (text, addBeginningOfSentence, addEndOfSentence, maxTokenCount, considerNormalization, normalizedText, tokenCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <param name="maxTokenCount">The maximum token count to limit the encoding capacity.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is false, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to null.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <summary>
            Find the index of the maximum encoding capacity from the end within the text without surpassing the token limit.
            </summary>
        <returns>
            The start index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index at the first character to be included. In cases where no tokens fit, the result will be length of the <paramref name="normalizedText" />; conversely, if all tokens fit, the result will be 0.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCountFromEnd">
      <MemberSignature Language="C#" Value="public int GetIndexByTokenCountFromEnd (string text, bool addBeginningOfSentence, bool addEndOfSentence, int maxTokenCount, bool considerNormalization, out string? normalizedText, out int tokenCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetIndexByTokenCountFromEnd(string text, bool addBeginningOfSentence, bool addEndOfSentence, int32 maxTokenCount, bool considerNormalization, [out] string&amp; normalizedText, [out] int32&amp; tokenCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.SentencePieceTokenizer.GetIndexByTokenCountFromEnd(System.String,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.String@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexByTokenCountFromEnd (text As String, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, maxTokenCount As Integer, considerNormalization As Boolean, ByRef normalizedText As String, ByRef tokenCount As Integer) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCountFromEnd : string * bool * bool * int * bool * string * int -&gt; int" Usage="sentencePieceTokenizer.GetIndexByTokenCountFromEnd (text, addBeginningOfSentence, addEndOfSentence, maxTokenCount, considerNormalization, normalizedText, tokenCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addBeginningOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <param name="maxTokenCount">The maximum token count to limit the encoding capacity.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is false, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to null.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <summary>
            Find the index of the maximum encoding capacity from the end within the text without surpassing the token limit.
            </summary>
        <returns>
            The start index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index at the first character to be included. In cases where no tokens fit, the result will be length of the <paramref name="normalizedText" />; conversely, if all tokens fit, the result will be 0.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Normalizer">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Tokenizers.Normalizer? Normalizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.Normalizer Normalizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.Normalizer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Normalizer As Normalizer" />
      <MemberSignature Language="F#" Value="member this.Normalizer : Microsoft.ML.Tokenizers.Normalizer" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.Normalizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Normalizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Normalizer in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreTokenizer">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Tokenizers.PreTokenizer? PreTokenizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.PreTokenizer PreTokenizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.PreTokenizer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PreTokenizer As PreTokenizer" />
      <MemberSignature Language="F#" Value="member this.PreTokenizer : Microsoft.ML.Tokenizers.PreTokenizer" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.PreTokenizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.PreTokenizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the PreTokenizer used by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecialTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? SpecialTokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; SpecialTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.SpecialTokens" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpecialTokens As IReadOnlyDictionary(Of String, Integer)" />
      <MemberSignature Language="F#" Value="member this.SpecialTokens : System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt;" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.SpecialTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The special tokens.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TreatWhitespaceAsSuffix">
      <MemberSignature Language="C#" Value="public bool TreatWhitespaceAsSuffix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TreatWhitespaceAsSuffix" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.TreatWhitespaceAsSuffix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TreatWhitespaceAsSuffix As Boolean" />
      <MemberSignature Language="F#" Value="member this.TreatWhitespaceAsSuffix : bool" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.TreatWhitespaceAsSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicate emitting the character U+2581 at the end of the last sentence token instead beginning of sentence token during the normalization and encoding.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownId">
      <MemberSignature Language="C#" Value="public int UnknownId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UnknownId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.UnknownId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnknownId As Integer" />
      <MemberSignature Language="F#" Value="member this.UnknownId : int" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.UnknownId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The id of the unknown token.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownToken">
      <MemberSignature Language="C#" Value="public string UnknownToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UnknownToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.UnknownToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnknownToken As String" />
      <MemberSignature Language="F#" Value="member this.UnknownToken : string" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.UnknownToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The unknown token.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Vocabulary">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt; Vocabulary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; Vocabulary" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.SentencePieceTokenizer.Vocabulary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Vocabulary As IReadOnlyDictionary(Of String, Integer)" />
      <MemberSignature Language="F#" Value="member this.Vocabulary : System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt;" Usage="Microsoft.ML.Tokenizers.SentencePieceTokenizer.Vocabulary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The vocabulary of the model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
