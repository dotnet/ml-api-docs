<Type Name="Model" FullName="Microsoft.ML.Tokenizers.Model">
  <TypeSignature Language="C#" Value="public abstract class Model" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Model extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.Model" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Model" />
  <TypeSignature Language="F#" Value="type Model = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents a model used during Tokenization (like BPE or Word Piece or Unigram).
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Model ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="public virtual int CountTokens (ReadOnlySpan&lt;char&gt; text, bool isSpecialToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CountTokens(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool isSpecialToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.CountTokens(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CountTokens (text As ReadOnlySpan(Of Char), isSpecialToken As Boolean) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CountTokens : ReadOnlySpan&lt;char&gt; * bool -&gt; int&#xA;override this.CountTokens : ReadOnlySpan&lt;char&gt; * bool -&gt; int" Usage="model.CountTokens (text, isSpecialToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="isSpecialToken" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode. If the value of the parameter <paramref name="isSpecialToken" /> is true, the entire text will be treated as a special token.</param>
        <param name="isSpecialToken">Specifies whether the entire <paramref name="text" /> is considered a special token.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of tokens that the input text will be encoded to.</returns>
        <remarks>
            This method does the default implementation that uses the EncodeToIds method to get the number of token's Ids.
            Tokenizer's models which care about performance may choose to override this method to provide a more efficient implementation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public virtual string? Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, Microsoft.ML.Tokenizers.TokenizerDecoder? decoder = default, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, class Microsoft.ML.Tokenizers.TokenizerDecoder decoder, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.Decode(System.Collections.Generic.IEnumerable{System.Int32},Microsoft.ML.Tokenizers.TokenizerDecoder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Decode (ids As IEnumerable(Of Integer), Optional decoder As TokenizerDecoder = Nothing, Optional considerSpecialTokens As Boolean = true) As String" />
      <MemberSignature Language="F#" Value="abstract member Decode : seq&lt;int&gt; * Microsoft.ML.Tokenizers.TokenizerDecoder * bool -&gt; string&#xA;override this.Decode : seq&lt;int&gt; * Microsoft.ML.Tokenizers.TokenizerDecoder * bool -&gt; string" Usage="model.Decode (ids, decoder, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="decoder" Type="Microsoft.ML.Tokenizers.TokenizerDecoder" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="2" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="considerSpecialTokens">Whether the special tokens should be kept in the decoded string.</param>
        <param name="decoder">The optional Decoder to merge the given list of tokens in a string.</param>
        <summary>
            Decode the given ids, back to a String.
            </summary>
        <returns>The decoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt; Encode (string text, bool isSpecialToken = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.ML.Tokenizers.Token&gt; Encode(string text, bool isSpecialToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.Encode(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Encode (text As String, Optional isSpecialToken As Boolean = false) As IReadOnlyList(Of Token)" />
      <MemberSignature Language="F#" Value="abstract member Encode : string * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt;" Usage="model.Encode (text, isSpecialToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="isSpecialToken" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode. If the value of the parameter <paramref name="isSpecialToken" /> is true, the entire text will be treated as a special token.</param>
        <param name="isSpecialToken">Specifies whether the entire <paramref name="text" /> is considered a special token.</param>
        <summary>
            Encode a text to a list of tokens.
            </summary>
        <returns>The list of tokens generated from the text tokenization.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public virtual void EncodeToIds (ReadOnlySpan&lt;char&gt; text, bool isSpecialToken, System.Collections.Generic.IList&lt;int&gt; accumulatedIds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool isSpecialToken, class System.Collections.Generic.IList`1&lt;int32&gt; accumulatedIds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.EncodeToIds(System.ReadOnlySpan{System.Char},System.Boolean,System.Collections.Generic.IList{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EncodeToIds (text As ReadOnlySpan(Of Char), isSpecialToken As Boolean, accumulatedIds As IList(Of Integer))" />
      <MemberSignature Language="F#" Value="abstract member EncodeToIds : ReadOnlySpan&lt;char&gt; * bool * System.Collections.Generic.IList&lt;int&gt; -&gt; unit&#xA;override this.EncodeToIds : ReadOnlySpan&lt;char&gt; * bool * System.Collections.Generic.IList&lt;int&gt; -&gt; unit" Usage="model.EncodeToIds (text, isSpecialToken, accumulatedIds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="isSpecialToken" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="accumulatedIds" Type="System.Collections.Generic.IList&lt;System.Int32&gt;" Index="2" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode. If the value of the parameter <paramref name="isSpecialToken" /> is true, the entire text will be treated as a special token.</param>
        <param name="isSpecialToken">Specifies whether the entire <paramref name="text" /> is considered a special token.</param>
        <param name="accumulatedIds">The list of accumulated encoded Ids.</param>
        <summary>
            Encode a text to a list of Ids and add them to the accumulatedIds list.
            </summary>
        <remarks>
            This method does the default implementation that uses the Encode method to get the token's Ids.
            Tokenizer's models which care about performance may choose to override this method to provide a more efficient implementation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTrainer">
      <MemberSignature Language="C#" Value="public abstract Microsoft.ML.Tokenizers.Trainer? GetTrainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Tokenizers.Trainer GetTrainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.GetTrainer" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTrainer () As Trainer" />
      <MemberSignature Language="F#" Value="abstract member GetTrainer : unit -&gt; Microsoft.ML.Tokenizers.Trainer" Usage="model.GetTrainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Trainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a trainer object to use in training the model.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVocab">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt; GetVocab ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; GetVocab() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.GetVocab" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetVocab () As IReadOnlyDictionary(Of String, Integer)" />
      <MemberSignature Language="F#" Value="abstract member GetVocab : unit -&gt; System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt;" Usage="model.GetVocab " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the dictionary mapping tokens to Ids.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVocabSize">
      <MemberSignature Language="C#" Value="public abstract int GetVocabSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetVocabSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.GetVocabSize" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetVocabSize () As Integer" />
      <MemberSignature Language="F#" Value="abstract member GetVocabSize : unit -&gt; int" Usage="model.GetVocabSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the dictionary size that map tokens to Ids.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdToString">
      <MemberSignature Language="C#" Value="public abstract string? IdToString (int id, bool skipSpecialTokens = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string IdToString(int32 id, bool skipSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.IdToString(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IdToString (id As Integer, Optional skipSpecialTokens As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="abstract member IdToString : int * bool -&gt; string" Usage="model.IdToString (id, skipSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" Index="0" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="skipSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <param name="skipSpecialTokens">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdToToken">
      <MemberSignature Language="C#" Value="public abstract string? IdToToken (int id, bool skipSpecialTokens = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string IdToToken(int32 id, bool skipSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.IdToToken(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IdToToken (id As Integer, Optional skipSpecialTokens As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="abstract member IdToToken : int * bool -&gt; string" Usage="model.IdToToken (id, skipSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="skipSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="id">The Id to map to the token.</param>
        <param name="skipSpecialTokens">Indicate if want to skip the special tokens during the decoding.</param>
        <summary>
            Map the tokenized Id to the token.
            </summary>
        <returns>The mapped token of the Id.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidChar">
      <MemberSignature Language="C#" Value="public abstract bool IsValidChar (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidChar(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.IsValidChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsValidChar (ch As Char) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsValidChar : char -&gt; bool" Usage="model.IsValidChar ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="ch" />
        <summary>
            Return true if the char is valid in the tokenizer; otherwise return false.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapIdToToken">
      <MemberSignature Language="C#" Value="public abstract string? MapIdToToken (int id, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string MapIdToToken(int32 id, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.MapIdToToken(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MapIdToToken (id As Integer, Optional considerSpecialTokens As Boolean = true) As String" />
      <MemberSignature Language="F#" Value="abstract member MapIdToToken : int * bool -&gt; string" Usage="model.MapIdToToken (id, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="id">The Id to map to the token.</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the decoding.</param>
        <summary>
            Map the encoded Id to the token.
            </summary>
        <returns>The mapped token of the Id.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapTokenToId">
      <MemberSignature Language="C#" Value="public abstract int? MapTokenToId (ReadOnlySpan&lt;char&gt; token, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;int32&gt; MapTokenToId(valuetype System.ReadOnlySpan`1&lt;char&gt; token, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.MapTokenToId(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MapTokenToId (token As ReadOnlySpan(Of Char), Optional considerSpecialTokens As Boolean = true) As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="abstract member MapTokenToId : ReadOnlySpan&lt;char&gt; * bool -&gt; Nullable&lt;int&gt;" Usage="model.MapTokenToId (token, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="token">The token to map to Id</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the encoding.</param>
        <summary>
            Map the token to encoded id with the option to skip the special tokens.
            </summary>
        <returns>The mapped Id of the token.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public abstract string[] Save (string path, string? prefix = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] Save(string path, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.Save(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Save (path As String, Optional prefix As String = Nothing) As String()" />
      <MemberSignature Language="F#" Value="abstract member Save : string * string -&gt; string[]" Usage="model.Save (path, prefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="prefix" Type="System.String" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="path">The file system path to store the generated files at.</param>
        <param name="prefix">Optional prefix for the generated file names.</param>
        <summary>
            Save the model data into the vocabulary and merges files.
            </summary>
        <returns>The list of all saved files.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tokenize">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt; Tokenize (string sequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.ML.Tokenizers.Token&gt; Tokenize(string sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.Tokenize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Tokenize (sequence As String) As IReadOnlyList(Of Token)" />
      <MemberSignature Language="F#" Value="abstract member Tokenize : string -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt;" Usage="model.Tokenize sequence" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="sequence">The sequence to tokenize.</param>
        <summary>
            Tokenize a sequence string to a list of tokens.
            </summary>
        <returns>The list of tokens generated from the sequence tokenization.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenToId">
      <MemberSignature Language="C#" Value="public abstract int? TokenToId (string token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;int32&gt; TokenToId(string token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Model.TokenToId(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TokenToId (token As String) As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="abstract member TokenToId : string -&gt; Nullable&lt;int&gt;" Usage="model.TokenToId token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="token">The token to map to the Id.</param>
        <summary>
            Map the token to tokenized Id.
            </summary>
        <returns>The mapped Id of the token.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
