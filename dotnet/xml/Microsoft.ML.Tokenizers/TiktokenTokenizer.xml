<Type Name="TiktokenTokenizer" FullName="Microsoft.ML.Tokenizers.TiktokenTokenizer">
  <TypeSignature Language="C#" Value="public sealed class TiktokenTokenizer : Microsoft.ML.Tokenizers.Tokenizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TiktokenTokenizer extends Microsoft.ML.Tokenizers.Tokenizer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.TiktokenTokenizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TiktokenTokenizer&#xA;Inherits Tokenizer" />
  <TypeSignature Language="F#" Value="type TiktokenTokenizer = class&#xA;    inherit Tokenizer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Tokenizers.Tokenizer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represent the rapid Byte Pair Encoding tokenizer.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="protected override int CountTokens (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 CountTokens(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.CountTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CountTokens (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As Integer" />
      <MemberSignature Language="F#" Value="override this.CountTokens : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; int" Usage="tiktokenTokenizer.CountTokens (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of token Ids that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.TiktokenTokenizer Create (System.IO.Stream vocabStream, Microsoft.ML.Tokenizers.PreTokenizer? preTokenizer, Microsoft.ML.Tokenizers.Normalizer? normalizer, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? specialTokens = default, int cacheSize = 8192);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.TiktokenTokenizer Create(class System.IO.Stream vocabStream, class Microsoft.ML.Tokenizers.PreTokenizer preTokenizer, class Microsoft.ML.Tokenizers.Normalizer normalizer, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; specialTokens, int32 cacheSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.Create(System.IO.Stream,Microsoft.ML.Tokenizers.PreTokenizer,Microsoft.ML.Tokenizers.Normalizer,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (vocabStream As Stream, preTokenizer As PreTokenizer, normalizer As Normalizer, Optional specialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192) As TiktokenTokenizer" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * Microsoft.ML.Tokenizers.PreTokenizer * Microsoft.ML.Tokenizers.Normalizer * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int -&gt; Microsoft.ML.Tokenizers.TiktokenTokenizer" Usage="Microsoft.ML.Tokenizers.TiktokenTokenizer.Create (vocabStream, preTokenizer, normalizer, specialTokens, cacheSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.TiktokenTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabStream" Type="System.IO.Stream" />
        <Parameter Name="preTokenizer" Type="Microsoft.ML.Tokenizers.PreTokenizer" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
        <Parameter Name="specialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="cacheSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="vocabStream">The stream to the BPE vocab file.</param>
        <param name="preTokenizer">The pre-tokenizer to use.</param>
        <param name="normalizer">The normalizer to use.</param>
        <param name="specialTokens">The dictionary mapping special tokens to Ids.</param>
        <param name="cacheSize">The size of the cache to use.</param>
        <summary>
            Create a new Tiktoken tokenizer's object.
            </summary>
        <returns>The tokenizer's object.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary stream is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.TiktokenTokenizer Create (string vocabFilePath, Microsoft.ML.Tokenizers.PreTokenizer? preTokenizer, Microsoft.ML.Tokenizers.Normalizer? normalizer, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? specialTokens = default, int cacheSize = 8192);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.TiktokenTokenizer Create(string vocabFilePath, class Microsoft.ML.Tokenizers.PreTokenizer preTokenizer, class Microsoft.ML.Tokenizers.Normalizer normalizer, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; specialTokens, int32 cacheSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.Create(System.String,Microsoft.ML.Tokenizers.PreTokenizer,Microsoft.ML.Tokenizers.Normalizer,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (vocabFilePath As String, preTokenizer As PreTokenizer, normalizer As Normalizer, Optional specialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192) As TiktokenTokenizer" />
      <MemberSignature Language="F#" Value="static member Create : string * Microsoft.ML.Tokenizers.PreTokenizer * Microsoft.ML.Tokenizers.Normalizer * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int -&gt; Microsoft.ML.Tokenizers.TiktokenTokenizer" Usage="Microsoft.ML.Tokenizers.TiktokenTokenizer.Create (vocabFilePath, preTokenizer, normalizer, specialTokens, cacheSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.TiktokenTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabFilePath" Type="System.String" />
        <Parameter Name="preTokenizer" Type="Microsoft.ML.Tokenizers.PreTokenizer" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
        <Parameter Name="specialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="cacheSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="vocabFilePath">The BPE vocab file.</param>
        <param name="preTokenizer">The pre-tokenizer to use.</param>
        <param name="normalizer">The normalizer to use.</param>
        <param name="specialTokens">The dictionary mapping special tokens to Ids.</param>
        <param name="cacheSize">The size of the cache to use.</param>
        <summary>
            Create a new Tiktoken tokenizer's object.
            </summary>
        <returns>The tokenizer's object.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary file is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.TiktokenTokenizer&gt; CreateAsync (System.IO.Stream vocabStream, Microsoft.ML.Tokenizers.PreTokenizer? preTokenizer, Microsoft.ML.Tokenizers.Normalizer? normalizer, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? specialTokens = default, int cacheSize = 8192, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ML.Tokenizers.TiktokenTokenizer&gt; CreateAsync(class System.IO.Stream vocabStream, class Microsoft.ML.Tokenizers.PreTokenizer preTokenizer, class Microsoft.ML.Tokenizers.Normalizer normalizer, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; specialTokens, int32 cacheSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateAsync(System.IO.Stream,Microsoft.ML.Tokenizers.PreTokenizer,Microsoft.ML.Tokenizers.Normalizer,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAsync (vocabStream As Stream, preTokenizer As PreTokenizer, normalizer As Normalizer, Optional specialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TiktokenTokenizer)" />
      <MemberSignature Language="F#" Value="static member CreateAsync : System.IO.Stream * Microsoft.ML.Tokenizers.PreTokenizer * Microsoft.ML.Tokenizers.Normalizer * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.TiktokenTokenizer&gt;" Usage="Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateAsync (vocabStream, preTokenizer, normalizer, specialTokens, cacheSize, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.TiktokenTokenizer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabStream" Type="System.IO.Stream" />
        <Parameter Name="preTokenizer" Type="Microsoft.ML.Tokenizers.PreTokenizer" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
        <Parameter Name="specialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="cacheSize" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vocabStream">The stream to the BPE vocab file.</param>
        <param name="preTokenizer">The pre-tokenizer to use.</param>
        <param name="normalizer">The normalizer to use.</param>
        <param name="specialTokens">The dictionary mapping special tokens to Ids.</param>
        <param name="cacheSize">The size of the cache to use.</param>
        <param name="cancellationToken">
          <see cref="T:System.Threading.CancellationToken" /> used to request cancellation of the operation.</param>
        <summary>
            Create a new Tiktoken tokenizer's object asynchronously.
            </summary>
        <returns>The tokenizer's object.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary stream is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.TiktokenTokenizer&gt; CreateAsync (string vocabFilePath, Microsoft.ML.Tokenizers.PreTokenizer? preTokenizer, Microsoft.ML.Tokenizers.Normalizer? normalizer, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? specialTokens = default, int cacheSize = 8192, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ML.Tokenizers.TiktokenTokenizer&gt; CreateAsync(string vocabFilePath, class Microsoft.ML.Tokenizers.PreTokenizer preTokenizer, class Microsoft.ML.Tokenizers.Normalizer normalizer, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; specialTokens, int32 cacheSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateAsync(System.String,Microsoft.ML.Tokenizers.PreTokenizer,Microsoft.ML.Tokenizers.Normalizer,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAsync (vocabFilePath As String, preTokenizer As PreTokenizer, normalizer As Normalizer, Optional specialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TiktokenTokenizer)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="F#" Value="static member CreateAsync : string * Microsoft.ML.Tokenizers.PreTokenizer * Microsoft.ML.Tokenizers.Normalizer * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.TiktokenTokenizer&gt;" Usage="Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateAsync (vocabFilePath, preTokenizer, normalizer, specialTokens, cacheSize, cancellationToken)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.TiktokenTokenizer&gt; CreateAsync (string vocabFilePath, Microsoft.ML.Tokenizers.PreTokenizer? preTokenizer, Microsoft.ML.Tokenizers.Normalizer? normalizer, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? specialTokensEncoder = default, int cacheSize = 8192, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ML.Tokenizers.TiktokenTokenizer&gt; CreateAsync(string vocabFilePath, class Microsoft.ML.Tokenizers.PreTokenizer preTokenizer, class Microsoft.ML.Tokenizers.Normalizer normalizer, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; specialTokensEncoder, int32 cacheSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAsync (vocabFilePath As String, preTokenizer As PreTokenizer, normalizer As Normalizer, Optional specialTokensEncoder As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TiktokenTokenizer)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="static member CreateAsync : string * Microsoft.ML.Tokenizers.PreTokenizer * Microsoft.ML.Tokenizers.Normalizer * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.TiktokenTokenizer&gt;" Usage="Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateAsync (vocabFilePath, preTokenizer, normalizer, specialTokensEncoder, cacheSize, cancellationToken)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.TiktokenTokenizer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabFilePath" Type="System.String" Index="0" />
        <Parameter Name="preTokenizer" Type="Microsoft.ML.Tokenizers.PreTokenizer" Index="1" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" Index="2" />
        <Parameter Name="specialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="specialTokensEncoder" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" Index="3" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="cacheSize" Type="System.Int32" Index="4" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" />
      </Parameters>
      <Docs>
        <param name="vocabFilePath">The BPE vocab file.</param>
        <param name="preTokenizer">The pre-tokenizer to use.</param>
        <param name="normalizer">The normalizer to use.</param>
        <param name="specialTokens">The dictionary mapping special tokens to Ids.</param>
        <param name="specialTokensEncoder">To be added.</param>
        <param name="cacheSize">The size of the cache to use.</param>
        <param name="cancellationToken">
          <see cref="T:System.Threading.CancellationToken" /> used to request cancellation of the operation.</param>
        <summary>
            Create a new Tiktoken tokenizer's object asynchronously.
            </summary>
        <returns>The tokenizer's object.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary file is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForEncoding">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.TiktokenTokenizer CreateForEncoding (string encodingName, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? extraSpecialTokens = default, Microsoft.ML.Tokenizers.Normalizer? normalizer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.TiktokenTokenizer CreateForEncoding(string encodingName, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; extraSpecialTokens, class Microsoft.ML.Tokenizers.Normalizer normalizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateForEncoding(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},Microsoft.ML.Tokenizers.Normalizer)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateForEncoding (encodingName As String, Optional extraSpecialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional normalizer As Normalizer = Nothing) As TiktokenTokenizer" />
      <MemberSignature Language="F#" Value="static member CreateForEncoding : string * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * Microsoft.ML.Tokenizers.Normalizer -&gt; Microsoft.ML.Tokenizers.TiktokenTokenizer" Usage="Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateForEncoding (encodingName, extraSpecialTokens, normalizer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.TiktokenTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodingName" Type="System.String" />
        <Parameter Name="extraSpecialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
      </Parameters>
      <Docs>
        <param name="encodingName">Encoding name</param>
        <param name="extraSpecialTokens">Extra special tokens other than the built-in ones for the encoding</param>
        <param name="normalizer">To normalize the text before tokenization</param>
        <summary>
            Create tokenizer based on encoding name
            </summary>
        <returns>The tokenizer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForModel">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.TiktokenTokenizer CreateForModel (string modelName, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? extraSpecialTokens = default, Microsoft.ML.Tokenizers.Normalizer? normalizer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.TiktokenTokenizer CreateForModel(string modelName, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; extraSpecialTokens, class Microsoft.ML.Tokenizers.Normalizer normalizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateForModel(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},Microsoft.ML.Tokenizers.Normalizer)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateForModel (modelName As String, Optional extraSpecialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional normalizer As Normalizer = Nothing) As TiktokenTokenizer" />
      <MemberSignature Language="F#" Value="static member CreateForModel : string * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * Microsoft.ML.Tokenizers.Normalizer -&gt; Microsoft.ML.Tokenizers.TiktokenTokenizer" Usage="Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateForModel (modelName, extraSpecialTokens, normalizer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.TiktokenTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelName" Type="System.String" />
        <Parameter Name="extraSpecialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
      </Parameters>
      <Docs>
        <param name="modelName">Model name</param>
        <param name="extraSpecialTokens">Extra special tokens other than the built-in ones for the model</param>
        <param name="normalizer">To normalize the text before tokenization</param>
        <summary>
            Create tokenizer based on model name
            </summary>
        <returns>The tokenizer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForModel">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.TiktokenTokenizer CreateForModel (string modelName, System.IO.Stream vocabStream, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? extraSpecialTokens = default, int cacheSize = 8192, Microsoft.ML.Tokenizers.Normalizer? normalizer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.TiktokenTokenizer CreateForModel(string modelName, class System.IO.Stream vocabStream, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; extraSpecialTokens, int32 cacheSize, class Microsoft.ML.Tokenizers.Normalizer normalizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateForModel(System.String,System.IO.Stream,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.Int32,Microsoft.ML.Tokenizers.Normalizer)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateForModel (modelName As String, vocabStream As Stream, Optional extraSpecialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192, Optional normalizer As Normalizer = Nothing) As TiktokenTokenizer" />
      <MemberSignature Language="F#" Value="static member CreateForModel : string * System.IO.Stream * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int * Microsoft.ML.Tokenizers.Normalizer -&gt; Microsoft.ML.Tokenizers.TiktokenTokenizer" Usage="Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateForModel (modelName, vocabStream, extraSpecialTokens, cacheSize, normalizer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.TiktokenTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelName" Type="System.String" />
        <Parameter Name="vocabStream" Type="System.IO.Stream" />
        <Parameter Name="extraSpecialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="cacheSize" Type="System.Int32" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
      </Parameters>
      <Docs>
        <param name="modelName">Model name</param>
        <param name="vocabStream">The stream to the BPE vocab file.</param>
        <param name="extraSpecialTokens">Extra special tokens other than the built-in ones for the model</param>
        <param name="cacheSize">The size of the cache to use.</param>
        <param name="normalizer">To normalize the text before tokenization</param>
        <summary>
            Create a Tiktoken tokenizer based on model name and vocab file.
            </summary>
        <returns>The tokenizer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForModelAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.TiktokenTokenizer&gt; CreateForModelAsync (string modelName, System.IO.Stream vocabStream, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? extraSpecialTokens = default, int cacheSize = 8192, Microsoft.ML.Tokenizers.Normalizer? normalizer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ML.Tokenizers.TiktokenTokenizer&gt; CreateForModelAsync(string modelName, class System.IO.Stream vocabStream, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; extraSpecialTokens, int32 cacheSize, class Microsoft.ML.Tokenizers.Normalizer normalizer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateForModelAsync(System.String,System.IO.Stream,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.Int32,Microsoft.ML.Tokenizers.Normalizer,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateForModelAsync (modelName As String, vocabStream As Stream, Optional extraSpecialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192, Optional normalizer As Normalizer = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TiktokenTokenizer)" />
      <MemberSignature Language="F#" Value="static member CreateForModelAsync : string * System.IO.Stream * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int * Microsoft.ML.Tokenizers.Normalizer * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.TiktokenTokenizer&gt;" Usage="Microsoft.ML.Tokenizers.TiktokenTokenizer.CreateForModelAsync (modelName, vocabStream, extraSpecialTokens, cacheSize, normalizer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.TiktokenTokenizer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelName" Type="System.String" />
        <Parameter Name="vocabStream" Type="System.IO.Stream" />
        <Parameter Name="extraSpecialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="cacheSize" Type="System.Int32" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="modelName">Model name</param>
        <param name="vocabStream">The stream to the BPE vocab file.</param>
        <param name="extraSpecialTokens">Extra special tokens other than the built-in ones for the model</param>
        <param name="cacheSize">The size of the cache to use.</param>
        <param name="normalizer">To normalize the text before tokenization</param>
        <param name="cancellationToken">
          <see cref="T:System.Threading.CancellationToken" /> used to request cancellation of the operation.</param>
        <summary>
            Create a Tiktoken tokenizer based on model name and vocab file.
            </summary>
        <returns>The tokenizer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public override string Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Decode (ids As IEnumerable(Of Integer)) As String" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; -&gt; string" Usage="tiktokenTokenizer.Decode ids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <summary>
            Decode the given ids, back to a String.
            </summary>
        <returns>The decoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public override System.Buffers.OperationStatus Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, Span&lt;char&gt; destination, out int idsConsumed, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Buffers.OperationStatus Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; idsConsumed, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Span{System.Char},System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Decode (ids As IEnumerable(Of Integer), destination As Span(Of Char), ByRef idsConsumed As Integer, ByRef charsWritten As Integer) As OperationStatus" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; * Span&lt;char&gt; * int * int -&gt; System.Buffers.OperationStatus" Usage="tiktokenTokenizer.Decode (ids, destination, idsConsumed, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="idsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="destination">The span to store the decoded text.</param>
        <param name="idsConsumed">The number of ids consumed during the decoding.</param>
        <param name="charsWritten">The number of characters written to the destination span.</param>
        <summary>
            Decode the given ids back to text and store the result in the <paramref name="destination" /> span.
            </summary>
        <returns>The operation status indicates whether all IDs were successfully decoded or if the <paramref name="destination" /> is too small to contain the entire decoded result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="protected override Microsoft.ML.Tokenizers.EncodeResults&lt;int&gt; EncodeToIds (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype Microsoft.ML.Tokenizers.EncodeResults`1&lt;int32&gt; EncodeToIds(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.EncodeToIds(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EncodeToIds (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As EncodeResults(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; Microsoft.ML.Tokenizers.EncodeResults&lt;int&gt;" Usage="tiktokenTokenizer.EncodeToIds (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EncodeResults&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The encoded results containing the list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToTokens">
      <MemberSignature Language="C#" Value="protected override Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype Microsoft.ML.Tokenizers.EncodeResults`1&lt;valuetype Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.EncodeToTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EncodeToTokens (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As EncodeResults(Of EncodedToken)" />
      <MemberSignature Language="F#" Value="override this.EncodeToTokens : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;" Usage="tiktokenTokenizer.EncodeToTokens (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Encodes input text to a list of <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCount">
      <MemberSignature Language="C#" Value="protected override int GetIndexByTokenCount (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings, bool fromEnd, out string? normalizedText, out int tokenCount);" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 GetIndexByTokenCount(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings, bool fromEnd, [out] string&amp; normalizedText, [out] int32&amp; tokenCount) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.TiktokenTokenizer.GetIndexByTokenCount(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings,System.Boolean,System.String@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetIndexByTokenCount (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings, fromEnd As Boolean, ByRef normalizedText As String, ByRef tokenCount As Integer) As Integer" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCount : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings * bool * string * int -&gt; int" Usage="tiktokenTokenizer.GetIndexByTokenCount (text, textSpan, settings, fromEnd, normalizedText, tokenCount)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="C#" Value="protected override int GetIndexByTokenCount (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings, bool fromEnd, out string? normalizedString, out int tokenCount);" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 GetIndexByTokenCount(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings, bool fromEnd, [out] string&amp; normalizedString, [out] int32&amp; tokenCount) cil managed" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetIndexByTokenCount (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings, fromEnd As Boolean, ByRef normalizedString As String, ByRef tokenCount As Integer) As Integer" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCount : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings * bool * string * int -&gt; int" Usage="tiktokenTokenizer.GetIndexByTokenCount (text, textSpan, settings, fromEnd, normalizedString, tokenCount)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" Index="2" />
        <Parameter Name="fromEnd" Type="System.Boolean" Index="3" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" Index="4" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="normalizedString" Type="System.String" RefType="out" Index="4" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" Index="5" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <param name="fromEnd">Indicate whether to find the index from the end of the text.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="settings" /> has <see cref="P:Microsoft.ML.Tokenizers.EncodeSettings.ConsiderNormalization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="normalizedString">To be added.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <summary>
            Find the index of the maximum encoding capacity without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            If <paramRef name="fromEnd" /> is <see langword="false" />, it represents the index immediately following the last character to be included. In cases where no tokens fit, the result will be 0; conversely,
            if all tokens fit, the result will be length of the input text or the <paramref name="normalizedText" /> if the normalization is enabled.
            If <paramRef name="fromEnd" /> is <see langword="true" />, it represents the index of the first character to be included. In cases where no tokens fit, the result will be the text length; conversely,
            if all tokens fit, the result will be zero.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Normalizer">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Tokenizers.Normalizer? Normalizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.Normalizer Normalizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.TiktokenTokenizer.Normalizer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Normalizer As Normalizer" />
      <MemberSignature Language="F#" Value="member this.Normalizer : Microsoft.ML.Tokenizers.Normalizer" Usage="Microsoft.ML.Tokenizers.TiktokenTokenizer.Normalizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Normalizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Normalizer in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreTokenizer">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Tokenizers.PreTokenizer? PreTokenizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.PreTokenizer PreTokenizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.TiktokenTokenizer.PreTokenizer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PreTokenizer As PreTokenizer" />
      <MemberSignature Language="F#" Value="member this.PreTokenizer : Microsoft.ML.Tokenizers.PreTokenizer" Usage="Microsoft.ML.Tokenizers.TiktokenTokenizer.PreTokenizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.PreTokenizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the PreTokenizer used by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecialTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? SpecialTokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; SpecialTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.TiktokenTokenizer.SpecialTokens" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpecialTokens As IReadOnlyDictionary(Of String, Integer)" />
      <MemberSignature Language="F#" Value="member this.SpecialTokens : System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt;" Usage="Microsoft.ML.Tokenizers.TiktokenTokenizer.SpecialTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the dictionary mapping special tokens to Ids.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
