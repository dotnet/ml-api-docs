<Type Name="CodeGenTokenizer" FullName="Microsoft.ML.Tokenizers.CodeGenTokenizer">
  <TypeSignature Language="C#" Value="public class CodeGenTokenizer : Microsoft.ML.Tokenizers.Tokenizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CodeGenTokenizer extends Microsoft.ML.Tokenizers.Tokenizer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.CodeGenTokenizer" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeGenTokenizer&#xA;Inherits Tokenizer" />
  <TypeSignature Language="F#" Value="type CodeGenTokenizer = class&#xA;    inherit Tokenizer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Tokenizers.Tokenizer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represent the Byte Pair Encoding model.
            Implement the CodeGen tokenizer described in https://huggingface.co/docs/transformers/main/en/model_doc/codegen#overview
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBeginningOfSentence">
      <MemberSignature Language="C#" Value="public bool AddBeginningOfSentence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddBeginningOfSentence" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.AddBeginningOfSentence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddBeginningOfSentence As Boolean" />
      <MemberSignature Language="F#" Value="member this.AddBeginningOfSentence : bool" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.AddBeginningOfSentence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the flag indicating whether to include the beginning of sentence token in the encoding.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEndOfSentence">
      <MemberSignature Language="C#" Value="public bool AddEndOfSentence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddEndOfSentence" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.AddEndOfSentence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddEndOfSentence As Boolean" />
      <MemberSignature Language="F#" Value="member this.AddEndOfSentence : bool" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.AddEndOfSentence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the flag indicating whether to include the end of sentence token in the encoding.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPrefixSpace">
      <MemberSignature Language="C#" Value="public bool AddPrefixSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddPrefixSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.AddPrefixSpace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddPrefixSpace As Boolean" />
      <MemberSignature Language="F#" Value="member this.AddPrefixSpace : bool" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.AddPrefixSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the flag indicating whether to include a leading space before encoding the text.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginningOfSentenceId">
      <MemberSignature Language="C#" Value="public int? BeginningOfSentenceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; BeginningOfSentenceId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.BeginningOfSentenceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginningOfSentenceId As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.BeginningOfSentenceId : Nullable&lt;int&gt;" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.BeginningOfSentenceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the end of sentence token Id.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginningOfSentenceToken">
      <MemberSignature Language="C#" Value="public string? BeginningOfSentenceToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BeginningOfSentenceToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.BeginningOfSentenceToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginningOfSentenceToken As String" />
      <MemberSignature Language="F#" Value="member this.BeginningOfSentenceToken : string" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.BeginningOfSentenceToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the beginning of sentence token.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="protected override int CountTokens (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 CountTokens(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.CountTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CountTokens (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As Integer" />
      <MemberSignature Language="F#" Value="override this.CountTokens : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; int" Usage="codeGenTokenizer.CountTokens (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of token Ids that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="public int CountTokens (ReadOnlySpan&lt;char&gt; text, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CountTokens(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.CountTokens(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountTokens (text As ReadOnlySpan(Of Char), addPrefixSpace As Boolean, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="override this.CountTokens : ReadOnlySpan&lt;char&gt; * bool * bool * bool * bool * bool -&gt; int" Usage="codeGenTokenizer.CountTokens (text, addPrefixSpace, addBeginningOfSentence, addEndOfSentence, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addPrefixSpace">Indicate whether to include a leading space before encoding the text.</param>
        <param name="addBeginningOfSentence">Indicate whether to include the beginning of sentence token in the encoding.</param>
        <param name="addEndOfSentence">Indicate whether to include the end of sentence token in the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of tokens Ids that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="public int CountTokens (string text, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CountTokens(string text, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.CountTokens(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountTokens (text As String, addPrefixSpace As Boolean, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="override this.CountTokens : string * bool * bool * bool * bool * bool -&gt; int" Usage="codeGenTokenizer.CountTokens (text, addPrefixSpace, addBeginningOfSentence, addEndOfSentence, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addPrefixSpace">Indicate whether to include a leading space before encoding the text.</param>
        <param name="addBeginningOfSentence">Indicate whether to include the beginning of sentence token in the encoding.</param>
        <param name="addEndOfSentence">Indicate whether to include the end of sentence token in the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of tokens Ids that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.CodeGenTokenizer Create (System.IO.Stream vocabStream, System.IO.Stream mergesStream, bool addPrefixSpace = false, bool addBeginOfSentence = false, bool addEndOfSentence = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.CodeGenTokenizer Create(class System.IO.Stream vocabStream, class System.IO.Stream mergesStream, bool addPrefixSpace, bool addBeginOfSentence, bool addEndOfSentence) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.Create(System.IO.Stream,System.IO.Stream,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (vocabStream As Stream, mergesStream As Stream, Optional addPrefixSpace As Boolean = false, Optional addBeginOfSentence As Boolean = false, Optional addEndOfSentence As Boolean = false) As CodeGenTokenizer" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * System.IO.Stream * bool * bool * bool -&gt; Microsoft.ML.Tokenizers.CodeGenTokenizer" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.Create (vocabStream, mergesStream, addPrefixSpace, addBeginOfSentence, addEndOfSentence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.CodeGenTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabStream" Type="System.IO.Stream" />
        <Parameter Name="mergesStream" Type="System.IO.Stream" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="vocabStream">The stream containing the vocab file.</param>
        <param name="mergesStream">The stream containing the merges file.</param>
        <param name="addPrefixSpace">Indicate whether to add a space before the token.</param>
        <param name="addBeginOfSentence">Indicate emitting the beginning of sentence token during the encoding.</param>
        <param name="addEndOfSentence">Indicate emitting the end of sentence token during the encoding.</param>
        <summary>
            Create a CodeGen tokenizer from the given vocab and merges streams.
            </summary>
        <returns>The CodeGen tokenizer object.</returns>
        <remarks>
            The tokenizer will be created according to the configuration specified in https://huggingface.co/Salesforce/codegen-350M-mono/raw/main/tokenizer.json.
            It is important to provide the similar vocab and merges files to the ones used in the training of the model.
            The vocab and merges files can be downloaded from the following links:
                https://huggingface.co/Salesforce/codegen-350M-mono/resolve/main/vocab.json?download=true
                https://huggingface.co/Salesforce/codegen-350M-mono/resolve/main/merges.txt?download=true
            When creating the tokenizer, ensure that the vocabulary stream is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public override string Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Decode (ids As IEnumerable(Of Integer)) As String" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; -&gt; string" Usage="codeGenTokenizer.Decode ids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <summary>
            Decode the given ids, back to a String.
            </summary>
        <returns>The decoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public string Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, bool hasPrefixSpace, bool considerSpecialTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, bool hasPrefixSpace, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decode (ids As IEnumerable(Of Integer), hasPrefixSpace As Boolean, considerSpecialTokens As Boolean) As String" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; * bool * bool -&gt; string" Usage="codeGenTokenizer.Decode (ids, hasPrefixSpace, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="hasPrefixSpace" Type="System.Boolean" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="hasPrefixSpace">Indicate whether the encoded string has a leading space.</param>
        <param name="considerSpecialTokens">Indicate whether to consider special tokens during decoding.</param>
        <summary>
            Decode the given ids, back to a String.
            </summary>
        <returns>The decoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public override System.Buffers.OperationStatus Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, Span&lt;char&gt; destination, out int idsConsumed, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Buffers.OperationStatus Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; idsConsumed, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Span{System.Char},System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Decode (ids As IEnumerable(Of Integer), destination As Span(Of Char), ByRef idsConsumed As Integer, ByRef charsWritten As Integer) As OperationStatus" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; * Span&lt;char&gt; * int * int -&gt; System.Buffers.OperationStatus" Usage="codeGenTokenizer.Decode (ids, destination, idsConsumed, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="idsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="destination">The span to store the decoded text.</param>
        <param name="idsConsumed">The number of ids consumed during the decoding.</param>
        <param name="charsWritten">The number of characters written to the destination span.</param>
        <summary>
             Decode the given ids back to text and store the result in the <paramref name="destination" /> span.
             </summary>
        <returns>The operation status indicates whether all IDs were successfully decoded or if the <paramref name="destination" /> is too small to contain the entire decoded result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public System.Buffers.OperationStatus Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, Span&lt;char&gt; destination, bool hasPrefixSpace, bool considerSpecialTokens, out int idsConsumed, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.OperationStatus Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, valuetype System.Span`1&lt;char&gt; destination, bool hasPrefixSpace, bool considerSpecialTokens, [out] int32&amp; idsConsumed, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Span{System.Char},System.Boolean,System.Boolean,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decode (ids As IEnumerable(Of Integer), destination As Span(Of Char), hasPrefixSpace As Boolean, considerSpecialTokens As Boolean, ByRef idsConsumed As Integer, ByRef charsWritten As Integer) As OperationStatus" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; * Span&lt;char&gt; * bool * bool * int * int -&gt; System.Buffers.OperationStatus" Usage="codeGenTokenizer.Decode (ids, destination, hasPrefixSpace, considerSpecialTokens, idsConsumed, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="hasPrefixSpace" Type="System.Boolean" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" />
        <Parameter Name="idsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="destination">The span to store the decoded text.</param>
        <param name="hasPrefixSpace">Indicate whether the encoded string has a leading space.</param>
        <param name="considerSpecialTokens">Indicate whether to consider special tokens during decoding.</param>
        <param name="idsConsumed">The number of ids consumed during the decoding.</param>
        <param name="charsWritten">The number of characters written to the destination span.</param>
        <summary>
            Decode the given ids back to text and store the result in the <paramref name="destination" /> span.
            </summary>
        <returns>The operation status indicates whether all IDs were successfully decoded or if the <paramref name="destination" /> is too small to contain the entire decoded result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="protected override Microsoft.ML.Tokenizers.EncodeResults&lt;int&gt; EncodeToIds (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype Microsoft.ML.Tokenizers.EncodeResults`1&lt;int32&gt; EncodeToIds(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.EncodeToIds(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EncodeToIds (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As EncodeResults(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; Microsoft.ML.Tokenizers.EncodeResults&lt;int&gt;" Usage="codeGenTokenizer.EncodeToIds (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EncodeResults&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The encoded results containing the list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (ReadOnlySpan&lt;char&gt; text, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.EncodeToIds(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As ReadOnlySpan(Of Char), addPrefixSpace As Boolean, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : ReadOnlySpan&lt;char&gt; * bool * bool * bool * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="codeGenTokenizer.EncodeToIds (text, addPrefixSpace, addBeginningOfSentence, addEndOfSentence, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addPrefixSpace">Indicate whether to include a leading space before encoding the text.</param>
        <param name="addBeginningOfSentence">Indicate whether to include the beginning of sentence token in the encoding.</param>
        <param name="addEndOfSentence">Indicate whether to include the end of sentence token in the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to tokens Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (string text, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(string text, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.EncodeToIds(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As String, addPrefixSpace As Boolean, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : string * bool * bool * bool * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="codeGenTokenizer.EncodeToIds (text, addPrefixSpace, addBeginningOfSentence, addEndOfSentence, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addPrefixSpace">Indicate whether to include a leading space before encoding the text.</param>
        <param name="addBeginningOfSentence">Indicate whether to include the beginning of sentence token in the encoding.</param>
        <param name="addEndOfSentence">Indicate whether to include the end of sentence token in the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to tokens Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (ReadOnlySpan&lt;char&gt; text, int maxTokenCount, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, out string? normalizedText, out int charsConsumed, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, int32 maxTokenCount, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, [out] string&amp; normalizedText, [out] int32&amp; charsConsumed, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.EncodeToIds(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As ReadOnlySpan(Of Char), maxTokenCount As Integer, addPrefixSpace As Boolean, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, ByRef normalizedText As String, ByRef charsConsumed As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : ReadOnlySpan&lt;char&gt; * int * bool * bool * bool * string * int * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="codeGenTokenizer.EncodeToIds (text, maxTokenCount, addPrefixSpace, addBeginningOfSentence, addEndOfSentence, normalizedText, charsConsumed, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum number of tokens to encode.</param>
        <param name="addPrefixSpace">Indicate whether to include a leading space before encoding the text.</param>
        <param name="addBeginningOfSentence">Indicate whether to include the beginning of sentence token in the encoding.</param>
        <param name="addEndOfSentence">Indicate whether to include the end of sentence token in the encoding.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled, the input text will be represented in its normalization form; otherwise, it will be null.</param>
        <param name="charsConsumed">The length of the text that encompasses the maximum encoded tokens.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to tokens Ids up to maximum number of tokens.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (string text, int maxTokenCount, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, out string? normalizedText, out int charsConsumed, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(string text, int32 maxTokenCount, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, [out] string&amp; normalizedText, [out] int32&amp; charsConsumed, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.EncodeToIds(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As String, maxTokenCount As Integer, addPrefixSpace As Boolean, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, ByRef normalizedText As String, ByRef charsConsumed As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : string * int * bool * bool * bool * string * int * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="codeGenTokenizer.EncodeToIds (text, maxTokenCount, addPrefixSpace, addBeginningOfSentence, addEndOfSentence, normalizedText, charsConsumed, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum number of tokens to encode.</param>
        <param name="addPrefixSpace">Indicate whether to include a leading space before encoding the text.</param>
        <param name="addBeginningOfSentence">Indicate whether to include the beginning of sentence token in the encoding.</param>
        <param name="addEndOfSentence">Indicate whether to include the end of sentence token in the encoding.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled, the input text will be represented in its normalization form; otherwise, it will be null.</param>
        <param name="charsConsumed">The length of the text that encompasses the maximum encoded tokens.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to tokens Ids up to maximum number of tokens.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToTokens">
      <MemberSignature Language="C#" Value="protected override Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype Microsoft.ML.Tokenizers.EncodeResults`1&lt;valuetype Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.EncodeToTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EncodeToTokens (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As EncodeResults(Of EncodedToken)" />
      <MemberSignature Language="F#" Value="override this.EncodeToTokens : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;" Usage="codeGenTokenizer.EncodeToTokens (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Encodes input text to a list of <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens (ReadOnlySpan&lt;char&gt; text, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, out string? normalizedText, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, [out] string&amp; normalizedText, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.EncodeToTokens(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.String@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToTokens (text As ReadOnlySpan(Of Char), addPrefixSpace As Boolean, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, ByRef normalizedText As String, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of EncodedToken)" />
      <MemberSignature Language="F#" Value="override this.EncodeToTokens : ReadOnlySpan&lt;char&gt; * bool * bool * bool * string * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;" Usage="codeGenTokenizer.EncodeToTokens (text, addPrefixSpace, addBeginningOfSentence, addEndOfSentence, normalizedText, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled, the input text will be represented in its normalization form; otherwise, it will null.</param>
        <param name="addPrefixSpace">Indicate whether to include a leading space before encoding the text.</param>
        <param name="addBeginningOfSentence">Indicate whether to include the beginning of sentence token in the encoding.</param>
        <param name="addEndOfSentence">Indicate whether to include the end of sentence token in the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to object has the tokens list, tokens Ids, tokens offset mapping.
            </summary>
        <returns>The tokenization result includes the tokens list, tokens Ids, tokens offset mapping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens (string text, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, out string? normalizedText, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens(string text, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, [out] string&amp; normalizedText, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.EncodeToTokens(System.String,System.Boolean,System.Boolean,System.Boolean,System.String@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToTokens (text As String, addPrefixSpace As Boolean, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, ByRef normalizedText As String, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of EncodedToken)" />
      <MemberSignature Language="F#" Value="override this.EncodeToTokens : string * bool * bool * bool * string * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;" Usage="codeGenTokenizer.EncodeToTokens (text, addPrefixSpace, addBeginningOfSentence, addEndOfSentence, normalizedText, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled, the input text will be represented in its normalization form; otherwise, it will null.</param>
        <param name="addPrefixSpace">Indicate whether to include a leading space before encoding the text.</param>
        <param name="addBeginningOfSentence">Indicate whether to include the beginning of sentence token in the encoding.</param>
        <param name="addEndOfSentence">Indicate whether to include the end of sentence token in the encoding.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to object has the tokens list, tokens Ids, tokens offset mapping.
            </summary>
        <returns>The tokenization result includes the tokens list, tokens Ids, tokens offset mapping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfSentenceId">
      <MemberSignature Language="C#" Value="public int? EndOfSentenceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; EndOfSentenceId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.EndOfSentenceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfSentenceId As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.EndOfSentenceId : Nullable&lt;int&gt;" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.EndOfSentenceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the end of sentence token Id.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfSentenceToken">
      <MemberSignature Language="C#" Value="public string? EndOfSentenceToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EndOfSentenceToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.EndOfSentenceToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfSentenceToken As String" />
      <MemberSignature Language="F#" Value="member this.EndOfSentenceToken : string" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.EndOfSentenceToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the end of sentence token.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCount">
      <MemberSignature Language="C#" Value="protected override int GetIndexByTokenCount (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings, bool fromEnd, out string? normalizedText, out int tokenCount);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 GetIndexByTokenCount(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings, bool fromEnd, [out] string&amp; normalizedText, [out] int32&amp; tokenCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.GetIndexByTokenCount(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings,System.Boolean,System.String@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetIndexByTokenCount (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings, fromEnd As Boolean, ByRef normalizedText As String, ByRef tokenCount As Integer) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCount : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings * bool * string * int -&gt; int" Usage="codeGenTokenizer.GetIndexByTokenCount (text, textSpan, settings, fromEnd, normalizedText, tokenCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
        <Parameter Name="fromEnd" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <param name="fromEnd">Indicate whether to find the index from the end of the text.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="settings" /> has <see cref="P:Microsoft.ML.Tokenizers.EncodeSettings.ConsiderNormalization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <summary>
            Find the index of the maximum encoding capacity without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            If <paramRef name="fromEnd" /> is <see langword="false" />, it represents the index immediately following the last character to be included. In cases where no tokens fit, the result will be 0; conversely,
            if all tokens fit, the result will be length of the input text or the <paramref name="normalizedText" /> if the normalization is enabled.
            If <paramRef name="fromEnd" /> is <see langword="true" />, it represents the index of the first character to be included. In cases where no tokens fit, the result will be the text length; conversely,
            if all tokens fit, the result will be zero.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCount">
      <MemberSignature Language="C#" Value="public int GetIndexByTokenCount (ReadOnlySpan&lt;char&gt; text, int maxTokenCount, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, out string? normalizedText, out int tokenCount, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetIndexByTokenCount(valuetype System.ReadOnlySpan`1&lt;char&gt; text, int32 maxTokenCount, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, [out] string&amp; normalizedText, [out] int32&amp; tokenCount, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.GetIndexByTokenCount(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexByTokenCount (text As ReadOnlySpan(Of Char), maxTokenCount As Integer, addPrefixSpace As Boolean, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, ByRef normalizedText As String, ByRef tokenCount As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCount : ReadOnlySpan&lt;char&gt; * int * bool * bool * bool * string * int * bool * bool -&gt; int" Usage="codeGenTokenizer.GetIndexByTokenCount (text, maxTokenCount, addPrefixSpace, addBeginningOfSentence, addEndOfSentence, normalizedText, tokenCount, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum token count to limit the encoding capacity.</param>
        <param name="addPrefixSpace">Indicate whether to include a leading space before encoding the text.</param>
        <param name="addBeginningOfSentence">Indicate whether to include the beginning of sentence token in the encoding.</param>
        <param name="addEndOfSentence">Indicate whether to include the end of sentence token in the encoding.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled, the input text will be represented in its normalization form; otherwise, it will be null.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Find the index of the maximum encoding capacity from the start within the text without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index immediately following the last character to be included. In cases where no tokens fit, the result will be 0; conversely,
            if all tokens fit, the result will be length of the text or the <paramref name="normalizedText" /> if the normalization is enabled.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCount">
      <MemberSignature Language="C#" Value="public int GetIndexByTokenCount (string text, int maxTokenCount, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, out string? normalizedText, out int tokenCount, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetIndexByTokenCount(string text, int32 maxTokenCount, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, [out] string&amp; normalizedText, [out] int32&amp; tokenCount, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.GetIndexByTokenCount(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexByTokenCount (text As String, maxTokenCount As Integer, addPrefixSpace As Boolean, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, ByRef normalizedText As String, ByRef tokenCount As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCount : string * int * bool * bool * bool * string * int * bool * bool -&gt; int" Usage="codeGenTokenizer.GetIndexByTokenCount (text, maxTokenCount, addPrefixSpace, addBeginningOfSentence, addEndOfSentence, normalizedText, tokenCount, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum token count to limit the encoding capacity.</param>
        <param name="addPrefixSpace">Indicate whether to include a leading space before encoding the text.</param>
        <param name="addBeginningOfSentence">Indicate whether to include the beginning of sentence token in the encoding.</param>
        <param name="addEndOfSentence">Indicate whether to include the end of sentence token in the encoding.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled, the input text will be represented in its normalization form; otherwise, it will be null.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Find the index of the maximum encoding capacity from the start within the text without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index immediately following the last character to be included. In cases where no tokens fit, the result will be 0; conversely,
            if all tokens fit, the result will be length of the text or the <paramref name="normalizedText" /> if the normalization is enabled.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCountFromEnd">
      <MemberSignature Language="C#" Value="public int GetIndexByTokenCountFromEnd (ReadOnlySpan&lt;char&gt; text, int maxTokenCount, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, out string? normalizedText, out int tokenCount, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetIndexByTokenCountFromEnd(valuetype System.ReadOnlySpan`1&lt;char&gt; text, int32 maxTokenCount, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, [out] string&amp; normalizedText, [out] int32&amp; tokenCount, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.GetIndexByTokenCountFromEnd(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexByTokenCountFromEnd (text As ReadOnlySpan(Of Char), maxTokenCount As Integer, addPrefixSpace As Boolean, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, ByRef normalizedText As String, ByRef tokenCount As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCountFromEnd : ReadOnlySpan&lt;char&gt; * int * bool * bool * bool * string * int * bool * bool -&gt; int" Usage="codeGenTokenizer.GetIndexByTokenCountFromEnd (text, maxTokenCount, addPrefixSpace, addBeginningOfSentence, addEndOfSentence, normalizedText, tokenCount, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum token count to limit the encoding capacity.</param>
        <param name="addPrefixSpace">Indicate whether to include a leading space before encoding the text.</param>
        <param name="addBeginningOfSentence">Indicate whether to include the beginning of sentence token in the encoding.</param>
        <param name="addEndOfSentence">Indicate whether to include the end of sentence token in the encoding.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled, the input text will be represented in its normalization form; otherwise, it will be null.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Find the index of the maximum encoding capacity from the end within the text without surpassing the token limit.
            </summary>
        <returns>
            The start index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index at the first character to be included. In cases where no tokens fit, the result will be length of the <paramref name="normalizedText" />; conversely, if all tokens fit, the result will be 0.
            </returns>
        <remarks>
            If the whole text can be encoded within the token limit, the returned index will be 0.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCountFromEnd">
      <MemberSignature Language="C#" Value="public int GetIndexByTokenCountFromEnd (string text, int maxTokenCount, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, out string? normalizedText, out int tokenCount, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetIndexByTokenCountFromEnd(string text, int32 maxTokenCount, bool addPrefixSpace, bool addBeginningOfSentence, bool addEndOfSentence, [out] string&amp; normalizedText, [out] int32&amp; tokenCount, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.CodeGenTokenizer.GetIndexByTokenCountFromEnd(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexByTokenCountFromEnd (text As String, maxTokenCount As Integer, addPrefixSpace As Boolean, addBeginningOfSentence As Boolean, addEndOfSentence As Boolean, ByRef normalizedText As String, ByRef tokenCount As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCountFromEnd : string * int * bool * bool * bool * string * int * bool * bool -&gt; int" Usage="codeGenTokenizer.GetIndexByTokenCountFromEnd (text, maxTokenCount, addPrefixSpace, addBeginningOfSentence, addEndOfSentence, normalizedText, tokenCount, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="addPrefixSpace" Type="System.Boolean" />
        <Parameter Name="addBeginningOfSentence" Type="System.Boolean" />
        <Parameter Name="addEndOfSentence" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum token count to limit the encoding capacity.</param>
        <param name="addPrefixSpace">Indicate whether to include a leading space before encoding the text.</param>
        <param name="addBeginningOfSentence">Indicate whether to include the beginning of sentence token in the encoding.</param>
        <param name="addEndOfSentence">Indicate whether to include the end of sentence token in the encoding.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled, the input text will be represented in its normalization form; otherwise, it will be null.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Find the index of the maximum encoding capacity from the end within the text without surpassing the token limit.
            </summary>
        <returns>
            The start index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index at the first character to be included. In cases where no tokens fit, the result will be length of the text or the <paramref name="normalizedText" /> if normalization is enabled;
            conversely, if all tokens fit, the result will be 0.
            </returns>
        <remarks>
            If the whole text can be encoded within the token limit, the returned index will be 0.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Normalizer">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Tokenizers.Normalizer? Normalizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.Normalizer Normalizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.Normalizer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Normalizer As Normalizer" />
      <MemberSignature Language="F#" Value="member this.Normalizer : Microsoft.ML.Tokenizers.Normalizer" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.Normalizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Normalizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Normalizer in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreTokenizer">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Tokenizers.PreTokenizer? PreTokenizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.PreTokenizer PreTokenizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.PreTokenizer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PreTokenizer As PreTokenizer" />
      <MemberSignature Language="F#" Value="member this.PreTokenizer : Microsoft.ML.Tokenizers.PreTokenizer" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.PreTokenizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.PreTokenizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the PreTokenizer used by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecialTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? SpecialTokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; SpecialTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.SpecialTokens" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpecialTokens As IReadOnlyDictionary(Of String, Integer)" />
      <MemberSignature Language="F#" Value="member this.SpecialTokens : System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt;" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.SpecialTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the added tokens.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownToken">
      <MemberSignature Language="C#" Value="public string? UnknownToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UnknownToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.UnknownToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnknownToken As String" />
      <MemberSignature Language="F#" Value="member this.UnknownToken : string" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.UnknownToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The Unknown token.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownTokenId">
      <MemberSignature Language="C#" Value="public int? UnknownTokenId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; UnknownTokenId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.UnknownTokenId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnknownTokenId As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.UnknownTokenId : Nullable&lt;int&gt;" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.UnknownTokenId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Unknown token Id.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Vocabulary">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt; Vocabulary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; Vocabulary" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.CodeGenTokenizer.Vocabulary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Vocabulary As IReadOnlyDictionary(Of String, Integer)" />
      <MemberSignature Language="F#" Value="member this.Vocabulary : System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt;" Usage="Microsoft.ML.Tokenizers.CodeGenTokenizer.Vocabulary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the dictionary mapping tokens to Ids.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
