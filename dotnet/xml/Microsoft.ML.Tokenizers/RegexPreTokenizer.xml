<Type Name="RegexPreTokenizer" FullName="Microsoft.ML.Tokenizers.RegexPreTokenizer">
  <TypeSignature Language="C#" Value="public sealed class RegexPreTokenizer : Microsoft.ML.Tokenizers.PreTokenizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegexPreTokenizer extends Microsoft.ML.Tokenizers.PreTokenizer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.RegexPreTokenizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegexPreTokenizer&#xA;Inherits PreTokenizer" />
  <TypeSignature Language="F#" Value="type RegexPreTokenizer = class&#xA;    inherit PreTokenizer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Tokenizers.PreTokenizer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The pre-tokenizer for Tiktoken tokenizer.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexPreTokenizer (System.Text.RegularExpressions.Regex regex, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? specialTokens);" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.RegularExpressions.Regex regex, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; specialTokens) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.RegexPreTokenizer.#ctor(System.Text.RegularExpressions.Regex,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (regex As Regex, specialTokens As IReadOnlyDictionary(Of String, Integer))" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.RegexPreTokenizer : System.Text.RegularExpressions.Regex * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; -&gt; Microsoft.ML.Tokenizers.RegexPreTokenizer" Usage="new Microsoft.ML.Tokenizers.RegexPreTokenizer (regex, specialTokens)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="C#" Value="public RegexPreTokenizer (System.Text.RegularExpressions.Regex regex, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? specialTokensEncoder);" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.RegularExpressions.Regex regex, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; specialTokensEncoder) cil managed" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (regex As Regex, specialTokensEncoder As IReadOnlyDictionary(Of String, Integer))" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.RegexPreTokenizer : System.Text.RegularExpressions.Regex * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; -&gt; Microsoft.ML.Tokenizers.RegexPreTokenizer" Usage="new Microsoft.ML.Tokenizers.RegexPreTokenizer (regex, specialTokensEncoder)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="regex" Type="System.Text.RegularExpressions.Regex" Index="0" />
        <Parameter Name="specialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="specialTokensEncoder" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="regex">The regex to use for splitting the text into smaller tokens in the pre-tokenization process.</param>
        <param name="specialTokens">The dictionary containing the special tokens and their corresponding ids.</param>
        <param name="specialTokensEncoder">To be added.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.Tokenizers.RegexPreTokenizer" /> class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When regex is null</exception>
      </Docs>
    </Member>
    <Member MemberName="PreTokenize">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;(int Offset, int Length)&gt; PreTokenize (ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.ValueTuple`2&lt;int32, int32&gt;&gt; PreTokenize(valuetype System.ReadOnlySpan`1&lt;char&gt; text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.RegexPreTokenizer.PreTokenize(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function PreTokenize (text As ReadOnlySpan(Of Char)) As IEnumerable(Of ValueTuple(Of Integer, Integer))" />
      <MemberSignature Language="F#" Value="override this.PreTokenize : ReadOnlySpan&lt;char&gt; -&gt; seq&lt;ValueTuple&lt;int, int&gt;&gt;" Usage="regexPreTokenizer.PreTokenize text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ValueTuple&lt;System.Int32,System.Int32&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="ml-dotnet">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Offset", "Length" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Offset", "Length" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="text">The string to split into tokens.</param>
        <summary>
            Get the offsets and lengths of the tokens relative to the <paramref name="text" />.
            </summary>
        <returns>The offsets and lengths of the tokens, expressed as pairs, are relative to the original string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreTokenize">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;(int Offset, int Length)&gt; PreTokenize (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.ValueTuple`2&lt;int32, int32&gt;&gt; PreTokenize(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.RegexPreTokenizer.PreTokenize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function PreTokenize (text As String) As IEnumerable(Of ValueTuple(Of Integer, Integer))" />
      <MemberSignature Language="F#" Value="override this.PreTokenize : string -&gt; seq&lt;ValueTuple&lt;int, int&gt;&gt;" Usage="regexPreTokenizer.PreTokenize text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ValueTuple&lt;System.Int32,System.Int32&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="ml-dotnet">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Offset", "Length" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Offset", "Length" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The string to split into tokens.</param>
        <summary>
            Get the offsets and lengths of the tokens relative to the <paramref name="text" />.
            </summary>
        <returns>The offsets and lengths of the tokens, expressed as pairs, are relative to the original string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
