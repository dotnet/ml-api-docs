<Type Name="Tokenizer" FullName="Microsoft.ML.Tokenizers.Tokenizer">
  <TypeSignature Language="C#" Value="public abstract class Tokenizer" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Tokenizer extends System.Object" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.Tokenizer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Tokenizer" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
  <TypeSignature Language="F#" Value="type Tokenizer = class" />
  <TypeSignature Language="C#" Value="public class Tokenizer" FrameworkAlternate="ml-dotnet-2.0.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Tokenizer extends System.Object" FrameworkAlternate="ml-dotnet-2.0.0" />
  <TypeSignature Language="VB.NET" Value="Public Class Tokenizer" FrameworkAlternate="ml-dotnet-2.0.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides an abstraction for tokenizers, enabling the encoding of text into tokens and the decoding of token IDs back into text.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Tokenizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.Tokenizers.Tokenizer" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tokenizer (Microsoft.ML.Tokenizers.Model model, Microsoft.ML.Tokenizers.PreTokenizer? preTokenizer = default, Microsoft.ML.Tokenizers.Normalizer? normalizer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Tokenizers.Model model, class Microsoft.ML.Tokenizers.PreTokenizer preTokenizer, class Microsoft.ML.Tokenizers.Normalizer normalizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.#ctor(Microsoft.ML.Tokenizers.Model,Microsoft.ML.Tokenizers.PreTokenizer,Microsoft.ML.Tokenizers.Normalizer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (model As Model, Optional preTokenizer As PreTokenizer = Nothing, Optional normalizer As Normalizer = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.Tokenizer : Microsoft.ML.Tokenizers.Model * Microsoft.ML.Tokenizers.PreTokenizer * Microsoft.ML.Tokenizers.Normalizer -&gt; Microsoft.ML.Tokenizers.Tokenizer" Usage="new Microsoft.ML.Tokenizers.Tokenizer (model, preTokenizer, normalizer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.ML.Tokenizers.Model" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="preTokenizer" Type="Microsoft.ML.Tokenizers.PreTokenizer" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="model">The Model in use by the Tokenizer.</param>
        <param name="preTokenizer">The optional PreTokenizer in use by the Tokenizer. WhiteSpace PreTokenizer will be used if this parameter is null.</param>
        <param name="normalizer">The optional Normalizer in use by the Tokenizer.</param>
        <summary>
            Create a new Tokenizer object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="public int CountTokens (ReadOnlySpan&lt;char&gt; text, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CountTokens(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.CountTokens(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountTokens (text As ReadOnlySpan(Of Char), Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="member this.CountTokens : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; int" Usage="tokenizer.CountTokens (text, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerNormalization" Type="System.Boolean" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of token Ids that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="public int CountTokens (string text, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CountTokens(string text, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.CountTokens(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountTokens (text As String, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="member this.CountTokens : string * bool * bool -&gt; int" Usage="tokenizer.CountTokens (text, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerNormalization" Type="System.Boolean" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of token Ids that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="protected virtual int CountTokens (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 CountTokens(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.CountTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CountTokens (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CountTokens : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; int&#xA;override this.CountTokens : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; int" Usage="tokenizer.CountTokens (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of token Ids that the input text will be encoded to.</returns>
        <remarks>
            Types derived from <see cref="T:Microsoft.ML.Tokenizers.Tokenizer" /> may override this implementation to provide a more efficient implementation.
            By default, it uses <see cref="M:Microsoft.ML.Tokenizers.Tokenizer.EncodeToTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public virtual string Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Decode (ids As IEnumerable(Of Integer)) As String" />
      <MemberSignature Language="F#" Value="abstract member Decode : seq&lt;int&gt; -&gt; string&#xA;override this.Decode : seq&lt;int&gt; -&gt; string" Usage="tokenizer.Decode ids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <summary>
            Decode the given ids, back to a String.
            </summary>
        <returns>The decoded string.</returns>
        <remarks>
            Types derived from <see cref="T:Microsoft.ML.Tokenizers.Tokenizer" /> may override this implementation to provide a more efficient implementation.
            By default, it uses <see cref="M:Microsoft.ML.Tokenizers.Tokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Span{System.Char},System.Int32@,System.Int32@)" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ids" /> is null.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="ids" /> contains invalid data.</exception>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public string? Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, bool skipSpecialTokens = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, bool skipSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decode (ids As IEnumerable(Of Integer), Optional skipSpecialTokens As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="member this.Decode : seq&lt;int&gt; * bool -&gt; string" Usage="tokenizer.Decode (ids, skipSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet-2.0.0" />
        <Parameter Name="skipSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="skipSpecialTokens">Whether the special tokens should be removed from the decoded string.</param>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="considerSpecialTokens">Whether the special tokens should be kept in the decoded string.</param>
        <summary>
            Decode the given ids, back to a String.
            </summary>
        <returns>The decoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public string? Decode (int id, bool skipSpecialTokens = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Decode(int32 id, bool skipSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.Decode(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decode (id As Integer, Optional skipSpecialTokens As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="member this.Decode : int * bool -&gt; string" Usage="tokenizer.Decode (id, skipSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" Index="0" FrameworkAlternate="ml-dotnet-2.0.0" />
        <Parameter Name="skipSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="skipSpecialTokens">Indicate if want to skip the special tokens during the decoding.</param>
        <param name="id">The id to map to the token.</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the decoding.</param>
        <summary>
            Decodes the Id to the mapped token.
            </summary>
        <returns>The decoded string or null if there is no token mapped to the input id.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public abstract System.Buffers.OperationStatus Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, Span&lt;char&gt; destination, out int idsConsumed, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Buffers.OperationStatus Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; idsConsumed, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Span{System.Char},System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Decode (ids As IEnumerable(Of Integer), destination As Span(Of Char), ByRef idsConsumed As Integer, ByRef charsWritten As Integer) As OperationStatus" />
      <MemberSignature Language="F#" Value="abstract member Decode : seq&lt;int&gt; * Span&lt;char&gt; * int * int -&gt; System.Buffers.OperationStatus" Usage="tokenizer.Decode (ids, destination, idsConsumed, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="idsConsumed" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="destination">The span to store the decoded text.</param>
        <param name="idsConsumed">The number of ids consumed during the decoding.</param>
        <param name="charsWritten">The number of characters written to the destination span.</param>
        <summary>
            Decode the given ids back to text and store the result in the <paramref name="destination" /> span.
            </summary>
        <returns>The operation status indicates whether all IDs were successfully decoded or if the <paramref name="destination" /> is too small to contain the entire decoded result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decoder">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.TokenizerDecoder? Decoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.TokenizerDecoder Decoder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tokenizer.Decoder" />
      <MemberSignature Language="VB.NET" Value="Public Property Decoder As TokenizerDecoder" />
      <MemberSignature Language="F#" Value="member this.Decoder : Microsoft.ML.Tokenizers.TokenizerDecoder with get, set" Usage="Microsoft.ML.Tokenizers.Tokenizer.Decoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.TokenizerDecoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the Decoder in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.TokenizerResult Encode (string sequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.Tokenizers.TokenizerResult Encode(string sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.Encode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Encode (sequence As String) As TokenizerResult" />
      <MemberSignature Language="F#" Value="member this.Encode : string -&gt; Microsoft.ML.Tokenizers.TokenizerResult" Usage="tokenizer.Encode sequence" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.TokenizerResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="sequence">The text to tokenize.</param>
        <summary>
            Encodes input text to object has the tokens list, tokens Ids, tokens offset mapping.
            </summary>
        <returns>The tokenization result includes the tokens list, tokens Ids, tokens offset mapping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (ReadOnlySpan&lt;char&gt; text, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.EncodeToIds(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As ReadOnlySpan(Of Char), Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.EncodeToIds : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="tokenizer.EncodeToIds (text, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerNormalization" Type="System.Boolean" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (string text, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(string text, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.EncodeToIds(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As String, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.EncodeToIds : string * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="tokenizer.EncodeToIds (text, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerNormalization" Type="System.Boolean" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.ML.Tokenizers.EncodeResults&lt;int&gt; EncodeToIds (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype Microsoft.ML.Tokenizers.EncodeResults`1&lt;int32&gt; EncodeToIds(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.EncodeToIds(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EncodeToIds (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As EncodeResults(Of Integer)" />
      <MemberSignature Language="F#" Value="abstract member EncodeToIds : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; Microsoft.ML.Tokenizers.EncodeResults&lt;int&gt;&#xA;override this.EncodeToIds : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; Microsoft.ML.Tokenizers.EncodeResults&lt;int&gt;" Usage="tokenizer.EncodeToIds (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EncodeResults&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The encoded results containing the list of encoded Ids.</returns>
        <remarks>
            Types derived from <see cref="T:Microsoft.ML.Tokenizers.Tokenizer" /> may override this implementation to provide a more efficient implementation.
            By default, it uses <see cref="M:Microsoft.ML.Tokenizers.Tokenizer.EncodeToTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (ReadOnlySpan&lt;char&gt; text, int maxTokenCount, out string? normalizedText, out int charsConsumed, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, int32 maxTokenCount, [out] string&amp; normalizedText, [out] int32&amp; charsConsumed, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.EncodeToIds(System.ReadOnlySpan{System.Char},System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As ReadOnlySpan(Of Char), maxTokenCount As Integer, ByRef normalizedText As String, ByRef charsConsumed As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.EncodeToIds : ReadOnlySpan&lt;char&gt; * int * string * int * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="tokenizer.EncodeToIds (text, maxTokenCount, normalizedText, charsConsumed, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="maxTokenCount" Type="System.Int32" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" Index="4" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerNormalization" Type="System.Boolean" Index="5" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum number of tokens to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="charsConsumed">The characters count of the text that encompasses the maximum encoded tokens.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids up to maximum number of tokens.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (string text, int maxTokenCount, out string? normalizedText, out int charsConsumed, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(string text, int32 maxTokenCount, [out] string&amp; normalizedText, [out] int32&amp; charsConsumed, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.EncodeToIds(System.String,System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As String, maxTokenCount As Integer, ByRef normalizedText As String, ByRef charsConsumed As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.EncodeToIds : string * int * string * int * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="tokenizer.EncodeToIds (text, maxTokenCount, normalizedText, charsConsumed, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="maxTokenCount" Type="System.Int32" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" Index="4" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerNormalization" Type="System.Boolean" Index="5" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="maxTokenCount">The maximum number of tokens to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="charsConsumed">The characters count of the text that encompasses the maximum encoded tokens.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids up to maximum number of tokens.
            <param name="text">The text to encode.</param></summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToTokens">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype Microsoft.ML.Tokenizers.EncodeResults`1&lt;valuetype Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.EncodeToTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function EncodeToTokens (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As EncodeResults(Of EncodedToken)" />
      <MemberSignature Language="F#" Value="abstract member EncodeToTokens : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;" Usage="tokenizer.EncodeToTokens (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Encodes input text to a list of <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens (ReadOnlySpan&lt;char&gt; text, out string? normalizedText, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens(valuetype System.ReadOnlySpan`1&lt;char&gt; text, [out] string&amp; normalizedText, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.EncodeToTokens(System.ReadOnlySpan{System.Char},System.String@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToTokens (text As ReadOnlySpan(Of Char), ByRef normalizedText As String, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of EncodedToken)" />
      <MemberSignature Language="F#" Value="member this.EncodeToTokens : ReadOnlySpan&lt;char&gt; * string * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;" Usage="tokenizer.EncodeToTokens (text, normalizedText, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerNormalization" Type="System.Boolean" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to a list of <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s.
            </summary>
        <returns>The list of encoded <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens (string text, out string? normalizedText, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens(string text, [out] string&amp; normalizedText, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.EncodeToTokens(System.String,System.String@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToTokens (text As String, ByRef normalizedText As String, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of EncodedToken)" />
      <MemberSignature Language="F#" Value="member this.EncodeToTokens : string * string * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;" Usage="tokenizer.EncodeToTokens (text, normalizedText, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerNormalization" Type="System.Boolean" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to a list of <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s.
            </summary>
        <returns>The list of encoded <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCount">
      <MemberSignature Language="C#" Value="public int GetIndexByTokenCount (ReadOnlySpan&lt;char&gt; text, int maxTokenCount, out string? normalizedText, out int tokenCount, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetIndexByTokenCount(valuetype System.ReadOnlySpan`1&lt;char&gt; text, int32 maxTokenCount, [out] string&amp; normalizedText, [out] int32&amp; tokenCount, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.GetIndexByTokenCount(System.ReadOnlySpan{System.Char},System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexByTokenCount (text As ReadOnlySpan(Of Char), maxTokenCount As Integer, ByRef normalizedText As String, ByRef tokenCount As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="member this.GetIndexByTokenCount : ReadOnlySpan&lt;char&gt; * int * string * int * bool * bool -&gt; int" Usage="tokenizer.GetIndexByTokenCount (text, maxTokenCount, normalizedText, tokenCount, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="maxTokenCount" Type="System.Int32" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" Index="4" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerNormalization" Type="System.Boolean" Index="5" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum number of tokens to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerPreTokenization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Find the index of the maximum encoding capacity without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index immediately following the last character to be included. In cases where no tokens fit, the result will be 0; conversely,
            if all tokens fit, the result will be length of the input text or the <paramref name="normalizedText" /> if the normalization is enabled.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCount">
      <MemberSignature Language="C#" Value="public int GetIndexByTokenCount (string text, int maxTokenCount, out string? normalizedText, out int tokenCount, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetIndexByTokenCount(string text, int32 maxTokenCount, [out] string&amp; normalizedText, [out] int32&amp; tokenCount, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.GetIndexByTokenCount(System.String,System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexByTokenCount (text As String, maxTokenCount As Integer, ByRef normalizedText As String, ByRef tokenCount As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="member this.GetIndexByTokenCount : string * int * string * int * bool * bool -&gt; int" Usage="tokenizer.GetIndexByTokenCount (text, maxTokenCount, normalizedText, tokenCount, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="maxTokenCount" Type="System.Int32" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" Index="4" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerNormalization" Type="System.Boolean" Index="5" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum number of tokens to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerNormalization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Find the index of the maximum encoding capacity without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index immediately following the last character to be included. In cases where no tokens fit, the result will be 0; conversely,
            if all tokens fit, the result will be length of the input text or the <paramref name="normalizedText" /> if the normalization is enabled.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCount">
      <MemberSignature Language="C#" Value="protected virtual int GetIndexByTokenCount (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings, bool fromEnd, out string? normalizedText, out int tokenCount);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 GetIndexByTokenCount(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings, bool fromEnd, [out] string&amp; normalizedText, [out] int32&amp; tokenCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.GetIndexByTokenCount(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings,System.Boolean,System.String@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetIndexByTokenCount (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings, fromEnd As Boolean, ByRef normalizedText As String, ByRef tokenCount As Integer) As Integer" />
      <MemberSignature Language="F#" Value="abstract member GetIndexByTokenCount : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings * bool * string * int -&gt; int&#xA;override this.GetIndexByTokenCount : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings * bool * string * int -&gt; int" Usage="tokenizer.GetIndexByTokenCount (text, textSpan, settings, fromEnd, normalizedText, tokenCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="fromEnd" Type="System.Boolean" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" Index="4" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" Index="5" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <param name="fromEnd">Indicate whether to find the index from the end of the text.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="settings" /> has <see cref="P:Microsoft.ML.Tokenizers.EncodeSettings.ConsiderNormalization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <summary>
            Find the index of the maximum encoding capacity without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            If <paramRef name="fromEnd" /> is <see langword="false" />, it represents the index immediately following the last character to be included. In cases where no tokens fit, the result will be 0; conversely,
            if all tokens fit, the result will be length of the input text or the <paramref name="normalizedText" /> if the normalization is enabled.
            If <paramRef name="fromEnd" /> is <see langword="true" />, it represents the index of the first character to be included. In cases where no tokens fit, the result will be the text length; conversely,
            if all tokens fit, the result will be zero.
            </returns>
        <remarks>
            Types derived from <see cref="T:Microsoft.ML.Tokenizers.Tokenizer" /> may override this implementation to provide a more efficient implementation.
            By default, it uses <see cref="M:Microsoft.ML.Tokenizers.Tokenizer.EncodeToTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCountFromEnd">
      <MemberSignature Language="C#" Value="public int GetIndexByTokenCountFromEnd (ReadOnlySpan&lt;char&gt; text, int maxTokenCount, out string? normalizedText, out int tokenCount, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetIndexByTokenCountFromEnd(valuetype System.ReadOnlySpan`1&lt;char&gt; text, int32 maxTokenCount, [out] string&amp; normalizedText, [out] int32&amp; tokenCount, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.GetIndexByTokenCountFromEnd(System.ReadOnlySpan{System.Char},System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexByTokenCountFromEnd (text As ReadOnlySpan(Of Char), maxTokenCount As Integer, ByRef normalizedText As String, ByRef tokenCount As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="member this.GetIndexByTokenCountFromEnd : ReadOnlySpan&lt;char&gt; * int * string * int * bool * bool -&gt; int" Usage="tokenizer.GetIndexByTokenCountFromEnd (text, maxTokenCount, normalizedText, tokenCount, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="maxTokenCount" Type="System.Int32" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" Index="4" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerNormalization" Type="System.Boolean" Index="5" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum number of tokens to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerPreTokenization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Find the index of the maximum encoding capacity without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index of the first character to be included. In cases where no tokens fit, the result will be the text length; conversely,
            if all tokens fit, the result will be zero.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCountFromEnd">
      <MemberSignature Language="C#" Value="public int GetIndexByTokenCountFromEnd (string text, int maxTokenCount, out string? normalizedText, out int tokenCount, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetIndexByTokenCountFromEnd(string text, int32 maxTokenCount, [out] string&amp; normalizedText, [out] int32&amp; tokenCount, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.GetIndexByTokenCountFromEnd(System.String,System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexByTokenCountFromEnd (text As String, maxTokenCount As Integer, ByRef normalizedText As String, ByRef tokenCount As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="member this.GetIndexByTokenCountFromEnd : string * int * string * int * bool * bool -&gt; int" Usage="tokenizer.GetIndexByTokenCountFromEnd (text, maxTokenCount, normalizedText, tokenCount, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="maxTokenCount" Type="System.Int32" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" Index="4" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="considerNormalization" Type="System.Boolean" Index="5" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum number of tokens to encode.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="considerPreTokenization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Find the index of the maximum encoding capacity without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index of the first character to be included. In cases where no tokens fit, the result will be the text length; conversely,
            if all tokens fit, the result will be zero.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.Model Model { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.Model Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tokenizer.Model" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Model As Model" />
      <MemberSignature Language="F#" Value="member this.Model : Microsoft.ML.Tokenizers.Model" Usage="Microsoft.ML.Tokenizers.Tokenizer.Model" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Model</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Model in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Normalizer">
      <MemberSignature Language="C#" Value="public virtual Microsoft.ML.Tokenizers.Normalizer? Normalizer { get; }" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.Normalizer Normalizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tokenizer.Normalizer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Normalizer As Normalizer" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.Normalizer : Microsoft.ML.Tokenizers.Normalizer" Usage="Microsoft.ML.Tokenizers.Tokenizer.Normalizer" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.Normalizer? Normalizer { get; set; }" FrameworkAlternate="ml-dotnet-2.0.0" />
      <MemberSignature Language="VB.NET" Value="Public Property Normalizer As Normalizer" FrameworkAlternate="ml-dotnet-2.0.0" />
      <MemberSignature Language="F#" Value="member this.Normalizer : Microsoft.ML.Tokenizers.Normalizer with get, set" Usage="Microsoft.ML.Tokenizers.Tokenizer.Normalizer" FrameworkAlternate="ml-dotnet-2.0.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Normalizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Normalizer in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreTokenizer">
      <MemberSignature Language="C#" Value="public virtual Microsoft.ML.Tokenizers.PreTokenizer? PreTokenizer { get; }" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.PreTokenizer PreTokenizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tokenizer.PreTokenizer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PreTokenizer As PreTokenizer" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.PreTokenizer : Microsoft.ML.Tokenizers.PreTokenizer" Usage="Microsoft.ML.Tokenizers.Tokenizer.PreTokenizer" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.PreTokenizer PreTokenizer { get; set; }" FrameworkAlternate="ml-dotnet-2.0.0" />
      <MemberSignature Language="VB.NET" Value="Public Property PreTokenizer As PreTokenizer" FrameworkAlternate="ml-dotnet-2.0.0" />
      <MemberSignature Language="F#" Value="member this.PreTokenizer : Microsoft.ML.Tokenizers.PreTokenizer with get, set" Usage="Microsoft.ML.Tokenizers.Tokenizer.PreTokenizer" FrameworkAlternate="ml-dotnet-2.0.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.PreTokenizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the PreTokenizer used by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrainFromFiles">
      <MemberSignature Language="C#" Value="public void TrainFromFiles (Microsoft.ML.Tokenizers.Trainer? trainer, Microsoft.ML.Tokenizers.ReportProgress? progress, params string[] files);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrainFromFiles(class Microsoft.ML.Tokenizers.Trainer trainer, class Microsoft.ML.Tokenizers.ReportProgress progress, string[] files) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.TrainFromFiles(Microsoft.ML.Tokenizers.Trainer,Microsoft.ML.Tokenizers.ReportProgress,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrainFromFiles (trainer As Trainer, progress As ReportProgress, ParamArray files As String())" />
      <MemberSignature Language="F#" Value="member this.TrainFromFiles : Microsoft.ML.Tokenizers.Trainer * Microsoft.ML.Tokenizers.ReportProgress * string[] -&gt; unit" Usage="tokenizer.TrainFromFiles (trainer, progress, files)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trainer" Type="Microsoft.ML.Tokenizers.Trainer" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="progress" Type="Microsoft.ML.Tokenizers.ReportProgress" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="files" Type="System.String[]" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trainer">An optional trainer that should be used to train our Model.</param>
        <param name="progress">Optional progress callback to report the training progress.</param>
        <param name="files">A list of the files that we should use for training.</param>
        <summary>
            Train the tokenizer model using input files.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
