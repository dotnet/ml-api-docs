<Type Name="Tokenizer" FullName="Microsoft.ML.Tokenizers.Tokenizer">
  <TypeSignature Language="C#" Value="public class Tokenizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Tokenizer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.Tokenizer" />
  <TypeSignature Language="VB.NET" Value="Public Class Tokenizer" />
  <TypeSignature Language="F#" Value="type Tokenizer = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A Tokenizer works as a pipeline. It processes some raw text as input and outputs a EncodingResult object.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tokenizer (Microsoft.ML.Tokenizers.Model model, Microsoft.ML.Tokenizers.PreTokenizer? preTokenizer = default, Microsoft.ML.Tokenizers.Normalizer? normalizer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Tokenizers.Model model, class Microsoft.ML.Tokenizers.PreTokenizer preTokenizer, class Microsoft.ML.Tokenizers.Normalizer normalizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.#ctor(Microsoft.ML.Tokenizers.Model,Microsoft.ML.Tokenizers.PreTokenizer,Microsoft.ML.Tokenizers.Normalizer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (model As Model, Optional preTokenizer As PreTokenizer = Nothing, Optional normalizer As Normalizer = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.Tokenizer : Microsoft.ML.Tokenizers.Model * Microsoft.ML.Tokenizers.PreTokenizer * Microsoft.ML.Tokenizers.Normalizer -&gt; Microsoft.ML.Tokenizers.Tokenizer" Usage="new Microsoft.ML.Tokenizers.Tokenizer (model, preTokenizer, normalizer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.ML.Tokenizers.Model" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="preTokenizer" Type="Microsoft.ML.Tokenizers.PreTokenizer" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="model">The Model in use by the Tokenizer.</param>
        <param name="preTokenizer">The optional PreTokenizer in use by the Tokenizer. WhiteSpace PreTokenizer will be used if this parameter is null.</param>
        <param name="normalizer">The optional Normalizer in use by the Tokenizer.</param>
        <summary>
            Create a new Tokenizer object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tokenizer (Microsoft.ML.Tokenizers.Model model, Microsoft.ML.Tokenizers.PreTokenizer? preTokenizer = default, Microsoft.ML.Tokenizers.Normalizer? normalizer = default, Microsoft.ML.Tokenizers.TokenizerDecoder? decoder = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Tokenizers.Model model, class Microsoft.ML.Tokenizers.PreTokenizer preTokenizer, class Microsoft.ML.Tokenizers.Normalizer normalizer, class Microsoft.ML.Tokenizers.TokenizerDecoder decoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.#ctor(Microsoft.ML.Tokenizers.Model,Microsoft.ML.Tokenizers.PreTokenizer,Microsoft.ML.Tokenizers.Normalizer,Microsoft.ML.Tokenizers.TokenizerDecoder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (model As Model, Optional preTokenizer As PreTokenizer = Nothing, Optional normalizer As Normalizer = Nothing, Optional decoder As TokenizerDecoder = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.Tokenizer : Microsoft.ML.Tokenizers.Model * Microsoft.ML.Tokenizers.PreTokenizer * Microsoft.ML.Tokenizers.Normalizer * Microsoft.ML.Tokenizers.TokenizerDecoder -&gt; Microsoft.ML.Tokenizers.Tokenizer" Usage="new Microsoft.ML.Tokenizers.Tokenizer (model, preTokenizer, normalizer, decoder)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.ML.Tokenizers.Model" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="preTokenizer" Type="Microsoft.ML.Tokenizers.PreTokenizer" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" Index="2" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="decoder" Type="Microsoft.ML.Tokenizers.TokenizerDecoder" Index="3" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="model">The Model in use by the Tokenizer.</param>
        <param name="preTokenizer">The optional PreTokenizer in use by the Tokenizer. WhiteSpace PreTokenizer will be used if this parameter is null.</param>
        <param name="normalizer">The optional Normalizer in use by the Tokenizer.</param>
        <param name="decoder">The optional Decoder in use by the Tokenizer during the decoding operation to merge the given list of tokens in a string.</param>
        <summary>
            Create a new Tokenizer object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="public int CountTokens (string text, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CountTokens(string text, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.CountTokens(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountTokens (text As String, Optional considerSpecialTokens As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="member this.CountTokens : string * bool -&gt; int" Usage="tokenizer.CountTokens (text, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the encoding.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of tokens Ids that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The input text is null.</exception>
        <exception cref="T:System.ArgumentException">Unable to encode the text.</exception>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public string? Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, bool skipSpecialTokens = false);" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, bool skipSpecialTokens) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decode (ids As IEnumerable(Of Integer), Optional skipSpecialTokens As Boolean = false) As String" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="F#" Value="member this.Decode : seq&lt;int&gt; * bool -&gt; string" Usage="tokenizer.Decode (ids, skipSpecialTokens)" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="C#" Value="public string? Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, bool considerSpecialTokens = true);" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, bool considerSpecialTokens) cil managed" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Function Decode (ids As IEnumerable(Of Integer), Optional considerSpecialTokens As Boolean = true) As String" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.Decode : seq&lt;int&gt; * bool -&gt; string" Usage="tokenizer.Decode (ids, considerSpecialTokens)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" />
        <Parameter Name="skipSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="skipSpecialTokens">Whether the special tokens should be removed from the decoded string.</param>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="considerSpecialTokens">Whether the special tokens should be kept in the decoded string.</param>
        <summary>
            Decode the given ids, back to a String.
            </summary>
        <returns>The decoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public string? Decode (int id, bool skipSpecialTokens = false);" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Decode(int32 id, bool skipSpecialTokens) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.Decode(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decode (id As Integer, Optional skipSpecialTokens As Boolean = false) As String" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="F#" Value="member this.Decode : int * bool -&gt; string" Usage="tokenizer.Decode (id, skipSpecialTokens)" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="C#" Value="public string? Decode (int id, bool considerSpecialTokens = true);" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Decode(int32 id, bool considerSpecialTokens) cil managed" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Function Decode (id As Integer, Optional considerSpecialTokens As Boolean = true) As String" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.Decode : int * bool -&gt; string" Usage="tokenizer.Decode (id, considerSpecialTokens)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" Index="0" />
        <Parameter Name="skipSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="skipSpecialTokens">Indicate if want to skip the special tokens during the decoding.</param>
        <param name="id">The id to map to the token.</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the decoding.</param>
        <summary>
            Decodes the Id to the mapped token.
            </summary>
        <returns>The decoded string or null if there is no token mapped to the input id.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decoder">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.TokenizerDecoder? Decoder { get; set; }" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.TokenizerDecoder Decoder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tokenizer.Decoder" />
      <MemberSignature Language="VB.NET" Value="Public Property Decoder As TokenizerDecoder" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="F#" Value="member this.Decoder : Microsoft.ML.Tokenizers.TokenizerDecoder with get, set" Usage="Microsoft.ML.Tokenizers.Tokenizer.Decoder" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.TokenizerDecoder? Decoder { get; }" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Decoder As TokenizerDecoder" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.Decoder : Microsoft.ML.Tokenizers.TokenizerDecoder" Usage="Microsoft.ML.Tokenizers.Tokenizer.Decoder" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.TokenizerDecoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the Decoder in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.TokenizerResult Encode (string sequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.Tokenizers.TokenizerResult Encode(string sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.Encode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Encode (sequence As String) As TokenizerResult" />
      <MemberSignature Language="F#" Value="member this.Encode : string -&gt; Microsoft.ML.Tokenizers.TokenizerResult" Usage="tokenizer.Encode sequence" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.TokenizerResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="sequence">The text to tokenize.</param>
        <summary>
            Encodes input text to object has the tokens list, tokens Ids, tokens offset mapping.
            </summary>
        <returns>The tokenization result includes the tokens list, tokens Ids, tokens offset mapping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.EncodingResult Encode (string text, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.Tokenizers.EncodingResult Encode(string text, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.Encode(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Encode (text As String, Optional considerSpecialTokens As Boolean = true) As EncodingResult" />
      <MemberSignature Language="F#" Value="member this.Encode : string * bool -&gt; Microsoft.ML.Tokenizers.EncodingResult" Usage="tokenizer.Encode (text, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EncodingResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the encoding.</param>
        <summary>
            Encodes input text to object has the tokens list, tokens Ids, tokens offset mapping.
            </summary>
        <returns>The tokenization result includes the tokens list, tokens Ids, tokens offset mapping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (string text, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(string text, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.EncodeToIds(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As String, Optional considerSpecialTokens As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.EncodeToIds : string * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="tokenizer.EncodeToIds (text, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the encoding.</param>
        <summary>
            Encodes input text to tokens Ids.
            </summary>
        <returns>The tokenization result includes the tokens list, tokens Ids, tokens offset mapping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfTokenCount">
      <MemberSignature Language="C#" Value="public int IndexOfTokenCount (string text, int maxTokenCount, out string processedText, out int tokenCount, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfTokenCount(string text, int32 maxTokenCount, [out] string&amp; processedText, [out] int32&amp; tokenCount, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.IndexOfTokenCount(System.String,System.Int32,System.String@,System.Int32@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfTokenCount (text As String, maxTokenCount As Integer, ByRef processedText As String, ByRef tokenCount As Integer, Optional considerSpecialTokens As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="member this.IndexOfTokenCount : string * int * string * int * bool -&gt; int" Usage="tokenizer.IndexOfTokenCount (text, maxTokenCount, processedText, tokenCount, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="maxTokenCount" Type="System.Int32" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="processedText" Type="System.String" RefType="out" Index="2" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="4" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum token count to limit the encoding capacity.</param>
        <param name="processedText">If the tokenizer's normalization is enabled, the input text will be represented in its normalization form; otherwise, it will remain unchanged as the input text.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the encoding.</param>
        <summary>
            Find the index of the maximum encoding capacity from the start within the text without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index immediately following the last character to be included. In cases where no tokens fit, the result will be 0; conversely, if all tokens fit, the result will be length of the <paramref name="processedText" />.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The input text is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The maximum token count must be greater than 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsValidChar">
      <MemberSignature Language="C#" Value="public bool IsValidChar (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidChar(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.IsValidChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidChar (ch As Char) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsValidChar : char -&gt; bool" Usage="tokenizer.IsValidChar ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="ch">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfTokenCount">
      <MemberSignature Language="C#" Value="public int LastIndexOfTokenCount (string text, int maxTokenCount, out string processedText, out int tokenCount, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfTokenCount(string text, int32 maxTokenCount, [out] string&amp; processedText, [out] int32&amp; tokenCount, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.LastIndexOfTokenCount(System.String,System.Int32,System.String@,System.Int32@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfTokenCount (text As String, maxTokenCount As Integer, ByRef processedText As String, ByRef tokenCount As Integer, Optional considerSpecialTokens As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfTokenCount : string * int * string * int * bool -&gt; int" Usage="tokenizer.LastIndexOfTokenCount (text, maxTokenCount, processedText, tokenCount, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="maxTokenCount" Type="System.Int32" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="processedText" Type="System.String" RefType="out" Index="2" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="4" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum token count to limit the encoding capacity.</param>
        <param name="processedText">If the tokenizer's normalization is enabled, the input text will be represented in its normalization form; otherwise, it will remain unchanged as the input text.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the encoding.</param>
        <summary>
            Find the index of the maximum encoding capacity from the end within the text without surpassing the token limit.
            </summary>
        <returns>
            The start index of the maximum encoding capacity within the processed text without surpassing the token limit.
            It represents the index at the first character to be included. In cases where no tokens fit, the result will be length of the <paramref name="processedText" />; conversely, if all tokens fit, the result will be 0.
            </returns>
        <remarks>
            If the whole text can be encoded within the token limit, the returned index will be 0.
            </remarks>
        <exception cref="T:System.ArgumentNullException">The input text is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The maximum token count must be greater than 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.Model Model { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.Model Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tokenizer.Model" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Model As Model" />
      <MemberSignature Language="F#" Value="member this.Model : Microsoft.ML.Tokenizers.Model" Usage="Microsoft.ML.Tokenizers.Tokenizer.Model" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Model</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Model in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Normalizer">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.Normalizer? Normalizer { get; set; }" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.Normalizer Normalizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tokenizer.Normalizer" />
      <MemberSignature Language="VB.NET" Value="Public Property Normalizer As Normalizer" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="F#" Value="member this.Normalizer : Microsoft.ML.Tokenizers.Normalizer with get, set" Usage="Microsoft.ML.Tokenizers.Tokenizer.Normalizer" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.Normalizer? Normalizer { get; }" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Normalizer As Normalizer" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.Normalizer : Microsoft.ML.Tokenizers.Normalizer" Usage="Microsoft.ML.Tokenizers.Tokenizer.Normalizer" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Normalizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the Normalizer in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreTokenizer">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.PreTokenizer PreTokenizer { get; set; }" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.PreTokenizer PreTokenizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tokenizer.PreTokenizer" />
      <MemberSignature Language="VB.NET" Value="Public Property PreTokenizer As PreTokenizer" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="F#" Value="member this.PreTokenizer : Microsoft.ML.Tokenizers.PreTokenizer with get, set" Usage="Microsoft.ML.Tokenizers.Tokenizer.PreTokenizer" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.PreTokenizer PreTokenizer { get; }" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreTokenizer As PreTokenizer" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.PreTokenizer : Microsoft.ML.Tokenizers.PreTokenizer" Usage="Microsoft.ML.Tokenizers.Tokenizer.PreTokenizer" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.PreTokenizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the PreTokenizer used by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrainFromFiles">
      <MemberSignature Language="C#" Value="public void TrainFromFiles (Microsoft.ML.Tokenizers.Trainer? trainer, Microsoft.ML.Tokenizers.ReportProgress? progress, params string[] files);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrainFromFiles(class Microsoft.ML.Tokenizers.Trainer trainer, class Microsoft.ML.Tokenizers.ReportProgress progress, string[] files) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.TrainFromFiles(Microsoft.ML.Tokenizers.Trainer,Microsoft.ML.Tokenizers.ReportProgress,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrainFromFiles (trainer As Trainer, progress As ReportProgress, ParamArray files As String())" />
      <MemberSignature Language="F#" Value="member this.TrainFromFiles : Microsoft.ML.Tokenizers.Trainer * Microsoft.ML.Tokenizers.ReportProgress * string[] -&gt; unit" Usage="tokenizer.TrainFromFiles (trainer, progress, files)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trainer" Type="Microsoft.ML.Tokenizers.Trainer" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="progress" Type="Microsoft.ML.Tokenizers.ReportProgress" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="files" Type="System.String[]" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trainer">An optional trainer that should be used to train our Model.</param>
        <param name="progress">Optional progress callback to report the training progress.</param>
        <param name="files">A list of the files that we should use for training.</param>
        <summary>
            Train the tokenizer model using input files.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
