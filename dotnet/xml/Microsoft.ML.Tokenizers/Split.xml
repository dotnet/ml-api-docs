<Type Name="Split" FullName="Microsoft.ML.Tokenizers.Split">
  <TypeSignature Language="C#" Value="public sealed class Split : IEquatable&lt;Microsoft.ML.Tokenizers.Split&gt;" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Split extends System.Object implements class System.IEquatable`1&lt;class Microsoft.ML.Tokenizers.Split&gt;" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.Split" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Split&#xA;Implements IEquatable(Of Split)" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
  <TypeSignature Language="F#" Value="type Split = class&#xA;    interface IEquatable&lt;Split&gt;" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
  <TypeSignature Language="C#" Value="public struct Split : IEquatable&lt;Microsoft.ML.Tokenizers.Split&gt;" FrameworkAlternate="ml-dotnet-preview" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Split extends System.ValueType implements class System.IEquatable`1&lt;valuetype Microsoft.ML.Tokenizers.Split&gt;" FrameworkAlternate="ml-dotnet-preview" />
  <TypeSignature Language="VB.NET" Value="Public Structure Split&#xA;Implements IEquatable(Of Split)" FrameworkAlternate="ml-dotnet-preview" />
  <TypeSignature Language="F#" Value="type Split = struct" FrameworkAlternate="ml-dotnet-preview" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="ml-dotnet-preview">System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.ML.Tokenizers.Split&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            This Split contains the underlying split token as well as its offsets
            in the original string. These offsets are in the `original` referential.
            It also contains any `Token` associated to the current split.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Split (string token, (int Index, int End) offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string token, valuetype System.ValueTuple`2&lt;int32, int32&gt; offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Split.#ctor(System.String,System.ValueTuple{System.Int32,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (token As String, offset As ValueTuple(Of Integer, Integer))" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.Split : string * ValueTuple&lt;int, int&gt; -&gt; Microsoft.ML.Tokenizers.Split" Usage="new Microsoft.ML.Tokenizers.Split (token, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="token" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="offset" Type="System.ValueTuple&lt;System.Int32,System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Index", "End" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Index", "End" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <param name="offset">To be added.</param>
        <summary>
            create a Split object using the token and the offset
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Split (string token, (int Index, int Length) offset, bool isSpecialToken = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string token, valuetype System.ValueTuple`2&lt;int32, int32&gt; offset, bool isSpecialToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Split.#ctor(System.String,System.ValueTuple{System.Int32,System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (token As String, offset As ValueTuple(Of Integer, Integer), Optional isSpecialToken As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.Split : string * ValueTuple&lt;int, int&gt; * bool -&gt; Microsoft.ML.Tokenizers.Split" Usage="new Microsoft.ML.Tokenizers.Split (token, offset, isSpecialToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="token" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="offset" Type="System.ValueTuple&lt;System.Int32,System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet-preview">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Index", "Length" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Index", "Length" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="isSpecialToken" Type="System.Boolean" Index="2" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="token">The token string</param>
        <param name="offset">The offset mapping to the original string</param>
        <param name="isSpecialToken">Indicates whether the token is a special token</param>
        <summary>
            create a Split object using the token and the offset
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.ML.Tokenizers.Split? other);" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class Microsoft.ML.Tokenizers.Split other) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Split.Equals(Microsoft.ML.Tokenizers.Split)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Split) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.ML.Tokenizers.Split -&gt; bool" Usage="split.Equals other" />
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.ML.Tokenizers.Split other);" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype Microsoft.ML.Tokenizers.Split other) cil managed" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.ML.Tokenizers.Split" />
      </Parameters>
      <Docs>
        <param name="other">The Split object to compare with the current object.</param>
        <summary>
            Indicates whether the current Split object is equal to another Split object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialToken">
      <MemberSignature Language="C#" Value="public bool IsSpecialToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Split.IsSpecialToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialToken As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSpecialToken : bool" Usage="Microsoft.ML.Tokenizers.Split.IsSpecialToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets if the current Split is a special token.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public (int Index, int End) Offset { get; }" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ValueTuple`2&lt;int32, int32&gt; Offset" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Split.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As ValueTuple(Of Integer, Integer)" />
      <MemberSignature Language="F#" Value="member this.Offset : ValueTuple&lt;int, int&gt;" Usage="Microsoft.ML.Tokenizers.Split.Offset" />
      <MemberSignature Language="C#" Value="public (int Index, int Length) Offset { get; }" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Index", "End" })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Index", "End" })&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="ml-dotnet-preview">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Index", "Length" })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Index", "Length" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.Int32,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the offset mapping to the original string
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;char&gt; TokenSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;char&gt; TokenSpan" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Split.TokenSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenSpan As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="F#" Value="member this.TokenSpan : ReadOnlySpan&lt;char&gt;" Usage="Microsoft.ML.Tokenizers.Split.TokenSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the underlying split token as a span.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenString">
      <MemberSignature Language="C#" Value="public string TokenString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TokenString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Split.TokenString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenString As String" />
      <MemberSignature Language="F#" Value="member this.TokenString : string" Usage="Microsoft.ML.Tokenizers.Split.TokenString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the underlying split token. Each SubString is represented by a token
            and in the end we might be carrying a lot of SubString representing various parts of the
            original input string.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
