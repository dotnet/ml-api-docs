<Type Name="EnglishRoberta" FullName="Microsoft.ML.Tokenizers.EnglishRoberta">
  <TypeSignature Language="C#" Value="public sealed class EnglishRoberta : Microsoft.ML.Tokenizers.Model" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EnglishRoberta extends Microsoft.ML.Tokenizers.Model" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.EnglishRoberta" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EnglishRoberta&#xA;Inherits Model" />
  <TypeSignature Language="F#" Value="type EnglishRoberta = class&#xA;    inherit Model" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Tokenizers.Model</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represent the Byte Pair Encoding model.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnglishRoberta (System.IO.Stream vocabularyStream, System.IO.Stream mergeStream, System.IO.Stream highestOccurrenceMappingStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream vocabularyStream, class System.IO.Stream mergeStream, class System.IO.Stream highestOccurrenceMappingStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.#ctor(System.IO.Stream,System.IO.Stream,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (vocabularyStream As Stream, mergeStream As Stream, highestOccurrenceMappingStream As Stream)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.EnglishRoberta : System.IO.Stream * System.IO.Stream * System.IO.Stream -&gt; Microsoft.ML.Tokenizers.EnglishRoberta" Usage="new Microsoft.ML.Tokenizers.EnglishRoberta (vocabularyStream, mergeStream, highestOccurrenceMappingStream)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="vocabularyStream" Type="System.IO.Stream" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="mergeStream" Type="System.IO.Stream" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="highestOccurrenceMappingStream" Type="System.IO.Stream" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="vocabularyStream">The stream of a JSON file containing the dictionary of string keys and their ids.</param>
        <param name="mergeStream">The stream of a file containing the tokens's pairs list.</param>
        <param name="highestOccurrenceMappingStream">Remap the original GPT-2 model Ids to high occurrence ranks and values.</param>
        <summary>
            Construct tokenizer object to use with the English Robert model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnglishRoberta (string vocabularyPath, string mergePath, string highestOccurrenceMappingPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string vocabularyPath, string mergePath, string highestOccurrenceMappingPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (vocabularyPath As String, mergePath As String, highestOccurrenceMappingPath As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.EnglishRoberta : string * string * string -&gt; Microsoft.ML.Tokenizers.EnglishRoberta" Usage="new Microsoft.ML.Tokenizers.EnglishRoberta (vocabularyPath, mergePath, highestOccurrenceMappingPath)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="vocabularyPath" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="mergePath" Type="System.String" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="highestOccurrenceMappingPath" Type="System.String" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="vocabularyPath">The JSON file path containing the dictionary of string keys and their ids.</param>
        <param name="mergePath">The file path containing the tokens's pairs list.</param>
        <param name="highestOccurrenceMappingPath">Remap the original GPT-2 model Ids to high occurrence ranks and values.</param>
        <summary>
            Construct tokenizer object to use with the English Robert model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnglishRoberta (System.IO.Stream vocabularyStream, System.IO.Stream mergeStream, System.IO.Stream highestOccurrenceMappingStream, bool filterUnsupportedChars = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream vocabularyStream, class System.IO.Stream mergeStream, class System.IO.Stream highestOccurrenceMappingStream, bool filterUnsupportedChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.#ctor(System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (vocabularyStream As Stream, mergeStream As Stream, highestOccurrenceMappingStream As Stream, Optional filterUnsupportedChars As Boolean = true)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.EnglishRoberta : System.IO.Stream * System.IO.Stream * System.IO.Stream * bool -&gt; Microsoft.ML.Tokenizers.EnglishRoberta" Usage="new Microsoft.ML.Tokenizers.EnglishRoberta (vocabularyStream, mergeStream, highestOccurrenceMappingStream, filterUnsupportedChars)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="vocabularyStream" Type="System.IO.Stream" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="mergeStream" Type="System.IO.Stream" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="highestOccurrenceMappingStream" Type="System.IO.Stream" Index="2" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="filterUnsupportedChars" Type="System.Boolean" Index="3" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="vocabularyStream">The stream of a JSON file containing the dictionary of string keys and their ids.</param>
        <param name="mergeStream">The stream of a file containing the tokens's pairs list.</param>
        <param name="highestOccurrenceMappingStream">Remap the original GPT-2 model Ids to high occurrence ranks and values.</param>
        <param name="filterUnsupportedChars">Indicate if want to filter the unsupported characters during the decoding.</param>
        <summary>
            Construct tokenizer's model object to use with the English Robert model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnglishRoberta (string vocabularyPath, string mergePath, string highestOccurrenceMappingPath, bool filterUnsupportedChars = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string vocabularyPath, string mergePath, string highestOccurrenceMappingPath, bool filterUnsupportedChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.#ctor(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (vocabularyPath As String, mergePath As String, highestOccurrenceMappingPath As String, Optional filterUnsupportedChars As Boolean = true)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.EnglishRoberta : string * string * string * bool -&gt; Microsoft.ML.Tokenizers.EnglishRoberta" Usage="new Microsoft.ML.Tokenizers.EnglishRoberta (vocabularyPath, mergePath, highestOccurrenceMappingPath, filterUnsupportedChars)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="vocabularyPath" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="mergePath" Type="System.String" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="highestOccurrenceMappingPath" Type="System.String" Index="2" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="filterUnsupportedChars" Type="System.Boolean" Index="3" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="vocabularyPath">The JSON file path containing the dictionary of string keys and their ids.</param>
        <param name="mergePath">The file path containing the tokens's pairs list.</param>
        <param name="highestOccurrenceMappingPath">Remap the original GPT-2 model Ids to high occurrence ranks and values.</param>
        <param name="filterUnsupportedChars">Indicate if want to filter the unsupported characters during the decoding.</param>
        <summary>
            Construct tokenizer's model object to use with the English Robert model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMaskSymbol">
      <MemberSignature Language="C#" Value="public int AddMaskSymbol (string mask = &quot;&lt;mask&gt;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 AddMaskSymbol(string mask) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.AddMaskSymbol(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMaskSymbol (Optional mask As String = &quot;&lt;mask&gt;&quot;) As Integer" />
      <MemberSignature Language="F#" Value="member this.AddMaskSymbol : string -&gt; int" Usage="englishRoberta.AddMaskSymbol mask" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mask">The mask symbol.</param>
        <summary>
            Add the mask symbol to the symbols list.
            </summary>
        <returns>The index of the mask symbol in the symbols list.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertIdsToOccurrenceRanks">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; ConvertIdsToOccurrenceRanks (System.Collections.Generic.IReadOnlyList&lt;int&gt; ids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ConvertIdsToOccurrenceRanks(class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ids) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.ConvertIdsToOccurrenceRanks(System.Collections.Generic.IReadOnlyList{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertIdsToOccurrenceRanks (ids As IReadOnlyList(Of Integer)) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.ConvertIdsToOccurrenceRanks : System.Collections.Generic.IReadOnlyList&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="englishRoberta.ConvertIdsToOccurrenceRanks ids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="ids">The Ids list to map to the high occurrence rank.</param>
        <summary>
            Convert a list of tokens Ids to highest occurrence rankings.
            </summary>
        <returns>The list of ranks mapped from the list of Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertIdsToOccurrenceValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; ConvertIdsToOccurrenceValues (System.Collections.Generic.IReadOnlyList&lt;int&gt; ids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ConvertIdsToOccurrenceValues(class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ids) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.ConvertIdsToOccurrenceValues(System.Collections.Generic.IReadOnlyList{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertIdsToOccurrenceValues (ids As IReadOnlyList(Of Integer)) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.ConvertIdsToOccurrenceValues : System.Collections.Generic.IReadOnlyList&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="englishRoberta.ConvertIdsToOccurrenceValues ids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="ids">The Ids list to map to the high occurrence values.</param>
        <summary>
            Convert a list of tokens Ids to highest occurrence values.
            </summary>
        <returns>The list of occurrence values mapped from the list of Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertOccurrenceRanksToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; ConvertOccurrenceRanksToIds (System.Collections.Generic.IReadOnlyList&lt;int&gt; ranks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ConvertOccurrenceRanksToIds(class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ranks) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.ConvertOccurrenceRanksToIds(System.Collections.Generic.IReadOnlyList{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertOccurrenceRanksToIds (ranks As IReadOnlyList(Of Integer)) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.ConvertOccurrenceRanksToIds : System.Collections.Generic.IReadOnlyList&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="englishRoberta.ConvertOccurrenceRanksToIds ranks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranks" Type="System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="ranks">The high occurrence ranks list to map to the Ids list.</param>
        <summary>
            Convert a list of highest occurrence rankings to tokens Ids list .
            </summary>
        <returns>The list of Ids mapped from the list of ranks.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="public override int CountTokens (ReadOnlySpan&lt;char&gt; text, bool isSpecialToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 CountTokens(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool isSpecialToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.CountTokens(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CountTokens (text As ReadOnlySpan(Of Char), isSpecialToken As Boolean) As Integer" />
      <MemberSignature Language="F#" Value="override this.CountTokens : ReadOnlySpan&lt;char&gt; * bool -&gt; int" Usage="englishRoberta.CountTokens (text, isSpecialToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="isSpecialToken" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode. If the value of the parameter <paramref name="isSpecialToken" /> is true, the entire text will be treated as a special token.</param>
        <param name="isSpecialToken">Specifies whether the entire <paramref name="text" /> is considered a special token. This parameter is ignored in this model.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of tokens that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt; Encode (string text, bool isSpecialToken = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.ML.Tokenizers.Token&gt; Encode(string text, bool isSpecialToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.Encode(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Encode (text As String, Optional isSpecialToken As Boolean = false) As IReadOnlyList(Of Token)" />
      <MemberSignature Language="F#" Value="override this.Encode : string * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt;" Usage="englishRoberta.Encode (text, isSpecialToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="isSpecialToken" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode. If the value of the parameter <paramref name="isSpecialToken" /> is true, the entire text will be treated as a special token.</param>
        <param name="isSpecialToken">Specifies whether the entire <paramref name="text" /> is considered a special token. This parameter is ignored in this model.</param>
        <summary>
            Encode a text string to a list of tokens.
            </summary>
        <returns>The list of tokens generated from the text tokenization.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public override void EncodeToIds (ReadOnlySpan&lt;char&gt; text, bool isSpecialToken, System.Collections.Generic.IList&lt;int&gt; accumulatedIds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool isSpecialToken, class System.Collections.Generic.IList`1&lt;int32&gt; accumulatedIds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.EncodeToIds(System.ReadOnlySpan{System.Char},System.Boolean,System.Collections.Generic.IList{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EncodeToIds (text As ReadOnlySpan(Of Char), isSpecialToken As Boolean, accumulatedIds As IList(Of Integer))" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : ReadOnlySpan&lt;char&gt; * bool * System.Collections.Generic.IList&lt;int&gt; -&gt; unit" Usage="englishRoberta.EncodeToIds (text, isSpecialToken, accumulatedIds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="isSpecialToken" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="accumulatedIds" Type="System.Collections.Generic.IList&lt;System.Int32&gt;" Index="2" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode. If the value of the parameter <paramref name="isSpecialToken" /> is true, the entire text will be treated as a special token.</param>
        <param name="isSpecialToken">Specifies whether the entire <paramref name="text" /> is considered a special token. This parameter is ignored in this model.</param>
        <param name="accumulatedIds">The list of accumulated encoded Ids.</param>
        <summary>
            Encode a split text string to a list of Ids and add them to the accumulatedIds list.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterUnsupportedChars">
      <MemberSignature Language="C#" Value="public bool FilterUnsupportedChars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FilterUnsupportedChars" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.EnglishRoberta.FilterUnsupportedChars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterUnsupportedChars As Boolean" />
      <MemberSignature Language="F#" Value="member this.FilterUnsupportedChars : bool" Usage="Microsoft.ML.Tokenizers.EnglishRoberta.FilterUnsupportedChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicate if want to filter the unsupported characters during the decoding.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTrainer">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Tokenizers.Trainer? GetTrainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.ML.Tokenizers.Trainer GetTrainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.GetTrainer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetTrainer () As Trainer" />
      <MemberSignature Language="F#" Value="override this.GetTrainer : unit -&gt; Microsoft.ML.Tokenizers.Trainer" Usage="englishRoberta.GetTrainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Trainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a trainer object to use in training the model and generate the vocabulary and merges data.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This tokenizer doesn't support training so this method will return null. Consider using Bpe.GetTrainer() for training.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVocab">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt; GetVocab ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; GetVocab() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.GetVocab" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetVocab () As IReadOnlyDictionary(Of String, Integer)" />
      <MemberSignature Language="F#" Value="override this.GetVocab : unit -&gt; System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt;" Usage="englishRoberta.GetVocab " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the dictionary mapping tokens to Ids.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVocabSize">
      <MemberSignature Language="C#" Value="public override int GetVocabSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetVocabSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.GetVocabSize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetVocabSize () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetVocabSize : unit -&gt; int" Usage="englishRoberta.GetVocabSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the dictionary size that map tokens to Ids.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdsToOccurrenceRanks">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; IdsToOccurrenceRanks (System.Collections.Generic.IReadOnlyList&lt;int&gt; ids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; IdsToOccurrenceRanks(class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ids) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.IdsToOccurrenceRanks(System.Collections.Generic.IReadOnlyList{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function IdsToOccurrenceRanks (ids As IReadOnlyList(Of Integer)) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.IdsToOccurrenceRanks : System.Collections.Generic.IReadOnlyList&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="englishRoberta.IdsToOccurrenceRanks ids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="ids">The Ids list to map to the high occurrence rank.</param>
        <summary>
            Convert a list of tokens Ids to highest occurrence rankings.
            </summary>
        <returns>The list of ranks mapped from the list of Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdsToOccurrenceValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; IdsToOccurrenceValues (System.Collections.Generic.IReadOnlyList&lt;int&gt; ids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; IdsToOccurrenceValues(class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ids) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.IdsToOccurrenceValues(System.Collections.Generic.IReadOnlyList{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function IdsToOccurrenceValues (ids As IReadOnlyList(Of Integer)) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.IdsToOccurrenceValues : System.Collections.Generic.IReadOnlyList&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="englishRoberta.IdsToOccurrenceValues ids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="ids">The Ids list to map to the high occurrence values.</param>
        <summary>
            Convert a list of tokens Ids to highest occurrence values.
            </summary>
        <returns>The list of occurrence values mapped from the list of Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdToString">
      <MemberSignature Language="C#" Value="public override string? IdToString (int id, bool skipSpecialTokens = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string IdToString(int32 id, bool skipSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.IdToString(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IdToString (id As Integer, Optional skipSpecialTokens As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="override this.IdToString : int * bool -&gt; string" Usage="englishRoberta.IdToString (id, skipSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" Index="0" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="skipSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="id">The Id to map to the string.</param>
        <param name="skipSpecialTokens">Indicate if want to skip the special tokens during the decoding.</param>
        <summary>
            Map the tokenized Id to the original string.
            </summary>
        <returns>The mapped token of the Id.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdToToken">
      <MemberSignature Language="C#" Value="public override string? IdToToken (int id, bool skipSpecialTokens = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string IdToToken(int32 id, bool skipSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.IdToToken(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IdToToken (id As Integer, Optional skipSpecialTokens As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="override this.IdToToken : int * bool -&gt; string" Usage="englishRoberta.IdToToken (id, skipSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="skipSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="id">The Id to map to the token.</param>
        <param name="skipSpecialTokens">Indicate if want to skip the special tokens during the decoding.</param>
        <summary>
            Map the tokenized Id to the token.
            </summary>
        <returns>The mapped token of the Id.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedChar">
      <MemberSignature Language="C#" Value="public bool IsSupportedChar (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsSupportedChar(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.IsSupportedChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSupportedChar (ch As Char) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSupportedChar : char -&gt; bool" Usage="englishRoberta.IsSupportedChar ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="ch">The character to check.</param>
        <summary>
            Check if the character is supported by the tokenizer's model.
            </summary>
        <returns>True if the character is supported, otherwise false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidChar">
      <MemberSignature Language="C#" Value="public override bool IsValidChar (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidChar(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.IsValidChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidChar (ch As Char) As Boolean" />
      <MemberSignature Language="F#" Value="override this.IsValidChar : char -&gt; bool" Usage="englishRoberta.IsValidChar ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="ch">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapIdToToken">
      <MemberSignature Language="C#" Value="public override string? MapIdToToken (int id, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string MapIdToToken(int32 id, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.MapIdToToken(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MapIdToToken (id As Integer, Optional considerSpecialTokens As Boolean = true) As String" />
      <MemberSignature Language="F#" Value="override this.MapIdToToken : int * bool -&gt; string" Usage="englishRoberta.MapIdToToken (id, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="id">The Id to map to the string.</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the decoding.</param>
        <summary>
            Map the encoded Id to the token.
            </summary>
        <returns>The mapped token of the Id.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapTokenToId">
      <MemberSignature Language="C#" Value="public override int? MapTokenToId (ReadOnlySpan&lt;char&gt; token, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Nullable`1&lt;int32&gt; MapTokenToId(valuetype System.ReadOnlySpan`1&lt;char&gt; token, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.MapTokenToId(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MapTokenToId (token As ReadOnlySpan(Of Char), Optional considerSpecialTokens As Boolean = true) As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.MapTokenToId : ReadOnlySpan&lt;char&gt; * bool -&gt; Nullable&lt;int&gt;" Usage="englishRoberta.MapTokenToId (token, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="token">The token to map to the Id.</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the encoding.</param>
        <summary>
            Map the token to encoded Id.
            </summary>
        <returns>The mapped Id of the token.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OccurrenceRanksIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; OccurrenceRanksIds (System.Collections.Generic.IReadOnlyList&lt;int&gt; ranks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; OccurrenceRanksIds(class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ranks) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.OccurrenceRanksIds(System.Collections.Generic.IReadOnlyList{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function OccurrenceRanksIds (ranks As IReadOnlyList(Of Integer)) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.OccurrenceRanksIds : System.Collections.Generic.IReadOnlyList&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="englishRoberta.OccurrenceRanksIds ranks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranks" Type="System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="ranks">The high occurrence ranks list to map to the Ids list.</param>
        <summary>
            Convert a list of highest occurrence rankings to tokens Ids list .
            </summary>
        <returns>The list of Ids mapped from the list of ranks.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PadIndex">
      <MemberSignature Language="C#" Value="public int PadIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PadIndex" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.EnglishRoberta.PadIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PadIndex As Integer" />
      <MemberSignature Language="F#" Value="member this.PadIndex : int" Usage="Microsoft.ML.Tokenizers.EnglishRoberta.PadIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the index of the pad symbol inside the symbols list.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public override string[] Save (string path, string? prefix = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] Save(string path, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.Save(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Save (path As String, Optional prefix As String = Nothing) As String()" />
      <MemberSignature Language="F#" Value="override this.Save : string * string -&gt; string[]" Usage="englishRoberta.Save (path, prefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
        <Parameter Name="prefix" Type="System.String" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="path">The file system path to store the generated files at.</param>
        <param name="prefix">Optional prefix for the generated file names.</param>
        <summary>
            Save the model data into the vocabulary, merges, and occurrence mapping files.
            </summary>
        <returns>The list of all saved files.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolsCount">
      <MemberSignature Language="C#" Value="public int SymbolsCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SymbolsCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.EnglishRoberta.SymbolsCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SymbolsCount As Integer" />
      <MemberSignature Language="F#" Value="member this.SymbolsCount : int" Usage="Microsoft.ML.Tokenizers.EnglishRoberta.SymbolsCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the symbols list length.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tokenize">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt; Tokenize (string sequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.ML.Tokenizers.Token&gt; Tokenize(string sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.Tokenize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Tokenize (sequence As String) As IReadOnlyList(Of Token)" />
      <MemberSignature Language="F#" Value="override this.Tokenize : string -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt;" Usage="englishRoberta.Tokenize sequence" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="sequence">The sequence to tokenize.</param>
        <summary>
            Tokenize a sequence string to a list of tokens.
            </summary>
        <returns>The list of tokens generated from the sequence tokenization.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenToId">
      <MemberSignature Language="C#" Value="public override int? TokenToId (string token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Nullable`1&lt;int32&gt; TokenToId(string token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRoberta.TokenToId(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TokenToId (token As String) As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.TokenToId : string -&gt; Nullable&lt;int&gt;" Usage="englishRoberta.TokenToId token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="token">The token to map to the Id.</param>
        <summary>
            Map the token to tokenized Id.
            </summary>
        <returns>The mapped Id of the token.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Vocab">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt; Vocab { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; Vocab" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.EnglishRoberta.Vocab" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Vocab As IReadOnlyDictionary(Of String, Integer)" />
      <MemberSignature Language="F#" Value="member this.Vocab : System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt;" Usage="Microsoft.ML.Tokenizers.EnglishRoberta.Vocab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the dictionary mapping tokens to Ids.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
