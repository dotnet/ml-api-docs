<Type Name="EnglishRobertaTokenizer" FullName="Microsoft.ML.Tokenizers.EnglishRobertaTokenizer">
  <TypeSignature Language="C#" Value="public sealed class EnglishRobertaTokenizer : Microsoft.ML.Tokenizers.Tokenizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EnglishRobertaTokenizer extends Microsoft.ML.Tokenizers.Tokenizer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EnglishRobertaTokenizer&#xA;Inherits Tokenizer" />
  <TypeSignature Language="F#" Value="type EnglishRobertaTokenizer = class&#xA;    inherit Tokenizer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Tokenizers.Tokenizer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represent the Byte Pair Encoding model.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddMaskSymbol">
      <MemberSignature Language="C#" Value="public int AddMaskSymbol (string mask = &quot;&lt;mask&gt;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 AddMaskSymbol(string mask) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.AddMaskSymbol(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMaskSymbol (Optional mask As String = &quot;&lt;mask&gt;&quot;) As Integer" />
      <MemberSignature Language="F#" Value="member this.AddMaskSymbol : string -&gt; int" Usage="englishRobertaTokenizer.AddMaskSymbol mask" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mask">The mask symbol.</param>
        <summary>
            Add the mask symbol to the symbols list.
            </summary>
        <returns>The index of the mask symbol in the symbols list.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertIdsToOccurrenceRanks">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; ConvertIdsToOccurrenceRanks (System.Collections.Generic.IReadOnlyList&lt;int&gt; ids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ConvertIdsToOccurrenceRanks(class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ids) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.ConvertIdsToOccurrenceRanks(System.Collections.Generic.IReadOnlyList{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertIdsToOccurrenceRanks (ids As IReadOnlyList(Of Integer)) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.ConvertIdsToOccurrenceRanks : System.Collections.Generic.IReadOnlyList&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="englishRobertaTokenizer.ConvertIdsToOccurrenceRanks ids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="ids">The Ids list to map to the high occurrence rank.</param>
        <summary>
            Convert a list of token Ids to highest occurrence rankings.
            </summary>
        <returns>The list of ranks mapped from the list of Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertIdsToOccurrenceValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; ConvertIdsToOccurrenceValues (System.Collections.Generic.IReadOnlyList&lt;int&gt; ids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ConvertIdsToOccurrenceValues(class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ids) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.ConvertIdsToOccurrenceValues(System.Collections.Generic.IReadOnlyList{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertIdsToOccurrenceValues (ids As IReadOnlyList(Of Integer)) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.ConvertIdsToOccurrenceValues : System.Collections.Generic.IReadOnlyList&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="englishRobertaTokenizer.ConvertIdsToOccurrenceValues ids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="ids">The Ids list to map to the high occurrence values.</param>
        <summary>
            Convert a list of token Ids to highest occurrence values.
            </summary>
        <returns>The list of occurrence values mapped from the list of Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertOccurrenceRanksToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; ConvertOccurrenceRanksToIds (System.Collections.Generic.IReadOnlyList&lt;int&gt; ranks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ConvertOccurrenceRanksToIds(class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; ranks) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.ConvertOccurrenceRanksToIds(System.Collections.Generic.IReadOnlyList{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertOccurrenceRanksToIds (ranks As IReadOnlyList(Of Integer)) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.ConvertOccurrenceRanksToIds : System.Collections.Generic.IReadOnlyList&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="englishRobertaTokenizer.ConvertOccurrenceRanksToIds ranks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranks" Type="System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="ranks">The high occurrence ranks list to map to the Ids list.</param>
        <summary>
            Convert a list of highest occurrence rankings to token Ids list .
            </summary>
        <returns>The list of Ids mapped from the list of ranks.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="protected override int CountTokens (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 CountTokens(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.CountTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CountTokens (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As Integer" />
      <MemberSignature Language="F#" Value="override this.CountTokens : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; int" Usage="englishRobertaTokenizer.CountTokens (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of token Ids that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.EnglishRobertaTokenizer Create (System.IO.Stream vocabularyStream, System.IO.Stream mergeStream, System.IO.Stream highestOccurrenceMappingStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.EnglishRobertaTokenizer Create(class System.IO.Stream vocabularyStream, class System.IO.Stream mergeStream, class System.IO.Stream highestOccurrenceMappingStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Create(System.IO.Stream,System.IO.Stream,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (vocabularyStream As Stream, mergeStream As Stream, highestOccurrenceMappingStream As Stream) As EnglishRobertaTokenizer" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * System.IO.Stream * System.IO.Stream -&gt; Microsoft.ML.Tokenizers.EnglishRobertaTokenizer" Usage="Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Create (vocabularyStream, mergeStream, highestOccurrenceMappingStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EnglishRobertaTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabularyStream" Type="System.IO.Stream" />
        <Parameter Name="mergeStream" Type="System.IO.Stream" />
        <Parameter Name="highestOccurrenceMappingStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="vocabularyStream">The stream of a JSON file containing the dictionary of string keys and their ids.</param>
        <param name="mergeStream">The stream of a file containing the tokens's pairs list.</param>
        <param name="highestOccurrenceMappingStream">Remap the original GPT-2 model Ids to high occurrence ranks and values.</param>
        <summary>
            Create tokenizer's model object to use with the English Robert model.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary stream is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.EnglishRobertaTokenizer Create (string vocabularyPath, string mergePath, string highestOccurrenceMappingPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.EnglishRobertaTokenizer Create(string vocabularyPath, string mergePath, string highestOccurrenceMappingPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Create(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (vocabularyPath As String, mergePath As String, highestOccurrenceMappingPath As String) As EnglishRobertaTokenizer" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string -&gt; Microsoft.ML.Tokenizers.EnglishRobertaTokenizer" Usage="Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Create (vocabularyPath, mergePath, highestOccurrenceMappingPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EnglishRobertaTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabularyPath" Type="System.String" />
        <Parameter Name="mergePath" Type="System.String" />
        <Parameter Name="highestOccurrenceMappingPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="vocabularyPath">The JSON file path containing the dictionary of string keys and their ids.</param>
        <param name="mergePath">The file path containing the tokens's pairs list.</param>
        <param name="highestOccurrenceMappingPath">Remap the original GPT-2 model Ids to high occurrence ranks and values.</param>
        <summary>
            Create tokenizer's model object to use with the English Robert model.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary file is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.EnglishRobertaTokenizer Create (System.IO.Stream vocabularyStream, System.IO.Stream mergeStream, System.IO.Stream highestOccurrenceMappingStream, Microsoft.ML.Tokenizers.PreTokenizer? preTokenizer = default, Microsoft.ML.Tokenizers.Normalizer? normalizer = default, bool filterUnsupportedChars = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.EnglishRobertaTokenizer Create(class System.IO.Stream vocabularyStream, class System.IO.Stream mergeStream, class System.IO.Stream highestOccurrenceMappingStream, class Microsoft.ML.Tokenizers.PreTokenizer preTokenizer, class Microsoft.ML.Tokenizers.Normalizer normalizer, bool filterUnsupportedChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Create(System.IO.Stream,System.IO.Stream,System.IO.Stream,Microsoft.ML.Tokenizers.PreTokenizer,Microsoft.ML.Tokenizers.Normalizer,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (vocabularyStream As Stream, mergeStream As Stream, highestOccurrenceMappingStream As Stream, Optional preTokenizer As PreTokenizer = Nothing, Optional normalizer As Normalizer = Nothing, Optional filterUnsupportedChars As Boolean = true) As EnglishRobertaTokenizer" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * System.IO.Stream * System.IO.Stream * Microsoft.ML.Tokenizers.PreTokenizer * Microsoft.ML.Tokenizers.Normalizer * bool -&gt; Microsoft.ML.Tokenizers.EnglishRobertaTokenizer" Usage="Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Create (vocabularyStream, mergeStream, highestOccurrenceMappingStream, preTokenizer, normalizer, filterUnsupportedChars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EnglishRobertaTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabularyStream" Type="System.IO.Stream" />
        <Parameter Name="mergeStream" Type="System.IO.Stream" />
        <Parameter Name="highestOccurrenceMappingStream" Type="System.IO.Stream" />
        <Parameter Name="preTokenizer" Type="Microsoft.ML.Tokenizers.PreTokenizer" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
        <Parameter Name="filterUnsupportedChars" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="vocabularyStream">The stream of a JSON file containing the dictionary of string keys and their ids.</param>
        <param name="mergeStream">The stream of a file containing the tokens's pairs list.</param>
        <param name="highestOccurrenceMappingStream">Remap the original GPT-2 model Ids to high occurrence ranks and values.</param>
        <param name="preTokenizer">The pre-tokenizer to use.</param>
        <param name="normalizer">The normalizer to use.</param>
        <param name="filterUnsupportedChars">Indicate if want to filter the unsupported characters during the decoding.</param>
        <summary>
            Create tokenizer's model object to use with the English Robert model.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary stream is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.EnglishRobertaTokenizer Create (string vocabularyPath, string mergePath, string highestOccurrenceMappingPath, Microsoft.ML.Tokenizers.PreTokenizer? preTokenizer = default, Microsoft.ML.Tokenizers.Normalizer? normalizer = default, bool filterUnsupportedChars = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.EnglishRobertaTokenizer Create(string vocabularyPath, string mergePath, string highestOccurrenceMappingPath, class Microsoft.ML.Tokenizers.PreTokenizer preTokenizer, class Microsoft.ML.Tokenizers.Normalizer normalizer, bool filterUnsupportedChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Create(System.String,System.String,System.String,Microsoft.ML.Tokenizers.PreTokenizer,Microsoft.ML.Tokenizers.Normalizer,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (vocabularyPath As String, mergePath As String, highestOccurrenceMappingPath As String, Optional preTokenizer As PreTokenizer = Nothing, Optional normalizer As Normalizer = Nothing, Optional filterUnsupportedChars As Boolean = true) As EnglishRobertaTokenizer" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * Microsoft.ML.Tokenizers.PreTokenizer * Microsoft.ML.Tokenizers.Normalizer * bool -&gt; Microsoft.ML.Tokenizers.EnglishRobertaTokenizer" Usage="Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Create (vocabularyPath, mergePath, highestOccurrenceMappingPath, preTokenizer, normalizer, filterUnsupportedChars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EnglishRobertaTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabularyPath" Type="System.String" />
        <Parameter Name="mergePath" Type="System.String" />
        <Parameter Name="highestOccurrenceMappingPath" Type="System.String" />
        <Parameter Name="preTokenizer" Type="Microsoft.ML.Tokenizers.PreTokenizer" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
        <Parameter Name="filterUnsupportedChars" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="vocabularyPath">The JSON file path containing the dictionary of string keys and their ids.</param>
        <param name="mergePath">The file path containing the tokens's pairs list.</param>
        <param name="highestOccurrenceMappingPath">Remap the original GPT-2 model Ids to high occurrence ranks and values.</param>
        <param name="preTokenizer">The pre-tokenizer to use.</param>
        <param name="normalizer">The normalizer to use.</param>
        <param name="filterUnsupportedChars">Indicate if want to filter the unsupported characters during the decoding.</param>
        <summary>
            Create tokenizer's model object to use with the English Robert model.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary file is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public override string Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Decode (ids As IEnumerable(Of Integer)) As String" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; -&gt; string" Usage="englishRobertaTokenizer.Decode ids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <summary>
            Decode the given ids, back to a String.
            </summary>
        <returns>The decoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public override System.Buffers.OperationStatus Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, Span&lt;char&gt; destination, out int idsConsumed, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Buffers.OperationStatus Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; idsConsumed, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Span{System.Char},System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Decode (ids As IEnumerable(Of Integer), destination As Span(Of Char), ByRef idsConsumed As Integer, ByRef charsWritten As Integer) As OperationStatus" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; * Span&lt;char&gt; * int * int -&gt; System.Buffers.OperationStatus" Usage="englishRobertaTokenizer.Decode (ids, destination, idsConsumed, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="idsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="destination">The span to store the decoded text.</param>
        <param name="idsConsumed">The number of ids consumed during the decoding.</param>
        <param name="charsWritten">The number of characters written to the destination span.</param>
        <summary>
            Decode the given ids back to text and store the result in the <paramref name="destination" /> span.
            </summary>
        <returns>The operation status indicates whether all IDs were successfully decoded or if the <paramref name="destination" /> is too small to contain the entire decoded result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="protected override Microsoft.ML.Tokenizers.EncodeResults&lt;int&gt; EncodeToIds (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype Microsoft.ML.Tokenizers.EncodeResults`1&lt;int32&gt; EncodeToIds(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.EncodeToIds(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EncodeToIds (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As EncodeResults(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; Microsoft.ML.Tokenizers.EncodeResults&lt;int&gt;" Usage="englishRobertaTokenizer.EncodeToIds (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EncodeResults&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The encoded results containing the list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToTokens">
      <MemberSignature Language="C#" Value="protected override Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype Microsoft.ML.Tokenizers.EncodeResults`1&lt;valuetype Microsoft.ML.Tokenizers.EncodedToken&gt; EncodeToTokens(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.EncodeToTokens(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EncodeToTokens (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings) As EncodeResults(Of EncodedToken)" />
      <MemberSignature Language="F#" Value="override this.EncodeToTokens : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings -&gt; Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;" Usage="englishRobertaTokenizer.EncodeToTokens (text, textSpan, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.EncodeResults&lt;Microsoft.ML.Tokenizers.EncodedToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <summary>
            Encodes input text to a list of <see cref="T:Microsoft.ML.Tokenizers.EncodedToken" />s.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterUnsupportedChars">
      <MemberSignature Language="C#" Value="public bool FilterUnsupportedChars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FilterUnsupportedChars" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.FilterUnsupportedChars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterUnsupportedChars As Boolean" />
      <MemberSignature Language="F#" Value="member this.FilterUnsupportedChars : bool" Usage="Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.FilterUnsupportedChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicate if want to filter the unsupported characters during the decoding.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexByTokenCount">
      <MemberSignature Language="C#" Value="protected override int GetIndexByTokenCount (string? text, ReadOnlySpan&lt;char&gt; textSpan, Microsoft.ML.Tokenizers.EncodeSettings settings, bool fromEnd, out string? normalizedText, out int tokenCount);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 GetIndexByTokenCount(string text, valuetype System.ReadOnlySpan`1&lt;char&gt; textSpan, valuetype Microsoft.ML.Tokenizers.EncodeSettings settings, bool fromEnd, [out] string&amp; normalizedText, [out] int32&amp; tokenCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.GetIndexByTokenCount(System.String,System.ReadOnlySpan{System.Char},Microsoft.ML.Tokenizers.EncodeSettings,System.Boolean,System.String@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetIndexByTokenCount (text As String, textSpan As ReadOnlySpan(Of Char), settings As EncodeSettings, fromEnd As Boolean, ByRef normalizedText As String, ByRef tokenCount As Integer) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetIndexByTokenCount : string * ReadOnlySpan&lt;char&gt; * Microsoft.ML.Tokenizers.EncodeSettings * bool * string * int -&gt; int" Usage="englishRobertaTokenizer.GetIndexByTokenCount (text, textSpan, settings, fromEnd, normalizedText, tokenCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="textSpan" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="settings" Type="Microsoft.ML.Tokenizers.EncodeSettings" />
        <Parameter Name="fromEnd" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="tokenCount" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="textSpan">The span of the text to encode which will be used if the <paramref name="text" /> is <see langword="null" />.</param>
        <param name="settings">The settings used to encode the text.</param>
        <param name="fromEnd">Indicate whether to find the index from the end of the text.</param>
        <param name="normalizedText">If the tokenizer's normalization is enabled or <paramRef name="settings" /> has <see cref="P:Microsoft.ML.Tokenizers.EncodeSettings.ConsiderNormalization" /> is <see langword="false" />, this will be set to <paramRef name="text" /> in its normalized form; otherwise, this value will be set to <see langword="null" />.</param>
        <param name="tokenCount">The token count can be generated which should be smaller than the maximum token count.</param>
        <summary>
            Find the index of the maximum encoding capacity without surpassing the token limit.
            </summary>
        <returns>
            The index of the maximum encoding capacity within the processed text without surpassing the token limit.
            If <paramRef name="fromEnd" /> is <see langword="false" />, it represents the index immediately following the last character to be included. In cases where no tokens fit, the result will be 0; conversely,
            if all tokens fit, the result will be length of the input text or the <paramref name="normalizedText" /> if the normalization is enabled.
            If <paramRef name="fromEnd" /> is <see langword="true" />, it represents the index of the first character to be included. In cases where no tokens fit, the result will be the text length; conversely,
            if all tokens fit, the result will be zero.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedChar">
      <MemberSignature Language="C#" Value="public bool IsSupportedChar (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsSupportedChar(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.IsSupportedChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSupportedChar (ch As Char) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSupportedChar : char -&gt; bool" Usage="englishRobertaTokenizer.IsSupportedChar ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The character to check.</param>
        <summary>
            Check if the character is supported by the tokenizer's model.
            </summary>
        <returns>True if the character is supported, otherwise false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Normalizer">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Tokenizers.Normalizer? Normalizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.Normalizer Normalizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Normalizer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Normalizer As Normalizer" />
      <MemberSignature Language="F#" Value="member this.Normalizer : Microsoft.ML.Tokenizers.Normalizer" Usage="Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Normalizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Normalizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Normalizer in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PadIndex">
      <MemberSignature Language="C#" Value="public int PadIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PadIndex" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.PadIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PadIndex As Integer" />
      <MemberSignature Language="F#" Value="member this.PadIndex : int" Usage="Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.PadIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the index of the pad symbol inside the symbols list.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreTokenizer">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Tokenizers.PreTokenizer? PreTokenizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.PreTokenizer PreTokenizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.PreTokenizer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PreTokenizer As PreTokenizer" />
      <MemberSignature Language="F#" Value="member this.PreTokenizer : Microsoft.ML.Tokenizers.PreTokenizer" Usage="Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.PreTokenizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.PreTokenizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the PreTokenizer used by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolsCount">
      <MemberSignature Language="C#" Value="public int SymbolsCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SymbolsCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.SymbolsCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SymbolsCount As Integer" />
      <MemberSignature Language="F#" Value="member this.SymbolsCount : int" Usage="Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.SymbolsCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the symbols list length.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Vocabulary">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt; Vocabulary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; Vocabulary" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Vocabulary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Vocabulary As IReadOnlyDictionary(Of String, Integer)" />
      <MemberSignature Language="F#" Value="member this.Vocabulary : System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt;" Usage="Microsoft.ML.Tokenizers.EnglishRobertaTokenizer.Vocabulary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the dictionary mapping tokens to Ids.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
