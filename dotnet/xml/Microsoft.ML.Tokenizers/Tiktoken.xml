<Type Name="Tiktoken" FullName="Microsoft.ML.Tokenizers.Tiktoken">
  <TypeSignature Language="C#" Value="public sealed class Tiktoken : Microsoft.ML.Tokenizers.Model" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Tiktoken extends Microsoft.ML.Tokenizers.Model" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.Tiktoken" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Tiktoken&#xA;Inherits Model" />
  <TypeSignature Language="F#" Value="type Tiktoken = class&#xA;    inherit Model" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Tokenizers.Model</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represent the rapid Byte Pair Encoding model commonly referred to as Tiktoken.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tiktoken (System.IO.Stream vocabStream, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? specialTokens = default, int cacheSize = 8192);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream vocabStream, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; specialTokens, int32 cacheSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.#ctor(System.IO.Stream,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (vocabStream As Stream, Optional specialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.Tiktoken : System.IO.Stream * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int -&gt; Microsoft.ML.Tokenizers.Tiktoken" Usage="new Microsoft.ML.Tokenizers.Tiktoken (vocabStream, specialTokens, cacheSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="vocabStream" Type="System.IO.Stream" />
        <Parameter Name="specialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="cacheSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="vocabStream">The stream to the BPE vocab file.</param>
        <param name="specialTokens">The dictionary mapping special tokens to Ids.</param>
        <param name="cacheSize">The size of the cache to use.</param>
        <summary>
            Create a new Tiktoken tokenizer's model object.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="vocabStream" /> is null or empty.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when failed to load the BPE vocab file.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tiktoken (string vocabFilePath, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? specialTokens = default, int cacheSize = 8192);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string vocabFilePath, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; specialTokens, int32 cacheSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.#ctor(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (vocabFilePath As String, Optional specialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.Tiktoken : string * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int -&gt; Microsoft.ML.Tokenizers.Tiktoken" Usage="new Microsoft.ML.Tokenizers.Tiktoken (vocabFilePath, specialTokens, cacheSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="vocabFilePath" Type="System.String" />
        <Parameter Name="specialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="cacheSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="vocabFilePath">The path to the BPE vocab file.</param>
        <param name="specialTokens">The dictionary mapping special tokens to Ids.</param>
        <param name="cacheSize">The size of the cache to use.</param>
        <summary>
            Create a new Tiktoken tokenizer's model object.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="vocabFilePath" /> is null or empty.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when failed to load the BPE vocab file.</exception>
      </Docs>
    </Member>
    <Member MemberName="CountTokens">
      <MemberSignature Language="C#" Value="public override int CountTokens (ReadOnlySpan&lt;char&gt; text, bool isSpecialToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 CountTokens(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool isSpecialToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.CountTokens(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CountTokens (text As ReadOnlySpan(Of Char), isSpecialToken As Boolean) As Integer" />
      <MemberSignature Language="F#" Value="override this.CountTokens : ReadOnlySpan&lt;char&gt; * bool -&gt; int" Usage="tiktoken.CountTokens (text, isSpecialToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="isSpecialToken" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode. If the value of the parameter <paramref name="isSpecialToken" /> is true, the entire text will be treated as a special token.</param>
        <param name="isSpecialToken">Specifies whether the entire <paramref name="text" /> is considered a special token.</param>
        <summary>
            Get the number of tokens that the input text will be encoded to.
            </summary>
        <returns>The number of tokens that the input text will be encoded to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.Tiktoken&gt; CreateAsync (System.IO.Stream vocabStream, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? specialTokens = default, int cacheSize = 8192, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ML.Tokenizers.Tiktoken&gt; CreateAsync(class System.IO.Stream vocabStream, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; specialTokens, int32 cacheSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.CreateAsync(System.IO.Stream,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAsync (vocabStream As Stream, Optional specialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Tiktoken)" />
      <MemberSignature Language="F#" Value="static member CreateAsync : System.IO.Stream * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.Tiktoken&gt;" Usage="Microsoft.ML.Tokenizers.Tiktoken.CreateAsync (vocabStream, specialTokens, cacheSize, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.Tiktoken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabStream" Type="System.IO.Stream" />
        <Parameter Name="specialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="cacheSize" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vocabStream">The stream to the BPE vocab file.</param>
        <param name="specialTokens">The dictionary mapping special tokens to Ids.</param>
        <param name="cacheSize">The size of the cache to use.</param>
        <param name="cancellationToken">
          <see cref="T:System.Threading.CancellationToken" /> used to request cancellation of the operation.</param>
        <summary>
            Create a new Tiktoken tokenizer's model object asynchronously.
            </summary>
        <returns>Tiktoken tokenizer's object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.Tiktoken&gt; CreateAsync (string vocabFilePath, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? specialTokensEncoder = default, int cacheSize = 8192, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ML.Tokenizers.Tiktoken&gt; CreateAsync(string vocabFilePath, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; specialTokensEncoder, int32 cacheSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.CreateAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAsync (vocabFilePath As String, Optional specialTokensEncoder As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Tiktoken)" />
      <MemberSignature Language="F#" Value="static member CreateAsync : string * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.Tiktoken&gt;" Usage="Microsoft.ML.Tokenizers.Tiktoken.CreateAsync (vocabFilePath, specialTokensEncoder, cacheSize, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.Tiktoken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabFilePath" Type="System.String" />
        <Parameter Name="specialTokensEncoder" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="cacheSize" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vocabFilePath">The BPE vocab file.</param>
        <param name="specialTokensEncoder">The dictionary mapping special tokens to Ids.</param>
        <param name="cacheSize">The size of the cache to use.</param>
        <param name="cancellationToken">
          <see cref="T:System.Threading.CancellationToken" /> used to request cancellation of the operation.</param>
        <summary>
            Create a new Tiktoken tokenizer's object asynchronously.
            </summary>
        <returns>Tiktoken tokenizer's model object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateByModelName">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.Tokenizer CreateByModelName (string modelName, System.IO.Stream vocabStream, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? extraSpecialTokens = default, int cacheSize = 8192, Microsoft.ML.Tokenizers.Normalizer? normalizer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.Tokenizer CreateByModelName(string modelName, class System.IO.Stream vocabStream, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; extraSpecialTokens, int32 cacheSize, class Microsoft.ML.Tokenizers.Normalizer normalizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.CreateByModelName(System.String,System.IO.Stream,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.Int32,Microsoft.ML.Tokenizers.Normalizer)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateByModelName (modelName As String, vocabStream As Stream, Optional extraSpecialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192, Optional normalizer As Normalizer = Nothing) As Tokenizer" />
      <MemberSignature Language="F#" Value="static member CreateByModelName : string * System.IO.Stream * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int * Microsoft.ML.Tokenizers.Normalizer -&gt; Microsoft.ML.Tokenizers.Tokenizer" Usage="Microsoft.ML.Tokenizers.Tiktoken.CreateByModelName (modelName, vocabStream, extraSpecialTokens, cacheSize, normalizer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Tokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelName" Type="System.String" />
        <Parameter Name="vocabStream" Type="System.IO.Stream" />
        <Parameter Name="extraSpecialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="cacheSize" Type="System.Int32" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
      </Parameters>
      <Docs>
        <param name="modelName">Model name</param>
        <param name="vocabStream">The stream to the BPE vocab file.</param>
        <param name="extraSpecialTokens">Extra special tokens other than the built-in ones for the model</param>
        <param name="cacheSize">The size of the cache to use.</param>
        <param name="normalizer">To normalize the text before tokenization</param>
        <summary>
            Create a Tiktoken tokenizer based on model name and vocab file.
            </summary>
        <returns>The tokenizer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateByModelNameAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.Tokenizer&gt; CreateByModelNameAsync (string modelName, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? extraSpecialTokens = default, Microsoft.ML.Tokenizers.Normalizer? normalizer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ML.Tokenizers.Tokenizer&gt; CreateByModelNameAsync(string modelName, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; extraSpecialTokens, class Microsoft.ML.Tokenizers.Normalizer normalizer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.CreateByModelNameAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},Microsoft.ML.Tokenizers.Normalizer,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateByModelNameAsync (modelName As String, Optional extraSpecialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional normalizer As Normalizer = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Tokenizer)" />
      <MemberSignature Language="F#" Value="static member CreateByModelNameAsync : string * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * Microsoft.ML.Tokenizers.Normalizer * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.Tokenizer&gt;" Usage="Microsoft.ML.Tokenizers.Tiktoken.CreateByModelNameAsync (modelName, extraSpecialTokens, normalizer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.Tokenizer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelName" Type="System.String" />
        <Parameter Name="extraSpecialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="modelName">Model name</param>
        <param name="extraSpecialTokens">Extra special tokens other than the built-in ones for the model</param>
        <param name="normalizer">To normalize the text before tokenization</param>
        <param name="cancellationToken">
          <see cref="T:System.Threading.CancellationToken" /> used to request cancellation of the operation.</param>
        <summary>
            Create tokenizer based on model name
            </summary>
        <returns>The tokenizer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateByModelNameAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.Tokenizer&gt; CreateByModelNameAsync (string modelName, System.IO.Stream vocabStream, System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? extraSpecialTokens = default, int cacheSize = 8192, Microsoft.ML.Tokenizers.Normalizer? normalizer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ML.Tokenizers.Tokenizer&gt; CreateByModelNameAsync(string modelName, class System.IO.Stream vocabStream, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; extraSpecialTokens, int32 cacheSize, class Microsoft.ML.Tokenizers.Normalizer normalizer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.CreateByModelNameAsync(System.String,System.IO.Stream,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.Int32,Microsoft.ML.Tokenizers.Normalizer,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateByModelNameAsync (modelName As String, vocabStream As Stream, Optional extraSpecialTokens As IReadOnlyDictionary(Of String, Integer) = Nothing, Optional cacheSize As Integer = 8192, Optional normalizer As Normalizer = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Tokenizer)" />
      <MemberSignature Language="F#" Value="static member CreateByModelNameAsync : string * System.IO.Stream * System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt; * int * Microsoft.ML.Tokenizers.Normalizer * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.Tokenizer&gt;" Usage="Microsoft.ML.Tokenizers.Tiktoken.CreateByModelNameAsync (modelName, vocabStream, extraSpecialTokens, cacheSize, normalizer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.Tokenizer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelName" Type="System.String" />
        <Parameter Name="vocabStream" Type="System.IO.Stream" />
        <Parameter Name="extraSpecialTokens" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;" />
        <Parameter Name="cacheSize" Type="System.Int32" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="modelName">Model name</param>
        <param name="vocabStream">The stream to the BPE vocab file.</param>
        <param name="extraSpecialTokens">Extra special tokens other than the built-in ones for the model</param>
        <param name="cacheSize">The size of the cache to use.</param>
        <param name="normalizer">To normalize the text before tokenization</param>
        <param name="cancellationToken">
          <see cref="T:System.Threading.CancellationToken" /> used to request cancellation of the operation.</param>
        <summary>
            Create a Tiktoken tokenizer based on model name and vocab file.
            </summary>
        <returns>The tokenizer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public override string? Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, Microsoft.ML.Tokenizers.TokenizerDecoder? decoder = default, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, class Microsoft.ML.Tokenizers.TokenizerDecoder decoder, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.Decode(System.Collections.Generic.IEnumerable{System.Int32},Microsoft.ML.Tokenizers.TokenizerDecoder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Decode (ids As IEnumerable(Of Integer), Optional decoder As TokenizerDecoder = Nothing, Optional considerSpecialTokens As Boolean = true) As String" />
      <MemberSignature Language="F#" Value="override this.Decode : seq&lt;int&gt; * Microsoft.ML.Tokenizers.TokenizerDecoder * bool -&gt; string" Usage="tiktoken.Decode (ids, decoder, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="decoder" Type="Microsoft.ML.Tokenizers.TokenizerDecoder" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="considerSpecialTokens">Whether the special tokens should be kept in the decoded string.</param>
        <param name="decoder">The optional Decoder to merge the given list of tokens in a string.</param>
        <summary>
            Decode the given ids, back to a String.
            </summary>
        <returns>The decoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decoder">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;int,ReadOnlyMemory&lt;byte&gt;&gt; Decoder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;int32, valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&gt; Decoder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tiktoken.Decoder" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Decoder As IReadOnlyDictionary(Of Integer, ReadOnlyMemory(Of Byte))" />
      <MemberSignature Language="F#" Value="member this.Decoder : System.Collections.Generic.IReadOnlyDictionary&lt;int, ReadOnlyMemory&lt;byte&gt;&gt;" Usage="Microsoft.ML.Tokenizers.Tiktoken.Decoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.Int32,System.ReadOnlyMemory&lt;System.Byte&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the dictionary mapping Ids to token utf-8 bytes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt; Encode (string text, bool isSpecialToken = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.ML.Tokenizers.Token&gt; Encode(string text, bool isSpecialToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.Encode(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Encode (text As String, Optional isSpecialToken As Boolean = false) As IReadOnlyList(Of Token)" />
      <MemberSignature Language="F#" Value="override this.Encode : string * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt;" Usage="tiktoken.Encode (text, isSpecialToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="isSpecialToken" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode. If the value of the parameter <paramref name="isSpecialToken" /> is true, the entire text will be treated as a special token.</param>
        <param name="isSpecialToken">Specifies whether the entire <paramref name="text" /> is considered a special token.</param>
        <summary>
            Encode a split text string to a list of tokens.
            </summary>
        <returns>The list of tokens generated from the text tokenization.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoder">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;ReadOnlyMemory&lt;byte&gt;,int&gt; Encoder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;, int32&gt; Encoder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tiktoken.Encoder" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Encoder As IReadOnlyDictionary(Of ReadOnlyMemory(Of Byte), Integer)" />
      <MemberSignature Language="F#" Value="member this.Encoder : System.Collections.Generic.IReadOnlyDictionary&lt;ReadOnlyMemory&lt;byte&gt;, int&gt;" Usage="Microsoft.ML.Tokenizers.Tiktoken.Encoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.ReadOnlyMemory&lt;System.Byte&gt;,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the dictionary mapping token bytes to Ids.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public override void EncodeToIds (ReadOnlySpan&lt;char&gt; text, bool isSpecialToken, System.Collections.Generic.IList&lt;int&gt; accumulatedIds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool isSpecialToken, class System.Collections.Generic.IList`1&lt;int32&gt; accumulatedIds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.EncodeToIds(System.ReadOnlySpan{System.Char},System.Boolean,System.Collections.Generic.IList{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EncodeToIds (text As ReadOnlySpan(Of Char), isSpecialToken As Boolean, accumulatedIds As IList(Of Integer))" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : ReadOnlySpan&lt;char&gt; * bool * System.Collections.Generic.IList&lt;int&gt; -&gt; unit" Usage="tiktoken.EncodeToIds (text, isSpecialToken, accumulatedIds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="isSpecialToken" Type="System.Boolean" />
        <Parameter Name="accumulatedIds" Type="System.Collections.Generic.IList&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode. If the value of the parameter <paramref name="isSpecialToken" /> is true, the entire text will be treated as a special token.</param>
        <param name="isSpecialToken">Specifies whether the entire <paramref name="text" /> is considered a special token.</param>
        <param name="accumulatedIds">The list of accumulated Ids.</param>
        <summary>
            Encode text to a list of Ids.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapIdToToken">
      <MemberSignature Language="C#" Value="public override string? MapIdToToken (int id, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string MapIdToToken(int32 id, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.MapIdToToken(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MapIdToToken (id As Integer, Optional considerSpecialTokens As Boolean = true) As String" />
      <MemberSignature Language="F#" Value="override this.MapIdToToken : int * bool -&gt; string" Usage="tiktoken.MapIdToToken (id, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">The Id to map to the token.</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the decoding.</param>
        <summary>
            Map the encoded Id to the token.
            </summary>
        <returns>The mapped token of the Id.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapTokenToId">
      <MemberSignature Language="C#" Value="public override int? MapTokenToId (ReadOnlySpan&lt;char&gt; token, bool considerSpecialTokens = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Nullable`1&lt;int32&gt; MapTokenToId(valuetype System.ReadOnlySpan`1&lt;char&gt; token, bool considerSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tiktoken.MapTokenToId(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MapTokenToId (token As ReadOnlySpan(Of Char), Optional considerSpecialTokens As Boolean = true) As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.MapTokenToId : ReadOnlySpan&lt;char&gt; * bool -&gt; Nullable&lt;int&gt;" Usage="tiktoken.MapTokenToId (token, considerSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="considerSpecialTokens" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="token">The token to map to the Id.</param>
        <param name="considerSpecialTokens">Indicate if want to consider the special tokens during the encoding.</param>
        <summary>
            Map the token to encoded Id.
            </summary>
        <returns>The mapped Id of the token.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecialTokensEncoder">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt;? SpecialTokensEncoder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; SpecialTokensEncoder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tiktoken.SpecialTokensEncoder" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpecialTokensEncoder As IReadOnlyDictionary(Of String, Integer)" />
      <MemberSignature Language="F#" Value="member this.SpecialTokensEncoder : System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt;" Usage="Microsoft.ML.Tokenizers.Tiktoken.SpecialTokensEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the dictionary mapping special tokens to Ids.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Vocab">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt; Vocab { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; Vocab" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tiktoken.Vocab" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Vocab As IReadOnlyDictionary(Of String, Integer)" />
      <MemberSignature Language="F#" Value="member this.Vocab : System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt;" Usage="Microsoft.ML.Tokenizers.Tiktoken.Vocab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the dictionary mapping tokens to Ids.
            </summary>
        <value>To be added.</value>
        <remarks>This may not contain the full set of vocabulary tokens, use Encoder to get the full set of vocabulary.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
