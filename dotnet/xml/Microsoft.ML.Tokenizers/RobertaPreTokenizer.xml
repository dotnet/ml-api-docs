<Type Name="RobertaPreTokenizer" FullName="Microsoft.ML.Tokenizers.RobertaPreTokenizer">
  <TypeSignature Language="C#" Value="public sealed class RobertaPreTokenizer : Microsoft.ML.Tokenizers.PreTokenizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RobertaPreTokenizer extends Microsoft.ML.Tokenizers.PreTokenizer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.RobertaPreTokenizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RobertaPreTokenizer&#xA;Inherits PreTokenizer" />
  <TypeSignature Language="F#" Value="type RobertaPreTokenizer = class&#xA;    inherit PreTokenizer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Tokenizers.PreTokenizer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The pre-tokenizer for Roberta English tokenizer.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RobertaPreTokenizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.RobertaPreTokenizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.ML.Tokenizers.RobertaPreTokenizer Instance;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.ML.Tokenizers.RobertaPreTokenizer Instance" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Tokenizers.RobertaPreTokenizer.Instance" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Instance As RobertaPreTokenizer " />
      <MemberSignature Language="F#" Value=" staticval mutable Instance : Microsoft.ML.Tokenizers.RobertaPreTokenizer" Usage="Microsoft.ML.Tokenizers.RobertaPreTokenizer.Instance" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.RobertaPreTokenizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a singleton instance of the Roberta pre-tokenizer..
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.RobertaPreTokenizer Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.ML.Tokenizers.RobertaPreTokenizer Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.RobertaPreTokenizer.Instance" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Instance As RobertaPreTokenizer" />
      <MemberSignature Language="F#" Value="static member Instance : Microsoft.ML.Tokenizers.RobertaPreTokenizer" Usage="Microsoft.ML.Tokenizers.RobertaPreTokenizer.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.RobertaPreTokenizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a singleton instance of the Roberta pre-tokenizer..
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreTokenize">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;(int Offset, int Length)&gt; PreTokenize (ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.ValueTuple`2&lt;int32, int32&gt;&gt; PreTokenize(valuetype System.ReadOnlySpan`1&lt;char&gt; text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.RobertaPreTokenizer.PreTokenize(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function PreTokenize (text As ReadOnlySpan(Of Char)) As IEnumerable(Of ValueTuple(Of Integer, Integer))" />
      <MemberSignature Language="F#" Value="override this.PreTokenize : ReadOnlySpan&lt;char&gt; -&gt; seq&lt;ValueTuple&lt;int, int&gt;&gt;" Usage="robertaPreTokenizer.PreTokenize text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ValueTuple&lt;System.Int32,System.Int32&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="ml-dotnet">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Offset", "Length" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Offset", "Length" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="text">The string to split into tokens.</param>
        <summary>
            Get the offsets and lengths of the tokens relative to the <paramref name="text" />.
            </summary>
        <returns>The offsets and lengths of the tokens, expressed as pairs, are relative to the original string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreTokenize">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;(int Offset, int Length)&gt; PreTokenize (string text);" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.ValueTuple`2&lt;int32, int32&gt;&gt; PreTokenize(string text) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.RobertaPreTokenizer.PreTokenize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function PreTokenize (text As String) As IEnumerable(Of ValueTuple(Of Integer, Integer))" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="override this.PreTokenize : string -&gt; seq&lt;ValueTuple&lt;int, int&gt;&gt;" Usage="robertaPreTokenizer.PreTokenize text" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Split&gt; PreTokenize (string? sentence);" FrameworkAlternate="ml-dotnet-2.0.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.ML.Tokenizers.Split&gt; PreTokenize(string sentence) cil managed" FrameworkAlternate="ml-dotnet-2.0.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function PreTokenize (sentence As String) As IReadOnlyList(Of Split)" FrameworkAlternate="ml-dotnet-2.0.0" />
      <MemberSignature Language="F#" Value="override this.PreTokenize : string -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Split&gt;" Usage="robertaPreTokenizer.PreTokenize sentence" FrameworkAlternate="ml-dotnet-2.0.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview">System.Collections.Generic.IEnumerable&lt;System.ValueTuple&lt;System.Int32,System.Int32&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="ml-dotnet">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Offset", "Length" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Offset", "Length" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
        <ReturnType FrameworkAlternate="ml-dotnet-2.0.0">System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Split&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0;ml-dotnet-preview" />
        <Parameter Name="sentence" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet-2.0.0" />
      </Parameters>
      <Docs>
        <param name="text">The string to split into tokens.</param>
        <param name="sentence">The string to split into tokens.</param>
        <summary>
            Get the offsets and lengths of the tokens relative to the <paramref name="text" />.
            </summary>
        <returns>The offsets and lengths of the tokens, expressed as pairs, are relative to the original string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
