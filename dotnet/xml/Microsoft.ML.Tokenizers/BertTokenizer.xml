<Type Name="BertTokenizer" FullName="Microsoft.ML.Tokenizers.BertTokenizer">
  <TypeSignature Language="C#" Value="public sealed class BertTokenizer : Microsoft.ML.Tokenizers.WordPieceTokenizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BertTokenizer extends Microsoft.ML.Tokenizers.WordPieceTokenizer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.BertTokenizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BertTokenizer&#xA;Inherits WordPieceTokenizer" />
  <TypeSignature Language="F#" Value="type BertTokenizer = class&#xA;    inherit WordPieceTokenizer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Tokenizers.WordPieceTokenizer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Tokenizer for Bert model.
            </summary>
    <remarks>
            The BertTokenizer is a based on the WordPieceTokenizer and is used to tokenize text for Bert models.
            The implementation of the BertTokenizer is based on the original Bert implementation in the Hugging Face Transformers library.
            https://huggingface.co/transformers/v3.0.2/model_doc/bert.html?highlight=berttokenizerfast#berttokenizer
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplyBasicTokenization">
      <MemberSignature Language="C#" Value="public bool ApplyBasicTokenization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyBasicTokenization" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.ApplyBasicTokenization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplyBasicTokenization As Boolean" />
      <MemberSignature Language="F#" Value="member this.ApplyBasicTokenization : bool" Usage="Microsoft.ML.Tokenizers.BertTokenizer.ApplyBasicTokenization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the tokenizer should do basic tokenization. Like clean text, normalize it, lowercasing, etc.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildInputsWithSpecialTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; BuildInputsWithSpecialTokens (System.Collections.Generic.IEnumerable&lt;int&gt; tokenIds, System.Collections.Generic.IEnumerable&lt;int&gt;? additionalTokenIds = default);" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; BuildInputsWithSpecialTokens(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; additionalTokenIds) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.BuildInputsWithSpecialTokens(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildInputsWithSpecialTokens (tokenIds As IEnumerable(Of Integer), Optional additionalTokenIds As IEnumerable(Of Integer) = Nothing) As IReadOnlyList(Of Integer)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="F#" Value="member this.BuildInputsWithSpecialTokens : seq&lt;int&gt; * seq&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.BuildInputsWithSpecialTokens (tokenIds, additionalTokenIds)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; BuildInputsWithSpecialTokens (System.Collections.Generic.IEnumerable&lt;int&gt; tokenIds0, System.Collections.Generic.IEnumerable&lt;int&gt;? tokenIds1 = default);" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; BuildInputsWithSpecialTokens(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds0, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds1) cil managed" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildInputsWithSpecialTokens (tokenIds0 As IEnumerable(Of Integer), Optional tokenIds1 As IEnumerable(Of Integer) = Nothing) As IReadOnlyList(Of Integer)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.BuildInputsWithSpecialTokens : seq&lt;int&gt; * seq&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.BuildInputsWithSpecialTokens (tokenIds0, tokenIds1)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenIds" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="tokenIds0" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="additionalTokenIds" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="tokenIds1" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="tokenIds">List of IDs to which the special tokens will be added.</param>
        <param name="tokenIds0">To be added.</param>
        <param name="additionalTokenIds">Optional second list of IDs for sequence pairs.</param>
        <param name="tokenIds1">To be added.</param>
        <summary>
            Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and adding special tokens. A BERT sequence has the following format:
                - single sequence: `[CLS] tokenIds [SEP]`
                - pair of sequences: `[CLS] tokenIds [SEP] additionalTokenIds [SEP]`
            </summary>
        <returns>The list of IDs with special tokens added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="tokenIds" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="BuildInputsWithSpecialTokens">
      <MemberSignature Language="C#" Value="public System.Buffers.OperationStatus BuildInputsWithSpecialTokens (System.Collections.Generic.IEnumerable&lt;int&gt; tokenIds, Span&lt;int&gt; destination, out int valuesWritten, System.Collections.Generic.IEnumerable&lt;int&gt;? additionalTokenIds = default);" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.OperationStatus BuildInputsWithSpecialTokens(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds, valuetype System.Span`1&lt;int32&gt; destination, [out] int32&amp; valuesWritten, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; additionalTokenIds) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.BuildInputsWithSpecialTokens(System.Collections.Generic.IEnumerable{System.Int32},System.Span{System.Int32},System.Int32@,System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildInputsWithSpecialTokens (tokenIds As IEnumerable(Of Integer), destination As Span(Of Integer), ByRef valuesWritten As Integer, Optional additionalTokenIds As IEnumerable(Of Integer) = Nothing) As OperationStatus" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="F#" Value="member this.BuildInputsWithSpecialTokens : seq&lt;int&gt; * Span&lt;int&gt; * int * seq&lt;int&gt; -&gt; System.Buffers.OperationStatus" Usage="bertTokenizer.BuildInputsWithSpecialTokens (tokenIds, destination, valuesWritten, additionalTokenIds)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="C#" Value="public System.Buffers.OperationStatus BuildInputsWithSpecialTokens (System.Collections.Generic.IEnumerable&lt;int&gt; tokenIds0, Span&lt;int&gt; buffer, out int written, System.Collections.Generic.IEnumerable&lt;int&gt;? tokenIds1 = default);" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.OperationStatus BuildInputsWithSpecialTokens(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds0, valuetype System.Span`1&lt;int32&gt; buffer, [out] int32&amp; written, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds1) cil managed" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildInputsWithSpecialTokens (tokenIds0 As IEnumerable(Of Integer), buffer As Span(Of Integer), ByRef written As Integer, Optional tokenIds1 As IEnumerable(Of Integer) = Nothing) As OperationStatus" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.BuildInputsWithSpecialTokens : seq&lt;int&gt; * Span&lt;int&gt; * int * seq&lt;int&gt; -&gt; System.Buffers.OperationStatus" Usage="bertTokenizer.BuildInputsWithSpecialTokens (tokenIds0, buffer, written, tokenIds1)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenIds" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="tokenIds0" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="destination" Type="System.Span&lt;System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="buffer" Type="System.Span&lt;System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="valuesWritten" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="written" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="additionalTokenIds" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="tokenIds1" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="3" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="tokenIds">List of IDs to which the special tokens will be added.</param>
        <param name="tokenIds0">To be added.</param>
        <param name="destination">The destination buffer to write the token IDs with special tokens added.</param>
        <param name="buffer">To be added.</param>
        <param name="valuesWritten">The number of elements written to the destination buffer.</param>
        <param name="written">To be added.</param>
        <param name="additionalTokenIds">Optional second list of IDs for sequence pairs.</param>
        <param name="tokenIds1">To be added.</param>
        <summary>
            Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and adding special tokens. A BERT sequence has the following format:
                - single sequence: `[CLS] tokenIds [SEP]`
                - pair of sequences: `[CLS] tokenIds [SEP] additionalTokenIds [SEP]`
            </summary>
        <returns>The status of the operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="tokenIds" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ClassificationToken">
      <MemberSignature Language="C#" Value="public string ClassificationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClassificationToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.ClassificationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClassificationToken As String" />
      <MemberSignature Language="F#" Value="member this.ClassificationToken : string" Usage="Microsoft.ML.Tokenizers.BertTokenizer.ClassificationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the classifier token which is used when doing sequence classification (classification of the whole sequence instead of per-token classification).
            It is the first token of the sequence when built with special tokens.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassificationTokenId">
      <MemberSignature Language="C#" Value="public int ClassificationTokenId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ClassificationTokenId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.ClassificationTokenId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClassificationTokenId As Integer" />
      <MemberSignature Language="F#" Value="member this.ClassificationTokenId : int" Usage="Microsoft.ML.Tokenizers.BertTokenizer.ClassificationTokenId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the classifier token Id
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClsToken">
      <MemberSignature Language="C#" Value="public string ClsToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClsToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.ClsToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClsToken As String" />
      <MemberSignature Language="F#" Value="member this.ClsToken : string" Usage="Microsoft.ML.Tokenizers.BertTokenizer.ClsToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClsTokenId">
      <MemberSignature Language="C#" Value="public int ClsTokenId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ClsTokenId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.ClsTokenId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClsTokenId As Integer" />
      <MemberSignature Language="F#" Value="member this.ClsTokenId : int" Usage="Microsoft.ML.Tokenizers.BertTokenizer.ClsTokenId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.BertTokenizer Create (System.IO.Stream vocabStream, Microsoft.ML.Tokenizers.BertOptions? options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.BertTokenizer Create(class System.IO.Stream vocabStream, class Microsoft.ML.Tokenizers.BertOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.Create(System.IO.Stream,Microsoft.ML.Tokenizers.BertOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (vocabStream As Stream, Optional options As BertOptions = Nothing) As BertTokenizer" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * Microsoft.ML.Tokenizers.BertOptions -&gt; Microsoft.ML.Tokenizers.BertTokenizer" Usage="Microsoft.ML.Tokenizers.BertTokenizer.Create (vocabStream, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.BertTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabStream" Type="System.IO.Stream" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="options" Type="Microsoft.ML.Tokenizers.BertOptions" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      </Parameters>
      <Docs>
        <param name="vocabStream">The stream containing the vocabulary file.</param>
        <param name="options">The options to use for the Bert tokenizer.</param>
        <summary>
            Create a new instance of the <see cref="T:Microsoft.ML.Tokenizers.BertTokenizer" /> class.
            </summary>
        <returns>A new instance of the <see cref="T:Microsoft.ML.Tokenizers.BertTokenizer" /> class.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary stream is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.BertTokenizer Create (string vocabFilePath, Microsoft.ML.Tokenizers.BertOptions? options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.BertTokenizer Create(string vocabFilePath, class Microsoft.ML.Tokenizers.BertOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.Create(System.String,Microsoft.ML.Tokenizers.BertOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (vocabFilePath As String, Optional options As BertOptions = Nothing) As BertTokenizer" />
      <MemberSignature Language="F#" Value="static member Create : string * Microsoft.ML.Tokenizers.BertOptions -&gt; Microsoft.ML.Tokenizers.BertTokenizer" Usage="Microsoft.ML.Tokenizers.BertTokenizer.Create (vocabFilePath, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.BertTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabFilePath" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="options" Type="Microsoft.ML.Tokenizers.BertOptions" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      </Parameters>
      <Docs>
        <param name="vocabFilePath">The path to the vocabulary file.</param>
        <param name="options">The options to use for the Bert tokenizer.</param>
        <summary>
            Create a new instance of the <see cref="T:Microsoft.ML.Tokenizers.BertTokenizer" /> class.
            </summary>
        <returns>A new instance of the <see cref="T:Microsoft.ML.Tokenizers.BertTokenizer" /> class.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary file is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.BertTokenizer Create (System.IO.Stream vocabStream, bool doLowerCase = true, bool doBasicTokenization = true, bool splitOnSpecialTokens = true, string unknownToken = &quot;[UNK]&quot;, string sepToken = &quot;[SEP]&quot;, string padToken = &quot;[PAD]&quot;, string clsToken = &quot;[CLS]&quot;, string maskToken = &quot;[MASK]&quot;, bool tokenizeChineseChars = true, bool stripAccents = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.BertTokenizer Create(class System.IO.Stream vocabStream, bool doLowerCase, bool doBasicTokenization, bool splitOnSpecialTokens, string unknownToken, string sepToken, string padToken, string clsToken, string maskToken, bool tokenizeChineseChars, bool stripAccents) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.Create(System.IO.Stream,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (vocabStream As Stream, Optional doLowerCase As Boolean = true, Optional doBasicTokenization As Boolean = true, Optional splitOnSpecialTokens As Boolean = true, Optional unknownToken As String = &quot;[UNK]&quot;, Optional sepToken As String = &quot;[SEP]&quot;, Optional padToken As String = &quot;[PAD]&quot;, Optional clsToken As String = &quot;[CLS]&quot;, Optional maskToken As String = &quot;[MASK]&quot;, Optional tokenizeChineseChars As Boolean = true, Optional stripAccents As Boolean = false) As BertTokenizer" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * bool * bool * bool * string * string * string * string * string * bool * bool -&gt; Microsoft.ML.Tokenizers.BertTokenizer" Usage="Microsoft.ML.Tokenizers.BertTokenizer.Create (vocabStream, doLowerCase, doBasicTokenization, splitOnSpecialTokens, unknownToken, sepToken, padToken, clsToken, maskToken, tokenizeChineseChars, stripAccents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.BertTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabStream" Type="System.IO.Stream" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="doLowerCase" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="doBasicTokenization" Type="System.Boolean" Index="2" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="splitOnSpecialTokens" Type="System.Boolean" Index="3" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="unknownToken" Type="System.String" Index="4" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="sepToken" Type="System.String" Index="5" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="padToken" Type="System.String" Index="6" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="clsToken" Type="System.String" Index="7" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="maskToken" Type="System.String" Index="8" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="tokenizeChineseChars" Type="System.Boolean" Index="9" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="stripAccents" Type="System.Boolean" Index="10" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="vocabStream">To be added.</param>
        <param name="doLowerCase">To be added.</param>
        <param name="doBasicTokenization">To be added.</param>
        <param name="splitOnSpecialTokens">To be added.</param>
        <param name="unknownToken">To be added.</param>
        <param name="sepToken">To be added.</param>
        <param name="padToken">To be added.</param>
        <param name="clsToken">To be added.</param>
        <param name="maskToken">To be added.</param>
        <param name="tokenizeChineseChars">To be added.</param>
        <param name="stripAccents">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.BertTokenizer Create (string vocabFilePath, bool doLowerCase = true, bool doBasicTokenization = true, bool splitOnSpecialTokens = true, string unknownToken = &quot;[UNK]&quot;, string sepToken = &quot;[SEP]&quot;, string padToken = &quot;[PAD]&quot;, string clsToken = &quot;[CLS]&quot;, string maskToken = &quot;[MASK]&quot;, bool tokenizeChineseChars = true, bool stripAccents = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Tokenizers.BertTokenizer Create(string vocabFilePath, bool doLowerCase, bool doBasicTokenization, bool splitOnSpecialTokens, string unknownToken, string sepToken, string padToken, string clsToken, string maskToken, bool tokenizeChineseChars, bool stripAccents) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.Create(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (vocabFilePath As String, Optional doLowerCase As Boolean = true, Optional doBasicTokenization As Boolean = true, Optional splitOnSpecialTokens As Boolean = true, Optional unknownToken As String = &quot;[UNK]&quot;, Optional sepToken As String = &quot;[SEP]&quot;, Optional padToken As String = &quot;[PAD]&quot;, Optional clsToken As String = &quot;[CLS]&quot;, Optional maskToken As String = &quot;[MASK]&quot;, Optional tokenizeChineseChars As Boolean = true, Optional stripAccents As Boolean = false) As BertTokenizer" />
      <MemberSignature Language="F#" Value="static member Create : string * bool * bool * bool * string * string * string * string * string * bool * bool -&gt; Microsoft.ML.Tokenizers.BertTokenizer" Usage="Microsoft.ML.Tokenizers.BertTokenizer.Create (vocabFilePath, doLowerCase, doBasicTokenization, splitOnSpecialTokens, unknownToken, sepToken, padToken, clsToken, maskToken, tokenizeChineseChars, stripAccents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.BertTokenizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabFilePath" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="doLowerCase" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="doBasicTokenization" Type="System.Boolean" Index="2" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="splitOnSpecialTokens" Type="System.Boolean" Index="3" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="unknownToken" Type="System.String" Index="4" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="sepToken" Type="System.String" Index="5" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="padToken" Type="System.String" Index="6" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="clsToken" Type="System.String" Index="7" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="maskToken" Type="System.String" Index="8" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="tokenizeChineseChars" Type="System.Boolean" Index="9" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="stripAccents" Type="System.Boolean" Index="10" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="vocabFilePath">To be added.</param>
        <param name="doLowerCase">To be added.</param>
        <param name="doBasicTokenization">To be added.</param>
        <param name="splitOnSpecialTokens">To be added.</param>
        <param name="unknownToken">To be added.</param>
        <param name="sepToken">To be added.</param>
        <param name="padToken">To be added.</param>
        <param name="clsToken">To be added.</param>
        <param name="maskToken">To be added.</param>
        <param name="tokenizeChineseChars">To be added.</param>
        <param name="stripAccents">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.BertTokenizer&gt; CreateAsync (System.IO.Stream vocabStream, Microsoft.ML.Tokenizers.BertOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ML.Tokenizers.BertTokenizer&gt; CreateAsync(class System.IO.Stream vocabStream, class Microsoft.ML.Tokenizers.BertOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.CreateAsync(System.IO.Stream,Microsoft.ML.Tokenizers.BertOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAsync (vocabStream As Stream, Optional options As BertOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of BertTokenizer)" />
      <MemberSignature Language="F#" Value="static member CreateAsync : System.IO.Stream * Microsoft.ML.Tokenizers.BertOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.BertTokenizer&gt;" Usage="Microsoft.ML.Tokenizers.BertTokenizer.CreateAsync (vocabStream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.BertTokenizer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabStream" Type="System.IO.Stream" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="options" Type="Microsoft.ML.Tokenizers.BertOptions" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      </Parameters>
      <Docs>
        <param name="vocabStream">The stream containing the vocabulary file.</param>
        <param name="options">The options to use for the Bert tokenizer.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Create a new instance of the <see cref="T:Microsoft.ML.Tokenizers.BertTokenizer" /> class asynchronously.
            </summary>
        <returns>A task that represents the asynchronous creation of the BertTokenizer.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary stream is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.BertTokenizer&gt; CreateAsync (string vocabFilePath, Microsoft.ML.Tokenizers.BertOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ML.Tokenizers.BertTokenizer&gt; CreateAsync(string vocabFilePath, class Microsoft.ML.Tokenizers.BertOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.CreateAsync(System.String,Microsoft.ML.Tokenizers.BertOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAsync (vocabFilePath As String, Optional options As BertOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of BertTokenizer)" />
      <MemberSignature Language="F#" Value="static member CreateAsync : string * Microsoft.ML.Tokenizers.BertOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.BertTokenizer&gt;" Usage="Microsoft.ML.Tokenizers.BertTokenizer.CreateAsync (vocabFilePath, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.BertTokenizer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabFilePath" Type="System.String" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="options" Type="Microsoft.ML.Tokenizers.BertOptions" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      </Parameters>
      <Docs>
        <param name="vocabFilePath">The path to the vocabulary file.</param>
        <param name="options">The options to use for the Bert tokenizer.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Create a new instance of the <see cref="T:Microsoft.ML.Tokenizers.BertTokenizer" /> class asynchronously.
            </summary>
        <returns>A task that represents the asynchronous creation of the BertTokenizer.</returns>
        <remarks>
            When creating the tokenizer, ensure that the vocabulary file is sourced from a trusted provider.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.BertTokenizer&gt; CreateAsync (System.IO.Stream vocabStream, bool doLowerCase = true, bool doBasicTokenization = true, bool splitOnSpecialTokens = true, string unknownToken = &quot;[UNK]&quot;, string sepToken = &quot;[SEP]&quot;, string padToken = &quot;[PAD]&quot;, string clsToken = &quot;[CLS]&quot;, string maskToken = &quot;[MASK]&quot;, bool tokenizeChineseChars = true, bool stripAccents = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ML.Tokenizers.BertTokenizer&gt; CreateAsync(class System.IO.Stream vocabStream, bool doLowerCase, bool doBasicTokenization, bool splitOnSpecialTokens, string unknownToken, string sepToken, string padToken, string clsToken, string maskToken, bool tokenizeChineseChars, bool stripAccents) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.CreateAsync(System.IO.Stream,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAsync (vocabStream As Stream, Optional doLowerCase As Boolean = true, Optional doBasicTokenization As Boolean = true, Optional splitOnSpecialTokens As Boolean = true, Optional unknownToken As String = &quot;[UNK]&quot;, Optional sepToken As String = &quot;[SEP]&quot;, Optional padToken As String = &quot;[PAD]&quot;, Optional clsToken As String = &quot;[CLS]&quot;, Optional maskToken As String = &quot;[MASK]&quot;, Optional tokenizeChineseChars As Boolean = true, Optional stripAccents As Boolean = false) As Task(Of BertTokenizer)" />
      <MemberSignature Language="F#" Value="static member CreateAsync : System.IO.Stream * bool * bool * bool * string * string * string * string * string * bool * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.BertTokenizer&gt;" Usage="Microsoft.ML.Tokenizers.BertTokenizer.CreateAsync (vocabStream, doLowerCase, doBasicTokenization, splitOnSpecialTokens, unknownToken, sepToken, padToken, clsToken, maskToken, tokenizeChineseChars, stripAccents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ML.Tokenizers.BertTokenizer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabStream" Type="System.IO.Stream" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="doLowerCase" Type="System.Boolean" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="doBasicTokenization" Type="System.Boolean" Index="2" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="splitOnSpecialTokens" Type="System.Boolean" Index="3" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="unknownToken" Type="System.String" Index="4" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="sepToken" Type="System.String" Index="5" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="padToken" Type="System.String" Index="6" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="clsToken" Type="System.String" Index="7" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="maskToken" Type="System.String" Index="8" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="tokenizeChineseChars" Type="System.Boolean" Index="9" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="stripAccents" Type="System.Boolean" Index="10" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="vocabStream">To be added.</param>
        <param name="doLowerCase">To be added.</param>
        <param name="doBasicTokenization">To be added.</param>
        <param name="splitOnSpecialTokens">To be added.</param>
        <param name="unknownToken">To be added.</param>
        <param name="sepToken">To be added.</param>
        <param name="padToken">To be added.</param>
        <param name="clsToken">To be added.</param>
        <param name="maskToken">To be added.</param>
        <param name="tokenizeChineseChars">To be added.</param>
        <param name="stripAccents">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTokenTypeIdsFromSequences">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; CreateTokenTypeIdsFromSequences (System.Collections.Generic.IEnumerable&lt;int&gt; tokenIds, System.Collections.Generic.IEnumerable&lt;int&gt;? additionalTokenIds = default);" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; CreateTokenTypeIdsFromSequences(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; additionalTokenIds) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.CreateTokenTypeIdsFromSequences(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTokenTypeIdsFromSequences (tokenIds As IEnumerable(Of Integer), Optional additionalTokenIds As IEnumerable(Of Integer) = Nothing) As IReadOnlyList(Of Integer)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="F#" Value="member this.CreateTokenTypeIdsFromSequences : seq&lt;int&gt; * seq&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.CreateTokenTypeIdsFromSequences (tokenIds, additionalTokenIds)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; CreateTokenTypeIdsFromSequences (System.Collections.Generic.IEnumerable&lt;int&gt; tokenIds0, System.Collections.Generic.IEnumerable&lt;int&gt;? tokenIds1 = default);" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; CreateTokenTypeIdsFromSequences(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds0, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds1) cil managed" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTokenTypeIdsFromSequences (tokenIds0 As IEnumerable(Of Integer), Optional tokenIds1 As IEnumerable(Of Integer) = Nothing) As IReadOnlyList(Of Integer)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.CreateTokenTypeIdsFromSequences : seq&lt;int&gt; * seq&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.CreateTokenTypeIdsFromSequences (tokenIds0, tokenIds1)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenIds" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="tokenIds0" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="additionalTokenIds" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="tokenIds1" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="tokenIds">List of token IDs for the first sequence.</param>
        <param name="tokenIds0">To be added.</param>
        <param name="additionalTokenIds">Optional list of token IDs for the second sequence.</param>
        <param name="tokenIds1">To be added.</param>
        <summary>
            Create a mask from the two sequences passed to be used in a sequence-pair classification task. A BERT sequence pair mask has the following format:
                    0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1
                    | first sequence    | second sequence |
            If <paramref name="additionalTokenIds" /> is null, this method only returns the first portion of the type ids (0s).
            </summary>
        <returns>List of token type IDs according to the given sequence(s).</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="tokenIds" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTokenTypeIdsFromSequences">
      <MemberSignature Language="C#" Value="public System.Buffers.OperationStatus CreateTokenTypeIdsFromSequences (System.Collections.Generic.IEnumerable&lt;int&gt; tokenIds, Span&lt;int&gt; destination, out int valuesWritten, System.Collections.Generic.IEnumerable&lt;int&gt;? additionalTokenIds = default);" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.OperationStatus CreateTokenTypeIdsFromSequences(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds, valuetype System.Span`1&lt;int32&gt; destination, [out] int32&amp; valuesWritten, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; additionalTokenIds) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.CreateTokenTypeIdsFromSequences(System.Collections.Generic.IEnumerable{System.Int32},System.Span{System.Int32},System.Int32@,System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTokenTypeIdsFromSequences (tokenIds As IEnumerable(Of Integer), destination As Span(Of Integer), ByRef valuesWritten As Integer, Optional additionalTokenIds As IEnumerable(Of Integer) = Nothing) As OperationStatus" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="F#" Value="member this.CreateTokenTypeIdsFromSequences : seq&lt;int&gt; * Span&lt;int&gt; * int * seq&lt;int&gt; -&gt; System.Buffers.OperationStatus" Usage="bertTokenizer.CreateTokenTypeIdsFromSequences (tokenIds, destination, valuesWritten, additionalTokenIds)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="C#" Value="public System.Buffers.OperationStatus CreateTokenTypeIdsFromSequences (System.Collections.Generic.IEnumerable&lt;int&gt; tokenIds0, Span&lt;int&gt; buffer, out int written, System.Collections.Generic.IEnumerable&lt;int&gt;? tokenIds1 = default);" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.OperationStatus CreateTokenTypeIdsFromSequences(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds0, valuetype System.Span`1&lt;int32&gt; buffer, [out] int32&amp; written, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds1) cil managed" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTokenTypeIdsFromSequences (tokenIds0 As IEnumerable(Of Integer), buffer As Span(Of Integer), ByRef written As Integer, Optional tokenIds1 As IEnumerable(Of Integer) = Nothing) As OperationStatus" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.CreateTokenTypeIdsFromSequences : seq&lt;int&gt; * Span&lt;int&gt; * int * seq&lt;int&gt; -&gt; System.Buffers.OperationStatus" Usage="bertTokenizer.CreateTokenTypeIdsFromSequences (tokenIds0, buffer, written, tokenIds1)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenIds" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="tokenIds0" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="destination" Type="System.Span&lt;System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="buffer" Type="System.Span&lt;System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="valuesWritten" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="written" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="additionalTokenIds" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="tokenIds1" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="3" FrameworkAlternate="ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="tokenIds">To be added.</param>
        <param name="tokenIds0">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="buffer">To be added.</param>
        <param name="valuesWritten">To be added.</param>
        <param name="written">To be added.</param>
        <param name="additionalTokenIds">To be added.</param>
        <param name="tokenIds1">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoBasicTokenization">
      <MemberSignature Language="C#" Value="public bool DoBasicTokenization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoBasicTokenization" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.DoBasicTokenization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DoBasicTokenization As Boolean" />
      <MemberSignature Language="F#" Value="member this.DoBasicTokenization : bool" Usage="Microsoft.ML.Tokenizers.BertTokenizer.DoBasicTokenization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoLowerCase">
      <MemberSignature Language="C#" Value="public bool DoLowerCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoLowerCase" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.DoLowerCase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DoLowerCase As Boolean" />
      <MemberSignature Language="F#" Value="member this.DoLowerCase : bool" Usage="Microsoft.ML.Tokenizers.BertTokenizer.DoLowerCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (ReadOnlySpan&lt;char&gt; text, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.EncodeToIds(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As ReadOnlySpan(Of Char), Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.EncodeToIds (text, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (string text, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(string text, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.EncodeToIds(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As String, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : string * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.EncodeToIds (text, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (ReadOnlySpan&lt;char&gt; text, bool addSpecialTokens, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, bool addSpecialTokens, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.EncodeToIds(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As ReadOnlySpan(Of Char), addSpecialTokens As Boolean, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : ReadOnlySpan&lt;char&gt; * bool * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.EncodeToIds (text, addSpecialTokens, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="addSpecialTokens" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addSpecialTokens">Indicate whether to add special tokens to the encoded Ids.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (string text, bool addSpecialTokens, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(string text, bool addSpecialTokens, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.EncodeToIds(System.String,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As String, addSpecialTokens As Boolean, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : string * bool * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.EncodeToIds (text, addSpecialTokens, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="addSpecialTokens" Type="System.Boolean" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="addSpecialTokens">Indicate whether to add special tokens to the encoded Ids.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (ReadOnlySpan&lt;char&gt; text, int maxTokenCount, out string? normalizedText, out int charsConsumed, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, int32 maxTokenCount, [out] string&amp; normalizedText, [out] int32&amp; charsConsumed, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.EncodeToIds(System.ReadOnlySpan{System.Char},System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As ReadOnlySpan(Of Char), maxTokenCount As Integer, ByRef normalizedText As String, ByRef charsConsumed As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : ReadOnlySpan&lt;char&gt; * int * string * int * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.EncodeToIds (text, maxTokenCount, normalizedText, charsConsumed, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum number of tokens to return.</param>
        <param name="normalizedText">The normalized text.</param>
        <param name="charsConsumed">The number of characters consumed from the input text.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (string text, int maxTokenCount, out string? normalizedText, out int charsConsumed, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(string text, int32 maxTokenCount, [out] string&amp; normalizedText, [out] int32&amp; charsConsumed, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.EncodeToIds(System.String,System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As String, maxTokenCount As Integer, ByRef normalizedText As String, ByRef charsConsumed As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : string * int * string * int * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.EncodeToIds (text, maxTokenCount, normalizedText, charsConsumed, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum number of tokens to return.</param>
        <param name="normalizedText">The normalized text.</param>
        <param name="charsConsumed">The number of characters consumed from the input text.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (ReadOnlySpan&lt;char&gt; text, int maxTokenCount, bool addSpecialTokens, out string? normalizedText, out int charsConsumed, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(valuetype System.ReadOnlySpan`1&lt;char&gt; text, int32 maxTokenCount, bool addSpecialTokens, [out] string&amp; normalizedText, [out] int32&amp; charsConsumed, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.EncodeToIds(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As ReadOnlySpan(Of Char), maxTokenCount As Integer, addSpecialTokens As Boolean, ByRef normalizedText As String, ByRef charsConsumed As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : ReadOnlySpan&lt;char&gt; * int * bool * string * int * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.EncodeToIds (text, maxTokenCount, addSpecialTokens, normalizedText, charsConsumed, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="addSpecialTokens" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum number of tokens to return.</param>
        <param name="addSpecialTokens">Indicate whether to add special tokens to the encoded Ids.</param>
        <param name="normalizedText">The normalized text.</param>
        <param name="charsConsumed">The number of characters consumed from the input text.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; EncodeToIds (string text, int maxTokenCount, bool addSpecialTokens, out string? normalizedText, out int charsConsumed, bool considerPreTokenization = true, bool considerNormalization = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; EncodeToIds(string text, int32 maxTokenCount, bool addSpecialTokens, [out] string&amp; normalizedText, [out] int32&amp; charsConsumed, bool considerPreTokenization, bool considerNormalization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.EncodeToIds(System.String,System.Int32,System.Boolean,System.String@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToIds (text As String, maxTokenCount As Integer, addSpecialTokens As Boolean, ByRef normalizedText As String, ByRef charsConsumed As Integer, Optional considerPreTokenization As Boolean = true, Optional considerNormalization As Boolean = true) As IReadOnlyList(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.EncodeToIds : string * int * bool * string * int * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.EncodeToIds (text, maxTokenCount, addSpecialTokens, normalizedText, charsConsumed, considerPreTokenization, considerNormalization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="maxTokenCount" Type="System.Int32" />
        <Parameter Name="addSpecialTokens" Type="System.Boolean" />
        <Parameter Name="normalizedText" Type="System.String" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="considerPreTokenization" Type="System.Boolean" />
        <Parameter Name="considerNormalization" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to encode.</param>
        <param name="maxTokenCount">The maximum number of tokens to return.</param>
        <param name="addSpecialTokens">Indicate whether to add special tokens to the encoded Ids.</param>
        <param name="normalizedText">The normalized text.</param>
        <param name="charsConsumed">The number of characters consumed from the input text.</param>
        <param name="considerPreTokenization">Indicate whether to consider pre-tokenization before tokenization.</param>
        <param name="considerNormalization">Indicate whether to consider normalization before tokenization.</param>
        <summary>
            Encodes input text to token Ids.
            </summary>
        <returns>The list of encoded Ids.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpecialTokensMask">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; GetSpecialTokensMask (System.Collections.Generic.IEnumerable&lt;int&gt; tokenIds, System.Collections.Generic.IEnumerable&lt;int&gt;? additionalTokenIds = default, bool alreadyHasSpecialTokens = false);" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; GetSpecialTokensMask(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; additionalTokenIds, bool alreadyHasSpecialTokens) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.GetSpecialTokensMask(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecialTokensMask (tokenIds As IEnumerable(Of Integer), Optional additionalTokenIds As IEnumerable(Of Integer) = Nothing, Optional alreadyHasSpecialTokens As Boolean = false) As IReadOnlyList(Of Integer)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="F#" Value="member this.GetSpecialTokensMask : seq&lt;int&gt; * seq&lt;int&gt; * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.GetSpecialTokensMask (tokenIds, additionalTokenIds, alreadyHasSpecialTokens)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;int&gt; GetSpecialTokensMask (System.Collections.Generic.IEnumerable&lt;int&gt; tokenIds0, System.Collections.Generic.IEnumerable&lt;int&gt;? tokenIds1 = default, bool alreadyHasSpecialTokens = false);" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; GetSpecialTokensMask(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds0, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds1, bool alreadyHasSpecialTokens) cil managed" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecialTokensMask (tokenIds0 As IEnumerable(Of Integer), Optional tokenIds1 As IEnumerable(Of Integer) = Nothing, Optional alreadyHasSpecialTokens As Boolean = false) As IReadOnlyList(Of Integer)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.GetSpecialTokensMask : seq&lt;int&gt; * seq&lt;int&gt; * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;int&gt;" Usage="bertTokenizer.GetSpecialTokensMask (tokenIds0, tokenIds1, alreadyHasSpecialTokens)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenIds" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="tokenIds0" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="additionalTokenIds" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="tokenIds1" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="alreadyHasSpecialTokens" Type="System.Boolean" Index="2" />
      </Parameters>
      <Docs>
        <param name="tokenIds">List of IDs.</param>
        <param name="tokenIds0">To be added.</param>
        <param name="additionalTokenIds">Optional second list of IDs for sequence pairs.</param>
        <param name="tokenIds1">To be added.</param>
        <param name="alreadyHasSpecialTokens">Indicate whether or not the token list is already formatted with special tokens for the model.</param>
        <summary>
            Retrieve sequence tokens mask from a IDs list.
            </summary>
        <returns>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="GetSpecialTokensMask">
      <MemberSignature Language="C#" Value="public System.Buffers.OperationStatus GetSpecialTokensMask (System.Collections.Generic.IEnumerable&lt;int&gt; tokenIds, Span&lt;int&gt; destination, out int valuesWritten, System.Collections.Generic.IEnumerable&lt;int&gt;? additionalTokenIds = default, bool alreadyHasSpecialTokens = false);" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.OperationStatus GetSpecialTokensMask(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds, valuetype System.Span`1&lt;int32&gt; destination, [out] int32&amp; valuesWritten, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; additionalTokenIds, bool alreadyHasSpecialTokens) cil managed" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BertTokenizer.GetSpecialTokensMask(System.Collections.Generic.IEnumerable{System.Int32},System.Span{System.Int32},System.Int32@,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecialTokensMask (tokenIds As IEnumerable(Of Integer), destination As Span(Of Integer), ByRef valuesWritten As Integer, Optional additionalTokenIds As IEnumerable(Of Integer) = Nothing, Optional alreadyHasSpecialTokens As Boolean = false) As OperationStatus" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="F#" Value="member this.GetSpecialTokensMask : seq&lt;int&gt; * Span&lt;int&gt; * int * seq&lt;int&gt; * bool -&gt; System.Buffers.OperationStatus" Usage="bertTokenizer.GetSpecialTokensMask (tokenIds, destination, valuesWritten, additionalTokenIds, alreadyHasSpecialTokens)" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
      <MemberSignature Language="C#" Value="public System.Buffers.OperationStatus GetSpecialTokensMask (System.Collections.Generic.IEnumerable&lt;int&gt; tokenIds0, Span&lt;int&gt; buffer, out int written, System.Collections.Generic.IEnumerable&lt;int&gt;? tokenIds1 = default, bool alreadyHasSpecialTokens = false);" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.OperationStatus GetSpecialTokensMask(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds0, valuetype System.Span`1&lt;int32&gt; buffer, [out] int32&amp; written, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenIds1, bool alreadyHasSpecialTokens) cil managed" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecialTokensMask (tokenIds0 As IEnumerable(Of Integer), buffer As Span(Of Integer), ByRef written As Integer, Optional tokenIds1 As IEnumerable(Of Integer) = Nothing, Optional alreadyHasSpecialTokens As Boolean = false) As OperationStatus" FrameworkAlternate="ml-dotnet-preview" />
      <MemberSignature Language="F#" Value="member this.GetSpecialTokensMask : seq&lt;int&gt; * Span&lt;int&gt; * int * seq&lt;int&gt; * bool -&gt; System.Buffers.OperationStatus" Usage="bertTokenizer.GetSpecialTokensMask (tokenIds0, buffer, written, tokenIds1, alreadyHasSpecialTokens)" FrameworkAlternate="ml-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenIds" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="tokenIds0" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="destination" Type="System.Span&lt;System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="buffer" Type="System.Span&lt;System.Int32&gt;" Index="1" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="valuesWritten" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="written" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="additionalTokenIds" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-3.0.0" />
        <Parameter Name="tokenIds1" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" Index="3" FrameworkAlternate="ml-dotnet-preview" />
        <Parameter Name="alreadyHasSpecialTokens" Type="System.Boolean" Index="4" />
      </Parameters>
      <Docs>
        <param name="tokenIds">List of IDs.</param>
        <param name="tokenIds0">To be added.</param>
        <param name="destination">The destination buffer to write the mask. The integers written values are in the range [0, 1]: 1 for a special token, 0 for a sequence token.</param>
        <param name="buffer">To be added.</param>
        <param name="valuesWritten">The number of elements written to the destination buffer.</param>
        <param name="written">To be added.</param>
        <param name="additionalTokenIds">Optional second list of IDs for sequence pairs.</param>
        <param name="tokenIds1">To be added.</param>
        <param name="alreadyHasSpecialTokens">Indicate whether or not the token list is already formatted with special tokens for the model.</param>
        <summary>
            Retrieve sequence tokens mask from a IDs list.
            </summary>
        <returns>The status of the operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="IndividuallyTokenizeCjk">
      <MemberSignature Language="C#" Value="public bool IndividuallyTokenizeCjk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IndividuallyTokenizeCjk" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.IndividuallyTokenizeCjk" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IndividuallyTokenizeCjk As Boolean" />
      <MemberSignature Language="F#" Value="member this.IndividuallyTokenizeCjk : bool" Usage="Microsoft.ML.Tokenizers.BertTokenizer.IndividuallyTokenizeCjk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the tokenizer should split the CJK characters into tokens.
            </summary>
        <value>To be added.</value>
        <remarks>
            This is useful when you want to tokenize CJK characters individually.
            The following Unicode ranges are considered CJK characters for this purpose:
            - U+3400 - U+4DBF   CJK Unified Ideographs Extension A.
            - U+4E00 - U+9FFF   basic set of CJK characters.
            - U+F900 - U+FAFF   CJK Compatibility Ideographs.
            - U+20000 - U+2A6DF CJK Unified Ideographs Extension B.
            - U+2A700 - U+2B73F CJK Unified Ideographs Extension C.
            - U+2B740 - U+2B81F CJK Unified Ideographs Extension D.
            - U+2B820 - U+2CEAF CJK Unified Ideographs Extension E.
            - U+2F800 - U+2FA1F CJK Compatibility Ideographs Supplement.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowerCaseBeforeTokenization">
      <MemberSignature Language="C#" Value="public bool LowerCaseBeforeTokenization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LowerCaseBeforeTokenization" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.LowerCaseBeforeTokenization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowerCaseBeforeTokenization As Boolean" />
      <MemberSignature Language="F#" Value="member this.LowerCaseBeforeTokenization : bool" Usage="Microsoft.ML.Tokenizers.BertTokenizer.LowerCaseBeforeTokenization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the tokenizer should lowercase the input text.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaskingToken">
      <MemberSignature Language="C#" Value="public string MaskingToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MaskingToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.MaskingToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskingToken As String" />
      <MemberSignature Language="F#" Value="member this.MaskingToken : string" Usage="Microsoft.ML.Tokenizers.BertTokenizer.MaskingToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the mask token used for masking values. This is the token used when training this model with masked language modeling.
            This is the token which the model will try to predict.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaskingTokenId">
      <MemberSignature Language="C#" Value="public int MaskingTokenId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaskingTokenId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.MaskingTokenId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskingTokenId As Integer" />
      <MemberSignature Language="F#" Value="member this.MaskingTokenId : int" Usage="Microsoft.ML.Tokenizers.BertTokenizer.MaskingTokenId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the mask token Id
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaskToken">
      <MemberSignature Language="C#" Value="public string MaskToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MaskToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.MaskToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskToken As String" />
      <MemberSignature Language="F#" Value="member this.MaskToken : string" Usage="Microsoft.ML.Tokenizers.BertTokenizer.MaskToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaskTokenId">
      <MemberSignature Language="C#" Value="public int MaskTokenId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaskTokenId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.MaskTokenId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskTokenId As Integer" />
      <MemberSignature Language="F#" Value="member this.MaskTokenId : int" Usage="Microsoft.ML.Tokenizers.BertTokenizer.MaskTokenId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingToken">
      <MemberSignature Language="C#" Value="public string PaddingToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PaddingToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.PaddingToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PaddingToken As String" />
      <MemberSignature Language="F#" Value="member this.PaddingToken : string" Usage="Microsoft.ML.Tokenizers.BertTokenizer.PaddingToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the token used for padding, for example when batching sequences of different lengths
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingTokenId">
      <MemberSignature Language="C#" Value="public int PaddingTokenId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PaddingTokenId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.PaddingTokenId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PaddingTokenId As Integer" />
      <MemberSignature Language="F#" Value="member this.PaddingTokenId : int" Usage="Microsoft.ML.Tokenizers.BertTokenizer.PaddingTokenId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets padding token Id
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PadToken">
      <MemberSignature Language="C#" Value="public string PadToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PadToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.PadToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PadToken As String" />
      <MemberSignature Language="F#" Value="member this.PadToken : string" Usage="Microsoft.ML.Tokenizers.BertTokenizer.PadToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PadTokenId">
      <MemberSignature Language="C#" Value="public int PadTokenId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PadTokenId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.PadTokenId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PadTokenId As Integer" />
      <MemberSignature Language="F#" Value="member this.PadTokenId : int" Usage="Microsoft.ML.Tokenizers.BertTokenizer.PadTokenId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNonSpacingMarks">
      <MemberSignature Language="C#" Value="public bool RemoveNonSpacingMarks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RemoveNonSpacingMarks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.RemoveNonSpacingMarks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RemoveNonSpacingMarks As Boolean" />
      <MemberSignature Language="F#" Value="member this.RemoveNonSpacingMarks : bool" Usage="Microsoft.ML.Tokenizers.BertTokenizer.RemoveNonSpacingMarks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether to remove non-spacing marks.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorToken">
      <MemberSignature Language="C#" Value="public string SeparatorToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SeparatorToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.SeparatorToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SeparatorToken As String" />
      <MemberSignature Language="F#" Value="member this.SeparatorToken : string" Usage="Microsoft.ML.Tokenizers.BertTokenizer.SeparatorToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for sequence classification or for a text and a question for question answering.
            It is also used as the last token of a sequence built with special tokens.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorTokenId">
      <MemberSignature Language="C#" Value="public int SeparatorTokenId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SeparatorTokenId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.SeparatorTokenId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SeparatorTokenId As Integer" />
      <MemberSignature Language="F#" Value="member this.SeparatorTokenId : int" Usage="Microsoft.ML.Tokenizers.BertTokenizer.SeparatorTokenId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the separator token Id
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SepToken">
      <MemberSignature Language="C#" Value="public string SepToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SepToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.SepToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SepToken As String" />
      <MemberSignature Language="F#" Value="member this.SepToken : string" Usage="Microsoft.ML.Tokenizers.BertTokenizer.SepToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SepTokenId">
      <MemberSignature Language="C#" Value="public int SepTokenId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SepTokenId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.SepTokenId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SepTokenId As Integer" />
      <MemberSignature Language="F#" Value="member this.SepTokenId : int" Usage="Microsoft.ML.Tokenizers.BertTokenizer.SepTokenId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitOnSpecialTokens">
      <MemberSignature Language="C#" Value="public bool SplitOnSpecialTokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SplitOnSpecialTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.SplitOnSpecialTokens" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SplitOnSpecialTokens As Boolean" />
      <MemberSignature Language="F#" Value="member this.SplitOnSpecialTokens : bool" Usage="Microsoft.ML.Tokenizers.BertTokenizer.SplitOnSpecialTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the tokenizer should split on the special tokens or treat special tokens as normal text.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StripAccents">
      <MemberSignature Language="C#" Value="public bool StripAccents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StripAccents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.StripAccents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StripAccents As Boolean" />
      <MemberSignature Language="F#" Value="member this.StripAccents : bool" Usage="Microsoft.ML.Tokenizers.BertTokenizer.StripAccents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenizeChineseChars">
      <MemberSignature Language="C#" Value="public bool TokenizeChineseChars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TokenizeChineseChars" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BertTokenizer.TokenizeChineseChars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenizeChineseChars As Boolean" />
      <MemberSignature Language="F#" Value="member this.TokenizeChineseChars : bool" Usage="Microsoft.ML.Tokenizers.BertTokenizer.TokenizeChineseChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
