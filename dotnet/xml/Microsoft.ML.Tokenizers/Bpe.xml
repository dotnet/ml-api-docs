<Type Name="Bpe" FullName="Microsoft.ML.Tokenizers.Bpe">
  <TypeSignature Language="C#" Value="public sealed class Bpe : Microsoft.ML.Tokenizers.Model" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Bpe extends Microsoft.ML.Tokenizers.Model" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.Bpe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Bpe&#xA;Inherits Model" />
  <TypeSignature Language="F#" Value="type Bpe = class&#xA;    inherit Model" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Tokenizers.Model</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represent the Byte Pair Encoding model.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bpe ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Bpe.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Construct a new Bpe model object with no tokenization vocabulary. This constructor is useful only in the training scenario.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bpe (string vocabFile, string? mergesFile, string? unknownToken = default, string? continuingSubwordPrefix = default, string? endOfWordSuffix = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string vocabFile, string mergesFile, string unknownToken, string continuingSubwordPrefix, string endOfWordSuffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Bpe.#ctor(System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (vocabFile As String, mergesFile As String, Optional unknownToken As String = Nothing, Optional continuingSubwordPrefix As String = Nothing, Optional endOfWordSuffix As String = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.Bpe : string * string * string * string * string -&gt; Microsoft.ML.Tokenizers.Bpe" Usage="new Microsoft.ML.Tokenizers.Bpe (vocabFile, mergesFile, unknownToken, continuingSubwordPrefix, endOfWordSuffix)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="vocabFile" Type="System.String" />
        <Parameter Name="mergesFile" Type="System.String" />
        <Parameter Name="unknownToken" Type="System.String" />
        <Parameter Name="continuingSubwordPrefix" Type="System.String" />
        <Parameter Name="endOfWordSuffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="vocabFile">The JSON file path containing the dictionary of string keys and their ids.</param>
        <param name="mergesFile">The file path containing the tokens's pairs list.</param>
        <param name="unknownToken"> The unknown token to be used by the model.</param>
        <param name="continuingSubwordPrefix">The prefix to attach to sub-word units that donâ€™t represent a beginning of word.</param>
        <param name="endOfWordSuffix">The suffix to attach to sub-word units that represent an end of word.</param>
        <summary>
            Construct a new Bpe model object to use for sentence tokenization and tokenizer training.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinuingSubwordPrefix">
      <MemberSignature Language="C#" Value="public string? ContinuingSubwordPrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContinuingSubwordPrefix" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Bpe.ContinuingSubwordPrefix" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinuingSubwordPrefix As String" />
      <MemberSignature Language="F#" Value="member this.ContinuingSubwordPrefix : string with get, set" Usage="Microsoft.ML.Tokenizers.Bpe.ContinuingSubwordPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A prefix to be used for every subword that is not a beginning-of-word
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decoder">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Tokenizers.TokenizerDecoder Decoder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.ML.Tokenizers.TokenizerDecoder Decoder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Bpe.Decoder" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Decoder As TokenizerDecoder" />
      <MemberSignature Language="F#" Value="static member Decoder : Microsoft.ML.Tokenizers.TokenizerDecoder" Usage="Microsoft.ML.Tokenizers.Bpe.Decoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.TokenizerDecoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Bpe decoder object.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfWordSuffix">
      <MemberSignature Language="C#" Value="public string? EndOfWordSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EndOfWordSuffix" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Bpe.EndOfWordSuffix" />
      <MemberSignature Language="VB.NET" Value="Public Property EndOfWordSuffix As String" />
      <MemberSignature Language="F#" Value="member this.EndOfWordSuffix : string with get, set" Usage="Microsoft.ML.Tokenizers.Bpe.EndOfWordSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An optional suffix to characterize and end-of-word sub-word
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FuseUnknownTokens">
      <MemberSignature Language="C#" Value="public bool FuseUnknownTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FuseUnknownTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Bpe.FuseUnknownTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property FuseUnknownTokens As Boolean" />
      <MemberSignature Language="F#" Value="member this.FuseUnknownTokens : bool with get, set" Usage="Microsoft.ML.Tokenizers.Bpe.FuseUnknownTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets whether allowing multiple unknown tokens get fused
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTrainer">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Tokenizers.Trainer? GetTrainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.ML.Tokenizers.Trainer GetTrainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Bpe.GetTrainer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetTrainer () As Trainer" />
      <MemberSignature Language="F#" Value="override this.GetTrainer : unit -&gt; Microsoft.ML.Tokenizers.Trainer" Usage="bpe.GetTrainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Trainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a trainer object to use in training the model and generate the vocabulary and merges data.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVocab">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IReadOnlyDictionary&lt;string,int&gt; GetVocab ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, int32&gt; GetVocab() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Bpe.GetVocab" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetVocab () As IReadOnlyDictionary(Of String, Integer)" />
      <MemberSignature Language="F#" Value="override this.GetVocab : unit -&gt; System.Collections.Generic.IReadOnlyDictionary&lt;string, int&gt;" Usage="bpe.GetVocab " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the dictionary mapping tokens to Ids.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVocabSize">
      <MemberSignature Language="C#" Value="public override int GetVocabSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetVocabSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Bpe.GetVocabSize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetVocabSize () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetVocabSize : unit -&gt; int" Usage="bpe.GetVocabSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the dictionary size that map tokens to Ids.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdToToken">
      <MemberSignature Language="C#" Value="public override string? IdToToken (int id, bool skipSpecialTokens = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string IdToToken(int32 id, bool skipSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Bpe.IdToToken(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IdToToken (id As Integer, Optional skipSpecialTokens As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="override this.IdToToken : int * bool -&gt; string" Usage="bpe.IdToToken (id, skipSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="skipSpecialTokens" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">The Id to map to the token.</param>
        <param name="skipSpecialTokens">Indicate if want to skip the special tokens during the decoding.</param>
        <summary>
            Map the tokenized Id to the token.
            </summary>
        <returns>The mapped token of the Id.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public override string[] Save (string path, string? prefix = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] Save(string path, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Bpe.Save(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Save (path As String, Optional prefix As String = Nothing) As String()" />
      <MemberSignature Language="F#" Value="override this.Save : string * string -&gt; string[]" Usage="bpe.Save (path, prefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The file system path to store the generated files at.</param>
        <param name="prefix">Optional prefix for the generated file names.</param>
        <summary>
            Save the model data into the vocabulary and merges files.
            </summary>
        <returns>The list of all saved files.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tokenize">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt; Tokenize (string sequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.ML.Tokenizers.Token&gt; Tokenize(string sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Bpe.Tokenize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Tokenize (sequence As String) As IReadOnlyList(Of Token)" />
      <MemberSignature Language="F#" Value="override this.Tokenize : string -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt;" Usage="bpe.Tokenize sequence" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.Token&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sequence">The sequence to tokenize.</param>
        <summary>
            Tokenize a sequence string to a list of tokens.
            </summary>
        <returns>The list of tokens generated from the sequence tokenization.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenToId">
      <MemberSignature Language="C#" Value="public override int? TokenToId (string token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Nullable`1&lt;int32&gt; TokenToId(string token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Bpe.TokenToId(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TokenToId (token As String) As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="override this.TokenToId : string -&gt; Nullable&lt;int&gt;" Usage="bpe.TokenToId token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">The token to map to the Id.</param>
        <summary>
            Map the token to tokenized Id.
            </summary>
        <returns>The mapped Id of the token.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownToken">
      <MemberSignature Language="C#" Value="public string? UnknownToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UnknownToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Bpe.UnknownToken" />
      <MemberSignature Language="VB.NET" Value="Public Property UnknownToken As String" />
      <MemberSignature Language="F#" Value="member this.UnknownToken : string with get, set" Usage="Microsoft.ML.Tokenizers.Bpe.UnknownToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or Sets unknown token. The unknown token to be used when we encounter an unknown char
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
