<Type Name="IPredictorModel" FullName="Microsoft.ML.Runtime.EntryPoints.IPredictorModel">
  <TypeSignature Language="C#" Value="public interface IPredictorModel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPredictorModel" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.EntryPoints.IPredictorModel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPredictorModel" />
  <TypeSignature Language="F#" Value="type IPredictorModel = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Interface for standard predictor model port type.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.EntryPoints.IPredictorModel Apply (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.EntryPoints.ITransformModel transformModel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.EntryPoints.IPredictorModel Apply(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.EntryPoints.ITransformModel transformModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.EntryPoints.ITransformModel)" />
      <MemberSignature Language="VB.NET" Value="Public Function Apply (env As IHostEnvironment, transformModel As ITransformModel) As IPredictorModel" />
      <MemberSignature Language="F#" Value="abstract member Apply : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.EntryPoints.ITransformModel -&gt; Microsoft.ML.Runtime.EntryPoints.IPredictorModel" Usage="iPredictorModel.Apply (env, transformModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.IPredictorModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="transformModel" Type="Microsoft.ML.Runtime.EntryPoints.ITransformModel" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="transformModel">To be added.</param>
        <summary>
            Apply the predictor model to the transform model and return the resulting predictor model.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLabelInfo">
      <MemberSignature Language="C#" Value="public string[] GetLabelInfo (Microsoft.ML.Runtime.IHostEnvironment env, out Microsoft.ML.Runtime.Data.ColumnType labelType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetLabelInfo(class Microsoft.ML.Runtime.IHostEnvironment env, [out] class Microsoft.ML.Runtime.Data.ColumnType&amp; labelType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.GetLabelInfo(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.ColumnType@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLabelInfo (env As IHostEnvironment, ByRef labelType As ColumnType) As String()" />
      <MemberSignature Language="F#" Value="abstract member GetLabelInfo : Microsoft.ML.Runtime.IHostEnvironment *  -&gt; string[]" Usage="iPredictorModel.GetLabelInfo (env, labelType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="labelType" Type="Microsoft.ML.Runtime.Data.ColumnType" RefType="out" />
      </Parameters>
      <Docs>
        <param name="env"></param>
        <param name="labelType">The column type of the label the predictor was trained on.</param>
        <summary>
            Returns a string array containing the label names of the label column type predictor was trained on.
            If the training label is a key with text key value metadata, it should return this metadata. The order of the labels should be consistent
            with the key values. Otherwise, it returns null.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTrainingSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Data.RoleMappedSchema GetTrainingSchema (Microsoft.ML.Runtime.IHostEnvironment env);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.Data.RoleMappedSchema GetTrainingSchema(class Microsoft.ML.Runtime.IHostEnvironment env) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.GetTrainingSchema(Microsoft.ML.Runtime.IHostEnvironment)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTrainingSchema (env As IHostEnvironment) As RoleMappedSchema" />
      <MemberSignature Language="F#" Value="abstract member GetTrainingSchema : Microsoft.ML.Runtime.IHostEnvironment -&gt; Microsoft.ML.Runtime.Data.RoleMappedSchema" Usage="iPredictorModel.GetTrainingSchema env" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.RoleMappedSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
      </Parameters>
      <Docs>
        <param name="env"></param>
        <summary>
            Returns the RoleMappedSchema that was used in training.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Predictor">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.IPredictor Predictor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.IPredictor Predictor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.Predictor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Predictor As IPredictor" />
      <MemberSignature Language="F#" Value="member this.Predictor : Microsoft.ML.Runtime.IPredictor" Usage="Microsoft.ML.Runtime.EntryPoints.IPredictorModel.Predictor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IPredictor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Extract the predictor object out of the predictor model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareData">
      <MemberSignature Language="C#" Value="public void PrepareData (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView input, out Microsoft.ML.Runtime.Data.RoleMappedData roleMappedData, out Microsoft.ML.Runtime.IPredictor predictor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareData(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView input, [out] class Microsoft.ML.Runtime.Data.RoleMappedData&amp; roleMappedData, [out] class Microsoft.ML.Runtime.IPredictor&amp; predictor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.PrepareData(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Runtime.Data.RoleMappedData@,Microsoft.ML.Runtime.IPredictor@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrepareData (env As IHostEnvironment, input As IDataView, ByRef roleMappedData As RoleMappedData, ByRef predictor As IPredictor)" />
      <MemberSignature Language="F#" Value="abstract member PrepareData : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView *  *  -&gt; unit" Usage="iPredictorModel.PrepareData (env, input, roleMappedData, predictor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="roleMappedData" Type="Microsoft.ML.Runtime.Data.RoleMappedData" RefType="out" />
        <Parameter Name="predictor" Type="Microsoft.ML.Runtime.IPredictor" RefType="out" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <param name="roleMappedData">To be added.</param>
        <param name="predictor">To be added.</param>
        <summary>
            For a given input data, return role mapped data and the predictor object.
            The scoring entry point will hopefully know how to construct a scorer out of them.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (Microsoft.ML.Runtime.IHostEnvironment env, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class Microsoft.ML.Runtime.IHostEnvironment env, class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.Save(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)" />
      <MemberSignature Language="F#" Value="abstract member Save : Microsoft.ML.Runtime.IHostEnvironment * System.IO.Stream -&gt; unit" Usage="iPredictorModel.Save (env, stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="stream">To be added.</param>
        <summary>
            Save the model to the given stream.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformModel">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.EntryPoints.ITransformModel TransformModel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.EntryPoints.ITransformModel TransformModel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.EntryPoints.IPredictorModel.TransformModel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TransformModel As ITransformModel" />
      <MemberSignature Language="F#" Value="member this.TransformModel : Microsoft.ML.Runtime.EntryPoints.ITransformModel" Usage="Microsoft.ML.Runtime.EntryPoints.IPredictorModel.TransformModel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.ITransformModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Extract only the transform portion of the predictor model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>