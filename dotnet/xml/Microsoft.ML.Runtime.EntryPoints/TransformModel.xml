<Type Name="TransformModel" FullName="Microsoft.ML.Runtime.EntryPoints.TransformModel">
  <TypeSignature Language="C#" Value="public sealed class TransformModel : Microsoft.ML.Runtime.EntryPoints.ITransformModel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TransformModel extends System.Object implements class Microsoft.ML.Runtime.EntryPoints.ITransformModel" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.EntryPoints.TransformModel" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TransformModel&#xA;Implements ITransformModel" />
  <TypeSignature Language="F#" Value="type TransformModel = class&#xA;    interface ITransformModel" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.EntryPoints.ITransformModel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            This encapsulates zero or more transform models. It does this by recording
            the initial schema, together with the sequence of transforms applied to that
            schema.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformModel (Microsoft.ML.Runtime.IHostEnvironment env, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.TransformModel.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.EntryPoints.TransformModel : Microsoft.ML.Runtime.IHostEnvironment * System.IO.Stream -&gt; Microsoft.ML.Runtime.EntryPoints.TransformModel" Usage="new Microsoft.ML.Runtime.EntryPoints.TransformModel (env, stream)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="stream">To be added.</param>
        <summary>
            Load a transform model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformModel (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView result, Microsoft.ML.Runtime.Data.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView result, class Microsoft.ML.Runtime.Data.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.TransformModel.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Runtime.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, result As IDataView, input As IDataView)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.EntryPoints.TransformModel : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView * Microsoft.ML.Runtime.Data.IDataView -&gt; Microsoft.ML.Runtime.EntryPoints.TransformModel" Usage="new Microsoft.ML.Runtime.EntryPoints.TransformModel (env, result, input)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="result" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="input" Type="Microsoft.ML.Runtime.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="result">To be added.</param>
        <param name="input">To be added.</param>
        <summary>
            Create a TransformModel containing the transforms from "result" back to "input".
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformModel (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.ISchema schemaRoot, Microsoft.ML.Runtime.Data.IDataTransform[] xfs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.ISchema schemaRoot, class Microsoft.ML.Runtime.Data.IDataTransform[] xfs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.TransformModel.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.ISchema,Microsoft.ML.Runtime.Data.IDataTransform[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, schemaRoot As ISchema, xfs As IDataTransform())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.EntryPoints.TransformModel : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.ISchema * Microsoft.ML.Runtime.Data.IDataTransform[] -&gt; Microsoft.ML.Runtime.EntryPoints.TransformModel" Usage="new Microsoft.ML.Runtime.EntryPoints.TransformModel (env, schemaRoot, xfs)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="schemaRoot" Type="Microsoft.ML.Runtime.Data.ISchema" />
        <Parameter Name="xfs" Type="Microsoft.ML.Runtime.Data.IDataTransform[]" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="schemaRoot">To be added.</param>
        <param name="xfs">To be added.</param>
        <summary>
            Create a TransformModel containing the given (optional) transforms applied to the
            given root schema.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Data.IDataView Apply (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.Data.IDataView Apply(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.TransformModel.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Apply (env As IHostEnvironment, input As IDataView) As IDataView" />
      <MemberSignature Language="F#" Value="abstract member Apply : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView -&gt; Microsoft.ML.Runtime.Data.IDataView&#xA;override this.Apply : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView -&gt; Microsoft.ML.Runtime.Data.IDataView" Usage="transformModel.Apply (env, input)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Runtime.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>
            Apply this transform model to the given input data.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.EntryPoints.ITransformModel Apply (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.EntryPoints.ITransformModel input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.EntryPoints.ITransformModel Apply(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.EntryPoints.ITransformModel input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.TransformModel.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.EntryPoints.ITransformModel)" />
      <MemberSignature Language="VB.NET" Value="Public Function Apply (env As IHostEnvironment, input As ITransformModel) As ITransformModel" />
      <MemberSignature Language="F#" Value="abstract member Apply : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.EntryPoints.ITransformModel -&gt; Microsoft.ML.Runtime.EntryPoints.ITransformModel&#xA;override this.Apply : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.EntryPoints.ITransformModel -&gt; Microsoft.ML.Runtime.EntryPoints.ITransformModel" Usage="transformModel.Apply (env, input)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.EntryPoints.ITransformModel)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.ITransformModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Runtime.EntryPoints.ITransformModel" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>
            Apply this transform model to the given input transform model to produce a composite transform model.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRowToRowMapper">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Data.IRowToRowMapper AsRowToRowMapper (Microsoft.ML.Runtime.IExceptionContext ectx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.Data.IRowToRowMapper AsRowToRowMapper(class Microsoft.ML.Runtime.IExceptionContext ectx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.TransformModel.AsRowToRowMapper(Microsoft.ML.Runtime.IExceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function AsRowToRowMapper (ectx As IExceptionContext) As IRowToRowMapper" />
      <MemberSignature Language="F#" Value="abstract member AsRowToRowMapper : Microsoft.ML.Runtime.IExceptionContext -&gt; Microsoft.ML.Runtime.Data.IRowToRowMapper&#xA;override this.AsRowToRowMapper : Microsoft.ML.Runtime.IExceptionContext -&gt; Microsoft.ML.Runtime.Data.IRowToRowMapper" Usage="transformModel.AsRowToRowMapper ectx" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.AsRowToRowMapper(Microsoft.ML.Runtime.IExceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.IRowToRowMapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ectx" Type="Microsoft.ML.Runtime.IExceptionContext" />
      </Parameters>
      <Docs>
        <param name="ectx">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Data.ISchema InputSchema { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.Data.ISchema InputSchema" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.EntryPoints.TransformModel.InputSchema" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputSchema As ISchema" />
      <MemberSignature Language="F#" Value="member this.InputSchema : Microsoft.ML.Runtime.Data.ISchema" Usage="Microsoft.ML.Runtime.EntryPoints.TransformModel.InputSchema" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.Runtime.EntryPoints.ITransformModel.InputSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.ISchema</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The input schema that this transform model was originally instantiated on.
            Note that the schema may have columns that aren't needed by this transform model.
            If an IDataView exists with this schema, then applying this transform model to it
            shouldn't fail because of column type issues.
            REVIEW: Would be nice to be able to trim this to the minimum needed somehow. Note
            however that doing so may cause issues for composing transform models. For example,
            if transform model A needs column X and model B needs Y, that is NOT produced by A,
            then trimming A's input schema would cause composition to fail.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Data.ISchema OutputSchema { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.Data.ISchema OutputSchema" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.EntryPoints.TransformModel.OutputSchema" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputSchema As ISchema" />
      <MemberSignature Language="F#" Value="member this.OutputSchema : Microsoft.ML.Runtime.Data.ISchema" Usage="Microsoft.ML.Runtime.EntryPoints.TransformModel.OutputSchema" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.Runtime.EntryPoints.ITransformModel.OutputSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.ISchema</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The resulting schema once applied to this model. The <see cref="P:Microsoft.ML.Runtime.EntryPoints.TransformModel.InputSchema" /> might have
            columns that are not needed by this transform and these columns will be seen in the
            <see cref="P:Microsoft.ML.Runtime.EntryPoints.TransformModel.OutputSchema" /> produced by this transform.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (Microsoft.ML.Runtime.IHostEnvironment env, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class Microsoft.ML.Runtime.IHostEnvironment env, class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.TransformModel.Save(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)" />
      <MemberSignature Language="F#" Value="abstract member Save : Microsoft.ML.Runtime.IHostEnvironment * System.IO.Stream -&gt; unit&#xA;override this.Save : Microsoft.ML.Runtime.IHostEnvironment * System.IO.Stream -&gt; unit" Usage="transformModel.Save (env, stream)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.Save(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="stream">To be added.</param>
        <summary>
            Save this transform model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>