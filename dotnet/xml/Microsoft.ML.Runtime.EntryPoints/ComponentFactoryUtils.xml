<Type Name="ComponentFactoryUtils" FullName="Microsoft.ML.Runtime.EntryPoints.ComponentFactoryUtils">
  <TypeSignature Language="C#" Value="public static class ComponentFactoryUtils" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ComponentFactoryUtils extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.EntryPoints.ComponentFactoryUtils" />
  <TypeSignature Language="VB.NET" Value="Public Class ComponentFactoryUtils" />
  <TypeSignature Language="F#" Value="type ComponentFactoryUtils = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A utility class for creating <see cref="T:Microsoft.ML.Runtime.EntryPoints.IComponentFactory" /> instances.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateFromFunction&lt;TComponent&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.EntryPoints.IComponentFactory&lt;TComponent&gt; CreateFromFunction&lt;TComponent&gt; (Func&lt;Microsoft.ML.Runtime.IHostEnvironment,TComponent&gt; factory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.EntryPoints.IComponentFactory`1&lt;!!TComponent&gt; CreateFromFunction&lt;TComponent&gt;(class System.Func`2&lt;class Microsoft.ML.Runtime.IHostEnvironment, !!TComponent&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.ComponentFactoryUtils.CreateFromFunction``1(System.Func{Microsoft.ML.Runtime.IHostEnvironment,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromFunction(Of TComponent) (factory As Func(Of IHostEnvironment, TComponent)) As IComponentFactory(Of TComponent)" />
      <MemberSignature Language="F#" Value="static member CreateFromFunction : Func&lt;Microsoft.ML.Runtime.IHostEnvironment, 'Component&gt; -&gt; Microsoft.ML.Runtime.EntryPoints.IComponentFactory&lt;'Component&gt;" Usage="Microsoft.ML.Runtime.EntryPoints.ComponentFactoryUtils.CreateFromFunction factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.IComponentFactory&lt;TComponent&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TComponent" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;Microsoft.ML.Runtime.IHostEnvironment,TComponent&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TComponent">To be added.</typeparam>
        <param name="factory">To be added.</param>
        <summary>
            Creates a component factory with no extra parameters (other than an <see cref="T:Microsoft.ML.Runtime.IHostEnvironment" />)
            that simply wraps a delegate which creates the component.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromFunction&lt;TArg1,TComponent&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.EntryPoints.IComponentFactory&lt;TArg1,TComponent&gt; CreateFromFunction&lt;TArg1,TComponent&gt; (Func&lt;Microsoft.ML.Runtime.IHostEnvironment,TArg1,TComponent&gt; factory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.EntryPoints.IComponentFactory`2&lt;!!TArg1, !!TComponent&gt; CreateFromFunction&lt;TArg1, TComponent&gt;(class System.Func`3&lt;class Microsoft.ML.Runtime.IHostEnvironment, !!TArg1, !!TComponent&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.ComponentFactoryUtils.CreateFromFunction``2(System.Func{Microsoft.ML.Runtime.IHostEnvironment,``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromFunction(Of TArg1, TComponent) (factory As Func(Of IHostEnvironment, TArg1, TComponent)) As IComponentFactory(Of TArg1, TComponent)" />
      <MemberSignature Language="F#" Value="static member CreateFromFunction : Func&lt;Microsoft.ML.Runtime.IHostEnvironment, 'TArg1, 'Component&gt; -&gt; Microsoft.ML.Runtime.EntryPoints.IComponentFactory&lt;'TArg1, 'Component&gt;" Usage="Microsoft.ML.Runtime.EntryPoints.ComponentFactoryUtils.CreateFromFunction factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.IComponentFactory&lt;TArg1,TComponent&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TComponent" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;Microsoft.ML.Runtime.IHostEnvironment,TArg1,TComponent&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TComponent">To be added.</typeparam>
        <param name="factory">To be added.</param>
        <summary>
            Creates a component factory when we take one extra parameter (and an
            <see cref="T:Microsoft.ML.Runtime.IHostEnvironment" />) that simply wraps a delegate which creates the component.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromFunction&lt;TArg1,TArg2,TComponent&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.EntryPoints.IComponentFactory&lt;TArg1,TArg2,TComponent&gt; CreateFromFunction&lt;TArg1,TArg2,TComponent&gt; (Func&lt;Microsoft.ML.Runtime.IHostEnvironment,TArg1,TArg2,TComponent&gt; factory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.EntryPoints.IComponentFactory`3&lt;!!TArg1, !!TArg2, !!TComponent&gt; CreateFromFunction&lt;TArg1, TArg2, TComponent&gt;(class System.Func`4&lt;class Microsoft.ML.Runtime.IHostEnvironment, !!TArg1, !!TArg2, !!TComponent&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.ComponentFactoryUtils.CreateFromFunction``3(System.Func{Microsoft.ML.Runtime.IHostEnvironment,``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromFunction(Of TArg1, TArg2, TComponent) (factory As Func(Of IHostEnvironment, TArg1, TArg2, TComponent)) As IComponentFactory(Of TArg1, TArg2, TComponent)" />
      <MemberSignature Language="F#" Value="static member CreateFromFunction : Func&lt;Microsoft.ML.Runtime.IHostEnvironment, 'TArg1, 'TArg2, 'Component&gt; -&gt; Microsoft.ML.Runtime.EntryPoints.IComponentFactory&lt;'TArg1, 'TArg2, 'Component&gt;" Usage="Microsoft.ML.Runtime.EntryPoints.ComponentFactoryUtils.CreateFromFunction factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.IComponentFactory&lt;TArg1,TArg2,TComponent&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TComponent" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;Microsoft.ML.Runtime.IHostEnvironment,TArg1,TArg2,TComponent&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <typeparam name="TComponent">To be added.</typeparam>
        <param name="factory">To be added.</param>
        <summary>
            Creates a component factory when we take two extra parameters (and an
            <see cref="T:Microsoft.ML.Runtime.IHostEnvironment" />) that simply wraps a delegate which creates the component.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromFunction&lt;TArg1,TArg2,TArg3,TComponent&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.EntryPoints.IComponentFactory&lt;TArg1,TArg2,TArg3,TComponent&gt; CreateFromFunction&lt;TArg1,TArg2,TArg3,TComponent&gt; (Func&lt;Microsoft.ML.Runtime.IHostEnvironment,TArg1,TArg2,TArg3,TComponent&gt; factory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.EntryPoints.IComponentFactory`4&lt;!!TArg1, !!TArg2, !!TArg3, !!TComponent&gt; CreateFromFunction&lt;TArg1, TArg2, TArg3, TComponent&gt;(class System.Func`5&lt;class Microsoft.ML.Runtime.IHostEnvironment, !!TArg1, !!TArg2, !!TArg3, !!TComponent&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.ComponentFactoryUtils.CreateFromFunction``4(System.Func{Microsoft.ML.Runtime.IHostEnvironment,``0,``1,``2,``3})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromFunction(Of TArg1, TArg2, TArg3, TComponent) (factory As Func(Of IHostEnvironment, TArg1, TArg2, TArg3, TComponent)) As IComponentFactory(Of TArg1, TArg2, TArg3, TComponent)" />
      <MemberSignature Language="F#" Value="static member CreateFromFunction : Func&lt;Microsoft.ML.Runtime.IHostEnvironment, 'TArg1, 'TArg2, 'TArg3, 'Component&gt; -&gt; Microsoft.ML.Runtime.EntryPoints.IComponentFactory&lt;'TArg1, 'TArg2, 'TArg3, 'Component&gt;" Usage="Microsoft.ML.Runtime.EntryPoints.ComponentFactoryUtils.CreateFromFunction factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.IComponentFactory&lt;TArg1,TArg2,TArg3,TComponent&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TComponent" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;Microsoft.ML.Runtime.IHostEnvironment,TArg1,TArg2,TArg3,TComponent&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <typeparam name="TArg3">To be added.</typeparam>
        <typeparam name="TComponent">To be added.</typeparam>
        <param name="factory">To be added.</param>
        <summary>
            Creates a component factory when we take three extra parameters (and an
            <see cref="T:Microsoft.ML.Runtime.IHostEnvironment" />) that simply wraps a delegate which creates the component.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>