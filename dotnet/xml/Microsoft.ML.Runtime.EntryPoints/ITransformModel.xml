<Type Name="ITransformModel" FullName="Microsoft.ML.Runtime.EntryPoints.ITransformModel">
  <TypeSignature Language="C#" Value="public interface ITransformModel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITransformModel" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.EntryPoints.ITransformModel" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITransformModel" />
  <TypeSignature Language="F#" Value="type ITransformModel = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITransformModel" />
  <TypeSignature Language="C++ CX" Value="public interface class ITransformModel" />
  <TypeSignature Language="C++ WINRT" Value="__interface ITransformModel" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Interface for standard transform model port type.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Data.IDataView Apply (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.Data.IDataView Apply(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Apply (env As IHostEnvironment, input As IDataView) As IDataView" />
      <MemberSignature Language="F#" Value="abstract member Apply : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView -&gt; Microsoft.ML.Runtime.Data.IDataView" Usage="iTransformModel.Apply (env, input)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::ML::Runtime::Data::IDataView ^ Apply(Microsoft::ML::Runtime::IHostEnvironment ^ env, Microsoft::ML::Runtime::Data::IDataView ^ input);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::ML::Runtime::Data::IDataView ^ Apply(Microsoft::ML::Runtime::IHostEnvironment ^ env, Microsoft::ML::Runtime::Data::IDataView ^ input);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::ML::Runtime::Data::IDataView Apply(Microsoft::ML::Runtime::IHostEnvironment const &amp; env, Microsoft::ML::Runtime::Data::IDataView const &amp; input);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Runtime.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>
            Apply the transform(s) in the model to the given input data.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.EntryPoints.ITransformModel Apply (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.EntryPoints.ITransformModel input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.EntryPoints.ITransformModel Apply(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.EntryPoints.ITransformModel input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.EntryPoints.ITransformModel)" />
      <MemberSignature Language="VB.NET" Value="Public Function Apply (env As IHostEnvironment, input As ITransformModel) As ITransformModel" />
      <MemberSignature Language="F#" Value="abstract member Apply : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.EntryPoints.ITransformModel -&gt; Microsoft.ML.Runtime.EntryPoints.ITransformModel" Usage="iTransformModel.Apply (env, input)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::ML::Runtime::EntryPoints::ITransformModel ^ Apply(Microsoft::ML::Runtime::IHostEnvironment ^ env, Microsoft::ML::Runtime::EntryPoints::ITransformModel ^ input);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::ML::Runtime::EntryPoints::ITransformModel ^ Apply(Microsoft::ML::Runtime::IHostEnvironment ^ env, Microsoft::ML::Runtime::EntryPoints::ITransformModel ^ input);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::ML::Runtime::EntryPoints::ITransformModel Apply(Microsoft::ML::Runtime::IHostEnvironment const &amp; env, Microsoft::ML::Runtime::EntryPoints::ITransformModel const &amp; input);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.ITransformModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Runtime.EntryPoints.ITransformModel" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <summary>
            Apply the transform(s) in the model to the given transform model.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRowToRowMapper">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Data.IRowToRowMapper AsRowToRowMapper (Microsoft.ML.Runtime.IExceptionContext ectx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.Data.IRowToRowMapper AsRowToRowMapper(class Microsoft.ML.Runtime.IExceptionContext ectx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.AsRowToRowMapper(Microsoft.ML.Runtime.IExceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function AsRowToRowMapper (ectx As IExceptionContext) As IRowToRowMapper" />
      <MemberSignature Language="F#" Value="abstract member AsRowToRowMapper : Microsoft.ML.Runtime.IExceptionContext -&gt; Microsoft.ML.Runtime.Data.IRowToRowMapper" Usage="iTransformModel.AsRowToRowMapper ectx" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::ML::Runtime::Data::IRowToRowMapper ^ AsRowToRowMapper(Microsoft::ML::Runtime::IExceptionContext ^ ectx);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::ML::Runtime::Data::IRowToRowMapper ^ AsRowToRowMapper(Microsoft::ML::Runtime::IExceptionContext ^ ectx);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::ML::Runtime::Data::IRowToRowMapper AsRowToRowMapper(Microsoft::ML::Runtime::IExceptionContext const &amp; ectx);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.IRowToRowMapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ectx" Type="Microsoft.ML.Runtime.IExceptionContext" />
      </Parameters>
      <Docs>
        <param name="ectx">To be added.</param>
        <summary>
            Returns the transform model as an <see cref="T:Microsoft.ML.Runtime.Data.IRowToRowMapper" /> that can output a row
            given a row with the same schema as <see cref="P:Microsoft.ML.Runtime.EntryPoints.ITransformModel.InputSchema" />.
            </summary>
        <returns>The transform model as an <see cref="T:Microsoft.ML.Runtime.Data.IRowToRowMapper" />. If not all transforms
            in the pipeline are <see cref="T:Microsoft.ML.Runtime.Data.IRowToRowMapper" /> then it returns null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Data.ISchema InputSchema { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.Data.ISchema InputSchema" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.EntryPoints.ITransformModel.InputSchema" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputSchema As ISchema" />
      <MemberSignature Language="F#" Value="member this.InputSchema : Microsoft.ML.Runtime.Data.ISchema" Usage="Microsoft.ML.Runtime.EntryPoints.ITransformModel.InputSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ML::Runtime::Data::ISchema ^ InputSchema { Microsoft::ML::Runtime::Data::ISchema ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::ML::Runtime::Data::ISchema ^ InputSchema { Microsoft::ML::Runtime::Data::ISchema ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.ISchema</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The input schema that this transform model was originally instantiated on.
            Note that the schema may have columns that aren't needed by this transform model.
            If an IDataView exists with this schema, then applying this transform model to it
            shouldn't fail because of column type issues.
            REVIEW: Would be nice to be able to trim this to the minimum needed somehow. Note
            however that doing so may cause issues for composing transform models. For example,
            if transform model A needs column X and model B needs Y, that is NOT produced by A,
            then trimming A's input schema would cause composition to fail.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (Microsoft.ML.Runtime.IHostEnvironment env, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class Microsoft.ML.Runtime.IHostEnvironment env, class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.EntryPoints.ITransformModel.Save(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)" />
      <MemberSignature Language="F#" Value="abstract member Save : Microsoft.ML.Runtime.IHostEnvironment * System.IO.Stream -&gt; unit" Usage="iTransformModel.Save (env, stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(Microsoft::ML::Runtime::IHostEnvironment ^ env, System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="stream">To be added.</param>
        <summary>
            Save the model to the given stream.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>