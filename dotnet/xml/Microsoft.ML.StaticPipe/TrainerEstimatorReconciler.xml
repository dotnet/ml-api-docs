<Type Name="TrainerEstimatorReconciler" FullName="Microsoft.ML.StaticPipe.TrainerEstimatorReconciler">
  <TypeSignature Language="C#" Value="public abstract class TrainerEstimatorReconciler : Microsoft.ML.StaticPipe.EstimatorReconciler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TrainerEstimatorReconciler extends Microsoft.ML.StaticPipe.EstimatorReconciler" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.StaticPipe.TrainerEstimatorReconciler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TrainerEstimatorReconciler&#xA;Inherits EstimatorReconciler" />
  <TypeSignature Language="F#" Value="type TrainerEstimatorReconciler = class&#xA;    inherit EstimatorReconciler" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.StaticPipe.EstimatorReconciler</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            General purpose reconciler for a typical case with trainers, where they accept some generally
            fixed number of inputs, and produce some outputs where the names of the outputs are fixed.
            Authors of components that want to produce columns can subclass this directly, or use one of the
            common nested subclasses.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TrainerEstimatorReconciler (Microsoft.ML.StaticPipe.PipelineColumn[] inputs, string[] outputNames);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.StaticPipe.PipelineColumn[] inputs, string[] outputNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.TrainerEstimatorReconciler.#ctor(Microsoft.ML.StaticPipe.PipelineColumn[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (inputs As PipelineColumn(), outputNames As String())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.StaticPipe.TrainerEstimatorReconciler : Microsoft.ML.StaticPipe.PipelineColumn[] * string[] -&gt; Microsoft.ML.StaticPipe.TrainerEstimatorReconciler" Usage="new Microsoft.ML.StaticPipe.TrainerEstimatorReconciler (inputs, outputNames)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="inputs" Type="Microsoft.ML.StaticPipe.PipelineColumn[]" />
        <Parameter Name="outputNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="inputs">The set of inputs</param>
        <param name="outputNames">The names of the outputs, which we assume cannot be changed</param>
        <summary>
            Constructor for the base class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inputs">
      <MemberSignature Language="C#" Value="protected readonly Microsoft.ML.StaticPipe.PipelineColumn[] Inputs;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly class Microsoft.ML.StaticPipe.PipelineColumn[] Inputs" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.StaticPipe.TrainerEstimatorReconciler.Inputs" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Inputs As PipelineColumn() " />
      <MemberSignature Language="F#" Value="val mutable Inputs : Microsoft.ML.StaticPipe.PipelineColumn[]" Usage="Microsoft.ML.StaticPipe.TrainerEstimatorReconciler.Inputs" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.PipelineColumn[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Outputs">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerable&lt;Microsoft.ML.StaticPipe.PipelineColumn&gt; Outputs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ML.StaticPipe.PipelineColumn&gt; Outputs" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.StaticPipe.TrainerEstimatorReconciler.Outputs" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride ReadOnly Property Outputs As IEnumerable(Of PipelineColumn)" />
      <MemberSignature Language="F#" Value="member this.Outputs : seq&lt;Microsoft.ML.StaticPipe.PipelineColumn&gt;" Usage="Microsoft.ML.StaticPipe.TrainerEstimatorReconciler.Outputs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ML.StaticPipe.PipelineColumn&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The output columns. Note that subclasses should return exactly the same items each time,
            and the items should correspond to the output names passed into the constructor.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reconcile">
      <MemberSignature Language="C#" Value="public override sealed Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt; Reconcile (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.StaticPipe.PipelineColumn[] toOutput, System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.ML.StaticPipe.PipelineColumn,string&gt; inputNames, System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.ML.StaticPipe.PipelineColumn,string&gt; outputNames, System.Collections.Generic.IReadOnlyCollection&lt;string&gt; usedNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.ML.IEstimator`1&lt;class Microsoft.ML.ITransformer&gt; Reconcile(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.StaticPipe.PipelineColumn[] toOutput, class System.Collections.Generic.IReadOnlyDictionary`2&lt;class Microsoft.ML.StaticPipe.PipelineColumn, string&gt; inputNames, class System.Collections.Generic.IReadOnlyDictionary`2&lt;class Microsoft.ML.StaticPipe.PipelineColumn, string&gt; outputNames, class System.Collections.Generic.IReadOnlyCollection`1&lt;string&gt; usedNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.TrainerEstimatorReconciler.Reconcile(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.StaticPipe.PipelineColumn[],System.Collections.Generic.IReadOnlyDictionary{Microsoft.ML.StaticPipe.PipelineColumn,System.String},System.Collections.Generic.IReadOnlyDictionary{Microsoft.ML.StaticPipe.PipelineColumn,System.String},System.Collections.Generic.IReadOnlyCollection{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Reconcile (env As IHostEnvironment, toOutput As PipelineColumn(), inputNames As IReadOnlyDictionary(Of PipelineColumn, String), outputNames As IReadOnlyDictionary(Of PipelineColumn, String), usedNames As IReadOnlyCollection(Of String)) As IEstimator(Of ITransformer)" />
      <MemberSignature Language="F#" Value="override this.Reconcile : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.StaticPipe.PipelineColumn[] * System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.ML.StaticPipe.PipelineColumn, string&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.ML.StaticPipe.PipelineColumn, string&gt; * System.Collections.Generic.IReadOnlyCollection&lt;string&gt; -&gt; Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt;" Usage="trainerEstimatorReconciler.Reconcile (env, toOutput, inputNames, outputNames, usedNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="toOutput" Type="Microsoft.ML.StaticPipe.PipelineColumn[]" />
        <Parameter Name="inputNames" Type="System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.ML.StaticPipe.PipelineColumn,System.String&gt;" />
        <Parameter Name="outputNames" Type="System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.ML.StaticPipe.PipelineColumn,System.String&gt;" />
        <Parameter Name="usedNames" Type="System.Collections.Generic.IReadOnlyCollection&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="toOutput">To be added.</param>
        <param name="inputNames">To be added.</param>
        <param name="outputNames">To be added.</param>
        <param name="usedNames">To be added.</param>
        <summary>
            Produces the estimator. Note that this is made out of <see cref="M:Microsoft.ML.StaticPipe.TrainerEstimatorReconciler.ReconcileCore(Microsoft.ML.Runtime.IHostEnvironment,System.String[])" />'s
            return value, plus whatever usages of <see cref="T:Microsoft.ML.Transforms.ColumnCopyingEstimator" /> are necessary to avoid collisions with
            the output names fed to the constructor. This class provides the implementation, and subclasses should instead
            override <see cref="M:Microsoft.ML.StaticPipe.TrainerEstimatorReconciler.ReconcileCore(Microsoft.ML.Runtime.IHostEnvironment,System.String[])" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReconcileCore">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt; ReconcileCore (Microsoft.ML.Runtime.IHostEnvironment env, string[] inputNames);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.ML.IEstimator`1&lt;class Microsoft.ML.ITransformer&gt; ReconcileCore(class Microsoft.ML.Runtime.IHostEnvironment env, string[] inputNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.TrainerEstimatorReconciler.ReconcileCore(Microsoft.ML.Runtime.IHostEnvironment,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReconcileCore (env As IHostEnvironment, inputNames As String()) As IEstimator(Of ITransformer)" />
      <MemberSignature Language="F#" Value="abstract member ReconcileCore : Microsoft.ML.Runtime.IHostEnvironment * string[] -&gt; Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt;" Usage="trainerEstimatorReconciler.ReconcileCore (env, inputNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="inputNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="env">The host environment to use to create the estimator.</param>
        <param name="inputNames">The names of the inputs, which corresponds exactly to the input columns
            fed into the constructor.</param>
        <summary>
            Produce the training estimator.
            </summary>
        <returns>An estimator, which should produce the additional columns indicated by the output names
            in the constructor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>