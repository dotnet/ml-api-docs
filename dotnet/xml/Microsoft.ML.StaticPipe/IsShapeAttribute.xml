<Type Name="IsShapeAttribute" FullName="Microsoft.ML.StaticPipe.IsShapeAttribute">
  <TypeSignature Language="C#" Value="public sealed class IsShapeAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IsShapeAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.StaticPipe.IsShapeAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IsShapeAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="F#" Value="type IsShapeAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="ml-dotnet-preview">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.GenericParameter)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
             An indicator to the analyzer that this type parameter ought to be a valid schema-shape object (for example, a pipeline-column, or
             value-tuples or some other containing type of such) as the return type. Note that this attribute is typically only used in
             situations where a user might be essentially declaring that type, as opposed to using an already established shape type.
             So: a method that merely takes an already existing typed instance would tend on the other hand to not use this type parameter.
             To give an example:
             <see cref="M:Microsoft.ML.StaticPipe.Estimator`3.Append``1(System.Func{`1,``0})" />
             has the parameter on the new output tuple shape.
            
             The cost to not specifying this on such an entry point is that the compile time type-checks on the shape parameters will
             no longer be enforced, which is suboptimal given that the purpose of the statically typed interfaces is to have compile-time
             checks. However, it is not disastrous since the runtime checks will still be in effect.
            
             User code may use this attribute on their types if they have generic type parameters that interface with this library.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IsShapeAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.IsShapeAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>