<Type Name="CharacterTokenizerStaticExtensions" FullName="Microsoft.ML.StaticPipe.CharacterTokenizerStaticExtensions">
  <TypeSignature Language="C#" Value="public static class CharacterTokenizerStaticExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharacterTokenizerStaticExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.StaticPipe.CharacterTokenizerStaticExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module CharacterTokenizerStaticExtensions" />
  <TypeSignature Language="F#" Value="type CharacterTokenizerStaticExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extensions for statically typed character tokenizer.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TokenizeIntoCharactersAsKeys">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;ushort,string&gt;&gt; TokenizeIntoCharactersAsKeys (this Microsoft.ML.StaticPipe.Scalar&lt;string&gt; input, bool useMarkerCharacters = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.VarVector`1&lt;class Microsoft.ML.StaticPipe.Key`2&lt;unsigned int16, string&gt;&gt; TokenizeIntoCharactersAsKeys(class Microsoft.ML.StaticPipe.Scalar`1&lt;string&gt; input, bool useMarkerCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.CharacterTokenizerStaticExtensions.TokenizeIntoCharactersAsKeys(Microsoft.ML.StaticPipe.Scalar{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TokenizeIntoCharactersAsKeys (input As Scalar(Of String), Optional useMarkerCharacters As Boolean = true) As VarVector(Of Key(Of UShort, String))" />
      <MemberSignature Language="F#" Value="static member TokenizeIntoCharactersAsKeys : Microsoft.ML.StaticPipe.Scalar&lt;string&gt; * bool -&gt; Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;uint16, string&gt;&gt;" Usage="Microsoft.ML.StaticPipe.CharacterTokenizerStaticExtensions.TokenizeIntoCharactersAsKeys (input, useMarkerCharacters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;System.UInt16,System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.Scalar&lt;System.String&gt;" RefType="this" />
        <Parameter Name="useMarkerCharacters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="input">The column to apply to.</param>
        <param name="useMarkerCharacters">Whether to use marker characters to separate words.</param>
        <summary>
            Tokenize incoming text into a sequence of characters.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>