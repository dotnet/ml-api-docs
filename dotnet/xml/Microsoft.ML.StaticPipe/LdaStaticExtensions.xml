<Type Name="LdaStaticExtensions" FullName="Microsoft.ML.StaticPipe.LdaStaticExtensions">
  <TypeSignature Language="C#" Value="public static class LdaStaticExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LdaStaticExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.StaticPipe.LdaStaticExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module LdaStaticExtensions" />
  <TypeSignature Language="F#" Value="type LdaStaticExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ToLdaTopicVector">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.Vector&lt;float&gt; ToLdaTopicVector (this Microsoft.ML.StaticPipe.Vector&lt;float&gt; input, int numTopic = 100, float alphaSum = 100, float beta = 0.01, int mhstep = 4, int numIterations = 200, int likelihoodInterval = 5, int numThreads = 0, int numMaxDocToken = 512, int numSummaryTermPerTopic = 10, int numBurninIterations = 10, bool resetRandomGenerator = false, Microsoft.ML.StaticPipe.LdaFitResult.OnFit onFit = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.Vector`1&lt;float32&gt; ToLdaTopicVector(class Microsoft.ML.StaticPipe.Vector`1&lt;float32&gt; input, int32 numTopic, float32 alphaSum, float32 beta, int32 mhstep, int32 numIterations, int32 likelihoodInterval, int32 numThreads, int32 numMaxDocToken, int32 numSummaryTermPerTopic, int32 numBurninIterations, bool resetRandomGenerator, class Microsoft.ML.StaticPipe.LdaFitResult/OnFit onFit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.LdaStaticExtensions.ToLdaTopicVector(Microsoft.ML.StaticPipe.Vector{System.Single},System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,Microsoft.ML.StaticPipe.LdaFitResult.OnFit)" />
      <MemberSignature Language="F#" Value="static member ToLdaTopicVector : Microsoft.ML.StaticPipe.Vector&lt;single&gt; * int * single * single * int * int * int * int * int * int * int * bool * Microsoft.ML.StaticPipe.LdaFitResult.OnFit -&gt; Microsoft.ML.StaticPipe.Vector&lt;single&gt;" Usage="Microsoft.ML.StaticPipe.LdaStaticExtensions.ToLdaTopicVector (input, numTopic, alphaSum, beta, mhstep, numIterations, likelihoodInterval, numThreads, numMaxDocToken, numSummaryTermPerTopic, numBurninIterations, resetRandomGenerator, onFit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.Vector&lt;System.Single&gt;" RefType="this" />
        <Parameter Name="numTopic" Type="System.Int32" />
        <Parameter Name="alphaSum" Type="System.Single" />
        <Parameter Name="beta" Type="System.Single" />
        <Parameter Name="mhstep" Type="System.Int32" />
        <Parameter Name="numIterations" Type="System.Int32" />
        <Parameter Name="likelihoodInterval" Type="System.Int32" />
        <Parameter Name="numThreads" Type="System.Int32" />
        <Parameter Name="numMaxDocToken" Type="System.Int32" />
        <Parameter Name="numSummaryTermPerTopic" Type="System.Int32" />
        <Parameter Name="numBurninIterations" Type="System.Int32" />
        <Parameter Name="resetRandomGenerator" Type="System.Boolean" />
        <Parameter Name="onFit" Type="Microsoft.ML.StaticPipe.LdaFitResult+OnFit" />
      </Parameters>
      <Docs>
        <param name="input">A vector of floats representing the document.</param>
        <param name="numTopic">The number of topics.</param>
        <param name="alphaSum">Dirichlet prior on document-topic vectors.</param>
        <param name="beta">Dirichlet prior on vocab-topic vectors.</param>
        <param name="mhstep">Number of Metropolis Hasting step.</param>
        <param name="numIterations">Number of iterations.</param>
        <param name="likelihoodInterval">Compute log likelihood over local dataset on this iteration interval.</param>
        <param name="numThreads">The number of training threads. Default value depends on number of logical processors.</param>
        <param name="numMaxDocToken">The threshold of maximum count of tokens per doc.</param>
        <param name="numSummaryTermPerTopic">The number of words to summarize the topic.</param>
        <param name="numBurninIterations">The number of burn-in iterations.</param>
        <param name="resetRandomGenerator">Reset the random number generator for each document.</param>
        <param name="onFit">Called upon fitting with the learnt enumeration on the dataset.</param>
        <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary>
        <returns>To be added.</returns>
        <remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para><para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a></para><para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet"><item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item><item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item></list></para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>