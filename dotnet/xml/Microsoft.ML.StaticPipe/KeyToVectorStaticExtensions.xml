<Type Name="KeyToVectorStaticExtensions" FullName="Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions">
  <TypeSignature Language="C#" Value="public static class KeyToVectorStaticExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit KeyToVectorStaticExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module KeyToVectorStaticExtensions" />
  <TypeSignature Language="F#" Value="type KeyToVectorStaticExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods for the static-pipeline over <see cref="T:Microsoft.ML.StaticPipe.PipelineColumn" /> objects.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ToBaggedVector&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.Vector&lt;float&gt; ToBaggedVector&lt;TKey&gt; (this Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey&gt;&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.Vector`1&lt;float32&gt; ToBaggedVector&lt;TKey&gt;(class Microsoft.ML.StaticPipe.VarVector`1&lt;class Microsoft.ML.StaticPipe.Key`1&lt;!!TKey&gt;&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToBaggedVector``1(Microsoft.ML.StaticPipe.VarVector{Microsoft.ML.StaticPipe.Key{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToBaggedVector(Of TKey) (input As VarVector(Of Key(Of TKey))) As Vector(Of Single)" />
      <MemberSignature Language="F#" Value="static member ToBaggedVector : Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;'Key&gt;&gt; -&gt; Microsoft.ML.StaticPipe.Vector&lt;single&gt;" Usage="Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToBaggedVector input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <param name="input">To be added.</param>
        <summary>
            Takes a column of key type of known cardinality and produces an indicator vector of floats.
            Each key value of the input is used to create an indicator vector: the indicator vector is the length of the key cardinality,
            where all values are 0, except for the entry corresponding to the value of the key, which is 1.
            If the key value is missing, then all values are 0. Naturally this tends to generate very sparse vectors.
            In this case then the indicator vectors for all values in the column will be simply added together,
            to produce the final vector with type equal to the key cardinality; so, in all cases, whether vector or scalar,
            the output column will be a vector type of length equal to that cardinality.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBaggedVector&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.Vector&lt;float&gt; ToBaggedVector&lt;TKey&gt; (this Microsoft.ML.StaticPipe.Vector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey&gt;&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.Vector`1&lt;float32&gt; ToBaggedVector&lt;TKey&gt;(class Microsoft.ML.StaticPipe.Vector`1&lt;class Microsoft.ML.StaticPipe.Key`1&lt;!!TKey&gt;&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToBaggedVector``1(Microsoft.ML.StaticPipe.Vector{Microsoft.ML.StaticPipe.Key{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToBaggedVector(Of TKey) (input As Vector(Of Key(Of TKey))) As Vector(Of Single)" />
      <MemberSignature Language="F#" Value="static member ToBaggedVector : Microsoft.ML.StaticPipe.Vector&lt;Microsoft.ML.StaticPipe.Key&lt;'Key&gt;&gt; -&gt; Microsoft.ML.StaticPipe.Vector&lt;single&gt;" Usage="Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToBaggedVector input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.Vector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <param name="input">To be added.</param>
        <summary>
            Takes a column of key type of known cardinality and produces an indicator vector of floats.
            Each key value of the input is used to create an indicator vector: the indicator vector is the length of the key cardinality,
            where all values are 0, except for the entry corresponding to the value of the key, which is 1.
            If the key value is missing, then all values are 0. Naturally this tends to generate very sparse vectors.
            In this case then the indicator vectors for all values in the column will be simply added together,
            to produce the final vector with type equal to the key cardinality; so, in all cases, whether vector or scalar,
            the output column will be a vector type of length equal to that cardinality.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBaggedVector&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.Vector&lt;float&gt; ToBaggedVector&lt;TKey,TValue&gt; (this Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey,TValue&gt;&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.Vector`1&lt;float32&gt; ToBaggedVector&lt;TKey, TValue&gt;(class Microsoft.ML.StaticPipe.VarVector`1&lt;class Microsoft.ML.StaticPipe.Key`2&lt;!!TKey, !!TValue&gt;&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToBaggedVector``2(Microsoft.ML.StaticPipe.VarVector{Microsoft.ML.StaticPipe.Key{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToBaggedVector(Of TKey, TValue) (input As VarVector(Of Key(Of TKey, TValue))) As Vector(Of Single)" />
      <MemberSignature Language="F#" Value="static member ToBaggedVector : Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;'Key, 'Value&gt;&gt; -&gt; Microsoft.ML.StaticPipe.Vector&lt;single&gt;" Usage="Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToBaggedVector input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey,TValue&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="input">To be added.</param>
        <summary>
            Takes a column of key type of known cardinality and produces an indicator vector of floats.
            Each key value of the input is used to create an indicator vector: the indicator vector is the length of the key cardinality,
            where all values are 0, except for the entry corresponding to the value of the key, which is 1.
            If the key value is missing, then all values are 0. Naturally this tends to generate very sparse vectors.
            In this case then the indicator vectors for all values in the column will be simply added together,
            to produce the final vector with type equal to the key cardinality; so, in all cases, whether vector or scalar,
            the output column will be a vector type of length equal to that cardinality.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBaggedVector&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.Vector&lt;float&gt; ToBaggedVector&lt;TKey,TValue&gt; (this Microsoft.ML.StaticPipe.Vector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey,TValue&gt;&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.Vector`1&lt;float32&gt; ToBaggedVector&lt;TKey, TValue&gt;(class Microsoft.ML.StaticPipe.Vector`1&lt;class Microsoft.ML.StaticPipe.Key`2&lt;!!TKey, !!TValue&gt;&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToBaggedVector``2(Microsoft.ML.StaticPipe.Vector{Microsoft.ML.StaticPipe.Key{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToBaggedVector(Of TKey, TValue) (input As Vector(Of Key(Of TKey, TValue))) As Vector(Of Single)" />
      <MemberSignature Language="F#" Value="static member ToBaggedVector : Microsoft.ML.StaticPipe.Vector&lt;Microsoft.ML.StaticPipe.Key&lt;'Key, 'Value&gt;&gt; -&gt; Microsoft.ML.StaticPipe.Vector&lt;single&gt;" Usage="Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToBaggedVector input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.Vector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey,TValue&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="input">To be added.</param>
        <summary>
            Takes a column of key type of known cardinality and produces an indicator vector of floats.
            Each key value of the input is used to create an indicator vector: the indicator vector is the length of the key cardinality,
            where all values are 0, except for the entry corresponding to the value of the key, which is 1.
            If the key value is missing, then all values are 0. Naturally this tends to generate very sparse vectors.
            In this case then the indicator vectors for all values in the column will be simply added together,
            to produce the final vector with type equal to the key cardinality; so, in all cases, whether vector or scalar,
            the output column will be a vector type of length equal to that cardinality.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToVector&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.Vector&lt;float&gt; ToVector&lt;TKey&gt; (this Microsoft.ML.StaticPipe.Key&lt;TKey&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.Vector`1&lt;float32&gt; ToVector&lt;TKey&gt;(class Microsoft.ML.StaticPipe.Key`1&lt;!!TKey&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToVector``1(Microsoft.ML.StaticPipe.Key{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToVector(Of TKey) (input As Key(Of TKey)) As Vector(Of Single)" />
      <MemberSignature Language="F#" Value="static member ToVector : Microsoft.ML.StaticPipe.Key&lt;'Key&gt; -&gt; Microsoft.ML.StaticPipe.Vector&lt;single&gt;" Usage="Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToVector input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.Key&lt;TKey&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <param name="input">To be added.</param>
        <summary>
            Takes a column of key type of known cardinality and produces an indicator vector of floats.
            Each key value of the input is used to create an indicator vector: the indicator vector is the length of the key cardinality,
            where all values are 0, except for the entry corresponding to the value of the key, which is 1.
            If the key value is missing, then all values are 0. Naturally this tends to generate very sparse vectors.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToVector&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.VarVector&lt;float&gt; ToVector&lt;TKey&gt; (this Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey&gt;&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.VarVector`1&lt;float32&gt; ToVector&lt;TKey&gt;(class Microsoft.ML.StaticPipe.VarVector`1&lt;class Microsoft.ML.StaticPipe.Key`1&lt;!!TKey&gt;&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToVector``1(Microsoft.ML.StaticPipe.VarVector{Microsoft.ML.StaticPipe.Key{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToVector(Of TKey) (input As VarVector(Of Key(Of TKey))) As VarVector(Of Single)" />
      <MemberSignature Language="F#" Value="static member ToVector : Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;'Key&gt;&gt; -&gt; Microsoft.ML.StaticPipe.VarVector&lt;single&gt;" Usage="Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToVector input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.VarVector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <param name="input">To be added.</param>
        <summary>
            Takes a column of key type of known cardinality and produces an indicator vector of floats.
            Each key value of the input is used to create an indicator vector: the indicator vector is the length of the key cardinality,
            where all values are 0, except for the entry corresponding to the value of the key, which is 1.
            If the key value is missing, then all values are 0. Naturally this tends to generate very sparse vectors.
            In this case then the indicator vectors for all values in the column will be simply added together,
            to produce the final vector with type equal to the key cardinality; so, in all cases, whether vector or scalar,
            the output column will be a vector type of length equal to that cardinality.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToVector&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.Vector&lt;float&gt; ToVector&lt;TKey&gt; (this Microsoft.ML.StaticPipe.Vector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey&gt;&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.Vector`1&lt;float32&gt; ToVector&lt;TKey&gt;(class Microsoft.ML.StaticPipe.Vector`1&lt;class Microsoft.ML.StaticPipe.Key`1&lt;!!TKey&gt;&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToVector``1(Microsoft.ML.StaticPipe.Vector{Microsoft.ML.StaticPipe.Key{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToVector(Of TKey) (input As Vector(Of Key(Of TKey))) As Vector(Of Single)" />
      <MemberSignature Language="F#" Value="static member ToVector : Microsoft.ML.StaticPipe.Vector&lt;Microsoft.ML.StaticPipe.Key&lt;'Key&gt;&gt; -&gt; Microsoft.ML.StaticPipe.Vector&lt;single&gt;" Usage="Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToVector input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.Vector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <param name="input">To be added.</param>
        <summary>
            Takes a column of key type of known cardinality and produces an indicator vector of floats.
            Each key value of the input is used to create an indicator vector: the indicator vector is the length of the key cardinality,
            where all values are 0, except for the entry corresponding to the value of the key, which is 1.
            If the key value is missing, then all values are 0. Naturally this tends to generate very sparse vectors.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToVector&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.Vector&lt;float&gt; ToVector&lt;TKey,TValue&gt; (this Microsoft.ML.StaticPipe.Key&lt;TKey,TValue&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.Vector`1&lt;float32&gt; ToVector&lt;TKey, TValue&gt;(class Microsoft.ML.StaticPipe.Key`2&lt;!!TKey, !!TValue&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToVector``2(Microsoft.ML.StaticPipe.Key{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToVector(Of TKey, TValue) (input As Key(Of TKey, TValue)) As Vector(Of Single)" />
      <MemberSignature Language="F#" Value="static member ToVector : Microsoft.ML.StaticPipe.Key&lt;'Key, 'Value&gt; -&gt; Microsoft.ML.StaticPipe.Vector&lt;single&gt;" Usage="Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToVector input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.Key&lt;TKey,TValue&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="input">To be added.</param>
        <summary>
            Takes a column of key type of known cardinality and produces an indicator vector of floats.
            Each key value of the input is used to create an indicator vector: the indicator vector is the length of the key cardinality,
            where all values are 0, except for the entry corresponding to the value of the key, which is 1.
            If the key value is missing, then all values are 0. Naturally this tends to generate very sparse vectors.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToVector&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.VarVector&lt;float&gt; ToVector&lt;TKey,TValue&gt; (this Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey,TValue&gt;&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.VarVector`1&lt;float32&gt; ToVector&lt;TKey, TValue&gt;(class Microsoft.ML.StaticPipe.VarVector`1&lt;class Microsoft.ML.StaticPipe.Key`2&lt;!!TKey, !!TValue&gt;&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToVector``2(Microsoft.ML.StaticPipe.VarVector{Microsoft.ML.StaticPipe.Key{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToVector(Of TKey, TValue) (input As VarVector(Of Key(Of TKey, TValue))) As VarVector(Of Single)" />
      <MemberSignature Language="F#" Value="static member ToVector : Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;'Key, 'Value&gt;&gt; -&gt; Microsoft.ML.StaticPipe.VarVector&lt;single&gt;" Usage="Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToVector input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.VarVector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.VarVector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey,TValue&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="input">To be added.</param>
        <summary>
            Takes a column of key type of known cardinality and produces an indicator vector of floats.
            Each key value of the input is used to create an indicator vector: the indicator vector is the length of the key cardinality,
            where all values are 0, except for the entry corresponding to the value of the key, which is 1.
            If the key value is missing, then all values are 0. Naturally this tends to generate very sparse vectors.
            In this case then the indicator vectors for all values in the column will be simply added together,
            to produce the final vector with type equal to the key cardinality; so, in all cases, whether vector or scalar,
            the output column will be a vector type of length equal to that cardinality.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToVector&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.Vector&lt;float&gt; ToVector&lt;TKey,TValue&gt; (this Microsoft.ML.StaticPipe.Vector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey,TValue&gt;&gt; input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.Vector`1&lt;float32&gt; ToVector&lt;TKey, TValue&gt;(class Microsoft.ML.StaticPipe.Vector`1&lt;class Microsoft.ML.StaticPipe.Key`2&lt;!!TKey, !!TValue&gt;&gt; input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToVector``2(Microsoft.ML.StaticPipe.Vector{Microsoft.ML.StaticPipe.Key{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToVector(Of TKey, TValue) (input As Vector(Of Key(Of TKey, TValue))) As Vector(Of Single)" />
      <MemberSignature Language="F#" Value="static member ToVector : Microsoft.ML.StaticPipe.Vector&lt;Microsoft.ML.StaticPipe.Key&lt;'Key, 'Value&gt;&gt; -&gt; Microsoft.ML.StaticPipe.Vector&lt;single&gt;" Usage="Microsoft.ML.StaticPipe.KeyToVectorStaticExtensions.ToVector input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.StaticPipe.Vector&lt;Microsoft.ML.StaticPipe.Key&lt;TKey,TValue&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="input">To be added.</param>
        <summary>
            Takes a column of key type of known cardinality and produces an indicator vector of floats.
            Each key value of the input is used to create an indicator vector: the indicator vector is the length of the key cardinality,
            where all values are 0, except for the entry corresponding to the value of the key, which is 1.
            If the key value is missing, then all values are 0. Naturally this tends to generate very sparse vectors.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>