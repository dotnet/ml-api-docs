<Type Name="StaticPipeUtils" FullName="Microsoft.ML.StaticPipe.StaticPipeUtils">
  <TypeSignature Language="C#" Value="public static class StaticPipeUtils" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StaticPipeUtils extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.StaticPipe.StaticPipeUtils" />
  <TypeSignature Language="VB.NET" Value="Public Class StaticPipeUtils" />
  <TypeSignature Language="F#" Value="type StaticPipeUtils = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Utility methods for components that want to expose themselves in the idioms of the statically-typed pipelines.
            These utilities are meant to be called by and useful to component authors, not users of those components. The
            purpose is not to keep them hidden per se, but rather in a place less conspicuous to users that are just trying
            to use the library without writing additional components of their own.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetEnvironment&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.IHostEnvironment GetEnvironment&lt;T&gt; (Microsoft.ML.StaticPipe.SchemaBearing&lt;T&gt; schematized);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.IHostEnvironment GetEnvironment&lt;T&gt;(class Microsoft.ML.StaticPipe.SchemaBearing`1&lt;!!T&gt; schematized) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.StaticPipeUtils.GetEnvironment``1(Microsoft.ML.StaticPipe.SchemaBearing{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEnvironment(Of T) (schematized As SchemaBearing(Of T)) As IHostEnvironment" />
      <MemberSignature Language="F#" Value="static member GetEnvironment : Microsoft.ML.StaticPipe.SchemaBearing&lt;'T&gt; -&gt; Microsoft.ML.Runtime.IHostEnvironment" Usage="Microsoft.ML.StaticPipe.StaticPipeUtils.GetEnvironment schematized" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IHostEnvironment</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="schematized" Type="Microsoft.ML.StaticPipe.SchemaBearing&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The shape type.</typeparam>
        <param name="schematized">The object for which we get the environment.</param>
        <summary>
            Retrieves the internally stored environment in <paramref name="schematized" />.
            Intended usecases is component generating code that needs to have access to an
            environment.
            </summary>
        <returns>The internal <see cref="T:Microsoft.ML.Runtime.IHostEnvironment" /> of the object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.StaticPipeUtils.IndexHelper&lt;T&gt; GetIndexer&lt;T&gt; (Microsoft.ML.StaticPipe.SchemaBearing&lt;T&gt; schematized);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.StaticPipeUtils/IndexHelper`1&lt;!!T&gt; GetIndexer&lt;T&gt;(class Microsoft.ML.StaticPipe.SchemaBearing`1&lt;!!T&gt; schematized) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.StaticPipeUtils.GetIndexer``1(Microsoft.ML.StaticPipe.SchemaBearing{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetIndexer(Of T) (schematized As SchemaBearing(Of T)) As StaticPipeUtils.IndexHelper(Of T)" />
      <MemberSignature Language="F#" Value="static member GetIndexer : Microsoft.ML.StaticPipe.SchemaBearing&lt;'T&gt; -&gt; Microsoft.ML.StaticPipe.StaticPipeUtils.IndexHelper&lt;'T&gt;" Usage="Microsoft.ML.StaticPipe.StaticPipeUtils.GetIndexer schematized" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.StaticPipeUtils+IndexHelper&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="schematized" Type="Microsoft.ML.StaticPipe.SchemaBearing&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The shape type.</typeparam>
        <param name="schematized">The object for which we get the indexer.</param>
        <summary>
            Retrieves the index helper object for <paramref name="schematized" />.
            </summary>
        <returns>The index helper.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoaderEstimatorAnalyzerHelper&lt;TIn,TDelegateInput,TOutShape&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.StaticPipe.DataLoaderEstimator&lt;TIn,TOutShape,Microsoft.ML.IDataLoader&lt;TIn&gt;&gt; LoaderEstimatorAnalyzerHelper&lt;TIn,TDelegateInput,TOutShape&gt; (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.IChannel ch, TDelegateInput input, Microsoft.ML.StaticPipe.LoaderReconciler&lt;TIn&gt; baseReconciler, Func&lt;TDelegateInput,TOutShape&gt; mapper);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.StaticPipe.DataLoaderEstimator`3&lt;!!TIn, !!TOutShape, class Microsoft.ML.IDataLoader`1&lt;!!TIn&gt;&gt; LoaderEstimatorAnalyzerHelper&lt;TIn, TDelegateInput, TOutShape&gt;(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.IChannel ch, !!TDelegateInput input, class Microsoft.ML.StaticPipe.LoaderReconciler`1&lt;!!TIn&gt; baseReconciler, class System.Func`2&lt;!!TDelegateInput, !!TOutShape&gt; mapper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.StaticPipe.StaticPipeUtils.LoaderEstimatorAnalyzerHelper``3(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,``1,Microsoft.ML.StaticPipe.LoaderReconciler{``0},System.Func{``1,``2})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoaderEstimatorAnalyzerHelper(Of TIn, TDelegateInput, TOutShape) (env As IHostEnvironment, ch As IChannel, input As TDelegateInput, baseReconciler As LoaderReconciler(Of TIn), mapper As Func(Of TDelegateInput, TOutShape)) As DataLoaderEstimator(Of TIn, TOutShape, IDataLoader(Of TIn))" />
      <MemberSignature Language="F#" Value="static member LoaderEstimatorAnalyzerHelper : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.IChannel * 'DelegateInput * Microsoft.ML.StaticPipe.LoaderReconciler&lt;'In&gt; * Func&lt;'DelegateInput, 'OutShape&gt; -&gt; Microsoft.ML.StaticPipe.DataLoaderEstimator&lt;'In, 'OutShape, Microsoft.ML.IDataLoader&lt;'In&gt;&gt;" Usage="Microsoft.ML.StaticPipe.StaticPipeUtils.LoaderEstimatorAnalyzerHelper (env, ch, input, baseReconciler, mapper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StaticPipe</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.StaticPipe.DataLoaderEstimator&lt;TIn,TOutShape,Microsoft.ML.IDataLoader&lt;TIn&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TIn" />
        <TypeParameter Name="TDelegateInput" />
        <TypeParameter Name="TOutShape" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="ch" Type="Microsoft.ML.Runtime.IChannel" />
        <Parameter Name="input" Type="TDelegateInput" />
        <Parameter Name="baseReconciler" Type="Microsoft.ML.StaticPipe.LoaderReconciler&lt;TIn&gt;" />
        <Parameter Name="mapper" Type="System.Func&lt;TDelegateInput,TOutShape&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TIn">The type parameter for the input type to the data loader estimator.</typeparam>
        <typeparam name="TDelegateInput">The input type of the input delegate. This might be some object out of
            which one can fetch or else retrieve </typeparam>
        <typeparam name="TOutShape">The schema shape type describing the output.</typeparam>
        <param name="env">Estimators will be instantiated with this environment</param>
        <param name="ch">Some minor debugging information will be passed along to this channel</param>
        <param name="input">The input that will be used when invoking <paramref name="mapper" />, which is used
            either to produce the input columns.</param>
        <param name="baseReconciler">All columns that are yielded by <paramref name="input" /> should produce this
            single reconciler. The analysis code in this method will ensure that this is the first object to be
            reconciled, before all others.</param>
        <param name="mapper">The user provided delegate.</param>
        <summary>
            This is a utility method intended to be used by authors of <see cref="T:Microsoft.ML.IDataLoaderEstimator`2" /> components to provide a strongly typed <see cref="T:Microsoft.ML.StaticPipe.DataLoaderEstimator`3" />.
            This analysis tool provides a standard way for loaders to exploit statically typed pipelines with the
            standard tuple-shape objects without having to write such code themselves.
            </summary>
        <returns>The constructed wrapping data loader estimator.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>