<Type Name="TrajectoryMatrix" FullName="Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix">
  <TypeSignature Language="C#" Value="public sealed class TrajectoryMatrix" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TrajectoryMatrix extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TrajectoryMatrix" />
  <TypeSignature Language="F#" Value="type TrajectoryMatrix = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             This class encapsulates the trajectory matrix of a time-series used in Singular Spectrum Analysis (SSA).
             In particular, for a given series of length N and the window size of L, (such that N &gt; L):
            
             x(1), x(2), x(3), ... , x(N)
            
             The trajectory matrix H is defined in the explicit form as:
            
                 [x(1)  x(2)   x(3)   ...  x(N - L + 1)]
                 [x(2)  x(3)   x(4)   ...  x(N - L + 2)]
             H = [x(3)  x(4)   x(5)   ...  x(N - L + 3)]
                 [ .     .      .               .      ]
                 [ .     .      .               .      ]
                 [x(L)  x(L+1) x(L+2) ...      x(N)    ]
            
             of size L * K, where K = N - L + 1.
            
             This class does not explicitly store the trajectory matrix though. Furthermore, since the trajectory matrix is
             a Hankel matrix, its multiplication by an arbitrary vector is implemented efficiently using the Discrete Fast Fourier Transform.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TrajectoryMatrix (Microsoft.ML.Runtime.IExceptionContext ectx, float[] data, int windowSize, int seriesLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IExceptionContext ectx, float32[] data, int32 windowSize, int32 seriesLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix.#ctor(Microsoft.ML.Runtime.IExceptionContext,System.Single[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ectx As IExceptionContext, data As Single(), windowSize As Integer, seriesLength As Integer)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix : Microsoft.ML.Runtime.IExceptionContext * single[] * int * int -&gt; Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix" Usage="new Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix (ectx, data, windowSize, seriesLength)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ectx" Type="Microsoft.ML.Runtime.IExceptionContext" />
        <Parameter Name="data" Type="System.Single[]" />
        <Parameter Name="windowSize" Type="System.Int32" />
        <Parameter Name="seriesLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ectx">The exception context</param>
        <param name="data">The input series</param>
        <param name="windowSize">The window size L</param>
        <param name="seriesLength">The number of elements from the beginning of the input array to be used for building the trajectory matrix</param>
        <summary>
            Constructs a trajectory matrix from the input series given the window length (L)
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeSvd">
      <MemberSignature Language="C#" Value="public bool ComputeSvd (out float[] singularValues, out float[] leftSingularvectors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ComputeSvd([out] float32[]&amp; singularValues, [out] float32[]&amp; leftSingularvectors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix.ComputeSvd(System.Single[]@,System.Single[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeSvd (ByRef singularValues As Single(), ByRef leftSingularvectors As Single()) As Boolean" />
      <MemberSignature Language="F#" Value="member this.ComputeSvd :  *  -&gt; bool" Usage="trajectoryMatrix.ComputeSvd (singularValues, leftSingularvectors)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="singularValues" Type="System.Single[]" RefType="out" />
        <Parameter Name="leftSingularvectors" Type="System.Single[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="singularValues">The output singular values of size L</param>
        <param name="leftSingularvectors">The output singular vectors of size L*L</param>
        <summary>
            This function computes the singular value decomposition of the trajectory matrix.
            This function only computes the singular values and the left singular vectors.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeUnnormalizedTrajectoryCovarianceMat">
      <MemberSignature Language="C#" Value="public void ComputeUnnormalizedTrajectoryCovarianceMat (float[] cov);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ComputeUnnormalizedTrajectoryCovarianceMat(float32[] cov) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix.ComputeUnnormalizedTrajectoryCovarianceMat(System.Single[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ComputeUnnormalizedTrajectoryCovarianceMat (cov As Single())" />
      <MemberSignature Language="F#" Value="member this.ComputeUnnormalizedTrajectoryCovarianceMat : single[] -&gt; unit" Usage="trajectoryMatrix.ComputeUnnormalizedTrajectoryCovarianceMat cov" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cov" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="cov">The output row-major vectorized covariance matrix of size L*L</param>
        <summary>
            This function computes the unnormalized covariance of the trajectory matrix (which is a Hankel matrix of size L*K).
            In particular, if H is the trajectory matrix of size L*K on the input series, this method computes H * H' (of size L*L).
            This function does not form the trajectory matrix H explicitly.
            Let k = N - L + 1 be the number of columns of the trajectory matrix.
            In most applications, we have L smaller than K, though this is not a strict constraint.
            The naive computational complexity for computing H * H' is O(L*L*K) while the naive memory complexity is O(K*L + L*L).
            However, this function computes H * H' in O(L*L + M) time, where M = min(L*K, (L + K)*Log(L + K)) and O(L*L) memory.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public void Multiply (float[] vector, float[] result, bool add = false, int srcIndex = 0, int dstIndex = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Multiply(float32[] vector, float32[] result, bool add, int32 srcIndex, int32 dstIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix.Multiply(System.Single[],System.Single[],System.Boolean,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Multiply (vector As Single(), result As Single(), Optional add As Boolean = false, Optional srcIndex As Integer = 0, Optional dstIndex As Integer = 0)" />
      <MemberSignature Language="F#" Value="member this.Multiply : single[] * single[] * bool * int * int -&gt; unit" Usage="trajectoryMatrix.Multiply (vector, result, add, srcIndex, dstIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Single[]" />
        <Parameter Name="result" Type="System.Single[]" />
        <Parameter Name="add" Type="System.Boolean" />
        <Parameter Name="srcIndex" Type="System.Int32" />
        <Parameter Name="dstIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="vector">The input vector</param>
        <param name="result">The output vector allocated by the caller</param>
        <param name="add">Whether the multiplication result should be added to the current value in result</param>
        <param name="srcIndex">The starting index for the vector argument</param>
        <param name="dstIndex">The starting index for the result</param>
        <summary>
            This function efficiently computes the multiplication of the trajectory matrix H by an arbitrary vector v, i.e. H * v.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTranspose">
      <MemberSignature Language="C#" Value="public void MultiplyTranspose (float[] vector, float[] result, bool add = false, int srcIndex = 0, int dstIndex = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTranspose(float32[] vector, float32[] result, bool add, int32 srcIndex, int32 dstIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix.MultiplyTranspose(System.Single[],System.Single[],System.Boolean,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MultiplyTranspose (vector As Single(), result As Single(), Optional add As Boolean = false, Optional srcIndex As Integer = 0, Optional dstIndex As Integer = 0)" />
      <MemberSignature Language="F#" Value="member this.MultiplyTranspose : single[] * single[] * bool * int * int -&gt; unit" Usage="trajectoryMatrix.MultiplyTranspose (vector, result, add, srcIndex, dstIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Single[]" />
        <Parameter Name="result" Type="System.Single[]" />
        <Parameter Name="add" Type="System.Boolean" />
        <Parameter Name="srcIndex" Type="System.Int32" />
        <Parameter Name="dstIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="vector">The input vector</param>
        <param name="result">The output vector allocated by the caller</param>
        <param name="add">Whether the multiplication result should be added to the current value in result</param>
        <param name="srcIndex">The starting index for the vector argument</param>
        <param name="dstIndex">The starting index for the result</param>
        <summary>
            This function efficiently computes the multiplication of the transpose of the trajectory matrix H by an arbitrary vector v, i.e. H' * v.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RankOneHankelization">
      <MemberSignature Language="C#" Value="public void RankOneHankelization (float[] u, float[] v, float sigma, float[] result, bool add = false, int uIndex = 0, int vIndex = 0, int dstIndex = 0, Nullable&lt;int&gt; start = null, Nullable&lt;int&gt; end = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RankOneHankelization(float32[] u, float32[] v, float32 sigma, float32[] result, bool add, int32 uIndex, int32 vIndex, int32 dstIndex, valuetype System.Nullable`1&lt;int32&gt; start, valuetype System.Nullable`1&lt;int32&gt; end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix.RankOneHankelization(System.Single[],System.Single[],System.Single,System.Single[],System.Boolean,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub RankOneHankelization (u As Single(), v As Single(), sigma As Single, result As Single(), Optional add As Boolean = false, Optional uIndex As Integer = 0, Optional vIndex As Integer = 0, Optional dstIndex As Integer = 0, Optional start As Nullable(Of Integer) = null, Optional end As Nullable(Of Integer) = null)" />
      <MemberSignature Language="F#" Value="member this.RankOneHankelization : single[] * single[] * single * single[] * bool * int * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; -&gt; unit" Usage="trajectoryMatrix.RankOneHankelization (u, v, sigma, result, add, uIndex, vIndex, dstIndex, start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="System.Single[]" />
        <Parameter Name="v" Type="System.Single[]" />
        <Parameter Name="sigma" Type="System.Single" />
        <Parameter Name="result" Type="System.Single[]" />
        <Parameter Name="add" Type="System.Boolean" />
        <Parameter Name="uIndex" Type="System.Int32" />
        <Parameter Name="vIndex" Type="System.Int32" />
        <Parameter Name="dstIndex" Type="System.Int32" />
        <Parameter Name="start" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="end" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="u">The u vector</param>
        <param name="v">The v vector</param>
        <param name="sigma">The scalar coefficient</param>
        <param name="result">The output series</param>
        <param name="add">Whether the hankelization result should be added to the current value in result</param>
        <param name="uIndex">The starting index for the u vector argument</param>
        <param name="vIndex">The starting index for the v vector argument</param>
        <param name="dstIndex">The starting index for the result</param>
        <param name="start">The staring index of the series to be reconstructed (by default zero)</param>
        <param name="end">The ending index of the series to be reconstructed (by default series length)</param>
        <summary>
            This function efficiently computes the  Hankelization of the matrix sigma * u * v'.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeriesLength">
      <MemberSignature Language="C#" Value="public int SeriesLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SeriesLength" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix.SeriesLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SeriesLength As Integer" />
      <MemberSignature Language="F#" Value="member this.SeriesLength : int" Usage="Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix.SeriesLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the length of the time-series represented by this trajectory matrix.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSeries">
      <MemberSignature Language="C#" Value="public void SetSeries (float[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSeries(float32[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix.SetSeries(System.Single[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSeries (data As Single())" />
      <MemberSignature Language="F#" Value="member this.SetSeries : single[] -&gt; unit" Usage="trajectoryMatrix.SetSeries data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="data">The new series</param>
        <summary>
            Sets the value of the underlying series to new values.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowSize">
      <MemberSignature Language="C#" Value="public int WindowSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WindowSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix.WindowSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowSize As Integer" />
      <MemberSignature Language="F#" Value="member this.WindowSize : int" Usage="Microsoft.ML.Runtime.TimeSeriesProcessing.TrajectoryMatrix.WindowSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the window size (L) used for building this trajectory matrix.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
