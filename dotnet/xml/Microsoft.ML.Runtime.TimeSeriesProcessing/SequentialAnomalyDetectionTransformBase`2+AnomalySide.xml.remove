<Type Name="SequentialAnomalyDetectionTransformBase&lt;TInput,TState&gt;+AnomalySide" FullName="Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase&lt;TInput,TState&gt;+AnomalySide">
  <TypeSignature Language="C#" Value="public enum SequentialAnomalyDetectionTransformBase&lt;TInput,TState&gt;.AnomalySide" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed SequentialAnomalyDetectionTransformBase`2/AnomalySide&lt;TInput, .ctor (class Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase`2/AnomalyDetectionStateBase&lt;!TInput, !TState&gt;) TState&gt; extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase`2.AnomalySide" />
  <TypeSignature Language="VB.NET" Value="Public Enum SequentialAnomalyDetectionTransformBase(Of TInput, TState).AnomalySide" />
  <TypeSignature Language="F#" Value="type SequentialAnomalyDetectionTransformBase&lt;'Input, 'State (requires 'State :&gt; SequentialAnomalyDetectionTransformBase&lt;'Input, 'State&gt;.AnomalyDetectionStateBase and 'State : (new : unit -&gt; 'State))&gt;.AnomalySide = " />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput" />
    <TypeParameter Name="TState">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase&lt;TInput,TState&gt;+AnomalyDetectionStateBase</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            The side of anomaly detection.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Negative">
      <MemberSignature Language="C#" Value="Negative" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase`2/AnomalySide&lt;!TInput, !TState&gt; Negative" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase`2.AnomalySide.Negative" />
      <MemberSignature Language="VB.NET" Value="Negative" />
      <MemberSignature Language="F#" Value="Negative = 1" Usage="Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase&lt;'Input, 'State (requires 'State :&gt; Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase&lt;'Input, 'State&gt;.AnomalyDetectionStateBase and 'State : (new : unit -&gt; 'State))&gt;.AnomalySide.Negative" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase&lt;TInput,TState&gt;+AnomalySide</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            (Negative) Only negative anomalies are detected.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Positive">
      <MemberSignature Language="C#" Value="Positive" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase`2/AnomalySide&lt;!TInput, !TState&gt; Positive" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase`2.AnomalySide.Positive" />
      <MemberSignature Language="VB.NET" Value="Positive" />
      <MemberSignature Language="F#" Value="Positive = 0" Usage="Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase&lt;'Input, 'State (requires 'State :&gt; Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase&lt;'Input, 'State&gt;.AnomalyDetectionStateBase and 'State : (new : unit -&gt; 'State))&gt;.AnomalySide.Positive" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase&lt;TInput,TState&gt;+AnomalySide</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            (Positive) Only positive anomalies are detected.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="TwoSided">
      <MemberSignature Language="C#" Value="TwoSided" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase`2/AnomalySide&lt;!TInput, !TState&gt; TwoSided" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase`2.AnomalySide.TwoSided" />
      <MemberSignature Language="VB.NET" Value="TwoSided" />
      <MemberSignature Language="F#" Value="TwoSided = 2" Usage="Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase&lt;'Input, 'State (requires 'State :&gt; Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase&lt;'Input, 'State&gt;.AnomalyDetectionStateBase and 'State : (new : unit -&gt; 'State))&gt;.AnomalySide.TwoSided" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.TimeSeriesProcessing.SequentialAnomalyDetectionTransformBase&lt;TInput,TState&gt;+AnomalySide</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            (TwoSided) Both positive and negative anomalies are detected.
            </summary>
      </Docs>
    </Member>
  </Members>
</Type>
