<Type Name="BoundPfaContext" FullName="Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext">
  <TypeSignature Language="C#" Value="public sealed class BoundPfaContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BoundPfaContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BoundPfaContext" />
  <TypeSignature Language="F#" Value="type BoundPfaContext = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class BoundPfaContext sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class BoundPfaContext sealed" />
  <TypeSignature Language="C++ WINRT" Value="class BoundPfaContext sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This wraps a <see cref="T:Microsoft.ML.Runtime.Model.Pfa.PfaContext" />, except with auxiliary information
            that enables its inclusion relative to the <see cref="T:Microsoft.ML.Runtime.Data.IDataView" /> ecosystem.
            The idea is that one starts with a context built from some starting point,
            then subsequent transforms via <see cref="T:Microsoft.ML.Runtime.Model.Pfa.ITransformCanSavePfa" /> augment this context.
            Beyond what is offered in <see cref="T:Microsoft.ML.Runtime.Model.Pfa.PfaContext" />, <see cref="T:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext" />
            has facilities to remember what column name in <see cref="T:Microsoft.ML.Runtime.Data.IDataView" /> maps to
            what token in the PFA being built up.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BoundPfaContext (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.ISchema inputSchema, System.Collections.Generic.HashSet&lt;string&gt; toDrop, bool allowSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.ISchema inputSchema, class System.Collections.Generic.HashSet`1&lt;string&gt; toDrop, bool allowSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.ISchema,System.Collections.Generic.HashSet{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, inputSchema As ISchema, toDrop As HashSet(Of String), allowSet As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.ISchema * System.Collections.Generic.HashSet&lt;string&gt; * bool -&gt; Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext" Usage="new Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext (env, inputSchema, toDrop, allowSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BoundPfaContext(Microsoft::ML::Runtime::IHostEnvironment ^ env, Microsoft::ML::Runtime::Data::ISchema ^ inputSchema, System::Collections::Generic::HashSet&lt;System::String ^&gt; ^ toDrop, bool allowSet);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="inputSchema" Type="Microsoft.ML.Runtime.Data.ISchema" />
        <Parameter Name="toDrop" Type="System.Collections.Generic.HashSet&lt;System.String&gt;" />
        <Parameter Name="allowSet" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="inputSchema">To be added.</param>
        <param name="toDrop">To be added.</param>
        <param name="allowSet">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareCell">
      <MemberSignature Language="C#" Value="public string DeclareCell (string name, Newtonsoft.Json.Linq.JToken type, Newtonsoft.Json.Linq.JToken init);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string DeclareCell(string name, class Newtonsoft.Json.Linq.JToken type, class Newtonsoft.Json.Linq.JToken init) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext.DeclareCell(System.String,Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeclareCell (name As String, type As JToken, init As JToken) As String" />
      <MemberSignature Language="F#" Value="member this.DeclareCell : string * Newtonsoft.Json.Linq.JToken * Newtonsoft.Json.Linq.JToken -&gt; string" Usage="boundPfaContext.DeclareCell (name, type, init)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ DeclareCell(System::String ^ name, Newtonsoft::Json::Linq::JToken ^ type, Newtonsoft::Json::Linq::JToken ^ init);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="Newtonsoft.Json.Linq.JToken" />
        <Parameter Name="init" Type="Newtonsoft.Json.Linq.JToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="init">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareVar">
      <MemberSignature Language="C#" Value="public string[] DeclareVar (params System.Collections.Generic.KeyValuePair&lt;string,Newtonsoft.Json.Linq.JToken&gt;[] vars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] DeclareVar(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class Newtonsoft.Json.Linq.JToken&gt;[] vars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext.DeclareVar(System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JToken}[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DeclareVar (ParamArray vars As KeyValuePair(Of String, JToken)()) As String()" />
      <MemberSignature Language="F#" Value="member this.DeclareVar : System.Collections.Generic.KeyValuePair&lt;string, Newtonsoft.Json.Linq.JToken&gt;[] -&gt; string[]" Usage="boundPfaContext.DeclareVar vars" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ DeclareVar(... cli::array &lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Newtonsoft::Json::Linq::JToken ^&gt;&gt; ^ vars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vars" Type="System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="vars">The map from requested name, usually a dataview name,
            to the declaration</param>
        <summary>
            Attempts to declare variables corresponding to a given column name. This
            will attempt to produce a PFA <c>let</c>/<c>set</c> declaration, and also
            do name mapping. The idea is that any transform implementing <see cref="T:Microsoft.ML.Runtime.Model.Pfa.ITransformCanSavePfa" />
            will call this method to say, "hey, I produce this column, and this is the equivalent
            PFA for it."
            </summary>
        <returns>An array of assigned names in the PFA corresponding to the items in
            vars</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareVar">
      <MemberSignature Language="C#" Value="public string DeclareVar (string name, Newtonsoft.Json.Linq.JToken value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string DeclareVar(string name, class Newtonsoft.Json.Linq.JToken value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext.DeclareVar(System.String,Newtonsoft.Json.Linq.JToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeclareVar (name As String, value As JToken) As String" />
      <MemberSignature Language="F#" Value="member this.DeclareVar : string * Newtonsoft.Json.Linq.JToken -&gt; string" Usage="boundPfaContext.DeclareVar (name, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ DeclareVar(System::String ^ name, Newtonsoft::Json::Linq::JToken ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="Newtonsoft.Json.Linq.JToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="public Newtonsoft.Json.Linq.JObject Finalize (Microsoft.ML.Runtime.Data.ISchema schema, params string[] toOutput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Newtonsoft.Json.Linq.JObject Finalize(class Microsoft.ML.Runtime.Data.ISchema schema, string[] toOutput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext.Finalize(Microsoft.ML.Runtime.Data.ISchema,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Finalize (schema As ISchema, ParamArray toOutput As String()) As JObject" />
      <MemberSignature Language="F#" Value="override this.Finalize : Microsoft.ML.Runtime.Data.ISchema * string[] -&gt; Newtonsoft.Json.Linq.JObject" Usage="boundPfaContext.Finalize (schema, toOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Newtonsoft::Json::Linq::JObject ^ Finalize(Microsoft::ML::Runtime::Data::ISchema ^ schema, ... cli::array &lt;System::String ^&gt; ^ toOutput);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Newtonsoft.Json.Linq.JObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="Microsoft.ML.Runtime.Data.ISchema" />
        <Parameter Name="toOutput" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="schema">The schema corresponding to what we are outputting</param>
        <param name="toOutput">The columns to output</param>
        <summary>
            This call will set <see cref="P:Microsoft.ML.Runtime.Model.Pfa.PfaContext.OutputType" /> to an appropriate output type based
            on the columns requested.
            </summary>
        <returns>Returns a complete PFA program, where the output will correspond to the subset
            of columns from <paramref name="schema" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFreeFunctionName">
      <MemberSignature Language="C#" Value="public string GetFreeFunctionName (string baseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetFreeFunctionName(string baseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext.GetFreeFunctionName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFreeFunctionName (baseName As String) As String" />
      <MemberSignature Language="F#" Value="member this.GetFreeFunctionName : string -&gt; string" Usage="boundPfaContext.GetFreeFunctionName baseName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetFreeFunctionName(System::String ^ baseName);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Platform::String ^ GetFreeFunctionName(Platform::String ^ baseName);" />
      <MemberSignature Language="C++ WINRT" Value="std::wstring GetFreeFunctionName(std::wstring const &amp; baseName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide (params string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide(string[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext.Hide(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide (ParamArray names As String())" />
      <MemberSignature Language="F#" Value="member this.Hide : string[] -&gt; unit" Usage="boundPfaContext.Hide names" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide(... cli::array &lt;System::String ^&gt; ^ names);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names">The names to hide</param>
        <summary>
            As a complimentary operation to <see cref="M:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext.DeclareVar(System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JToken}[])" />,
            this provides a mechanism for a transform to say, "hey, I am producing this column, but I
            am not writing any PFA for it, so if anyone asks for this column downstream don't say I
            have it."
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInput">
      <MemberSignature Language="C#" Value="public bool IsInput (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInput(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext.IsInput(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInput (name As String) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsInput : string -&gt; bool" Usage="boundPfaContext.IsInput name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInput(System::String ^ name);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool IsInput(Platform::String ^ name);" />
      <MemberSignature Language="C++ WINRT" Value="bool IsInput(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
            Given an <see cref="T:Microsoft.ML.Runtime.Data.IDataView" /> column name, return whether in the PFA being built up
            whether the corresponding PFA variable is still the input. This will return <c>false</c>
            also in the event that the column is hidden, or simply not present.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pfa">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Model.Pfa.PfaContext Pfa { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.Model.Pfa.PfaContext Pfa" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext.Pfa" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pfa As PfaContext" />
      <MemberSignature Language="F#" Value="member this.Pfa : Microsoft.ML.Runtime.Model.Pfa.PfaContext" Usage="Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext.Pfa" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ML::Runtime::Model::Pfa::PfaContext ^ Pfa { Microsoft::ML::Runtime::Model::Pfa::PfaContext ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::ML::Runtime::Model::Pfa::PfaContext ^ Pfa { Microsoft::ML::Runtime::Model::Pfa::PfaContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Model.Pfa.PfaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The internal PFA context, for an escape hatch.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenOrNullForName">
      <MemberSignature Language="C#" Value="public string TokenOrNullForName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TokenOrNullForName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Model.Pfa.BoundPfaContext.TokenOrNullForName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TokenOrNullForName (name As String) As String" />
      <MemberSignature Language="F#" Value="member this.TokenOrNullForName : string -&gt; string" Usage="boundPfaContext.TokenOrNullForName name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TokenOrNullForName(System::String ^ name);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Platform::String ^ TokenOrNullForName(Platform::String ^ name);" />
      <MemberSignature Language="C++ WINRT" Value="std::wstring TokenOrNullForName(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
            Given an <see cref="T:Microsoft.ML.Runtime.Data.IDataView" /> column name, return the string for referencing the corresponding
            token in the PFA, or <c>null</c> if such a thing does not exist.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>