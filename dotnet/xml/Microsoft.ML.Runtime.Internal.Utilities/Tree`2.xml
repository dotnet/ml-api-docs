<Type Name="Tree&lt;TKey,TValue&gt;" FullName="Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;">
  <TypeSignature Language="C#" Value="public sealed class Tree&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;&gt;, System.Collections.Generic.IDictionary&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Tree`2&lt;TKey, TValue&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt;&gt;&gt;, class System.Collections.Generic.IDictionary`2&lt;!TKey, class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt;&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Internal.Utilities.Tree`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Tree(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, Tree(Of TKey, TValue))), IDictionary(Of TKey, Tree(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, Tree(Of TKey, TValue)))" />
  <TypeSignature Language="F#" Value="type Tree&lt;'Key, 'Value&gt; = class&#xA;    interface IDictionary&lt;'Key, Tree&lt;'Key, 'Value&gt;&gt;&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, Tree&lt;'Key, 'Value&gt;&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, Tree&lt;'Key, 'Value&gt;&gt;&gt;&#xA;    interface IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public ref class Tree sealed : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^&gt;&gt;, System::Collections::Generic::IDictionary&lt;TKey, Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IDictionary&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">Children are keyed with values of this type</typeparam>
    <typeparam name="TValue">The type of the node value</typeparam>
    <summary>
            The tree structure is simultaneously a tree, and a node in a tree. The interface to
            get children occurs through the tree itself implementing itself as a dictionary. This
            tree is not terribly efficient, and is meant to be accomodate additions, deletions,
            and change of values. Because it is implemented as a dictionary, there is an unfortunate
            collision in naming between the dictionary type of "values" (which in this case are
            child trees) and the tree type of values, called "node values."
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tree();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Tree();" />
      <MemberSignature Language="C++ WINRT" Value=" Tree();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a tree with no node value, and no children.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt; item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt;&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Add(System.Collections.Generic.KeyValuePair{`0,Microsoft.ML.Runtime.Internal.Utilities.Tree{`0,`1}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As KeyValuePair(Of TKey, Tree(Of TKey, TValue)))" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Collections.Generic.KeyValuePair&lt;'Key, Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;&gt; -&gt; unit&#xA;override this.Add : System.Collections.Generic.KeyValuePair&lt;'Key, Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;&gt; -&gt; unit" Usage="tree.Add item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Collections::Generic::KeyValuePair&lt;TKey, Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^&gt; item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="item">The key / child node pair to add</param>
        <summary>
            Adds a new child to this dictionary.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt; newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt; newChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Add(`0,Microsoft.ML.Runtime.Internal.Utilities.Tree{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, newChild As Tree(Of TKey, TValue))" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Key * Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt; -&gt; unit&#xA;override this.Add : 'Key * Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt; -&gt; unit" Usage="tree.Add (key, newChild)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TKey key, Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^ newChild);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Add(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="newChild" Type="Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="key"></param>
        <param name="newChild"></param>
        <summary>
            Adds a node as a child of this node. This will disconnect the 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="tree.Clear " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="C++ WINRT" Value="void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearNodeValue">
      <MemberSignature Language="C#" Value="public void ClearNodeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearNodeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.ClearNodeValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearNodeValue ()" />
      <MemberSignature Language="F#" Value="member this.ClearNodeValue : unit -&gt; unit" Usage="tree.ClearNodeValue " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearNodeValue();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void ClearNodeValue();" />
      <MemberSignature Language="C++ WINRT" Value="void ClearNodeValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt; item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt;&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Contains(System.Collections.Generic.KeyValuePair{`0,Microsoft.ML.Runtime.Internal.Utilities.Tree{`0,`1}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As KeyValuePair(Of TKey, Tree(Of TKey, TValue))) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Contains : System.Collections.Generic.KeyValuePair&lt;'Key, Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;&gt; -&gt; bool&#xA;override this.Contains : System.Collections.Generic.KeyValuePair&lt;'Key, Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;&gt; -&gt; bool" Usage="tree.Contains item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Collections::Generic::KeyValuePair&lt;TKey, Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^&gt; item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : 'Key -&gt; bool&#xA;override this.ContainsKey : 'Key -&gt; bool" Usage="tree.ContainsKey key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(TKey key);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool ContainsKey(TKey key);" />
      <MemberSignature Language="C++ WINRT" Value="bool ContainsKey(TKey key);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">The key of the child to find</param>
        <summary>
            Sees whether a child with a given key is present.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt;&gt;[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,Microsoft.ML.Runtime.Internal.Utilities.Tree{`0,`1}}[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As KeyValuePair(Of TKey, Tree(Of TKey, TValue))(), arrayIndex As Integer)" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : System.Collections.Generic.KeyValuePair&lt;'Key, Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;&gt;[] * int -&gt; unit&#xA;override this.CopyTo : System.Collections.Generic.KeyValuePair&lt;'Key, Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;&gt;[] * int -&gt; unit" Usage="tree.CopyTo (array, arrayIndex)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;System::Collections::Generic::KeyValuePair&lt;TKey, Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^&gt;&gt; ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;.Count" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The number of children with this node as a parent.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Detach">
      <MemberSignature Language="C#" Value="public void Detach ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Detach() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Detach" />
      <MemberSignature Language="VB.NET" Value="Public Sub Detach ()" />
      <MemberSignature Language="F#" Value="member this.Detach : unit -&gt; unit" Usage="tree.Detach " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Detach();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void Detach();" />
      <MemberSignature Language="C++ WINRT" Value="void Detach();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Removes this node and all its descendants from a tree, leading it to
            be the root of its own tree. Following this, <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Parent" /> will
            be <c>null</c>, and the previous parent (if any) will no longer have
            this node present as a child.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt;&gt;&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of TKey, Tree(Of TKey, TValue)))" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;'Key, Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;&gt;&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;'Key, Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;&gt;&gt;" Usage="tree.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^&gt;&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNodeValue">
      <MemberSignature Language="C#" Value="public bool HasNodeValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNodeValue" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.HasNodeValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasNodeValue As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasNodeValue : bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;.HasNodeValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasNodeValue { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool HasNodeValue { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt; this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt; Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As Tree(Of TKey, TValue)" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt; with get, set" Usage="Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^ default[TKey] { Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^ get(TKey key); void set(TKey key, Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Item(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public TKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TKey Key" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As TKey" />
      <MemberSignature Language="F#" Value="member this.Key : 'Key" Usage="Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;.Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TKey Key { TKey get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property TKey Key { TKey get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            This is the key for this child node in its parent, if any. If this is not
            a child of any parent, that is, it is the root of its own tree, then 
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TKey&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection(Of TKey)" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.ICollection&lt;'Key&gt;" Usage="Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;.Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TKey&gt; ^ Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            All child keys for this node.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeValue">
      <MemberSignature Language="C#" Value="public TValue NodeValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue NodeValue" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.NodeValue" />
      <MemberSignature Language="VB.NET" Value="Public Property NodeValue As TValue" />
      <MemberSignature Language="F#" Value="member this.NodeValue : 'Value with get, set" Usage="Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;.NodeValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue NodeValue { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property TValue NodeValue { TValue get(); void set(TValue value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Either the node value, or the default of the value type,
            if <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.HasNodeValue" /> is false.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt; Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt; Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Tree(Of TKey, TValue)" />
      <MemberSignature Language="F#" Value="member this.Parent : Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;" Usage="Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;.Parent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^ Parent { Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The parent for this tree, or <c>null</c> if it has no parent.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt; item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt;&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Remove(System.Collections.Generic.KeyValuePair{`0,Microsoft.ML.Runtime.Internal.Utilities.Tree{`0,`1}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As KeyValuePair(Of TKey, Tree(Of TKey, TValue))) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.Collections.Generic.KeyValuePair&lt;'Key, Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;&gt; -&gt; bool&#xA;override this.Remove : System.Collections.Generic.KeyValuePair&lt;'Key, Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;&gt; -&gt; bool" Usage="tree.Remove item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(System::Collections::Generic::KeyValuePair&lt;TKey, Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^&gt; item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Collections.Generic.KeyValuePair&lt;TKey,Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Key -&gt; bool&#xA;override this.Remove : 'Key -&gt; bool" Usage="tree.Remove key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TKey key);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="C++ WINRT" Value="bool Remove(TKey key);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">The key of the child to remove</param>
        <summary>
            Remove a child with a specified key.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt;&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.TryGetValue(`0,Microsoft.ML.Runtime.Internal.Utilities.Tree{`0,`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As Tree(Of TKey, TValue)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'Key *  -&gt; bool&#xA;override this.TryGetValue : 'Key *  -&gt; bool" Usage="tree.TryGetValue (key, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetValue(TKey key, [Runtime::InteropServices::Out] Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">The key of the child to find</param>
        <param name="value">The child, if any, or <c>null</c> if no child
            with this key is present</param>
        <summary>
            Tries to get the subtree for a child key.
            </summary>
        <returns>Whether a child with this key was present</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Microsoft.ML.Runtime.Internal.Utilities.Tree`2&lt;!TKey, !TValue&gt;&gt; Values" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.Tree`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection(Of Tree(Of TKey, TValue))" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.ICollection&lt;Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;&gt;" Usage="Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;'Key, 'Value&gt;.Values" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^&gt; ^ Values { System::Collections::Generic::ICollection&lt;Microsoft::ML::Runtime::Internal::Utilities::Tree&lt;TKey, TValue&gt; ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Microsoft.ML.Runtime.Internal.Utilities.Tree&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            All children for this node.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>