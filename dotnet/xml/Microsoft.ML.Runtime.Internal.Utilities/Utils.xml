<Type Name="Utils" FullName="Microsoft.ML.Runtime.Internal.Utilities.Utils">
  <TypeSignature Language="C#" Value="public static class Utils" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Utils extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Internal.Utilities.Utils" />
  <TypeSignature Language="VB.NET" Value="Public Module Utils" />
  <TypeSignature Language="F#" Value="type Utils = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static uint Abs (int a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Abs(int32 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Abs(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Abs (a As Integer) As UInteger" />
      <MemberSignature Language="F#" Value="static member Abs : int -&gt; uint32" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Abs a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static ulong Abs (long a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Abs(int64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Abs(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Abs (a As Long) As ULong" />
      <MemberSignature Language="F#" Value="static member Abs : int64 -&gt; uint64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Abs a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Add&lt;T&gt; (ref System.Collections.Generic.HashSet&lt;T&gt; set, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Add&lt;T&gt;(class System.Collections.Generic.HashSet`1&lt;!!T&gt;&amp; set, !!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Add``1(System.Collections.Generic.HashSet{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add(Of T) (ByRef set As HashSet(Of T), item As T) As Boolean" />
      <MemberSignature Language="F#" Value="static member Add :  * 'T -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Add (set, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="set" Type="System.Collections.Generic.HashSet&lt;T&gt;" RefType="ref" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="set">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Add&lt;T&gt; (ref System.Collections.Generic.List&lt;T&gt; list, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt;&amp; list, !!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Add``1(System.Collections.Generic.List{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add(Of T) (ByRef list As List(Of T), item As T)" />
      <MemberSignature Language="F#" Value="static member Add :  * 'T -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Add (list, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" RefType="ref" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="list">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Add&lt;TKey,TValue&gt; (ref System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; map, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add&lt;TKey, TValue&gt;(class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TValue&gt;&amp; map, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Add``2(System.Collections.Generic.Dictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add(Of TKey, TValue) (ByRef map As Dictionary(Of TKey, TValue), key As TKey, value As TValue)" />
      <MemberSignature Language="F#" Value="static member Add :  * 'Key * 'Value -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Add (map, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="map" Type="System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="map">To be added.</param>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static bool AreEqual (bool[] arr1, bool[] arr2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEqual(bool[] arr1, bool[] arr2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.AreEqual(System.Boolean[],System.Boolean[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AreEqual (arr1 As Boolean(), arr2 As Boolean()) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEqual : bool[] * bool[] -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.AreEqual (arr1, arr2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arr1" Type="System.Boolean[]" />
        <Parameter Name="arr2" Type="System.Boolean[]" />
      </Parameters>
      <Docs>
        <param name="arr1">To be added.</param>
        <param name="arr2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static bool AreEqual (double[] arr1, double[] arr2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEqual(float64[] arr1, float64[] arr2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.AreEqual(System.Double[],System.Double[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AreEqual (arr1 As Double(), arr2 As Double()) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEqual : double[] * double[] -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.AreEqual (arr1, arr2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arr1" Type="System.Double[]" />
        <Parameter Name="arr2" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="arr1">To be added.</param>
        <param name="arr2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static bool AreEqual (int[] arr1, int[] arr2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEqual(int32[] arr1, int32[] arr2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.AreEqual(System.Int32[],System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AreEqual (arr1 As Integer(), arr2 As Integer()) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEqual : int[] * int[] -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.AreEqual (arr1, arr2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arr1" Type="System.Int32[]" />
        <Parameter Name="arr2" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="arr1">To be added.</param>
        <param name="arr2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static bool AreEqual (float[] arr1, float[] arr2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEqual(float32[] arr1, float32[] arr2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.AreEqual(System.Single[],System.Single[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AreEqual (arr1 As Single(), arr2 As Single()) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEqual : single[] * single[] -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.AreEqual (arr1, arr2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arr1" Type="System.Single[]" />
        <Parameter Name="arr2" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="arr1">To be added.</param>
        <param name="arr2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayMaxSize">
      <MemberSignature Language="C#" Value="public const int ArrayMaxSize = 2146435071;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 ArrayMaxSize = (2146435071)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Runtime.Internal.Utilities.Utils.ArrayMaxSize" />
      <MemberSignature Language="VB.NET" Value="Public Const ArrayMaxSize As Integer  = 2146435071" />
      <MemberSignature Language="F#" Value="val mutable ArrayMaxSize : int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ArrayMaxSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2146435071</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] BuildArray&lt;T&gt; (int length, Func&lt;int,T&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] BuildArray&lt;T&gt;(int32 length, class System.Func`2&lt;int32, !!T&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.BuildArray``1(System.Int32,System.Func{System.Int32,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildArray(Of T) (length As Integer, func As Func(Of Integer, T)) As T()" />
      <MemberSignature Language="F#" Value="static member BuildArray : int * Func&lt;int, 'T&gt; -&gt; 'T[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.BuildArray (length, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="func" Type="System.Func&lt;System.Int32,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="length">To be added.</param>
        <param name="func">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildSubsetMaps">
      <MemberSignature Language="C#" Value="public static void BuildSubsetMaps (int lim, Func&lt;int,bool&gt; pred, out int[] map, out int[] invMap);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BuildSubsetMaps(int32 lim, class System.Func`2&lt;int32, bool&gt; pred, [out] int32[]&amp; map, [out] int32[]&amp; invMap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.BuildSubsetMaps(System.Int32,System.Func{System.Int32,System.Boolean},System.Int32[]@,System.Int32[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BuildSubsetMaps (lim As Integer, pred As Func(Of Integer, Boolean), ByRef map As Integer(), ByRef invMap As Integer())" />
      <MemberSignature Language="F#" Value="static member BuildSubsetMaps : int * Func&lt;int, bool&gt; *  *  -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.BuildSubsetMaps (lim, pred, map, invMap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lim" Type="System.Int32" />
        <Parameter Name="pred" Type="System.Func&lt;System.Int32,System.Boolean&gt;" />
        <Parameter Name="map" Type="System.Int32[]" RefType="out" />
        <Parameter Name="invMap" Type="System.Int32[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="lim">Indicates the exclusive upper bound on the tested values</param>
        <param name="pred">The predicate to test for various value</param>
        <param name="map">An ascending array of values from 0 inclusive
            to <paramref name="lim" /> exclusive, holding all values for which
            <paramref name="pred" /> is true</param>
        <param name="invMap">Forms an inverse mapping of <paramref name="map" />,
            so that <c><paramref name="invMap" />[<paramref name="map" />[i]] == i</c>,
            and for other entries not appearing in <paramref name="map" />,
            <c><paramref name="invMap" />[i] == -1</c></param>
        <summary>
            Given a predicate, over a range of values defined by a limit calculate
            first the values for which that predicate was true, and second an inverse
            map.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cbit">
      <MemberSignature Language="C#" Value="public static int Cbit (uint u);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Cbit(unsigned int32 u) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Cbit(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cbit (u As UInteger) As Integer" />
      <MemberSignature Language="F#" Value="static member Cbit : uint32 -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Cbit u" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cbit">
      <MemberSignature Language="C#" Value="public static int Cbit (ulong uu);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Cbit(unsigned int64 uu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Cbit(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cbit (uu As ULong) As Integer" />
      <MemberSignature Language="F#" Value="static member Cbit : uint64 -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Cbit uu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uu" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="uu">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CbitHighZero">
      <MemberSignature Language="C#" Value="public static int CbitHighZero (uint u);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CbitHighZero(unsigned int32 u) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CbitHighZero(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CbitHighZero (u As UInteger) As Integer" />
      <MemberSignature Language="F#" Value="static member CbitHighZero : uint32 -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CbitHighZero u" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CbitHighZero">
      <MemberSignature Language="C#" Value="public static int CbitHighZero (ulong uu);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CbitHighZero(unsigned int64 uu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CbitHighZero(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CbitHighZero (uu As ULong) As Integer" />
      <MemberSignature Language="F#" Value="static member CbitHighZero : uint64 -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CbitHighZero uu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uu" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="uu">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CbitLowZero">
      <MemberSignature Language="C#" Value="public static int CbitLowZero (uint u);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CbitLowZero(unsigned int32 u) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CbitLowZero(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CbitLowZero (u As UInteger) As Integer" />
      <MemberSignature Language="F#" Value="static member CbitLowZero : uint32 -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CbitLowZero u" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CbitLowZero">
      <MemberSignature Language="C#" Value="public static int CbitLowZero (ulong uu);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CbitLowZero(unsigned int64 uu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CbitLowZero(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CbitLowZero (uu As ULong) As Integer" />
      <MemberSignature Language="F#" Value="static member CbitLowZero : uint64 -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CbitLowZero uu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uu" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="uu">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckOptionalUserDirectory">
      <MemberSignature Language="C#" Value="public static void CheckOptionalUserDirectory (string file, string userArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckOptionalUserDirectory(string file, string userArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CheckOptionalUserDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CheckOptionalUserDirectory (file As String, userArgument As String)" />
      <MemberSignature Language="F#" Value="static member CheckOptionalUserDirectory : string * string -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CheckOptionalUserDirectory (file, userArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="userArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">An absolute or relative file path, or null to skip the check
            (useful for optional user parameters)</param>
        <param name="userArgument">The user level parameter name, as exposed by the command line help</param>
        <summary>
            Checks that the directory of the file name passed in already exists.
            This is meant to be called before calling an API that creates the file,
            so the file need not exist.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseEx">
      <MemberSignature Language="C#" Value="public static void CloseEx (this System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CloseEx(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CloseEx(System.IO.Stream)" />
      <MemberSignature Language="F#" Value="static member CloseEx : System.IO.Stream -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CloseEx stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseEx">
      <MemberSignature Language="C#" Value="public static void CloseEx (this System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CloseEx(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CloseEx(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CloseEx (writer As TextWriter)" />
      <MemberSignature Language="F#" Value="static member CloseEx : System.IO.TextWriter -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CloseEx writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" RefType="this" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] Concat&lt;T&gt; (params T[][] arrays);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] Concat&lt;T&gt;(!!T[][] arrays) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Concat``1(``0[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function Concat(Of T) (ParamArray arrays As T()()) As T()" />
      <MemberSignature Language="F#" Value="static member Concat : 'T[][] -&gt; 'T[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Concat arrays" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="arrays" Type="T[][]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="arrays">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] Concat&lt;T&gt; (T[] a, T[] b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] Concat&lt;T&gt;(!!T[] a, !!T[] b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Concat``1(``0[],``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Concat(Of T) (a As T(), b As T()) As T()" />
      <MemberSignature Language="F#" Value="static member Concat : 'T[] * 'T[] -&gt; 'T[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Concat (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="a" Type="T[]" />
        <Parameter Name="b" Type="T[]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyRange">
      <MemberSignature Language="C#" Value="public static long CopyRange (this System.IO.Stream source, System.IO.Stream destination, long length, int bufferSize = 81920);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 CopyRange(class System.IO.Stream source, class System.IO.Stream destination, int64 length, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CopyRange(System.IO.Stream,System.IO.Stream,System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyRange (source As Stream, destination As Stream, length As Long, Optional bufferSize As Integer = 81920) As Long" />
      <MemberSignature Language="F#" Value="static member CopyRange : System.IO.Stream * System.IO.Stream * int64 * int -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CopyRange (source, destination, length, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" RefType="this" />
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Source stream to copy from</param>
        <param name="destination">Destination stream to copy to</param>
        <param name="length">Number of bytes to copy</param>
        <param name="bufferSize">Size of buffer to use when copying, default is 81920 to match that of Stream</param>
        <summary>
            Similar to Stream.CopyTo but takes a length rather than assuming copy to end.  Returns amount copied.
            </summary>
        <returns>number of bytes copied</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] CreateArray&lt;T&gt; (int length, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] CreateArray&lt;T&gt;(int32 length, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateArray``1(System.Int32,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateArray(Of T) (length As Integer, value As T) As T()" />
      <MemberSignature Language="F#" Value="static member CreateArray : int * 'T -&gt; 'T[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateArray (length, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="length">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Create an array of specified length, filled with a specified value
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBackgroundThread">
      <MemberSignature Language="C#" Value="public static System.Threading.Thread CreateBackgroundThread (System.Threading.ParameterizedThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Thread CreateBackgroundThread(class System.Threading.ParameterizedThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateBackgroundThread(System.Threading.ParameterizedThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateBackgroundThread (start As ParameterizedThreadStart) As Thread" />
      <MemberSignature Language="F#" Value="static member CreateBackgroundThread : System.Threading.ParameterizedThreadStart -&gt; System.Threading.Thread" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateBackgroundThread start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBackgroundThread">
      <MemberSignature Language="C#" Value="public static System.Threading.Thread CreateBackgroundThread (System.Threading.ThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Thread CreateBackgroundThread(class System.Threading.ThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateBackgroundThread(System.Threading.ThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateBackgroundThread (start As ThreadStart) As Thread" />
      <MemberSignature Language="F#" Value="static member CreateBackgroundThread : System.Threading.ThreadStart -&gt; System.Threading.Thread" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateBackgroundThread start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFolderIfNotExists">
      <MemberSignature Language="C#" Value="public static string CreateFolderIfNotExists (string folder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CreateFolderIfNotExists(string folder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateFolderIfNotExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateFolderIfNotExists (folder As String) As String" />
      <MemberSignature Language="F#" Value="static member CreateFolderIfNotExists : string -&gt; string" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateFolderIfNotExists folder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="folder" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="folder">To be added.</param>
        <summary>
             Given a folder path, create it if it doesn't exist.
             Fails if the folder name is empty, or can't create the folder.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForegroundThread">
      <MemberSignature Language="C#" Value="public static System.Threading.Thread CreateForegroundThread (System.Threading.ParameterizedThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Thread CreateForegroundThread(class System.Threading.ParameterizedThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateForegroundThread(System.Threading.ParameterizedThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateForegroundThread (start As ParameterizedThreadStart) As Thread" />
      <MemberSignature Language="F#" Value="static member CreateForegroundThread : System.Threading.ParameterizedThreadStart -&gt; System.Threading.Thread" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateForegroundThread start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForegroundThread">
      <MemberSignature Language="C#" Value="public static System.Threading.Thread CreateForegroundThread (System.Threading.ThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Thread CreateForegroundThread(class System.Threading.ThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateForegroundThread(System.Threading.ThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateForegroundThread (start As ThreadStart) As Thread" />
      <MemberSignature Language="F#" Value="static member CreateForegroundThread : System.Threading.ThreadStart -&gt; System.Threading.Thread" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CreateForegroundThread start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomSearchDirEnvVariable">
      <MemberSignature Language="C#" Value="public const string CustomSearchDirEnvVariable;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string CustomSearchDirEnvVariable" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Runtime.Internal.Utilities.Utils.CustomSearchDirEnvVariable" />
      <MemberSignature Language="VB.NET" Value="Public Const CustomSearchDirEnvVariable As String " />
      <MemberSignature Language="F#" Value="val mutable CustomSearchDirEnvVariable : string" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.CustomSearchDirEnvVariable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Environment variable containing optional resources path.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureSize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int EnsureSize&lt;T&gt; (ref T[] array, int min, bool keepOld = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 EnsureSize&lt;T&gt;(!!T[]&amp; array, int32 min, bool keepOld) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.EnsureSize``1(``0[]@,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureSize(Of T) (ByRef array As T(), min As Integer, Optional keepOld As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="static member EnsureSize :  * int * bool -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.EnsureSize (array, min, keepOld)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="ref" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="keepOld" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="array">The array to resize. Can be null.</param>
        <param name="min">The minimum number of items the new array must have.</param>
        <param name="keepOld">True means that the old array is preserved, if possible (Array.Resize is called). False
            means that a new array will be allocated.
            </param>
        <summary>
            Resizes the array if necessary, to ensure that it has at least <paramref name="min" /> elements.
            </summary>
        <returns>The new size, that is no less than <paramref name="min" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureSize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int EnsureSize&lt;T&gt; (ref T[] array, int min, int max, bool keepOld = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 EnsureSize&lt;T&gt;(!!T[]&amp; array, int32 min, int32 max, bool keepOld) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.EnsureSize``1(``0[]@,System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureSize(Of T) (ByRef array As T(), min As Integer, max As Integer, Optional keepOld As Boolean = true) As Integer" />
      <MemberSignature Language="F#" Value="static member EnsureSize :  * int * int * bool -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.EnsureSize (array, min, max, keepOld)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="ref" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="max" Type="System.Int32" />
        <Parameter Name="keepOld" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="array">The array to resize. Can be null.</param>
        <param name="min">The minimum number of items the new array must have.</param>
        <param name="max">The maximum number of items the new array can have.</param>
        <param name="keepOld">True means that the old array is preserved, if possible (Array.Resize is called). False
            means that a new array will be allocated.
            </param>
        <summary>
            Resizes the array if necessary, to ensure that it has at least <paramref name="min" /> and at most <paramref name="max" /> elements.
            </summary>
        <returns>The new size, that is no less than <paramref name="min" /> and no more that <paramref name="max" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractLettersAndNumbers">
      <MemberSignature Language="C#" Value="public static string ExtractLettersAndNumbers (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ExtractLettersAndNumbers(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ExtractLettersAndNumbers(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExtractLettersAndNumbers (value As String) As String" />
      <MemberSignature Language="F#" Value="static member ExtractLettersAndNumbers : string -&gt; string" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ExtractLettersAndNumbers value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FillIdentity">
      <MemberSignature Language="C#" Value="public static void FillIdentity (int[] a, int lim);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FillIdentity(int32[] a, int32 lim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FillIdentity(System.Int32[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FillIdentity (a As Integer(), lim As Integer)" />
      <MemberSignature Language="F#" Value="static member FillIdentity : int[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FillIdentity (a, lim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32[]" />
        <Parameter Name="lim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="lim">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindExistentFileOrNull">
      <MemberSignature Language="C#" Value="public static string FindExistentFileOrNull (string fileName, string folderPrefix = null, string customSearchDir = null, Type assemblyForBasePath = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FindExistentFileOrNull(string fileName, string folderPrefix, string customSearchDir, class System.Type assemblyForBasePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindExistentFileOrNull(System.String,System.String,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindExistentFileOrNull (fileName As String, Optional folderPrefix As String = null, Optional customSearchDir As String = null, Optional assemblyForBasePath As Type = null) As String" />
      <MemberSignature Language="F#" Value="static member FindExistentFileOrNull : string * string * string * Type -&gt; string" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FindExistentFileOrNull (fileName, folderPrefix, customSearchDir, assemblyForBasePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="folderPrefix" Type="System.String" />
        <Parameter Name="customSearchDir" Type="System.String" />
        <Parameter Name="assemblyForBasePath" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="fileName">File name to find</param>
        <param name="folderPrefix">folder prefix, relative to the current or customSearchDir</param>
        <param name="customSearchDir">
             Custom directory to search for resources.
             If null, the path specified in the environment variable <seealso cref="F:Microsoft.ML.Runtime.Internal.Utilities.Utils.CustomSearchDirEnvVariable" />
             will be used.
             </param>
        <param name="assemblyForBasePath">
             Assembly type to search the path of.
             </param>
        <summary>
             Attempts to find a file that is expected to be distributed with a TLC component. Searches
             in the following order:
             1. In the customSearchDir directory, if it is provided.
             2. In the custom search directory specified by the
                <seealso cref="F:Microsoft.ML.Runtime.Internal.Utilities.Utils.CustomSearchDirEnvVariable" /> environment variable.
             3. In the root folder of the provided assembly.
             4. In the folder of this assembly.
             In each case it searches the file in the directory provided and combined with folderPrefix.
            
             If any of these locations contain the file, a full local path will be returned, otherwise this
             method will return null.
             </summary>
        <returns>
             Path to the existing file. Null if not found.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndexSorted">
      <MemberSignature Language="C#" Value="public static int FindIndexSorted (this System.Collections.Generic.IList&lt;int&gt; input, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndexSorted(class System.Collections.Generic.IList`1&lt;int32&gt; input, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Collections.Generic.IList{System.Int32},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndexSorted (input As IList(Of Integer), value As Integer) As Integer" />
      <MemberSignature Language="F#" Value="static member FindIndexSorted : System.Collections.Generic.IList&lt;int&gt; * int -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted (input, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Collections.Generic.IList&lt;System.Int32&gt;" RefType="this" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndexSorted">
      <MemberSignature Language="C#" Value="public static int FindIndexSorted (this double[] input, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndexSorted(float64[] input, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Double[],System.Double)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndexSorted (input As Double(), value As Double) As Integer" />
      <MemberSignature Language="F#" Value="static member FindIndexSorted : double[] * double -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted (input, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Double[]" RefType="this" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndexSorted">
      <MemberSignature Language="C#" Value="public static int FindIndexSorted (this int[] input, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndexSorted(int32[] input, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Int32[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndexSorted (input As Integer(), value As Integer) As Integer" />
      <MemberSignature Language="F#" Value="static member FindIndexSorted : int[] * int -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted (input, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Int32[]" RefType="this" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndexSorted">
      <MemberSignature Language="C#" Value="public static int FindIndexSorted (this float[] input, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndexSorted(float32[] input, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Single[],System.Single)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndexSorted (input As Single(), value As Single) As Integer" />
      <MemberSignature Language="F#" Value="static member FindIndexSorted : single[] * single -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted (input, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Single[]" RefType="this" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndexSorted">
      <MemberSignature Language="C#" Value="public static int FindIndexSorted (this System.Collections.Generic.IList&lt;int&gt; input, int min, int lim, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndexSorted(class System.Collections.Generic.IList`1&lt;int32&gt; input, int32 min, int32 lim, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndexSorted (input As IList(Of Integer), min As Integer, lim As Integer, value As Integer) As Integer" />
      <MemberSignature Language="F#" Value="static member FindIndexSorted : System.Collections.Generic.IList&lt;int&gt; * int * int * int -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted (input, min, lim, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Collections.Generic.IList&lt;System.Int32&gt;" RefType="this" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="lim" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="min">To be added.</param>
        <param name="lim">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndexSorted">
      <MemberSignature Language="C#" Value="public static int FindIndexSorted (this double[] input, int min, int lim, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndexSorted(float64[] input, int32 min, int32 lim, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Double[],System.Int32,System.Int32,System.Double)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndexSorted (input As Double(), min As Integer, lim As Integer, value As Double) As Integer" />
      <MemberSignature Language="F#" Value="static member FindIndexSorted : double[] * int * int * double -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted (input, min, lim, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Double[]" RefType="this" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="lim" Type="System.Int32" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="min">To be added.</param>
        <param name="lim">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndexSorted">
      <MemberSignature Language="C#" Value="public static int FindIndexSorted (this int[] input, int min, int lim, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndexSorted(int32[] input, int32 min, int32 lim, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Int32[],System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndexSorted (input As Integer(), min As Integer, lim As Integer, value As Integer) As Integer" />
      <MemberSignature Language="F#" Value="static member FindIndexSorted : int[] * int * int * int -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted (input, min, lim, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Int32[]" RefType="this" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="lim" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="min">To be added.</param>
        <param name="lim">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndexSorted">
      <MemberSignature Language="C#" Value="public static int FindIndexSorted (this float[] input, int min, int lim, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndexSorted(float32[] input, int32 min, int32 lim, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted(System.Single[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndexSorted (input As Single(), min As Integer, lim As Integer, value As Single) As Integer" />
      <MemberSignature Language="F#" Value="static member FindIndexSorted : single[] * int * int * single -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted (input, min, lim, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Single[]" RefType="this" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="lim" Type="System.Int32" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="min">To be added.</param>
        <param name="lim">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Assumes input is sorted and finds value using BinarySearch.
            If value is not found, returns the logical index of 'value' in the sorted list i.e index of the first element greater than value.
            In case of duplicates it returns the index of the first one.
            It guarantees that items before the returned index are &lt; value, while those at and after the returned index are &gt;= value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndexSorted&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindIndexSorted&lt;T&gt; (this T[] input, int min, int lim, Func&lt;T,bool&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndexSorted&lt;T&gt;(!!T[] input, int32 min, int32 lim, class System.Func`2&lt;!!T, bool&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndexSorted(Of T) (input As T(), min As Integer, lim As Integer, func As Func(Of T, Boolean)) As Integer" />
      <MemberSignature Language="F#" Value="static member FindIndexSorted : 'T[] * int * int * Func&lt;'T, bool&gt; -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted (input, min, lim, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="T[]" RefType="this" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="lim" Type="System.Int32" />
        <Parameter Name="func" Type="System.Func&lt;T,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="input">To be added.</param>
        <param name="min">To be added.</param>
        <param name="lim">To be added.</param>
        <param name="func">To be added.</param>
        <summary>
            Finds the unique index for which func(input[i]) == false whenever i &lt; index and
            func(input[i]) == true whenever i &gt;= index.
            Callers should guarantee that there is such an index. Uses binary search.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndexSorted&lt;T,TValue&gt;">
      <MemberSignature Language="C#" Value="public static int FindIndexSorted&lt;T,TValue&gt; (this T[] input, int min, int lim, Func&lt;T,TValue,bool&gt; func, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndexSorted&lt;T, TValue&gt;(!!T[] input, int32 min, int32 lim, class System.Func`3&lt;!!T, !!TValue, bool&gt; func, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted``2(``0[],System.Int32,System.Int32,System.Func{``0,``1,System.Boolean},``1)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndexSorted(Of T, TValue) (input As T(), min As Integer, lim As Integer, func As Func(Of T, TValue, Boolean), value As TValue) As Integer" />
      <MemberSignature Language="F#" Value="static member FindIndexSorted : 'T[] * int * int * Func&lt;'T, 'Value, bool&gt; * 'Value -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FindIndexSorted (input, min, lim, func, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="T[]" RefType="this" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="lim" Type="System.Int32" />
        <Parameter Name="func" Type="System.Func&lt;T,TValue,System.Boolean&gt;" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="input">To be added.</param>
        <param name="min">To be added.</param>
        <param name="lim">To be added.</param>
        <param name="func">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Finds the unique index for which func(input[i], value) == false whenever i &lt; index and
            func(input[i], value) == true whenever i &gt;= index.
            Callers should guarantee that there is such an index. Uses binary search.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FpCur">
      <MemberSignature Language="C#" Value="public static long FpCur (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 FpCur(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FpCur(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FpCur (reader As BinaryReader) As Long" />
      <MemberSignature Language="F#" Value="static member FpCur : System.IO.BinaryReader -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FpCur reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FpCur">
      <MemberSignature Language="C#" Value="public static long FpCur (this System.IO.BinaryWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 FpCur(class System.IO.BinaryWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.FpCur(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FpCur (writer As BinaryWriter) As Long" />
      <MemberSignature Language="F#" Value="static member FpCur : System.IO.BinaryWriter -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.FpCur writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCardinality">
      <MemberSignature Language="C#" Value="public static int GetCardinality (System.Collections.BitArray bitArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetCardinality(class System.Collections.BitArray bitArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.GetCardinality(System.Collections.BitArray)" />
      <MemberSignature Language="F#" Value="static member GetCardinality : System.Collections.BitArray -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.GetCardinality bitArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitArray" Type="System.Collections.BitArray" />
      </Parameters>
      <Docs>
        <param name="bitArray">To be added.</param>
        <summary>
            Returns the number of set bits in a bit array.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDescription">
      <MemberSignature Language="C#" Value="public static string GetDescription (this Enum value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDescription(class System.Enum value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.GetDescription(System.Enum)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDescription (value As Enum) As String" />
      <MemberSignature Language="F#" Value="static member GetDescription : Enum -&gt; string" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.GetDescription value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Enum" RefType="this" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHi">
      <MemberSignature Language="C#" Value="public static uint GetHi (ulong uu);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 GetHi(unsigned int64 uu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.GetHi(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHi (uu As ULong) As UInteger" />
      <MemberSignature Language="F#" Value="static member GetHi : uint64 -&gt; uint32" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.GetHi uu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uu" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="uu">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIdentityPermutation">
      <MemberSignature Language="C#" Value="public static int[] GetIdentityPermutation (int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] GetIdentityPermutation(int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.GetIdentityPermutation(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIdentityPermutation (size As Integer) As Integer()" />
      <MemberSignature Language="F#" Value="static member GetIdentityPermutation : int -&gt; int[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.GetIdentityPermutation size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLo">
      <MemberSignature Language="C#" Value="public static uint GetLo (ulong uu);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 GetLo(unsigned int64 uu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.GetLo(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLo (uu As ULong) As UInteger" />
      <MemberSignature Language="F#" Value="static member GetLo : uint64 -&gt; uint32" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.GetLo uu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uu" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="uu">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRandomPermutation">
      <MemberSignature Language="C#" Value="public static int[] GetRandomPermutation (Microsoft.ML.Runtime.IRandom rand, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] GetRandomPermutation(class Microsoft.ML.Runtime.IRandom rand, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.GetRandomPermutation(Microsoft.ML.Runtime.IRandom,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRandomPermutation (rand As IRandom, size As Integer) As Integer()" />
      <MemberSignature Language="F#" Value="static member GetRandomPermutation : Microsoft.ML.Runtime.IRandom * int -&gt; int[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.GetRandomPermutation (rand, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rand" Type="Microsoft.ML.Runtime.IRandom" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rand">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRandomPermutation">
      <MemberSignature Language="C#" Value="public static int[] GetRandomPermutation (Random rand, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] GetRandomPermutation(class System.Random rand, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.GetRandomPermutation(System.Random,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRandomPermutation (rand As Random, size As Integer) As Integer()" />
      <MemberSignature Language="F#" Value="static member GetRandomPermutation : Random * int -&gt; int[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.GetRandomPermutation (rand, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rand" Type="System.Random" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rand">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IbitHigh">
      <MemberSignature Language="C#" Value="public static int IbitHigh (uint u);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IbitHigh(unsigned int32 u) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.IbitHigh(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IbitHigh (u As UInteger) As Integer" />
      <MemberSignature Language="F#" Value="static member IbitHigh : uint32 -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.IbitHigh u" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedAdd">
      <MemberSignature Language="C#" Value="public static void InterlockedAdd (ref double target, double v);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InterlockedAdd(float64&amp; target, float64 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.InterlockedAdd(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InterlockedAdd (ByRef target As Double, v As Double)" />
      <MemberSignature Language="F#" Value="static member InterlockedAdd :  * double -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.InterlockedAdd (target, v)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Double" RefType="ref" />
        <Parameter Name="v" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="v">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvertPermutation">
      <MemberSignature Language="C#" Value="public static int[] InvertPermutation (int[] perm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] InvertPermutation(int32[] perm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.InvertPermutation(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvertPermutation (perm As Integer()) As Integer()" />
      <MemberSignature Language="F#" Value="static member InvertPermutation : int[] -&gt; int[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.InvertPermutation perm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="perm" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="perm">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIncreasing">
      <MemberSignature Language="C#" Value="public static bool IsIncreasing (int min, int[] values, int lim);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIncreasing(int32 min, int32[] values, int32 lim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.IsIncreasing(System.Int32,System.Int32[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIncreasing (min As Integer, values As Integer(), lim As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsIncreasing : int * int[] * int -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.IsIncreasing (min, values, lim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="values" Type="System.Int32[]" />
        <Parameter Name="lim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="min">To be added.</param>
        <param name="values">To be added.</param>
        <param name="lim">To be added.</param>
        <summary>
            Returns whether an input integer vector is sorted and unique,
            and between an inclusive lower and exclusive upper bound for
            the first and last items, respectively.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIncreasing">
      <MemberSignature Language="C#" Value="public static bool IsIncreasing (int min, int[] values, int len, int lim);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIncreasing(int32 min, int32[] values, int32 len, int32 lim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.IsIncreasing(System.Int32,System.Int32[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIncreasing (min As Integer, values As Integer(), len As Integer, lim As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsIncreasing : int * int[] * int * int -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.IsIncreasing (min, values, len, lim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="values" Type="System.Int32[]" />
        <Parameter Name="len" Type="System.Int32" />
        <Parameter Name="lim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="min">To be added.</param>
        <param name="values">To be added.</param>
        <param name="len">To be added.</param>
        <param name="lim">To be added.</param>
        <summary>
            Returns whether an input integer vector up to <paramref name="len" />
            is sorted and unique, and between an inclusive lower and exclusive
            upper bound for the first and last items, respectively.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPowerOfTwo">
      <MemberSignature Language="C#" Value="public static bool IsPowerOfTwo (int x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPowerOfTwo(int32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.IsPowerOfTwo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPowerOfTwo (x As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPowerOfTwo : int -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.IsPowerOfTwo x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPowerOfTwo">
      <MemberSignature Language="C#" Value="public static bool IsPowerOfTwo (long x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPowerOfTwo(int64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.IsPowerOfTwo(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPowerOfTwo (x As Long) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPowerOfTwo : int64 -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.IsPowerOfTwo x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPowerOfTwo">
      <MemberSignature Language="C#" Value="public static bool IsPowerOfTwo (uint x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPowerOfTwo(unsigned int32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.IsPowerOfTwo(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPowerOfTwo (x As UInteger) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPowerOfTwo : uint32 -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.IsPowerOfTwo x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPowerOfTwo">
      <MemberSignature Language="C#" Value="public static bool IsPowerOfTwo (ulong x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPowerOfTwo(unsigned int64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.IsPowerOfTwo(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPowerOfTwo (x As ULong) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPowerOfTwo : uint64 -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.IsPowerOfTwo x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSorted">
      <MemberSignature Language="C#" Value="public static bool IsSorted (int[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSorted(int32[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.IsSorted(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSorted (values As Integer()) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsSorted : int[] -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.IsSorted values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSorted">
      <MemberSignature Language="C#" Value="public static bool IsSorted (float[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSorted(float32[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.IsSorted(System.Single[])" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSorted (values As Single()) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsSorted : single[] -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.IsSorted values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Leb128IntLength">
      <MemberSignature Language="C#" Value="public static int Leb128IntLength (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Leb128IntLength(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Leb128IntLength(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Leb128IntLength (value As ULong) As Integer" />
      <MemberSignature Language="F#" Value="static member Leb128IntLength : uint64 -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Leb128IntLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            The number of bytes that would be written if one were to attempt to write
            the value in LEB128.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeUlong">
      <MemberSignature Language="C#" Value="public static ulong MakeUlong (uint uHi, uint uLo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 MakeUlong(unsigned int32 uHi, unsigned int32 uLo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MakeUlong(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function MakeUlong (uHi As UInteger, uLo As UInteger) As ULong" />
      <MemberSignature Language="F#" Value="static member MakeUlong : uint32 * uint32 -&gt; uint64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MakeUlong (uHi, uLo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uHi" Type="System.UInt32" />
        <Parameter Name="uLo" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="uHi">To be added.</param>
        <param name="uLo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalActionInvoke">
      <MemberSignature Language="C#" Value="public static void MarshalActionInvoke (Action act, Type genArg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarshalActionInvoke(class System.Action act, class System.Type genArg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke(System.Action,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MarshalActionInvoke (act As Action, genArg As Type)" />
      <MemberSignature Language="F#" Value="static member MarshalActionInvoke : Action * Type -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke (act, genArg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="act" Type="System.Action" />
        <Parameter Name="genArg" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="act">A delegate that should be a generic method with a single type parameter.
            The generic method definition will be extracted, then a new method will be created with the
            given type parameter, then the method will be invoked.</param>
        <param name="genArg">The new type parameter for the generic method</param>
        <summary>
            This is akin to <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)" />, except applied to
            <see cref="T:System.Action" /> instead of <see cref="T:System.Func`1" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalActionInvoke&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public static void MarshalActionInvoke&lt;TArg1&gt; (Action&lt;TArg1&gt; act, Type genArg, TArg1 arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarshalActionInvoke&lt;TArg1&gt;(class System.Action`1&lt;!!TArg1&gt; act, class System.Type genArg, !!TArg1 arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke``1(System.Action{``0},System.Type,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MarshalActionInvoke(Of TArg1) (act As Action(Of TArg1), genArg As Type, arg1 As TArg1)" />
      <MemberSignature Language="F#" Value="static member MarshalActionInvoke : Action&lt;'TArg1&gt; * Type * 'TArg1 -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke (act, genArg, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="act" Type="System.Action&lt;TArg1&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <param name="act">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <summary>
            A one-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke(System.Action,System.Type)" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalActionInvoke&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public static void MarshalActionInvoke&lt;TArg1,TArg2&gt; (Action&lt;TArg1,TArg2&gt; act, Type genArg, TArg1 arg1, TArg2 arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarshalActionInvoke&lt;TArg1, TArg2&gt;(class System.Action`2&lt;!!TArg1, !!TArg2&gt; act, class System.Type genArg, !!TArg1 arg1, !!TArg2 arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke``2(System.Action{``0,``1},System.Type,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MarshalActionInvoke(Of TArg1, TArg2) (act As Action(Of TArg1, TArg2), genArg As Type, arg1 As TArg1, arg2 As TArg2)" />
      <MemberSignature Language="F#" Value="static member MarshalActionInvoke : Action&lt;'TArg1, 'TArg2&gt; * Type * 'TArg1 * 'TArg2 -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke (act, genArg, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="act" Type="System.Action&lt;TArg1,TArg2&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <param name="act">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <param name="arg2">To be added.</param>
        <summary>
            A two-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke(System.Action,System.Type)" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalActionInvoke&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public static void MarshalActionInvoke&lt;TArg1,TArg2,TArg3&gt; (Action&lt;TArg1,TArg2,TArg3&gt; act, Type genArg, TArg1 arg1, TArg2 arg2, TArg3 arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarshalActionInvoke&lt;TArg1, TArg2, TArg3&gt;(class System.Action`3&lt;!!TArg1, !!TArg2, !!TArg3&gt; act, class System.Type genArg, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke``3(System.Action{``0,``1,``2},System.Type,``0,``1,``2)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MarshalActionInvoke(Of TArg1, TArg2, TArg3) (act As Action(Of TArg1, TArg2, TArg3), genArg As Type, arg1 As TArg1, arg2 As TArg2, arg3 As TArg3)" />
      <MemberSignature Language="F#" Value="static member MarshalActionInvoke : Action&lt;'TArg1, 'TArg2, 'TArg3&gt; * Type * 'TArg1 * 'TArg2 * 'TArg3 -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke (act, genArg, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="act" Type="System.Action&lt;TArg1,TArg2,TArg3&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <typeparam name="TArg3">To be added.</typeparam>
        <param name="act">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <param name="arg2">To be added.</param>
        <param name="arg3">To be added.</param>
        <summary>
            A three-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalActionInvoke(System.Action,System.Type)" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalInvoke&lt;TRet&gt;">
      <MemberSignature Language="C#" Value="public static TRet MarshalInvoke&lt;TRet&gt; (Func&lt;TRet&gt; func, Type genArg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRet MarshalInvoke&lt;TRet&gt;(class System.Func`1&lt;!!TRet&gt; func, class System.Type genArg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalInvoke(Of TRet) (func As Func(Of TRet), genArg As Type) As TRet" />
      <MemberSignature Language="F#" Value="static member MarshalInvoke : Func&lt;'Ret&gt; * Type -&gt; 'Ret" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke (func, genArg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRet</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRet" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;TRet&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
      </Parameters>
      <Docs>
        <typeparam name="TRet">The return value</typeparam>
        <param name="func">A delegate that should be a generic method with a single type parameter.
             The generic method definition will be extracted, then a new method will be created with the
             given type parameter, then the method will be invoked.</param>
        <param name="genArg">The new type parameter for the generic method</param>
        <summary>
             Given a generic method with a single type parameter, re-create the generic method on a new type,
             then reinvoke the method and return the result. A common pattern throughout the code base is to
             have some sort of generic method, whose parameters and return value are, as defined, non-generic,
             but whose code depends on some sort of generic type parameter. This utility method exists to make
             this common pattern more convenient, and also safer so that the arguments, if any, can be type
             checked at compile time instead of at runtime.
            
             Because it is strongly typed, this can only be applied to methods whose return type
             is known at compile time, that is, that do not depend on the type parameter of the method itself.
             </summary>
        <returns>The return value of the invoked function</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalInvoke&lt;TArg1,TRet&gt;">
      <MemberSignature Language="C#" Value="public static TRet MarshalInvoke&lt;TArg1,TRet&gt; (Func&lt;TArg1,TRet&gt; func, Type genArg, TArg1 arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRet MarshalInvoke&lt;TArg1, TRet&gt;(class System.Func`2&lt;!!TArg1, !!TRet&gt; func, class System.Type genArg, !!TArg1 arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``2(System.Func{``0,``1},System.Type,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalInvoke(Of TArg1, TRet) (func As Func(Of TArg1, TRet), genArg As Type, arg1 As TArg1) As TRet" />
      <MemberSignature Language="F#" Value="static member MarshalInvoke : Func&lt;'TArg1, 'Ret&gt; * Type * 'TArg1 -&gt; 'Ret" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke (func, genArg, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRet</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TRet" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;TArg1,TRet&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TRet">To be added.</typeparam>
        <param name="func">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <summary>
            A one-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalInvoke&lt;TArg1,TArg2,TRet&gt;">
      <MemberSignature Language="C#" Value="public static TRet MarshalInvoke&lt;TArg1,TArg2,TRet&gt; (Func&lt;TArg1,TArg2,TRet&gt; func, Type genArg, TArg1 arg1, TArg2 arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRet MarshalInvoke&lt;TArg1, TArg2, TRet&gt;(class System.Func`3&lt;!!TArg1, !!TArg2, !!TRet&gt; func, class System.Type genArg, !!TArg1 arg1, !!TArg2 arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``3(System.Func{``0,``1,``2},System.Type,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalInvoke(Of TArg1, TArg2, TRet) (func As Func(Of TArg1, TArg2, TRet), genArg As Type, arg1 As TArg1, arg2 As TArg2) As TRet" />
      <MemberSignature Language="F#" Value="static member MarshalInvoke : Func&lt;'TArg1, 'TArg2, 'Ret&gt; * Type * 'TArg1 * 'TArg2 -&gt; 'Ret" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke (func, genArg, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRet</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TRet" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;TArg1,TArg2,TRet&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <typeparam name="TRet">To be added.</typeparam>
        <param name="func">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <param name="arg2">To be added.</param>
        <summary>
            A two-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalInvoke&lt;TArg1,TArg2,TArg3,TRet&gt;">
      <MemberSignature Language="C#" Value="public static TRet MarshalInvoke&lt;TArg1,TArg2,TArg3,TRet&gt; (Func&lt;TArg1,TArg2,TArg3,TRet&gt; func, Type genArg, TArg1 arg1, TArg2 arg2, TArg3 arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRet MarshalInvoke&lt;TArg1, TArg2, TArg3, TRet&gt;(class System.Func`4&lt;!!TArg1, !!TArg2, !!TArg3, !!TRet&gt; func, class System.Type genArg, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``4(System.Func{``0,``1,``2,``3},System.Type,``0,``1,``2)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalInvoke(Of TArg1, TArg2, TArg3, TRet) (func As Func(Of TArg1, TArg2, TArg3, TRet), genArg As Type, arg1 As TArg1, arg2 As TArg2, arg3 As TArg3) As TRet" />
      <MemberSignature Language="F#" Value="static member MarshalInvoke : Func&lt;'TArg1, 'TArg2, 'TArg3, 'Ret&gt; * Type * 'TArg1 * 'TArg2 * 'TArg3 -&gt; 'Ret" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke (func, genArg, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRet</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TRet" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;TArg1,TArg2,TArg3,TRet&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <typeparam name="TArg3">To be added.</typeparam>
        <typeparam name="TRet">To be added.</typeparam>
        <param name="func">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <param name="arg2">To be added.</param>
        <param name="arg3">To be added.</param>
        <summary>
            A three-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TRet&gt;">
      <MemberSignature Language="C#" Value="public static TRet MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TRet&gt; (Func&lt;TArg1,TArg2,TArg3,TArg4,TRet&gt; func, Type genArg, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRet MarshalInvoke&lt;TArg1, TArg2, TArg3, TArg4, TRet&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, !!TArg3, !!TArg4, !!TRet&gt; func, class System.Type genArg, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, !!TArg4 arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``5(System.Func{``0,``1,``2,``3,``4},System.Type,``0,``1,``2,``3)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalInvoke(Of TArg1, TArg2, TArg3, TArg4, TRet) (func As Func(Of TArg1, TArg2, TArg3, TArg4, TRet), genArg As Type, arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, arg4 As TArg4) As TRet" />
      <MemberSignature Language="F#" Value="static member MarshalInvoke : Func&lt;'TArg1, 'TArg2, 'TArg3, 'TArg4, 'Ret&gt; * Type * 'TArg1 * 'TArg2 * 'TArg3 * 'TArg4 -&gt; 'Ret" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke (func, genArg, arg1, arg2, arg3, arg4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRet</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TArg4" />
        <TypeParameter Name="TRet" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;TArg1,TArg2,TArg3,TArg4,TRet&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="arg4" Type="TArg4" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <typeparam name="TArg3">To be added.</typeparam>
        <typeparam name="TArg4">To be added.</typeparam>
        <typeparam name="TRet">To be added.</typeparam>
        <param name="func">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <param name="arg2">To be added.</param>
        <param name="arg3">To be added.</param>
        <param name="arg4">To be added.</param>
        <summary>
            A four-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TRet&gt;">
      <MemberSignature Language="C#" Value="public static TRet MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TRet&gt; (Func&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TRet&gt; func, Type genArg, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRet MarshalInvoke&lt;TArg1, TArg2, TArg3, TArg4, TArg5, TRet&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, !!TArg4, !!TArg5, !!TRet&gt; func, class System.Type genArg, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, !!TArg4 arg4, !!TArg5 arg5) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``6(System.Func{``0,``1,``2,``3,``4,``5},System.Type,``0,``1,``2,``3,``4)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalInvoke(Of TArg1, TArg2, TArg3, TArg4, TArg5, TRet) (func As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TRet), genArg As Type, arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, arg4 As TArg4, arg5 As TArg5) As TRet" />
      <MemberSignature Language="F#" Value="static member MarshalInvoke : Func&lt;'TArg1, 'TArg2, 'TArg3, 'TArg4, 'TArg5, 'Ret&gt; * Type * 'TArg1 * 'TArg2 * 'TArg3 * 'TArg4 * 'TArg5 -&gt; 'Ret" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke (func, genArg, arg1, arg2, arg3, arg4, arg5)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRet</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TArg4" />
        <TypeParameter Name="TArg5" />
        <TypeParameter Name="TRet" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TRet&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="arg4" Type="TArg4" />
        <Parameter Name="arg5" Type="TArg5" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <typeparam name="TArg3">To be added.</typeparam>
        <typeparam name="TArg4">To be added.</typeparam>
        <typeparam name="TArg5">To be added.</typeparam>
        <typeparam name="TRet">To be added.</typeparam>
        <param name="func">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <param name="arg2">To be added.</param>
        <param name="arg3">To be added.</param>
        <param name="arg4">To be added.</param>
        <param name="arg5">To be added.</param>
        <summary>
            A five-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TRet&gt;">
      <MemberSignature Language="C#" Value="public static TRet MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TRet&gt; (Func&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TRet&gt; func, Type genArg, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRet MarshalInvoke&lt;TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TRet&gt;(class System.Func`7&lt;!!TArg1, !!TArg2, !!TArg3, !!TArg4, !!TArg5, !!TArg6, !!TRet&gt; func, class System.Type genArg, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, !!TArg4 arg4, !!TArg5 arg5, !!TArg6 arg6) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Type,``0,``1,``2,``3,``4,``5)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalInvoke(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TRet) (func As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TRet), genArg As Type, arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, arg4 As TArg4, arg5 As TArg5, arg6 As TArg6) As TRet" />
      <MemberSignature Language="F#" Value="static member MarshalInvoke : Func&lt;'TArg1, 'TArg2, 'TArg3, 'TArg4, 'TArg5, 'TArg6, 'Ret&gt; * Type * 'TArg1 * 'TArg2 * 'TArg3 * 'TArg4 * 'TArg5 * 'TArg6 -&gt; 'Ret" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke (func, genArg, arg1, arg2, arg3, arg4, arg5, arg6)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRet</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TArg4" />
        <TypeParameter Name="TArg5" />
        <TypeParameter Name="TArg6" />
        <TypeParameter Name="TRet" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TRet&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="arg4" Type="TArg4" />
        <Parameter Name="arg5" Type="TArg5" />
        <Parameter Name="arg6" Type="TArg6" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <typeparam name="TArg3">To be added.</typeparam>
        <typeparam name="TArg4">To be added.</typeparam>
        <typeparam name="TArg5">To be added.</typeparam>
        <typeparam name="TArg6">To be added.</typeparam>
        <typeparam name="TRet">To be added.</typeparam>
        <param name="func">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <param name="arg2">To be added.</param>
        <param name="arg3">To be added.</param>
        <param name="arg4">To be added.</param>
        <param name="arg5">To be added.</param>
        <param name="arg6">To be added.</param>
        <summary>
            A six-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TRet&gt;">
      <MemberSignature Language="C#" Value="public static TRet MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TRet&gt; (Func&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TRet&gt; func, Type genArg, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRet MarshalInvoke&lt;TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TRet&gt;(class System.Func`8&lt;!!TArg1, !!TArg2, !!TArg3, !!TArg4, !!TArg5, !!TArg6, !!TArg7, !!TRet&gt; func, class System.Type genArg, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, !!TArg4 arg4, !!TArg5 arg5, !!TArg6 arg6, !!TArg7 arg7) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Type,``0,``1,``2,``3,``4,``5,``6)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalInvoke(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TRet) (func As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TRet), genArg As Type, arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, arg4 As TArg4, arg5 As TArg5, arg6 As TArg6, arg7 As TArg7) As TRet" />
      <MemberSignature Language="F#" Value="static member MarshalInvoke : Func&lt;'TArg1, 'TArg2, 'TArg3, 'TArg4, 'TArg5, 'TArg6, 'TArg7, 'Ret&gt; * Type * 'TArg1 * 'TArg2 * 'TArg3 * 'TArg4 * 'TArg5 * 'TArg6 * 'TArg7 -&gt; 'Ret" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke (func, genArg, arg1, arg2, arg3, arg4, arg5, arg6, arg7)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRet</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TArg4" />
        <TypeParameter Name="TArg5" />
        <TypeParameter Name="TArg6" />
        <TypeParameter Name="TArg7" />
        <TypeParameter Name="TRet" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TRet&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="arg4" Type="TArg4" />
        <Parameter Name="arg5" Type="TArg5" />
        <Parameter Name="arg6" Type="TArg6" />
        <Parameter Name="arg7" Type="TArg7" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <typeparam name="TArg3">To be added.</typeparam>
        <typeparam name="TArg4">To be added.</typeparam>
        <typeparam name="TArg5">To be added.</typeparam>
        <typeparam name="TArg6">To be added.</typeparam>
        <typeparam name="TArg7">To be added.</typeparam>
        <typeparam name="TRet">To be added.</typeparam>
        <param name="func">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <param name="arg2">To be added.</param>
        <param name="arg3">To be added.</param>
        <param name="arg4">To be added.</param>
        <param name="arg5">To be added.</param>
        <param name="arg6">To be added.</param>
        <param name="arg7">To be added.</param>
        <summary>
            A seven-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TArg8,TRet&gt;">
      <MemberSignature Language="C#" Value="public static TRet MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TArg8,TRet&gt; (Func&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TArg8,TRet&gt; func, Type genArg, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRet MarshalInvoke&lt;TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TRet&gt;(class System.Func`9&lt;!!TArg1, !!TArg2, !!TArg3, !!TArg4, !!TArg5, !!TArg6, !!TArg7, !!TArg8, !!TRet&gt; func, class System.Type genArg, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, !!TArg4 arg4, !!TArg5 arg5, !!TArg6 arg6, !!TArg7 arg7, !!TArg8 arg8) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Type,``0,``1,``2,``3,``4,``5,``6,``7)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalInvoke(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TRet) (func As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TRet), genArg As Type, arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, arg4 As TArg4, arg5 As TArg5, arg6 As TArg6, arg7 As TArg7, arg8 As TArg8) As TRet" />
      <MemberSignature Language="F#" Value="static member MarshalInvoke : Func&lt;'TArg1, 'TArg2, 'TArg3, 'TArg4, 'TArg5, 'TArg6, 'TArg7, 'TArg8, 'Ret&gt; * Type * 'TArg1 * 'TArg2 * 'TArg3 * 'TArg4 * 'TArg5 * 'TArg6 * 'TArg7 * 'TArg8 -&gt; 'Ret" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke (func, genArg, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRet</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TArg4" />
        <TypeParameter Name="TArg5" />
        <TypeParameter Name="TArg6" />
        <TypeParameter Name="TArg7" />
        <TypeParameter Name="TArg8" />
        <TypeParameter Name="TRet" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TArg8,TRet&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="arg4" Type="TArg4" />
        <Parameter Name="arg5" Type="TArg5" />
        <Parameter Name="arg6" Type="TArg6" />
        <Parameter Name="arg7" Type="TArg7" />
        <Parameter Name="arg8" Type="TArg8" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <typeparam name="TArg3">To be added.</typeparam>
        <typeparam name="TArg4">To be added.</typeparam>
        <typeparam name="TArg5">To be added.</typeparam>
        <typeparam name="TArg6">To be added.</typeparam>
        <typeparam name="TArg7">To be added.</typeparam>
        <typeparam name="TArg8">To be added.</typeparam>
        <typeparam name="TRet">To be added.</typeparam>
        <param name="func">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <param name="arg2">To be added.</param>
        <param name="arg3">To be added.</param>
        <param name="arg4">To be added.</param>
        <param name="arg5">To be added.</param>
        <param name="arg6">To be added.</param>
        <param name="arg7">To be added.</param>
        <param name="arg8">To be added.</param>
        <summary>
            An eight-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TArg8,TArg9,TRet&gt;">
      <MemberSignature Language="C#" Value="public static TRet MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TArg8,TArg9,TRet&gt; (Func&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TArg8,TArg9,TRet&gt; func, Type genArg, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRet MarshalInvoke&lt;TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TRet&gt;(class System.Func`10&lt;!!TArg1, !!TArg2, !!TArg3, !!TArg4, !!TArg5, !!TArg6, !!TArg7, !!TArg8, !!TArg9, !!TRet&gt; func, class System.Type genArg, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, !!TArg4 arg4, !!TArg5 arg5, !!TArg6 arg6, !!TArg7 arg7, !!TArg8 arg8, !!TArg9 arg9) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Type,``0,``1,``2,``3,``4,``5,``6,``7,``8)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalInvoke(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TRet) (func As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TRet), genArg As Type, arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, arg4 As TArg4, arg5 As TArg5, arg6 As TArg6, arg7 As TArg7, arg8 As TArg8, arg9 As TArg9) As TRet" />
      <MemberSignature Language="F#" Value="static member MarshalInvoke : Func&lt;'TArg1, 'TArg2, 'TArg3, 'TArg4, 'TArg5, 'TArg6, 'TArg7, 'TArg8, 'TArg9, 'Ret&gt; * Type * 'TArg1 * 'TArg2 * 'TArg3 * 'TArg4 * 'TArg5 * 'TArg6 * 'TArg7 * 'TArg8 * 'TArg9 -&gt; 'Ret" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke (func, genArg, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRet</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TArg4" />
        <TypeParameter Name="TArg5" />
        <TypeParameter Name="TArg6" />
        <TypeParameter Name="TArg7" />
        <TypeParameter Name="TArg8" />
        <TypeParameter Name="TArg9" />
        <TypeParameter Name="TRet" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TArg8,TArg9,TRet&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="arg4" Type="TArg4" />
        <Parameter Name="arg5" Type="TArg5" />
        <Parameter Name="arg6" Type="TArg6" />
        <Parameter Name="arg7" Type="TArg7" />
        <Parameter Name="arg8" Type="TArg8" />
        <Parameter Name="arg9" Type="TArg9" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <typeparam name="TArg3">To be added.</typeparam>
        <typeparam name="TArg4">To be added.</typeparam>
        <typeparam name="TArg5">To be added.</typeparam>
        <typeparam name="TArg6">To be added.</typeparam>
        <typeparam name="TArg7">To be added.</typeparam>
        <typeparam name="TArg8">To be added.</typeparam>
        <typeparam name="TArg9">To be added.</typeparam>
        <typeparam name="TRet">To be added.</typeparam>
        <param name="func">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <param name="arg2">To be added.</param>
        <param name="arg3">To be added.</param>
        <param name="arg4">To be added.</param>
        <param name="arg5">To be added.</param>
        <param name="arg6">To be added.</param>
        <param name="arg7">To be added.</param>
        <param name="arg8">To be added.</param>
        <param name="arg9">To be added.</param>
        <summary>
            A nine-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TArg8,TArg9,TArg10,TRet&gt;">
      <MemberSignature Language="C#" Value="public static TRet MarshalInvoke&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TArg8,TArg9,TArg10,TRet&gt; (Func&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TArg8,TArg9,TArg10,TRet&gt; func, Type genArg, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRet MarshalInvoke&lt;TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TRet&gt;(class System.Func`11&lt;!!TArg1, !!TArg2, !!TArg3, !!TArg4, !!TArg5, !!TArg6, !!TArg7, !!TArg8, !!TArg9, !!TArg10, !!TRet&gt; func, class System.Type genArg, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, !!TArg4 arg4, !!TArg5 arg5, !!TArg6 arg6, !!TArg7 arg7, !!TArg8 arg8, !!TArg9 arg9, !!TArg10 arg10) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Type,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalInvoke(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TRet) (func As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TRet), genArg As Type, arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, arg4 As TArg4, arg5 As TArg5, arg6 As TArg6, arg7 As TArg7, arg8 As TArg8, arg9 As TArg9, arg10 As TArg10) As TRet" />
      <MemberSignature Language="F#" Value="static member MarshalInvoke : Func&lt;'TArg1, 'TArg2, 'TArg3, 'TArg4, 'TArg5, 'TArg6, 'TArg7, 'TArg8, 'TArg9, 'TArg10, 'Ret&gt; * Type * 'TArg1 * 'TArg2 * 'TArg3 * 'TArg4 * 'TArg5 * 'TArg6 * 'TArg7 * 'TArg8 * 'TArg9 * 'TArg10 -&gt; 'Ret" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke (func, genArg, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRet</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TArg4" />
        <TypeParameter Name="TArg5" />
        <TypeParameter Name="TArg6" />
        <TypeParameter Name="TArg7" />
        <TypeParameter Name="TArg8" />
        <TypeParameter Name="TArg9" />
        <TypeParameter Name="TArg10" />
        <TypeParameter Name="TRet" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;TArg1,TArg2,TArg3,TArg4,TArg5,TArg6,TArg7,TArg8,TArg9,TArg10,TRet&gt;" />
        <Parameter Name="genArg" Type="System.Type" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="arg4" Type="TArg4" />
        <Parameter Name="arg5" Type="TArg5" />
        <Parameter Name="arg6" Type="TArg6" />
        <Parameter Name="arg7" Type="TArg7" />
        <Parameter Name="arg8" Type="TArg8" />
        <Parameter Name="arg9" Type="TArg9" />
        <Parameter Name="arg10" Type="TArg10" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">To be added.</typeparam>
        <typeparam name="TArg2">To be added.</typeparam>
        <typeparam name="TArg3">To be added.</typeparam>
        <typeparam name="TArg4">To be added.</typeparam>
        <typeparam name="TArg5">To be added.</typeparam>
        <typeparam name="TArg6">To be added.</typeparam>
        <typeparam name="TArg7">To be added.</typeparam>
        <typeparam name="TArg8">To be added.</typeparam>
        <typeparam name="TArg9">To be added.</typeparam>
        <typeparam name="TArg10">To be added.</typeparam>
        <typeparam name="TRet">To be added.</typeparam>
        <param name="func">To be added.</param>
        <param name="genArg">To be added.</param>
        <param name="arg1">To be added.</param>
        <param name="arg2">To be added.</param>
        <param name="arg3">To be added.</param>
        <param name="arg4">To be added.</param>
        <param name="arg5">To be added.</param>
        <param name="arg6">To be added.</param>
        <param name="arg7">To be added.</param>
        <param name="arg8">To be added.</param>
        <param name="arg9">To be added.</param>
        <param name="arg10">To be added.</param>
        <summary>
            A ten-argument version of <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.MarshalInvoke``1(System.Func{``0},System.Type)" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenWriter">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter OpenWriter (System.IO.Stream stream, System.Text.Encoding encoding = null, int bufferSize = 1024, bool leaveOpen = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter OpenWriter(class System.IO.Stream stream, class System.Text.Encoding encoding, int32 bufferSize, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.OpenWriter(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member OpenWriter : System.IO.Stream * System.Text.Encoding * int * bool -&gt; System.IO.StreamWriter" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.OpenWriter (stream, encoding, bufferSize, leaveOpen)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="bufferSize">To be added.</param>
        <param name="leaveOpen">To be added.</param>
        <summary>
            A convenience method to open a stream writer, by default with no-BOM UTF-8 encoding,
            buffer size of 1K, and the stream left open.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Push&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Push&lt;T&gt; (ref System.Collections.Generic.Stack&lt;T&gt; stack, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Push&lt;T&gt;(class System.Collections.Generic.Stack`1&lt;!!T&gt;&amp; stack, !!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Push``1(System.Collections.Generic.Stack{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push(Of T) (ByRef stack As Stack(Of T), item As T)" />
      <MemberSignature Language="F#" Value="static member Push :  * 'T -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Push (stack, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="stack" Type="System.Collections.Generic.Stack&lt;T&gt;" RefType="ref" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="stack">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadBitArray">
      <MemberSignature Language="C#" Value="public static System.Collections.BitArray ReadBitArray (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.BitArray ReadBitArray(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBitArray(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadBitArray (reader As BinaryReader) As BitArray" />
      <MemberSignature Language="F#" Value="static member ReadBitArray : System.IO.BinaryReader -&gt; System.Collections.BitArray" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBitArray reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.BitArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadBlock">
      <MemberSignature Language="C#" Value="public static void ReadBlock (this System.IO.Stream s, byte[] buff, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReadBlock(class System.IO.Stream s, unsigned int8[] buff, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBlock(System.IO.Stream,System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ReadBlock (s As Stream, buff As Byte(), offset As Integer, length As Integer)" />
      <MemberSignature Language="F#" Value="static member ReadBlock : System.IO.Stream * byte[] * int * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBlock (s, buff, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IO.Stream" RefType="this" />
        <Parameter Name="buff" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The stream</param>
        <param name="buff">The buffer into which to write the data.</param>
        <param name="offset">The offset of the output array into which to write.</param>
        <param name="length">The number of bytes to read.</param>
        <summary>
            If this return it will read exactly length bytes, and unlike the
            regular read method fails if it cannot.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadBoolArray">
      <MemberSignature Language="C#" Value="public static bool[] ReadBoolArray (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool[] ReadBoolArray(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBoolArray(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadBoolArray (reader As BinaryReader) As Boolean()" />
      <MemberSignature Language="F#" Value="static member ReadBoolArray : System.IO.BinaryReader -&gt; bool[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBoolArray reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadBoolArray">
      <MemberSignature Language="C#" Value="public static bool[] ReadBoolArray (this System.IO.BinaryReader reader, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool[] ReadBoolArray(class System.IO.BinaryReader reader, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBoolArray(System.IO.BinaryReader,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadBoolArray (reader As BinaryReader, size As Integer) As Boolean()" />
      <MemberSignature Language="F#" Value="static member ReadBoolArray : System.IO.BinaryReader * int -&gt; bool[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBoolArray (reader, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadBoolByte">
      <MemberSignature Language="C#" Value="public static bool ReadBoolByte (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ReadBoolByte(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBoolByte(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadBoolByte (reader As BinaryReader) As Boolean" />
      <MemberSignature Language="F#" Value="static member ReadBoolByte : System.IO.BinaryReader -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBoolByte reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadByteArray">
      <MemberSignature Language="C#" Value="public static byte[] ReadByteArray (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ReadByteArray(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadByteArray(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadByteArray (reader As BinaryReader) As Byte()" />
      <MemberSignature Language="F#" Value="static member ReadByteArray : System.IO.BinaryReader -&gt; byte[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadByteArray reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadByteArray">
      <MemberSignature Language="C#" Value="public static byte[] ReadByteArray (this System.IO.BinaryReader reader, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ReadByteArray(class System.IO.BinaryReader reader, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadByteArray(System.IO.BinaryReader,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadByteArray (reader As BinaryReader, size As Integer) As Byte()" />
      <MemberSignature Language="F#" Value="static member ReadByteArray : System.IO.BinaryReader * int -&gt; byte[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadByteArray (reader, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadBytes">
      <MemberSignature Language="C#" Value="public static void ReadBytes (this System.IO.BinaryReader reader, void* destination, long destinationSizeInBytes, long bytesToRead);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReadBytes(class System.IO.BinaryReader reader, void* destination, int64 destinationSizeInBytes, int64 bytesToRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBytes(System.IO.BinaryReader,System.Void*,System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="static member ReadBytes : System.IO.BinaryReader * nativeptr&lt;unit&gt; * int64 * int64 -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBytes (reader, destination, destinationSizeInBytes, bytesToRead)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="destinationSizeInBytes" Type="System.Int64" />
        <Parameter Name="bytesToRead" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="destinationSizeInBytes">To be added.</param>
        <param name="bytesToRead">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadBytes">
      <MemberSignature Language="C#" Value="public static void ReadBytes (this System.IO.BinaryReader reader, void* destination, long destinationSizeInBytes, long bytesToRead, ref byte[] work);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReadBytes(class System.IO.BinaryReader reader, void* destination, int64 destinationSizeInBytes, int64 bytesToRead, unsigned int8[]&amp; work) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBytes(System.IO.BinaryReader,System.Void*,System.Int64,System.Int64,System.Byte[]@)" />
      <MemberSignature Language="F#" Value="static member ReadBytes : System.IO.BinaryReader * nativeptr&lt;unit&gt; * int64 * int64 *  -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadBytes (reader, destination, destinationSizeInBytes, bytesToRead, work)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="destinationSizeInBytes" Type="System.Int64" />
        <Parameter Name="bytesToRead" Type="System.Int64" />
        <Parameter Name="work" Type="System.Byte[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="destinationSizeInBytes">To be added.</param>
        <param name="bytesToRead">To be added.</param>
        <param name="work">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadCharArray">
      <MemberSignature Language="C#" Value="public static char[] ReadCharArray (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] ReadCharArray(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadCharArray(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadCharArray (reader As BinaryReader) As Char()" />
      <MemberSignature Language="F#" Value="static member ReadCharArray : System.IO.BinaryReader -&gt; char[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadCharArray reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadCharArray">
      <MemberSignature Language="C#" Value="public static char[] ReadCharArray (this System.IO.BinaryReader reader, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] ReadCharArray(class System.IO.BinaryReader reader, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadCharArray(System.IO.BinaryReader,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadCharArray (reader As BinaryReader, size As Integer) As Char()" />
      <MemberSignature Language="F#" Value="static member ReadCharArray : System.IO.BinaryReader * int -&gt; char[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadCharArray (reader, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadDoubleArray">
      <MemberSignature Language="C#" Value="public static double[] ReadDoubleArray (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64[] ReadDoubleArray(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadDoubleArray(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadDoubleArray (reader As BinaryReader) As Double()" />
      <MemberSignature Language="F#" Value="static member ReadDoubleArray : System.IO.BinaryReader -&gt; double[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadDoubleArray reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadDoubleArray">
      <MemberSignature Language="C#" Value="public static double[] ReadDoubleArray (this System.IO.BinaryReader reader, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64[] ReadDoubleArray(class System.IO.BinaryReader reader, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadDoubleArray(System.IO.BinaryReader,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadDoubleArray (reader As BinaryReader, size As Integer) As Double()" />
      <MemberSignature Language="F#" Value="static member ReadDoubleArray : System.IO.BinaryReader * int -&gt; double[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadDoubleArray (reader, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFloat">
      <MemberSignature Language="C#" Value="public static float ReadFloat (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ReadFloat(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadFloat(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadFloat (reader As BinaryReader) As Single" />
      <MemberSignature Language="F#" Value="static member ReadFloat : System.IO.BinaryReader -&gt; single" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadFloat reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFloatArray">
      <MemberSignature Language="C#" Value="public static float[] ReadFloatArray (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32[] ReadFloatArray(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadFloatArray(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadFloatArray (reader As BinaryReader) As Single()" />
      <MemberSignature Language="F#" Value="static member ReadFloatArray : System.IO.BinaryReader -&gt; single[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadFloatArray reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFloatArray">
      <MemberSignature Language="C#" Value="public static float[] ReadFloatArray (this System.IO.BinaryReader reader, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32[] ReadFloatArray(class System.IO.BinaryReader reader, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadFloatArray(System.IO.BinaryReader,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadFloatArray (reader As BinaryReader, size As Integer) As Single()" />
      <MemberSignature Language="F#" Value="static member ReadFloatArray : System.IO.BinaryReader * int -&gt; single[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadFloatArray (reader, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFloatArray">
      <MemberSignature Language="C#" Value="public static void ReadFloatArray (this System.IO.BinaryReader reader, float[] array, int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReadFloatArray(class System.IO.BinaryReader reader, float32[] array, int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadFloatArray(System.IO.BinaryReader,System.Single[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ReadFloatArray (reader As BinaryReader, array As Single(), start As Integer, count As Integer)" />
      <MemberSignature Language="F#" Value="static member ReadFloatArray : System.IO.BinaryReader * single[] * int * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadFloatArray (reader, array, start, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="array" Type="System.Single[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="array">To be added.</param>
        <param name="start">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadIntArray">
      <MemberSignature Language="C#" Value="public static int[] ReadIntArray (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] ReadIntArray(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadIntArray(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadIntArray (reader As BinaryReader) As Integer()" />
      <MemberSignature Language="F#" Value="static member ReadIntArray : System.IO.BinaryReader -&gt; int[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadIntArray reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadIntArray">
      <MemberSignature Language="C#" Value="public static int[] ReadIntArray (this System.IO.BinaryReader reader, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] ReadIntArray(class System.IO.BinaryReader reader, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadIntArray(System.IO.BinaryReader,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadIntArray (reader As BinaryReader, size As Integer) As Integer()" />
      <MemberSignature Language="F#" Value="static member ReadIntArray : System.IO.BinaryReader * int -&gt; int[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadIntArray (reader, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadLeb128Int">
      <MemberSignature Language="C#" Value="public static ulong ReadLeb128Int (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ReadLeb128Int(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadLeb128Int(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadLeb128Int (reader As BinaryReader) As ULong" />
      <MemberSignature Language="F#" Value="static member ReadLeb128Int : System.IO.BinaryReader -&gt; uint64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadLeb128Int reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>
            Reads a LEB128 encoded unsigned integer.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadLongArray">
      <MemberSignature Language="C#" Value="public static long[] ReadLongArray (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64[] ReadLongArray(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadLongArray(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadLongArray (reader As BinaryReader) As Long()" />
      <MemberSignature Language="F#" Value="static member ReadLongArray : System.IO.BinaryReader -&gt; int64[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadLongArray reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadLongArray">
      <MemberSignature Language="C#" Value="public static long[] ReadLongArray (this System.IO.BinaryReader reader, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64[] ReadLongArray(class System.IO.BinaryReader reader, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadLongArray(System.IO.BinaryReader,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadLongArray (reader As BinaryReader, size As Integer) As Long()" />
      <MemberSignature Language="F#" Value="static member ReadLongArray : System.IO.BinaryReader * int -&gt; int64[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadLongArray (reader, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadSingleArray">
      <MemberSignature Language="C#" Value="public static float[] ReadSingleArray (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32[] ReadSingleArray(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadSingleArray(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadSingleArray (reader As BinaryReader) As Single()" />
      <MemberSignature Language="F#" Value="static member ReadSingleArray : System.IO.BinaryReader -&gt; single[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadSingleArray reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadSingleArray">
      <MemberSignature Language="C#" Value="public static float[] ReadSingleArray (this System.IO.BinaryReader reader, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32[] ReadSingleArray(class System.IO.BinaryReader reader, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadSingleArray(System.IO.BinaryReader,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadSingleArray (reader As BinaryReader, size As Integer) As Single()" />
      <MemberSignature Language="F#" Value="static member ReadSingleArray : System.IO.BinaryReader * int -&gt; single[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadSingleArray (reader, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUIntArray">
      <MemberSignature Language="C#" Value="public static uint[] ReadUIntArray (this System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32[] ReadUIntArray(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadUIntArray(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadUIntArray (reader As BinaryReader) As UInteger()" />
      <MemberSignature Language="F#" Value="static member ReadUIntArray : System.IO.BinaryReader -&gt; uint32[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadUIntArray reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUIntArray">
      <MemberSignature Language="C#" Value="public static uint[] ReadUIntArray (this System.IO.BinaryReader reader, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32[] ReadUIntArray(class System.IO.BinaryReader reader, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadUIntArray(System.IO.BinaryReader,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadUIntArray (reader As BinaryReader, size As Integer) As UInteger()" />
      <MemberSignature Language="F#" Value="static member ReadUIntArray : System.IO.BinaryReader * int -&gt; uint32[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ReadUIntArray (reader, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Reverse&lt;T&gt; (T[] a, int iMin, int iLim);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reverse&lt;T&gt;(!!T[] a, int32 iMin, int32 iLim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Reverse``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse(Of T) (a As T(), iMin As Integer, iLim As Integer)" />
      <MemberSignature Language="F#" Value="static member Reverse : 'T[] * int * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Reverse (a, iMin, iLim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="a" Type="T[]" />
        <Parameter Name="iMin" Type="System.Int32" />
        <Parameter Name="iLim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="a">To be added.</param>
        <param name="iMin">To be added.</param>
        <param name="iLim">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (this System.IO.BinaryReader reader, long fp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Seek(class System.IO.BinaryReader reader, int64 fp) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Seek(System.IO.BinaryReader,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Seek (reader As BinaryReader, fp As Long)" />
      <MemberSignature Language="F#" Value="static member Seek : System.IO.BinaryReader * int64 -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Seek (reader, fp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" RefType="this" />
        <Parameter Name="fp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="fp">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (this System.IO.BinaryWriter writer, long fp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Seek(class System.IO.BinaryWriter writer, int64 fp) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Seek(System.IO.BinaryWriter,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Seek (writer As BinaryWriter, fp As Long)" />
      <MemberSignature Language="F#" Value="static member Seek : System.IO.BinaryWriter * int64 -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Seek (writer, fp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="fp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="fp">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Set&lt;TKey,TValue&gt; (ref System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; map, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Set&lt;TKey, TValue&gt;(class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TValue&gt;&amp; map, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Set``2(System.Collections.Generic.Dictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set(Of TKey, TValue) (ByRef map As Dictionary(Of TKey, TValue), key As TKey, value As TValue)" />
      <MemberSignature Language="F#" Value="static member Set :  * 'Key * 'Value -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Set (map, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="map" Type="System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="map">To be added.</param>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shuffle&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Shuffle&lt;T&gt; (Microsoft.ML.Runtime.IRandom rand, T[] rgv);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Shuffle&lt;T&gt;(class Microsoft.ML.Runtime.IRandom rand, !!T[] rgv) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Shuffle``1(Microsoft.ML.Runtime.IRandom,``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shuffle(Of T) (rand As IRandom, rgv As T())" />
      <MemberSignature Language="F#" Value="static member Shuffle : Microsoft.ML.Runtime.IRandom * 'T[] -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Shuffle (rand, rgv)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="rand" Type="Microsoft.ML.Runtime.IRandom" />
        <Parameter Name="rgv" Type="T[]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="rand">To be added.</param>
        <param name="rgv">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shuffle&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Shuffle&lt;T&gt; (Random rand, T[] rgv);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Shuffle&lt;T&gt;(class System.Random rand, !!T[] rgv) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Shuffle``1(System.Random,``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shuffle(Of T) (rand As Random, rgv As T())" />
      <MemberSignature Language="F#" Value="static member Shuffle : Random * 'T[] -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Shuffle (rand, rgv)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="rand" Type="System.Random" />
        <Parameter Name="rgv" Type="T[]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="rand">To be added.</param>
        <param name="rgv">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shuffle&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Shuffle&lt;T&gt; (Microsoft.ML.Runtime.IRandom rand, T[] rgv, int min, int lim);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Shuffle&lt;T&gt;(class Microsoft.ML.Runtime.IRandom rand, !!T[] rgv, int32 min, int32 lim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Shuffle``1(Microsoft.ML.Runtime.IRandom,``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shuffle(Of T) (rand As IRandom, rgv As T(), min As Integer, lim As Integer)" />
      <MemberSignature Language="F#" Value="static member Shuffle : Microsoft.ML.Runtime.IRandom * 'T[] * int * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Shuffle (rand, rgv, min, lim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="rand" Type="Microsoft.ML.Runtime.IRandom" />
        <Parameter Name="rgv" Type="T[]" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="lim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="rand">To be added.</param>
        <param name="rgv">To be added.</param>
        <param name="min">To be added.</param>
        <param name="lim">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shuffle&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Shuffle&lt;T&gt; (Random rand, T[] rgv, int min, int lim);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Shuffle&lt;T&gt;(class System.Random rand, !!T[] rgv, int32 min, int32 lim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Shuffle``1(System.Random,``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shuffle(Of T) (rand As Random, rgv As T(), min As Integer, lim As Integer)" />
      <MemberSignature Language="F#" Value="static member Shuffle : Random * 'T[] * int * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Shuffle (rand, rgv, min, lim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="rand" Type="System.Random" />
        <Parameter Name="rgv" Type="T[]" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="lim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="rand">To be added.</param>
        <param name="rgv">To be added.</param>
        <param name="min">To be added.</param>
        <param name="lim">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public static int Size (Array x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Size(class System.Array x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Size(System.Array)" />
      <MemberSignature Language="VB.NET" Value="Public Function Size (x As Array) As Integer" />
      <MemberSignature Language="F#" Value="static member Size : Array -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Size x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public static int Size (System.Collections.BitArray x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Size(class System.Collections.BitArray x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Size(System.Collections.BitArray)" />
      <MemberSignature Language="VB.NET" Value="Public Function Size (x As BitArray) As Integer" />
      <MemberSignature Language="F#" Value="static member Size : System.Collections.BitArray -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Size x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Collections.BitArray" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public static int Size (string x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Size(string x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Size(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Size (x As String) As Integer" />
      <MemberSignature Language="F#" Value="static member Size : string -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Size x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public static int Size (System.Text.StringBuilder x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Size(class System.Text.StringBuilder x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Size(System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Function Size (x As StringBuilder) As Integer" />
      <MemberSignature Language="F#" Value="static member Size : System.Text.StringBuilder -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Size x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int Size&lt;T&gt; (System.Collections.Generic.HashSet&lt;T&gt; x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Size&lt;T&gt;(class System.Collections.Generic.HashSet`1&lt;!!T&gt; x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Size``1(System.Collections.Generic.HashSet{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Size(Of T) (x As HashSet(Of T)) As Integer" />
      <MemberSignature Language="F#" Value="static member Size : System.Collections.Generic.HashSet&lt;'T&gt; -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Size x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="System.Collections.Generic.HashSet&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int Size&lt;T&gt; (System.Collections.Generic.IList&lt;T&gt; x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Size&lt;T&gt;(class System.Collections.Generic.IList`1&lt;!!T&gt; x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Size``1(System.Collections.Generic.IList{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Size(Of T) (x As IList(Of T)) As Integer" />
      <MemberSignature Language="F#" Value="static member Size : System.Collections.Generic.IList&lt;'T&gt; -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Size x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="System.Collections.Generic.IList&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int Size&lt;T&gt; (System.Collections.Generic.IReadOnlyList&lt;T&gt; x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Size&lt;T&gt;(class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt; x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Size``1(System.Collections.Generic.IReadOnlyList{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Size(Of T) (x As IReadOnlyList(Of T)) As Integer" />
      <MemberSignature Language="F#" Value="static member Size : System.Collections.Generic.IReadOnlyList&lt;'T&gt; -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Size x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="System.Collections.Generic.IReadOnlyList&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int Size&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Size&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Size``1(System.Collections.Generic.List{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Size(Of T) (x As List(Of T)) As Integer" />
      <MemberSignature Language="F#" Value="static member Size : System.Collections.Generic.List&lt;'T&gt; -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Size x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="System.Collections.Generic.List&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int Size&lt;T&gt; (System.Collections.Generic.SortedSet&lt;T&gt; x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Size&lt;T&gt;(class System.Collections.Generic.SortedSet`1&lt;!!T&gt; x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Size``1(System.Collections.Generic.SortedSet{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Size(Of T) (x As SortedSet(Of T)) As Integer" />
      <MemberSignature Language="F#" Value="static member Size : System.Collections.Generic.SortedSet&lt;'T&gt; -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Size x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="System.Collections.Generic.SortedSet&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int Size&lt;T&gt; (System.Collections.Generic.Stack&lt;T&gt; x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Size&lt;T&gt;(class System.Collections.Generic.Stack`1&lt;!!T&gt; x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Size``1(System.Collections.Generic.Stack{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Size(Of T) (x As Stack(Of T)) As Integer" />
      <MemberSignature Language="F#" Value="static member Size : System.Collections.Generic.Stack&lt;'T&gt; -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Size x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="System.Collections.Generic.Stack&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int Size&lt;T&gt; (T[] x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Size&lt;T&gt;(!!T[] x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Size``1(``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Size(Of T) (x As T()) As Integer" />
      <MemberSignature Language="F#" Value="static member Size : 'T[] -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Size x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T[]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static int Size&lt;TKey,TValue&gt; (System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Size&lt;TKey, TValue&gt;(class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TValue&gt; x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Size``2(System.Collections.Generic.Dictionary{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Size(Of TKey, TValue) (x As Dictionary(Of TKey, TValue)) As Integer" />
      <MemberSignature Language="F#" Value="static member Size : System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; -&gt; int" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Size x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWithInvariantCulture">
      <MemberSignature Language="C#" Value="public static bool StartsWithInvariantCulture (this string str, string startsWith);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWithInvariantCulture(string str, string startsWith) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.StartsWithInvariantCulture(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartsWithInvariantCulture (str As String, startsWith As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member StartsWithInvariantCulture : string * string -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.StartsWithInvariantCulture (str, startsWith)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" RefType="this" />
        <Parameter Name="startsWith" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <param name="startsWith">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWithInvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static bool StartsWithInvariantCultureIgnoreCase (this string str, string startsWith);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWithInvariantCultureIgnoreCase(string str, string startsWith) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.StartsWithInvariantCultureIgnoreCase(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartsWithInvariantCultureIgnoreCase (str As String, startsWith As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member StartsWithInvariantCultureIgnoreCase : string * string -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.StartsWithInvariantCultureIgnoreCase (str, startsWith)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" RefType="this" />
        <Parameter Name="startsWith" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <param name="startsWith">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Swap&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Swap&lt;T&gt; (ref T a, ref T b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Swap&lt;T&gt;(!!T&amp; a, !!T&amp; b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.Swap``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Swap(Of T) (ByRef a As T, ByRef b As T)" />
      <MemberSignature Language="F#" Value="static member Swap :  *  -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.Swap (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="a" Type="T" RefType="ref" />
        <Parameter Name="b" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] ToArray&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] ToArray&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.ToArray``1(System.Collections.Generic.List{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray(Of T) (list As List(Of T)) As T()" />
      <MemberSignature Language="F#" Value="static member ToArray : System.Collections.Generic.List&lt;'T&gt; -&gt; 'T[]" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.ToArray list" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="list">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFindIndexSorted">
      <MemberSignature Language="C#" Value="public static bool TryFindIndexSorted (this int[] input, int min, int lim, int value, out int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFindIndexSorted(int32[] input, int32 min, int32 lim, int32 value, [out] int32&amp; index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.TryFindIndexSorted(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryFindIndexSorted (input As Integer(), min As Integer, lim As Integer, value As Integer, ByRef index As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFindIndexSorted : int[] * int * int * int *  -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.TryFindIndexSorted (input, min, lim, value, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Int32[]" RefType="this" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="lim" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="index" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="min">To be added.</param>
        <param name="lim">To be added.</param>
        <param name="value">To be added.</param>
        <param name="index">To be added.</param>
        <summary>
            Akin to <c>FindIndexSorted</c>, except stores the found index in the output
            <c>index</c> parameter, and returns whether that index is a valid index
            pointing to a value equal to the input parameter <c>value</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetValue&lt;TKey,TValue&gt; (System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; map, TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetValue&lt;TKey, TValue&gt;(class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TValue&gt; map, !!TKey key, [out] !!TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.TryGetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue(Of TKey, TValue) (map As Dictionary(Of TKey, TValue), key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryGetValue : System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; * 'Key *  -&gt; bool" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.TryGetValue (map, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="map" Type="System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="map">To be added.</param>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UMaskBelow">
      <MemberSignature Language="C#" Value="public static uint UMaskBelow (int ibit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 UMaskBelow(int32 ibit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.UMaskBelow(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UMaskBelow (ibit As Integer) As UInteger" />
      <MemberSignature Language="F#" Value="static member UMaskBelow : int -&gt; uint32" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.UMaskBelow ibit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ibit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ibit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UMaskBelowEx">
      <MemberSignature Language="C#" Value="public static uint UMaskBelowEx (int ibit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 UMaskBelowEx(int32 ibit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.UMaskBelowEx(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UMaskBelowEx (ibit As Integer) As UInteger" />
      <MemberSignature Language="F#" Value="static member UMaskBelowEx : int -&gt; uint32" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.UMaskBelowEx ibit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ibit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ibit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UuMaskBelow">
      <MemberSignature Language="C#" Value="public static ulong UuMaskBelow (int ibit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 UuMaskBelow(int32 ibit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.UuMaskBelow(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UuMaskBelow (ibit As Integer) As ULong" />
      <MemberSignature Language="F#" Value="static member UuMaskBelow : int -&gt; uint64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.UuMaskBelow ibit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ibit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ibit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBitArray">
      <MemberSignature Language="C#" Value="public static void WriteBitArray (this System.IO.BinaryWriter writer, System.Collections.BitArray arr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteBitArray(class System.IO.BinaryWriter writer, class System.Collections.BitArray arr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBitArray(System.IO.BinaryWriter,System.Collections.BitArray)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteBitArray (writer As BinaryWriter, arr As BitArray)" />
      <MemberSignature Language="F#" Value="static member WriteBitArray : System.IO.BinaryWriter * System.Collections.BitArray -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBitArray (writer, arr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="arr" Type="System.Collections.BitArray" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="arr">To be added.</param>
        <summary>
            Writes a length prefixed array of packed bits.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolByte">
      <MemberSignature Language="C#" Value="public static void WriteBoolByte (this System.IO.BinaryWriter writer, bool x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteBoolByte(class System.IO.BinaryWriter writer, bool x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBoolByte(System.IO.BinaryWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteBoolByte (writer As BinaryWriter, x As Boolean)" />
      <MemberSignature Language="F#" Value="static member WriteBoolByte : System.IO.BinaryWriter * bool -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBoolByte (writer, x)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="x" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="x">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolByteArray">
      <MemberSignature Language="C#" Value="public static void WriteBoolByteArray (this System.IO.BinaryWriter writer, bool[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteBoolByteArray(class System.IO.BinaryWriter writer, bool[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBoolByteArray(System.IO.BinaryWriter,System.Boolean[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteBoolByteArray (writer As BinaryWriter, values As Boolean())" />
      <MemberSignature Language="F#" Value="static member WriteBoolByteArray : System.IO.BinaryWriter * bool[] -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBoolByteArray (writer, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Boolean[]" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <summary>
            Writes a length prefixed array of bools as bytes with 0/1 values.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolByteArray">
      <MemberSignature Language="C#" Value="public static void WriteBoolByteArray (this System.IO.BinaryWriter writer, bool[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteBoolByteArray(class System.IO.BinaryWriter writer, bool[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBoolByteArray(System.IO.BinaryWriter,System.Boolean[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteBoolByteArray (writer As BinaryWriter, values As Boolean(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteBoolByteArray : System.IO.BinaryWriter * bool[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBoolByteArray (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Boolean[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes a length prefixed array of bools as bytes with 0/1 values.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolBytesNoCount">
      <MemberSignature Language="C#" Value="public static void WriteBoolBytesNoCount (this System.IO.BinaryWriter writer, bool[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteBoolBytesNoCount(class System.IO.BinaryWriter writer, bool[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBoolBytesNoCount(System.IO.BinaryWriter,System.Boolean[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteBoolBytesNoCount (writer As BinaryWriter, values As Boolean(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteBoolBytesNoCount : System.IO.BinaryWriter * bool[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBoolBytesNoCount (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Boolean[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes an array of bools as bytes with 0/1 values, without the length prefix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteByteArray">
      <MemberSignature Language="C#" Value="public static void WriteByteArray (this System.IO.BinaryWriter writer, byte[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteByteArray(class System.IO.BinaryWriter writer, unsigned int8[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteByteArray(System.IO.BinaryWriter,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteByteArray (writer As BinaryWriter, values As Byte())" />
      <MemberSignature Language="F#" Value="static member WriteByteArray : System.IO.BinaryWriter * byte[] -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteByteArray (writer, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <summary>
            Writes a length prefixed array of bytes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteByteArray">
      <MemberSignature Language="C#" Value="public static void WriteByteArray (this System.IO.BinaryWriter writer, byte[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteByteArray(class System.IO.BinaryWriter writer, unsigned int8[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteByteArray(System.IO.BinaryWriter,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteByteArray (writer As BinaryWriter, values As Byte(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteByteArray : System.IO.BinaryWriter * byte[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteByteArray (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Byte[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes a length prefixed array of bytes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBytesNoCount">
      <MemberSignature Language="C#" Value="public static void WriteBytesNoCount (this System.IO.BinaryWriter writer, byte[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteBytesNoCount(class System.IO.BinaryWriter writer, unsigned int8[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBytesNoCount(System.IO.BinaryWriter,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteBytesNoCount (writer As BinaryWriter, values As Byte(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteBytesNoCount : System.IO.BinaryWriter * byte[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteBytesNoCount (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Byte[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes an array of bytes without the length prefix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteByteStream">
      <MemberSignature Language="C#" Value="public static long WriteByteStream (this System.IO.BinaryWriter writer, System.Collections.Generic.IEnumerable&lt;byte&gt; e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 WriteByteStream(class System.IO.BinaryWriter writer, class System.Collections.Generic.IEnumerable`1&lt;unsigned int8&gt; e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteByteStream(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteByteStream (writer As BinaryWriter, e As IEnumerable(Of Byte)) As Long" />
      <MemberSignature Language="F#" Value="static member WriteByteStream : System.IO.BinaryWriter * seq&lt;byte&gt; -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteByteStream (writer, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteCharArray">
      <MemberSignature Language="C#" Value="public static void WriteCharArray (this System.IO.BinaryWriter writer, char[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteCharArray(class System.IO.BinaryWriter writer, char[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteCharArray(System.IO.BinaryWriter,System.Char[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteCharArray (writer As BinaryWriter, values As Char())" />
      <MemberSignature Language="F#" Value="static member WriteCharArray : System.IO.BinaryWriter * char[] -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteCharArray (writer, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <summary>
            Writes a length prefixed array of chars.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteDoubleArray">
      <MemberSignature Language="C#" Value="public static void WriteDoubleArray (this System.IO.BinaryWriter writer, double[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteDoubleArray(class System.IO.BinaryWriter writer, float64[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteDoubleArray(System.IO.BinaryWriter,System.Double[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteDoubleArray (writer As BinaryWriter, values As Double())" />
      <MemberSignature Language="F#" Value="static member WriteDoubleArray : System.IO.BinaryWriter * double[] -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteDoubleArray (writer, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <summary>
            Writes a length prefixed array of doubles.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteDoubleArray">
      <MemberSignature Language="C#" Value="public static void WriteDoubleArray (this System.IO.BinaryWriter writer, double[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteDoubleArray(class System.IO.BinaryWriter writer, float64[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteDoubleArray(System.IO.BinaryWriter,System.Double[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteDoubleArray (writer As BinaryWriter, values As Double(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteDoubleArray : System.IO.BinaryWriter * double[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteDoubleArray (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Double[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes a length prefixed array of doubles.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteDoublesNoCount">
      <MemberSignature Language="C#" Value="public static void WriteDoublesNoCount (this System.IO.BinaryWriter writer, double[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteDoublesNoCount(class System.IO.BinaryWriter writer, float64[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteDoublesNoCount(System.IO.BinaryWriter,System.Double[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteDoublesNoCount (writer As BinaryWriter, values As Double(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteDoublesNoCount : System.IO.BinaryWriter * double[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteDoublesNoCount (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Double[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes an array of doubles without the length prefix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteDoubleStream">
      <MemberSignature Language="C#" Value="public static long WriteDoubleStream (this System.IO.BinaryWriter writer, System.Collections.Generic.IEnumerable&lt;double&gt; e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 WriteDoubleStream(class System.IO.BinaryWriter writer, class System.Collections.Generic.IEnumerable`1&lt;float64&gt; e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteDoubleStream(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteDoubleStream (writer As BinaryWriter, e As IEnumerable(Of Double)) As Long" />
      <MemberSignature Language="F#" Value="static member WriteDoubleStream : System.IO.BinaryWriter * seq&lt;double&gt; -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteDoubleStream (writer, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFloatArray">
      <MemberSignature Language="C#" Value="public static void WriteFloatArray (this System.IO.BinaryWriter writer, float[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteFloatArray(class System.IO.BinaryWriter writer, float32[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatArray(System.IO.BinaryWriter,System.Single[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteFloatArray (writer As BinaryWriter, values As Single())" />
      <MemberSignature Language="F#" Value="static member WriteFloatArray : System.IO.BinaryWriter * single[] -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatArray (writer, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <summary>
            Writes a length prefixed array of Floats.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFloatArray">
      <MemberSignature Language="C#" Value="public static void WriteFloatArray (this System.IO.BinaryWriter writer, System.Collections.Generic.IEnumerable&lt;float&gt; values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteFloatArray(class System.IO.BinaryWriter writer, class System.Collections.Generic.IEnumerable`1&lt;float32&gt; values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatArray(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.Single},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteFloatArray (writer As BinaryWriter, values As IEnumerable(Of Single), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteFloatArray : System.IO.BinaryWriter * seq&lt;single&gt; * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatArray (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes a length prefixed array of Floats.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFloatArray">
      <MemberSignature Language="C#" Value="public static void WriteFloatArray (this System.IO.BinaryWriter writer, float[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteFloatArray(class System.IO.BinaryWriter writer, float32[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatArray(System.IO.BinaryWriter,System.Single[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteFloatArray (writer As BinaryWriter, values As Single(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteFloatArray : System.IO.BinaryWriter * single[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatArray (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Single[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes a length prefixed array of Floats.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFloatArray">
      <MemberSignature Language="C#" Value="public static void WriteFloatArray (this System.IO.BinaryWriter writer, float[] values, int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteFloatArray(class System.IO.BinaryWriter writer, float32[] values, int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatArray(System.IO.BinaryWriter,System.Single[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteFloatArray (writer As BinaryWriter, values As Single(), start As Integer, count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteFloatArray : System.IO.BinaryWriter * single[] * int * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatArray (writer, values, start, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Single[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="start">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes a specified number of floats starting at the specified index from an array.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFloatsNoCount">
      <MemberSignature Language="C#" Value="public static void WriteFloatsNoCount (this System.IO.BinaryWriter writer, float[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteFloatsNoCount(class System.IO.BinaryWriter writer, float32[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatsNoCount(System.IO.BinaryWriter,System.Single[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteFloatsNoCount (writer As BinaryWriter, values As Single(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteFloatsNoCount : System.IO.BinaryWriter * single[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteFloatsNoCount (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Single[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes an array of Floats without the length prefix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteIntArray">
      <MemberSignature Language="C#" Value="public static void WriteIntArray (this System.IO.BinaryWriter writer, int[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIntArray(class System.IO.BinaryWriter writer, int32[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteIntArray(System.IO.BinaryWriter,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteIntArray (writer As BinaryWriter, values As Integer())" />
      <MemberSignature Language="F#" Value="static member WriteIntArray : System.IO.BinaryWriter * int[] -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteIntArray (writer, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <summary>
            Writes a length prefixed array of ints.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteIntArray">
      <MemberSignature Language="C#" Value="public static void WriteIntArray (this System.IO.BinaryWriter writer, int[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIntArray(class System.IO.BinaryWriter writer, int32[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteIntArray(System.IO.BinaryWriter,System.Int32[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteIntArray (writer As BinaryWriter, values As Integer(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteIntArray : System.IO.BinaryWriter * int[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteIntArray (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Int32[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes a length prefixed array of ints.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteIntsNoCount">
      <MemberSignature Language="C#" Value="public static void WriteIntsNoCount (this System.IO.BinaryWriter writer, int[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIntsNoCount(class System.IO.BinaryWriter writer, int32[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteIntsNoCount(System.IO.BinaryWriter,System.Int32[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteIntsNoCount (writer As BinaryWriter, values As Integer(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteIntsNoCount : System.IO.BinaryWriter * int[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteIntsNoCount (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Int32[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes an array of ints without the length prefix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteIntStream">
      <MemberSignature Language="C#" Value="public static long WriteIntStream (this System.IO.BinaryWriter writer, System.Collections.Generic.IEnumerable&lt;int&gt; e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 WriteIntStream(class System.IO.BinaryWriter writer, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteIntStream(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteIntStream (writer As BinaryWriter, e As IEnumerable(Of Integer)) As Long" />
      <MemberSignature Language="F#" Value="static member WriteIntStream : System.IO.BinaryWriter * seq&lt;int&gt; -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteIntStream (writer, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLeb128Int">
      <MemberSignature Language="C#" Value="public static void WriteLeb128Int (this System.IO.BinaryWriter writer, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLeb128Int(class System.IO.BinaryWriter writer, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteLeb128Int(System.IO.BinaryWriter,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteLeb128Int (writer As BinaryWriter, value As ULong)" />
      <MemberSignature Language="F#" Value="static member WriteLeb128Int : System.IO.BinaryWriter * uint64 -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteLeb128Int (writer, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Writes what Microsoft calls a UTF-7 encoded number in the binary reader and
            writer string methods. For non-negative integers this is equivalent to LEB128
            (see https://en.wikipedia.org/wiki/LEB128).
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLongStream">
      <MemberSignature Language="C#" Value="public static long WriteLongStream (this System.IO.BinaryWriter writer, System.Collections.Generic.IEnumerable&lt;long&gt; e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 WriteLongStream(class System.IO.BinaryWriter writer, class System.Collections.Generic.IEnumerable`1&lt;int64&gt; e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteLongStream(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteLongStream (writer As BinaryWriter, e As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="F#" Value="static member WriteLongStream : System.IO.BinaryWriter * seq&lt;int64&gt; -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteLongStream (writer, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteSByteStream">
      <MemberSignature Language="C#" Value="public static long WriteSByteStream (this System.IO.BinaryWriter writer, System.Collections.Generic.IEnumerable&lt;sbyte&gt; e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 WriteSByteStream(class System.IO.BinaryWriter writer, class System.Collections.Generic.IEnumerable`1&lt;int8&gt; e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSByteStream(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.SByte})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteSByteStream (writer As BinaryWriter, e As IEnumerable(Of SByte)) As Long" />
      <MemberSignature Language="F#" Value="static member WriteSByteStream : System.IO.BinaryWriter * seq&lt;sbyte&gt; -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSByteStream (writer, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;System.SByte&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteShortStream">
      <MemberSignature Language="C#" Value="public static long WriteShortStream (this System.IO.BinaryWriter writer, System.Collections.Generic.IEnumerable&lt;short&gt; e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 WriteShortStream(class System.IO.BinaryWriter writer, class System.Collections.Generic.IEnumerable`1&lt;int16&gt; e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteShortStream(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.Int16})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteShortStream (writer As BinaryWriter, e As IEnumerable(Of Short)) As Long" />
      <MemberSignature Language="F#" Value="static member WriteShortStream : System.IO.BinaryWriter * seq&lt;int16&gt; -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteShortStream (writer, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;System.Int16&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteSingleArray">
      <MemberSignature Language="C#" Value="public static void WriteSingleArray (this System.IO.BinaryWriter writer, float[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteSingleArray(class System.IO.BinaryWriter writer, float32[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSingleArray(System.IO.BinaryWriter,System.Single[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteSingleArray (writer As BinaryWriter, values As Single())" />
      <MemberSignature Language="F#" Value="static member WriteSingleArray : System.IO.BinaryWriter * single[] -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSingleArray (writer, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <summary>
            Writes a length prefixed array of singles.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteSingleArray">
      <MemberSignature Language="C#" Value="public static void WriteSingleArray (this System.IO.BinaryWriter writer, float[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteSingleArray(class System.IO.BinaryWriter writer, float32[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSingleArray(System.IO.BinaryWriter,System.Single[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteSingleArray (writer As BinaryWriter, values As Single(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteSingleArray : System.IO.BinaryWriter * single[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSingleArray (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Single[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes a length prefixed array of singles.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteSinglesNoCount">
      <MemberSignature Language="C#" Value="public static void WriteSinglesNoCount (this System.IO.BinaryWriter writer, float[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteSinglesNoCount(class System.IO.BinaryWriter writer, float32[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSinglesNoCount(System.IO.BinaryWriter,System.Single[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteSinglesNoCount (writer As BinaryWriter, values As Single(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteSinglesNoCount : System.IO.BinaryWriter * single[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSinglesNoCount (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.Single[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes an array of singles without the length prefix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteSingleStream">
      <MemberSignature Language="C#" Value="public static long WriteSingleStream (this System.IO.BinaryWriter writer, System.Collections.Generic.IEnumerable&lt;float&gt; e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 WriteSingleStream(class System.IO.BinaryWriter writer, class System.Collections.Generic.IEnumerable`1&lt;float32&gt; e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSingleStream(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteSingleStream (writer As BinaryWriter, e As IEnumerable(Of Single)) As Long" />
      <MemberSignature Language="F#" Value="static member WriteSingleStream : System.IO.BinaryWriter * seq&lt;single&gt; -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteSingleStream (writer, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStringStream">
      <MemberSignature Language="C#" Value="public static long WriteStringStream (this System.IO.BinaryWriter writer, System.Collections.Generic.IEnumerable&lt;string&gt; e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 WriteStringStream(class System.IO.BinaryWriter writer, class System.Collections.Generic.IEnumerable`1&lt;string&gt; e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteStringStream(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteStringStream (writer As BinaryWriter, e As IEnumerable(Of String)) As Long" />
      <MemberSignature Language="F#" Value="static member WriteStringStream : System.IO.BinaryWriter * seq&lt;string&gt; -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteStringStream (writer, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUIntArray">
      <MemberSignature Language="C#" Value="public static void WriteUIntArray (this System.IO.BinaryWriter writer, uint[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUIntArray(class System.IO.BinaryWriter writer, unsigned int32[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUIntArray(System.IO.BinaryWriter,System.UInt32[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteUIntArray (writer As BinaryWriter, values As UInteger())" />
      <MemberSignature Language="F#" Value="static member WriteUIntArray : System.IO.BinaryWriter * uint32[] -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUIntArray (writer, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.UInt32[]" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <summary>
            Writes a length prefixed array of uints.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUIntArray">
      <MemberSignature Language="C#" Value="public static void WriteUIntArray (this System.IO.BinaryWriter writer, uint[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUIntArray(class System.IO.BinaryWriter writer, unsigned int32[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUIntArray(System.IO.BinaryWriter,System.UInt32[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteUIntArray (writer As BinaryWriter, values As UInteger(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteUIntArray : System.IO.BinaryWriter * uint32[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUIntArray (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.UInt32[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes a length prefixed array of uints.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUIntsNoCount">
      <MemberSignature Language="C#" Value="public static void WriteUIntsNoCount (this System.IO.BinaryWriter writer, uint[] values, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUIntsNoCount(class System.IO.BinaryWriter writer, unsigned int32[] values, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUIntsNoCount(System.IO.BinaryWriter,System.UInt32[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub WriteUIntsNoCount (writer As BinaryWriter, values As UInteger(), count As Integer)" />
      <MemberSignature Language="F#" Value="static member WriteUIntsNoCount : System.IO.BinaryWriter * uint32[] * int -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUIntsNoCount (writer, values, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="values" Type="System.UInt32[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="values">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Writes an array of uints without the length prefix.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUIntStream">
      <MemberSignature Language="C#" Value="public static long WriteUIntStream (this System.IO.BinaryWriter writer, System.Collections.Generic.IEnumerable&lt;uint&gt; e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 WriteUIntStream(class System.IO.BinaryWriter writer, class System.Collections.Generic.IEnumerable`1&lt;unsigned int32&gt; e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUIntStream(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.UInt32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteUIntStream (writer As BinaryWriter, e As IEnumerable(Of UInteger)) As Long" />
      <MemberSignature Language="F#" Value="static member WriteUIntStream : System.IO.BinaryWriter * seq&lt;uint32&gt; -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUIntStream (writer, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;System.UInt32&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteULongStream">
      <MemberSignature Language="C#" Value="public static long WriteULongStream (this System.IO.BinaryWriter writer, System.Collections.Generic.IEnumerable&lt;long&gt; e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 WriteULongStream(class System.IO.BinaryWriter writer, class System.Collections.Generic.IEnumerable`1&lt;int64&gt; e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteULongStream(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteULongStream (writer As BinaryWriter, e As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="F#" Value="static member WriteULongStream : System.IO.BinaryWriter * seq&lt;int64&gt; -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteULongStream (writer, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUShortStream">
      <MemberSignature Language="C#" Value="public static long WriteUShortStream (this System.IO.BinaryWriter writer, System.Collections.Generic.IEnumerable&lt;ushort&gt; e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 WriteUShortStream(class System.IO.BinaryWriter writer, class System.Collections.Generic.IEnumerable`1&lt;unsigned int16&gt; e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUShortStream(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{System.UInt16})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteUShortStream (writer As BinaryWriter, e As IEnumerable(Of UShort)) As Long" />
      <MemberSignature Language="F#" Value="static member WriteUShortStream : System.IO.BinaryWriter * seq&lt;uint16&gt; -&gt; int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.Utils.WriteUShortStream (writer, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" RefType="this" />
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;System.UInt16&gt;" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>