<Type Name="LimitedConcurrencyLevelTaskScheduler" FullName="Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler">
  <TypeSignature Language="C#" Value="public sealed class LimitedConcurrencyLevelTaskScheduler : System.Threading.Tasks.TaskScheduler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LimitedConcurrencyLevelTaskScheduler extends System.Threading.Tasks.TaskScheduler" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LimitedConcurrencyLevelTaskScheduler&#xA;Inherits TaskScheduler" />
  <TypeSignature Language="F#" Value="type LimitedConcurrencyLevelTaskScheduler = class&#xA;    inherit TaskScheduler" />
  <TypeSignature Language="C++ CLI" Value="public ref class LimitedConcurrencyLevelTaskScheduler sealed : System::Threading::Tasks::TaskScheduler" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.Tasks.TaskScheduler</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides a task scheduler that ensures a maximum concurrency level while
            running on top of the ThreadPool.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LimitedConcurrencyLevelTaskScheduler (int concurrencyLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 concurrencyLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (concurrencyLevel As Integer)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler : int -&gt; Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler" Usage="new Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler concurrencyLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LimitedConcurrencyLevelTaskScheduler(int concurrencyLevel);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; LimitedConcurrencyLevelTaskScheduler(int concurrencyLevel);" />
      <MemberSignature Language="C++ WINRT" Value=" LimitedConcurrencyLevelTaskScheduler(int concurrencyLevel);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="concurrencyLevel" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="concurrencyLevel">To be added.</param>
        <summary>
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the
            specified concurrency level.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScheduledTasks">
      <MemberSignature Language="C#" Value="protected override System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; GetScheduledTasks ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; GetScheduledTasks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetScheduledTasks () As IEnumerable(Of Task)" />
      <MemberSignature Language="F#" Value="override this.GetScheduledTasks : unit -&gt; seq&lt;System.Threading.Tasks.Task&gt;" Usage="limitedConcurrencyLevelTaskScheduler.GetScheduledTasks " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ GetScheduledTasks();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumConcurrencyLevel">
      <MemberSignature Language="C#" Value="public override int MaximumConcurrencyLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumConcurrencyLevel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MaximumConcurrencyLevel As Integer" />
      <MemberSignature Language="F#" Value="member this.MaximumConcurrencyLevel : int" Usage="Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaximumConcurrencyLevel { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property int MaximumConcurrencyLevel { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueTask">
      <MemberSignature Language="C#" Value="protected override void QueueTask (System.Threading.Tasks.Task task);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void QueueTask(class System.Threading.Tasks.Task task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)" />
      <MemberSignature Language="F#" Value="override this.QueueTask : System.Threading.Tasks.Task -&gt; unit" Usage="limitedConcurrencyLevelTaskScheduler.QueueTask task" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void QueueTask(System::Threading::Tasks::Task ^ task);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDequeue">
      <MemberSignature Language="C#" Value="protected override bool TryDequeue (System.Threading.Tasks.Task task);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool TryDequeue(class System.Threading.Tasks.Task task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)" />
      <MemberSignature Language="F#" Value="override this.TryDequeue : System.Threading.Tasks.Task -&gt; bool" Usage="limitedConcurrencyLevelTaskScheduler.TryDequeue task" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool TryDequeue(System::Threading::Tasks::Task ^ task);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryExecuteTaskInline">
      <MemberSignature Language="C#" Value="protected override bool TryExecuteTaskInline (System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool TryExecuteTaskInline(class System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.TryExecuteTaskInline : System.Threading.Tasks.Task * bool -&gt; bool" Usage="limitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline (task, taskWasPreviouslyQueued)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool TryExecuteTaskInline(System::Threading::Tasks::Task ^ task, bool taskWasPreviouslyQueued);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="taskWasPreviouslyQueued" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <param name="taskWasPreviouslyQueued">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>