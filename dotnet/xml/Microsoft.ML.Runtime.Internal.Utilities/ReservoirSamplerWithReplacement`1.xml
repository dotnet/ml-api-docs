<Type Name="ReservoirSamplerWithReplacement&lt;T&gt;" FullName="Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement&lt;T&gt;">
  <TypeSignature Language="C#" Value="public sealed class ReservoirSamplerWithReplacement&lt;T&gt; : Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReservoirSamplerWithReplacement`1&lt;T&gt; extends System.Object implements class Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReservoirSamplerWithReplacement(Of T)&#xA;Implements IReservoirSampler(Of T)" />
  <TypeSignature Language="F#" Value="type ReservoirSamplerWithReplacement&lt;'T&gt; = class&#xA;    interface IReservoirSampler&lt;'T&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ReservoirSamplerWithReplacement sealed : Microsoft::ML::Runtime::Internal::Utilities::IReservoirSampler&lt;T&gt;" />
  <TypeSignature Language="C++ WINRT" Value="template &lt;typename T&gt;&#xA;class ReservoirSamplerWithReplacement sealed : Microsoft::ML::Runtime::Internal::Utilities::IReservoirSampler&lt;T&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>
            This class produces a sample with replacement from a stream of data of type <typeparamref name="T" />. 
            It is instantiated with a delegate that gets the next data point, and builds a reservoir in one pass by calling <see cref="M:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.Sample" /> 
            for every data point in the stream. In case the next data point does not get 'picked' into the reservoir, the delegate is not invoked.
            Sampling is done according to the algorithm in this paper: <see href="http://epubs.siam.org/doi/pdf/10.1137/1.9781611972740.53" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReservoirSamplerWithReplacement (Microsoft.ML.Runtime.IRandom rnd, int size, Microsoft.ML.Runtime.Data.ValueGetter&lt;T&gt; getter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IRandom rnd, int32 size, class Microsoft.ML.Runtime.Data.ValueGetter`1&lt;!T&gt; getter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.#ctor(Microsoft.ML.Runtime.IRandom,System.Int32,Microsoft.ML.Runtime.Data.ValueGetter{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rnd As IRandom, size As Integer, getter As ValueGetter(Of T))" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement&lt;'T&gt; : Microsoft.ML.Runtime.IRandom * int * Microsoft.ML.Runtime.Data.ValueGetter&lt;'T&gt; -&gt; Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement&lt;'T&gt;" Usage="new Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement&lt;'T&gt; (rnd, size, getter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReservoirSamplerWithReplacement(Microsoft::ML::Runtime::IRandom ^ rnd, int size, Microsoft::ML::Runtime::Data::ValueGetter&lt;T&gt; ^ getter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rnd" Type="Microsoft.ML.Runtime.IRandom" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="getter" Type="Microsoft.ML.Runtime.Data.ValueGetter&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="rnd">To be added.</param>
        <param name="size">To be added.</param>
        <param name="getter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCache">
      <MemberSignature Language="C#" Value="public T[] GetCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] GetCache() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.GetCache" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCache () As T()" />
      <MemberSignature Language="F#" Value="member this.GetCache : unit -&gt; 'T[]" Usage="reservoirSamplerWithReplacement.GetCache " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ GetCache();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Platform::Array &lt;T&gt; ^ GetCache();" />
      <MemberSignature Language="C++ WINRT" Value="std::Array &lt;T&gt; GetCache();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the cache. Users should not change the elements of the returned array.
            Access only elements up to the logical length of the array, which is <see cref="P:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.Size" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSample">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetSample ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;!T&gt; GetSample() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.GetSample" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Overridable NotOverridable Function GetSample () As IEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetSample : unit -&gt; seq&lt;'T&gt;&#xA;override this.GetSample : unit -&gt; seq&lt;'T&gt;" Usage="reservoirSamplerWithReplacement.GetSample " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetSample();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.GetSample</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1/&lt;GetSample&gt;d__15))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a reservoir sample with replacement of the elements sampled so far. Users should not change the 
            elements returned since multiple elements in the reservoir might be pointing to the same memory.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public void Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Lock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.Lock" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock ()" />
      <MemberSignature Language="F#" Value="abstract member Lock : unit -&gt; unit&#xA;override this.Lock : unit -&gt; unit" Usage="reservoirSamplerWithReplacement.Lock " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Lock();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void Lock();" />
      <MemberSignature Language="C++ WINRT" Value="void Lock();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.Lock</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumSampled">
      <MemberSignature Language="C#" Value="public long NumSampled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 NumSampled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.NumSampled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumSampled As Long" />
      <MemberSignature Language="F#" Value="member this.NumSampled : int64" Usage="Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement&lt;'T&gt;.NumSampled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long NumSampled { long get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property long long NumSampled { long long get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.NumSampled</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sample">
      <MemberSignature Language="C#" Value="public void Sample ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sample() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.Sample" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sample ()" />
      <MemberSignature Language="F#" Value="abstract member Sample : unit -&gt; unit&#xA;override this.Sample : unit -&gt; unit" Usage="reservoirSamplerWithReplacement.Sample " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Sample();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void Sample();" />
      <MemberSignature Language="C++ WINRT" Value="void Sample();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.Sample</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Size" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement`1.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Integer" />
      <MemberSignature Language="F#" Value="member this.Size : int" Usage="Microsoft.ML.Runtime.Internal.Utilities.ReservoirSamplerWithReplacement&lt;'T&gt;.Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Size { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property int Size { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.Runtime.Internal.Utilities.IReservoirSampler`1.Size</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>