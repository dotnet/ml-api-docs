<Type Name="RecipeInference+Recipe" FullName="Microsoft.ML.Runtime.PipelineInference.RecipeInference+Recipe">
  <TypeSignature Language="C#" Value="public abstract class RecipeInference.Recipe" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract beforefieldinit RecipeInference/Recipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.PipelineInference.RecipeInference.Recipe" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class RecipeInference.Recipe" />
  <TypeSignature Language="F#" Value="type RecipeInference.Recipe = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Recipe ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.RecipeInference.Recipe.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowedPredictorTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.List&lt;Type&gt; AllowedPredictorTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.List`1&lt;class System.Type&gt; AllowedPredictorTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.RecipeInference.Recipe.AllowedPredictorTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AllowedPredictorTypes () As List(Of Type)" />
      <MemberSignature Language="F#" Value="abstract member AllowedPredictorTypes : unit -&gt; System.Collections.Generic.List&lt;Type&gt;&#xA;override this.AllowedPredictorTypes : unit -&gt; System.Collections.Generic.List&lt;Type&gt;" Usage="recipe.AllowedPredictorTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowedTransforms">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.List&lt;Type&gt; AllowedTransforms ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.List`1&lt;class System.Type&gt; AllowedTransforms() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.RecipeInference.Recipe.AllowedTransforms" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AllowedTransforms () As List(Of Type)" />
      <MemberSignature Language="F#" Value="abstract member AllowedTransforms : unit -&gt; System.Collections.Generic.List&lt;Type&gt;&#xA;override this.AllowedTransforms : unit -&gt; System.Collections.Generic.List&lt;Type&gt;" Usage="recipe.AllowedTransforms " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe&gt; Apply (Microsoft.ML.Runtime.PipelineInference.TransformInference.InferenceResult transformInferenceResult, Type predictorType, Microsoft.ML.Runtime.IChannel ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.ML.Runtime.PipelineInference.RecipeInference/SuggestedRecipe&gt; Apply(valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/InferenceResult transformInferenceResult, class System.Type predictorType, class Microsoft.ML.Runtime.IChannel ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.RecipeInference.Recipe.Apply(Microsoft.ML.Runtime.PipelineInference.TransformInference.InferenceResult,System.Type,Microsoft.ML.Runtime.IChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Overridable Function Apply (transformInferenceResult As TransformInference.InferenceResult, predictorType As Type, ch As IChannel) As IEnumerable(Of RecipeInference.SuggestedRecipe)" />
      <MemberSignature Language="F#" Value="abstract member Apply : Microsoft.ML.Runtime.PipelineInference.TransformInference.InferenceResult * Type * Microsoft.ML.Runtime.IChannel -&gt; seq&lt;Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe&gt;&#xA;override this.Apply : Microsoft.ML.Runtime.PipelineInference.TransformInference.InferenceResult * Type * Microsoft.ML.Runtime.IChannel -&gt; seq&lt;Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe&gt;" Usage="recipe.Apply (transformInferenceResult, predictorType, ch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.ML.Runtime.PipelineInference.RecipeInference/Recipe/&lt;Apply&gt;d__4))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ML.Runtime.PipelineInference.RecipeInference+SuggestedRecipe&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transformInferenceResult" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+InferenceResult" Index="0" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="predictorType" Type="System.Type" Index="1" />
        <Parameter Name="ch" Type="Microsoft.ML.Runtime.IChannel" Index="2" />
      </Parameters>
      <Docs>
        <param name="transformInferenceResult">To be added.</param>
        <param name="predictorType">To be added.</param>
        <param name="ch">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyCore">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerable&lt;Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe&gt; ApplyCore (Type predictorType, Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] transforms);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.ML.Runtime.PipelineInference.RecipeInference/SuggestedRecipe&gt; ApplyCore(class System.Type predictorType, valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] transforms) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.RecipeInference.Recipe.ApplyCore(System.Type,Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[])" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ApplyCore (predictorType As Type, transforms As TransformInference.SuggestedTransform()) As IEnumerable(Of RecipeInference.SuggestedRecipe)" />
      <MemberSignature Language="F#" Value="abstract member ApplyCore : Type * Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] -&gt; seq&lt;Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe&gt;" Usage="recipe.ApplyCore (predictorType, transforms)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ML.Runtime.PipelineInference.RecipeInference+SuggestedRecipe&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predictorType" Type="System.Type" />
        <Parameter Name="transforms" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]" />
      </Parameters>
      <Docs>
        <param name="predictorType">To be added.</param>
        <param name="transforms">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuggestedTransforms">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] GetSuggestedTransforms (Microsoft.ML.Runtime.PipelineInference.TransformInference.InferenceResult transformInferenceResult, Type predictorType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] GetSuggestedTransforms(valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/InferenceResult transformInferenceResult, class System.Type predictorType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.RecipeInference.Recipe.GetSuggestedTransforms(Microsoft.ML.Runtime.PipelineInference.TransformInference.InferenceResult,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSuggestedTransforms (transformInferenceResult As TransformInference.InferenceResult, predictorType As Type) As TransformInference.SuggestedTransform()" />
      <MemberSignature Language="F#" Value="abstract member GetSuggestedTransforms : Microsoft.ML.Runtime.PipelineInference.TransformInference.InferenceResult * Type -&gt; Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[]&#xA;override this.GetSuggestedTransforms : Microsoft.ML.Runtime.PipelineInference.TransformInference.InferenceResult * Type -&gt; Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[]" Usage="recipe.GetSuggestedTransforms (transformInferenceResult, predictorType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transformInferenceResult" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+InferenceResult" Index="0" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="predictorType" Type="System.Type" Index="1" />
      </Parameters>
      <Docs>
        <param name="transformInferenceResult">To be added.</param>
        <param name="predictorType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QualifierTransforms">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.List&lt;Type&gt; QualifierTransforms ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.List`1&lt;class System.Type&gt; QualifierTransforms() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.RecipeInference.Recipe.QualifierTransforms" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QualifierTransforms () As List(Of Type)" />
      <MemberSignature Language="F#" Value="abstract member QualifierTransforms : unit -&gt; System.Collections.Generic.List&lt;Type&gt;&#xA;override this.QualifierTransforms : unit -&gt; System.Collections.Generic.List&lt;Type&gt;" Usage="recipe.QualifierTransforms " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>