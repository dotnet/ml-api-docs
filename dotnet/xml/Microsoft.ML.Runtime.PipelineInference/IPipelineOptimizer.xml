<Type Name="IPipelineOptimizer" FullName="Microsoft.ML.Runtime.PipelineInference.IPipelineOptimizer">
  <TypeSignature Language="C#" Value="public interface IPipelineOptimizer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPipelineOptimizer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.PipelineInference.IPipelineOptimizer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPipelineOptimizer" />
  <TypeSignature Language="F#" Value="type IPipelineOptimizer = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Interface that defines what an autoML engine looks like, so that it can plug into the
            autoML body defined in this file. Will allow us to change autoML techniques or use third-
            party services as needed, just by swapping out the pipeline optimizer used.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetNextCandidates">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.PipelineInference.PipelinePattern[] GetNextCandidates (System.Collections.Generic.IEnumerable&lt;Microsoft.ML.Runtime.PipelineInference.PipelinePattern&gt; history, int numberOfCandidates, Microsoft.ML.Runtime.Data.RoleMappedData dataRoles);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.PipelineInference.PipelinePattern[] GetNextCandidates(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ML.Runtime.PipelineInference.PipelinePattern&gt; history, int32 numberOfCandidates, class Microsoft.ML.Runtime.Data.RoleMappedData dataRoles) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.IPipelineOptimizer.GetNextCandidates(System.Collections.Generic.IEnumerable{Microsoft.ML.Runtime.PipelineInference.PipelinePattern},System.Int32,Microsoft.ML.Runtime.Data.RoleMappedData)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextCandidates (history As IEnumerable(Of PipelinePattern), numberOfCandidates As Integer, dataRoles As RoleMappedData) As PipelinePattern()" />
      <MemberSignature Language="F#" Value="abstract member GetNextCandidates : seq&lt;Microsoft.ML.Runtime.PipelineInference.PipelinePattern&gt; * int * Microsoft.ML.Runtime.Data.RoleMappedData -&gt; Microsoft.ML.Runtime.PipelineInference.PipelinePattern[]" Usage="iPipelineOptimizer.GetNextCandidates (history, numberOfCandidates, dataRoles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.PipelineInference.PipelinePattern[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="history" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.ML.Runtime.PipelineInference.PipelinePattern&gt;" />
        <Parameter Name="numberOfCandidates" Type="System.Int32" />
        <Parameter Name="dataRoles" Type="Microsoft.ML.Runtime.Data.RoleMappedData" />
      </Parameters>
      <Docs>
        <param name="history">To be added.</param>
        <param name="numberOfCandidates">To be added.</param>
        <param name="dataRoles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpace">
      <MemberSignature Language="C#" Value="public void SetSpace (Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] availableTransforms, Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe.SuggestedLearner[] availableLearners, Func&lt;Microsoft.ML.Runtime.PipelineInference.PipelinePattern,long,bool&gt; pipelineVerifier, Microsoft.ML.Runtime.Data.IDataView originalData, Microsoft.ML.Runtime.Data.IDataView fullyTransformedData, Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap dependencyMapping, bool isMaximizingMetric);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSpace(valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] availableTransforms, valuetype Microsoft.ML.Runtime.PipelineInference.RecipeInference/SuggestedRecipe/SuggestedLearner[] availableLearners, class System.Func`3&lt;class Microsoft.ML.Runtime.PipelineInference.PipelinePattern, int64, bool&gt; pipelineVerifier, class Microsoft.ML.Runtime.Data.IDataView originalData, class Microsoft.ML.Runtime.Data.IDataView fullyTransformedData, class Microsoft.ML.Runtime.PipelineInference.AutoInference/DependencyMap dependencyMapping, bool isMaximizingMetric) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.IPipelineOptimizer.SetSpace(Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[],Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe.SuggestedLearner[],System.Func{Microsoft.ML.Runtime.PipelineInference.PipelinePattern,System.Int64,System.Boolean},Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSpace (availableTransforms As TransformInference.SuggestedTransform(), availableLearners As RecipeInference.SuggestedRecipe.SuggestedLearner(), pipelineVerifier As Func(Of PipelinePattern, Long, Boolean), originalData As IDataView, fullyTransformedData As IDataView, dependencyMapping As AutoInference.DependencyMap, isMaximizingMetric As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetSpace : Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] * Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe.SuggestedLearner[] * Func&lt;Microsoft.ML.Runtime.PipelineInference.PipelinePattern, int64, bool&gt; * Microsoft.ML.Runtime.Data.IDataView * Microsoft.ML.Runtime.Data.IDataView * Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap * bool -&gt; unit" Usage="iPipelineOptimizer.SetSpace (availableTransforms, availableLearners, pipelineVerifier, originalData, fullyTransformedData, dependencyMapping, isMaximizingMetric)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableTransforms" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]" />
        <Parameter Name="availableLearners" Type="Microsoft.ML.Runtime.PipelineInference.RecipeInference+SuggestedRecipe+SuggestedLearner[]" />
        <Parameter Name="pipelineVerifier" Type="System.Func&lt;Microsoft.ML.Runtime.PipelineInference.PipelinePattern,System.Int64,System.Boolean&gt;" />
        <Parameter Name="originalData" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="fullyTransformedData" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="dependencyMapping" Type="Microsoft.ML.Runtime.PipelineInference.AutoInference+DependencyMap" />
        <Parameter Name="isMaximizingMetric" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="availableTransforms">To be added.</param>
        <param name="availableLearners">To be added.</param>
        <param name="pipelineVerifier">To be added.</param>
        <param name="originalData">To be added.</param>
        <param name="fullyTransformedData">To be added.</param>
        <param name="dependencyMapping">To be added.</param>
        <param name="isMaximizingMetric">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLearners">
      <MemberSignature Language="C#" Value="public void UpdateLearners (Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe.SuggestedLearner[] availableLearners);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateLearners(valuetype Microsoft.ML.Runtime.PipelineInference.RecipeInference/SuggestedRecipe/SuggestedLearner[] availableLearners) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.IPipelineOptimizer.UpdateLearners(Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe.SuggestedLearner[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLearners (availableLearners As RecipeInference.SuggestedRecipe.SuggestedLearner())" />
      <MemberSignature Language="F#" Value="abstract member UpdateLearners : Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe.SuggestedLearner[] -&gt; unit" Usage="iPipelineOptimizer.UpdateLearners availableLearners" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableLearners" Type="Microsoft.ML.Runtime.PipelineInference.RecipeInference+SuggestedRecipe+SuggestedLearner[]" />
      </Parameters>
      <Docs>
        <param name="availableLearners">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>