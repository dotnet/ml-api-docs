<Type Name="TextFileSample" FullName="Microsoft.ML.Runtime.PipelineInference.TextFileSample">
  <TypeSignature Language="C#" Value="public sealed class TextFileSample : Microsoft.ML.Runtime.Data.IMultiStreamSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TextFileSample extends System.Object implements class Microsoft.ML.Runtime.Data.IMultiStreamSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.PipelineInference.TextFileSample" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TextFileSample&#xA;Implements IMultiStreamSource" />
  <TypeSignature Language="F#" Value="type TextFileSample = class&#xA;    interface IMultiStreamSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFileSample sealed : Microsoft::ML::Runtime::Data::IMultiStreamSource" />
  <TypeSignature Language="C++ CX" Value="public ref class TextFileSample sealed : Microsoft::ML::Runtime::Data::IMultiStreamSource" />
  <TypeSignature Language="C++ WINRT" Value="class TextFileSample sealed : Microsoft::ML::Runtime::Data::IMultiStreamSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.Data.IMultiStreamSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            This class holds an in-memory sample of the text file, and serves as an <see cref="T:Microsoft.ML.Runtime.Data.IMultiStreamSource" /> proxy to it.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ApproximateRowCount">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; ApproximateRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; ApproximateRowCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.PipelineInference.TextFileSample.ApproximateRowCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApproximateRowCount As Nullable(Of Long)" />
      <MemberSignature Language="F#" Value="member this.ApproximateRowCount : Nullable&lt;int64&gt;" Usage="Microsoft.ML.Runtime.PipelineInference.TextFileSample.ApproximateRowCount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; ApproximateRowCount { Nullable&lt;long&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.PipelineInference.TextFileSample.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.ML.Runtime.PipelineInference.TextFileSample.Count" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.Runtime.Data.IMultiStreamSource.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromFullFile">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.PipelineInference.TextFileSample CreateFromFullFile (Microsoft.ML.Runtime.IHostEnvironment env, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.PipelineInference.TextFileSample CreateFromFullFile(class Microsoft.ML.Runtime.IHostEnvironment env, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.TextFileSample.CreateFromFullFile(Microsoft.ML.Runtime.IHostEnvironment,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromFullFile (env As IHostEnvironment, path As String) As TextFileSample" />
      <MemberSignature Language="F#" Value="static member CreateFromFullFile : Microsoft.ML.Runtime.IHostEnvironment * string -&gt; Microsoft.ML.Runtime.PipelineInference.TextFileSample" Usage="Microsoft.ML.Runtime.PipelineInference.TextFileSample.CreateFromFullFile (env, path)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::ML::Runtime::PipelineInference::TextFileSample ^ CreateFromFullFile(Microsoft::ML::Runtime::IHostEnvironment ^ env, System::String ^ path);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::ML::Runtime::PipelineInference::TextFileSample ^ CreateFromFullFile(Microsoft::ML::Runtime::IHostEnvironment ^ env, Platform::String ^ path);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::ML::Runtime::PipelineInference::TextFileSample CreateFromFullFile(Microsoft::ML::Runtime::IHostEnvironment const &amp; env, std::wstring const &amp; path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.PipelineInference.TextFileSample</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="path">To be added.</param>
        <summary>
            Create a <see cref="T:Microsoft.ML.Runtime.PipelineInference.TextFileSample" /> by reading multiple chunks from the file (or other source) and 
            then stitching them together. The algorithm is as follows:
            0. If the source is not seekable, revert to <see cref="M:Microsoft.ML.Runtime.PipelineInference.TextFileSample.CreateFromHead(System.String)" />.
            1. If the file length is less than 2 * <see cref="F:Microsoft.ML.Runtime.PipelineInference.TextFileSample.BufferSizeMb" />, revert to <see cref="M:Microsoft.ML.Runtime.PipelineInference.TextFileSample.CreateFromHead(System.String)" />.
            2. Read first <see cref="F:Microsoft.ML.Runtime.PipelineInference.TextFileSample.FirstChunkSizeMb" /> MB chunk. Determine average line length in the chunk.
            3. Determine how large one chunk should be, and how many chunks there should be, to end up 
            with <see cref="F:Microsoft.ML.Runtime.PipelineInference.TextFileSample.BufferSizeMb" /> * <see cref="F:Microsoft.ML.Runtime.PipelineInference.TextFileSample.OversamplingRate" /> MB worth of lines.
            4. Determine seek locations and read the chunks.
            5. Stitch and return a <see cref="T:Microsoft.ML.Runtime.PipelineInference.TextFileSample" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromHead">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.PipelineInference.TextFileSample CreateFromHead (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.PipelineInference.TextFileSample CreateFromHead(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.TextFileSample.CreateFromHead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromHead (path As String) As TextFileSample" />
      <MemberSignature Language="F#" Value="static member CreateFromHead : string -&gt; Microsoft.ML.Runtime.PipelineInference.TextFileSample" Usage="Microsoft.ML.Runtime.PipelineInference.TextFileSample.CreateFromHead path" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::ML::Runtime::PipelineInference::TextFileSample ^ CreateFromHead(System::String ^ path);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::ML::Runtime::PipelineInference::TextFileSample ^ CreateFromHead(Platform::String ^ path);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::ML::Runtime::PipelineInference::TextFileSample CreateFromHead(std::wstring const &amp; path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.PipelineInference.TextFileSample</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>
            Create a <see cref="T:Microsoft.ML.Runtime.PipelineInference.TextFileSample" /> by reading one chunk from the beginning.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullFileSize">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; FullFileSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; FullFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.PipelineInference.TextFileSample.FullFileSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullFileSize As Nullable(Of Long)" />
      <MemberSignature Language="F#" Value="member this.FullFileSize : Nullable&lt;int64&gt;" Usage="Microsoft.ML.Runtime.PipelineInference.TextFileSample.FullFileSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; FullFileSize { Nullable&lt;long&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathOrNull">
      <MemberSignature Language="C#" Value="public string GetPathOrNull (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetPathOrNull(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.TextFileSample.GetPathOrNull(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPathOrNull (index As Integer) As String" />
      <MemberSignature Language="F#" Value="abstract member GetPathOrNull : int -&gt; string&#xA;override this.GetPathOrNull : int -&gt; string" Usage="textFileSample.GetPathOrNull index" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetPathOrNull(int index);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Platform::String ^ GetPathOrNull(int index);" />
      <MemberSignature Language="C++ WINRT" Value="std::wstring GetPathOrNull(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Runtime.Data.IMultiStreamSource.GetPathOrNull(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.IO.Stream Open (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream Open(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.TextFileSample.Open(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (index As Integer) As Stream" />
      <MemberSignature Language="F#" Value="abstract member Open : int -&gt; System.IO.Stream&#xA;override this.Open : int -&gt; System.IO.Stream" Usage="textFileSample.Open index" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ Open(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Runtime.Data.IMultiStreamSource.Open(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenTextReader">
      <MemberSignature Language="C#" Value="public System.IO.TextReader OpenTextReader (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.TextReader OpenTextReader(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.TextFileSample.OpenTextReader(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextReader (index As Integer) As TextReader" />
      <MemberSignature Language="F#" Value="abstract member OpenTextReader : int -&gt; System.IO.TextReader&#xA;override this.OpenTextReader : int -&gt; System.IO.TextReader" Usage="textFileSample.OpenTextReader index" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::TextReader ^ OpenTextReader(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Runtime.Data.IMultiStreamSource.OpenTextReader(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SampleSize">
      <MemberSignature Language="C#" Value="public int SampleSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SampleSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.PipelineInference.TextFileSample.SampleSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SampleSize As Integer" />
      <MemberSignature Language="F#" Value="member this.SampleSize : int" Usage="Microsoft.ML.Runtime.PipelineInference.TextFileSample.SampleSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SampleSize { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property int SampleSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>