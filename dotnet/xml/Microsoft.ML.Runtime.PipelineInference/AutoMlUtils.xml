<Type Name="AutoMlUtils" FullName="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils">
  <TypeSignature Language="C#" Value="public static class AutoMlUtils" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AutoMlUtils extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils" />
  <TypeSignature Language="VB.NET" Value="Public Class AutoMlUtils" />
  <TypeSignature Language="F#" Value="type AutoMlUtils = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplyTransformSet">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.IDataView ApplyTransformSet (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView data, Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] transforms);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.IDataView ApplyTransformSet(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView data, valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] transforms) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ApplyTransformSet(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ApplyTransformSet (env As IHostEnvironment, data As IDataView, transforms As TransformInference.SuggestedTransform()) As IDataView" />
      <MemberSignature Language="F#" Value="static member ApplyTransformSet : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView * Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] -&gt; Microsoft.ML.Runtime.Data.IDataView" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ApplyTransformSet (env, data, transforms)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="data" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="transforms" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="data">To be added.</param>
        <param name="transforms">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreColumnsConsistent">
      <MemberSignature Language="C#" Value="public static bool AreColumnsConsistent (Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] includedTransforms, Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap dependencyMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreColumnsConsistent(valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] includedTransforms, class Microsoft.ML.Runtime.PipelineInference.AutoInference/DependencyMap dependencyMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.AreColumnsConsistent(Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[],Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreColumnsConsistent (includedTransforms As TransformInference.SuggestedTransform(), dependencyMapping As AutoInference.DependencyMap) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreColumnsConsistent : Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] * Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap -&gt; bool" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.AreColumnsConsistent (includedTransforms, dependencyMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includedTransforms" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]" />
        <Parameter Name="dependencyMapping" Type="Microsoft.ML.Runtime.PipelineInference.AutoInference+DependencyMap" />
      </Parameters>
      <Docs>
        <param name="includedTransforms">To be added.</param>
        <param name="dependencyMapping">To be added.</param>
        <summary>
            Using the dependencyMapping and included transforms, determines whether every
            transform present only consumes columns produced by a lower- or same-level transform,
            or existed in the original dataset. Note, a column could be produced by a
            transform on the same level, such as in multipart (atomic group) transforms.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AtomicGroupPresent">
      <MemberSignature Language="C#" Value="public static bool AtomicGroupPresent (long bitmask, int atomicGroupId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AtomicGroupPresent(int64 bitmask, int32 atomicGroupId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.AtomicGroupPresent(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AtomicGroupPresent (bitmask As Long, atomicGroupId As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member AtomicGroupPresent : int64 * int -&gt; bool" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.AtomicGroupPresent (bitmask, atomicGroupId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmask" Type="System.Int64" />
        <Parameter Name="atomicGroupId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bitmask">To be added.</param>
        <param name="atomicGroupId">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckEntryPointStateMatchesParamValues">
      <MemberSignature Language="C#" Value="public static bool CheckEntryPointStateMatchesParamValues (object entryPointObj, Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute[] sweepParams);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CheckEntryPointStateMatchesParamValues(object entryPointObj, class Microsoft.ML.Runtime.EntryPoints.TlcModule/SweepableParamAttribute[] sweepParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.CheckEntryPointStateMatchesParamValues(System.Object,Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CheckEntryPointStateMatchesParamValues (entryPointObj As Object, sweepParams As TlcModule.SweepableParamAttribute()) As Boolean" />
      <MemberSignature Language="F#" Value="static member CheckEntryPointStateMatchesParamValues : obj * Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute[] -&gt; bool" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.CheckEntryPointStateMatchesParamValues (entryPointObj, sweepParams)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryPointObj" Type="System.Object" />
        <Parameter Name="sweepParams" Type="Microsoft.ML.Runtime.EntryPoints.TlcModule+SweepableParamAttribute[]" />
      </Parameters>
      <Docs>
        <param name="entryPointObj">To be added.</param>
        <param name="sweepParams">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneEvaluatorInstance">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.EntryPoints.CommonInputs.IEvaluatorInput CloneEvaluatorInstance (Microsoft.ML.Runtime.EntryPoints.CommonInputs.IEvaluatorInput evalInput);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.EntryPoints.CommonInputs/IEvaluatorInput CloneEvaluatorInstance(class Microsoft.ML.Runtime.EntryPoints.CommonInputs/IEvaluatorInput evalInput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.CloneEvaluatorInstance(Microsoft.ML.Runtime.EntryPoints.CommonInputs.IEvaluatorInput)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CloneEvaluatorInstance (evalInput As CommonInputs.IEvaluatorInput) As CommonInputs.IEvaluatorInput" />
      <MemberSignature Language="F#" Value="static member CloneEvaluatorInstance : Microsoft.ML.Runtime.EntryPoints.CommonInputs.IEvaluatorInput -&gt; Microsoft.ML.Runtime.EntryPoints.CommonInputs.IEvaluatorInput" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.CloneEvaluatorInstance evalInput" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.CommonInputs+IEvaluatorInput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evalInput" Type="Microsoft.ML.Runtime.EntryPoints.CommonInputs+IEvaluatorInput" />
      </Parameters>
      <Docs>
        <param name="evalInput">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneEvaluatorInstance">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.EntryPoints.CommonOutputs.IEvaluatorOutput CloneEvaluatorInstance (Microsoft.ML.Runtime.EntryPoints.CommonOutputs.IEvaluatorOutput evalOutput);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.EntryPoints.CommonOutputs/IEvaluatorOutput CloneEvaluatorInstance(class Microsoft.ML.Runtime.EntryPoints.CommonOutputs/IEvaluatorOutput evalOutput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.CloneEvaluatorInstance(Microsoft.ML.Runtime.EntryPoints.CommonOutputs.IEvaluatorOutput)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CloneEvaluatorInstance (evalOutput As CommonOutputs.IEvaluatorOutput) As CommonOutputs.IEvaluatorOutput" />
      <MemberSignature Language="F#" Value="static member CloneEvaluatorInstance : Microsoft.ML.Runtime.EntryPoints.CommonOutputs.IEvaluatorOutput -&gt; Microsoft.ML.Runtime.EntryPoints.CommonOutputs.IEvaluatorOutput" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.CloneEvaluatorInstance evalOutput" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.CommonOutputs+IEvaluatorOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evalOutput" Type="Microsoft.ML.Runtime.EntryPoints.CommonOutputs+IEvaluatorOutput" />
      </Parameters>
      <Docs>
        <param name="evalOutput">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeColumnResponsibilities">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.PipelineInference.AutoInference.LevelDependencyMap ComputeColumnResponsibilities (Microsoft.ML.Runtime.Data.IDataView transformedData, Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] appliedTransforms);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.PipelineInference.AutoInference/LevelDependencyMap ComputeColumnResponsibilities(class Microsoft.ML.Runtime.Data.IDataView transformedData, valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] appliedTransforms) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ComputeColumnResponsibilities(Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ComputeColumnResponsibilities (transformedData As IDataView, appliedTransforms As TransformInference.SuggestedTransform()) As AutoInference.LevelDependencyMap" />
      <MemberSignature Language="F#" Value="static member ComputeColumnResponsibilities : Microsoft.ML.Runtime.Data.IDataView * Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] -&gt; Microsoft.ML.Runtime.PipelineInference.AutoInference.LevelDependencyMap" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ComputeColumnResponsibilities (transformedData, appliedTransforms)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.PipelineInference.AutoInference+LevelDependencyMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transformedData" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="appliedTransforms" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]" />
      </Parameters>
      <Docs>
        <param name="transformedData">To be added.</param>
        <param name="appliedTransforms">To be added.</param>
        <summary>
            Creates a dictionary mapping column names to the transforms which could have produced them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToComponentFactories">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.IComponentFactory&lt;Microsoft.ML.Runtime.IValueGenerator&gt;[] ConvertToComponentFactories (Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute[] hps);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.IComponentFactory`1&lt;class Microsoft.ML.Runtime.IValueGenerator&gt;[] ConvertToComponentFactories(class Microsoft.ML.Runtime.EntryPoints.TlcModule/SweepableParamAttribute[] hps) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ConvertToComponentFactories(Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToComponentFactories (hps As TlcModule.SweepableParamAttribute()) As IComponentFactory(Of IValueGenerator)()" />
      <MemberSignature Language="F#" Value="static member ConvertToComponentFactories : Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute[] -&gt; Microsoft.ML.Runtime.IComponentFactory&lt;Microsoft.ML.Runtime.IValueGenerator&gt;[]" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ConvertToComponentFactories hps" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IComponentFactory&lt;Microsoft.ML.Runtime.IValueGenerator&gt;[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hps" Type="Microsoft.ML.Runtime.EntryPoints.TlcModule+SweepableParamAttribute[]" />
      </Parameters>
      <Docs>
        <param name="hps">To be added.</param>
        <summary>
            Method to convert set of sweepable hyperparameters into <see cref="T:Microsoft.ML.Runtime.IComponentFactory" /> instances used
            by the current smart hyperparameter sweepers.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToRunResult">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.IRunResult ConvertToRunResult (Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe.SuggestedLearner learner, Microsoft.ML.Runtime.PipelineInference.PipelineSweeperRunSummary rs, bool isMetricMaximizing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.IRunResult ConvertToRunResult(valuetype Microsoft.ML.Runtime.PipelineInference.RecipeInference/SuggestedRecipe/SuggestedLearner learner, class Microsoft.ML.Runtime.PipelineInference.PipelineSweeperRunSummary rs, bool isMetricMaximizing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ConvertToRunResult(Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe.SuggestedLearner,Microsoft.ML.Runtime.PipelineInference.PipelineSweeperRunSummary,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToRunResult (learner As RecipeInference.SuggestedRecipe.SuggestedLearner, rs As PipelineSweeperRunSummary, isMetricMaximizing As Boolean) As IRunResult" />
      <MemberSignature Language="F#" Value="static member ConvertToRunResult : Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe.SuggestedLearner * Microsoft.ML.Runtime.PipelineInference.PipelineSweeperRunSummary * bool -&gt; Microsoft.ML.Runtime.IRunResult" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ConvertToRunResult (learner, rs, isMetricMaximizing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IRunResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="learner" Type="Microsoft.ML.Runtime.PipelineInference.RecipeInference+SuggestedRecipe+SuggestedLearner" />
        <Parameter Name="rs" Type="Microsoft.ML.Runtime.PipelineInference.PipelineSweeperRunSummary" />
        <Parameter Name="isMetricMaximizing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="learner">To be added.</param>
        <param name="rs">To be added.</param>
        <param name="isMetricMaximizing">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToRunResults">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.IRunResult[] ConvertToRunResults (Microsoft.ML.Runtime.PipelineInference.PipelinePattern[] history, bool isMetricMaximizing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.IRunResult[] ConvertToRunResults(class Microsoft.ML.Runtime.PipelineInference.PipelinePattern[] history, bool isMetricMaximizing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ConvertToRunResults(Microsoft.ML.Runtime.PipelineInference.PipelinePattern[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToRunResults (history As PipelinePattern(), isMetricMaximizing As Boolean) As IRunResult()" />
      <MemberSignature Language="F#" Value="static member ConvertToRunResults : Microsoft.ML.Runtime.PipelineInference.PipelinePattern[] * bool -&gt; Microsoft.ML.Runtime.IRunResult[]" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ConvertToRunResults (history, isMetricMaximizing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IRunResult[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="history" Type="Microsoft.ML.Runtime.PipelineInference.PipelinePattern[]" />
        <Parameter Name="isMetricMaximizing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="history">To be added.</param>
        <param name="isMetricMaximizing">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractRunSummary">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.PipelineInference.PipelineSweeperRunSummary ExtractRunSummary (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView result, string metricColumnName, Microsoft.ML.Runtime.Data.IDataView trainResult = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.PipelineInference.PipelineSweeperRunSummary ExtractRunSummary(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView result, string metricColumnName, class Microsoft.ML.Runtime.Data.IDataView trainResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ExtractRunSummary(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.String,Microsoft.ML.Runtime.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractRunSummary (env As IHostEnvironment, result As IDataView, metricColumnName As String, Optional trainResult As IDataView = null) As PipelineSweeperRunSummary" />
      <MemberSignature Language="F#" Value="static member ExtractRunSummary : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView * string * Microsoft.ML.Runtime.Data.IDataView -&gt; Microsoft.ML.Runtime.PipelineInference.PipelineSweeperRunSummary" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ExtractRunSummary (env, result, metricColumnName, trainResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.PipelineInference.PipelineSweeperRunSummary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="result" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="metricColumnName" Type="System.String" />
        <Parameter Name="trainResult" Type="Microsoft.ML.Runtime.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="result">To be added.</param>
        <param name="metricColumnName">To be added.</param>
        <param name="trainResult">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractValueFromIdv">
      <MemberSignature Language="C#" Value="public static double ExtractValueFromIdv (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView result, string columnName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ExtractValueFromIdv(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView result, string columnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ExtractValueFromIdv(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractValueFromIdv (env As IHostEnvironment, result As IDataView, columnName As String) As Double" />
      <MemberSignature Language="F#" Value="static member ExtractValueFromIdv : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView * string -&gt; double" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ExtractValueFromIdv (env, result, columnName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="result" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="result">To be added.</param>
        <param name="columnName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateOverallTrainingMetricVarName">
      <MemberSignature Language="C#" Value="public static string GenerateOverallTrainingMetricVarName (Guid id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GenerateOverallTrainingMetricVarName(valuetype System.Guid id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.GenerateOverallTrainingMetricVarName(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenerateOverallTrainingMetricVarName (id As Guid) As String" />
      <MemberSignature Language="F#" Value="static member GenerateOverallTrainingMetricVarName : Guid -&gt; string" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.GenerateOverallTrainingMetricVarName id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFinalFeatureConcat">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] GetFinalFeatureConcat (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.IDataView data, Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap dependencyMapping, Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] selectedTransforms, Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] allTransforms, Microsoft.ML.Runtime.Data.RoleMappedData dataRoles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] GetFinalFeatureConcat(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.IDataView data, class Microsoft.ML.Runtime.PipelineInference.AutoInference/DependencyMap dependencyMapping, valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] selectedTransforms, valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] allTransforms, class Microsoft.ML.Runtime.Data.RoleMappedData dataRoles) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.GetFinalFeatureConcat(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap,Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[],Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[],Microsoft.ML.Runtime.Data.RoleMappedData)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFinalFeatureConcat (env As IHostEnvironment, data As IDataView, dependencyMapping As AutoInference.DependencyMap, selectedTransforms As TransformInference.SuggestedTransform(), allTransforms As TransformInference.SuggestedTransform(), dataRoles As RoleMappedData) As TransformInference.SuggestedTransform()" />
      <MemberSignature Language="F#" Value="static member GetFinalFeatureConcat : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.IDataView * Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap * Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] * Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] * Microsoft.ML.Runtime.Data.RoleMappedData -&gt; Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[]" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.GetFinalFeatureConcat (env, data, dependencyMapping, selectedTransforms, allTransforms, dataRoles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="data" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="dependencyMapping" Type="Microsoft.ML.Runtime.PipelineInference.AutoInference+DependencyMap" />
        <Parameter Name="selectedTransforms" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]" />
        <Parameter Name="allTransforms" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]" />
        <Parameter Name="dataRoles" Type="Microsoft.ML.Runtime.Data.RoleMappedData" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="data">To be added.</param>
        <param name="dependencyMapping">To be added.</param>
        <param name="selectedTransforms">To be added.</param>
        <param name="allTransforms">To be added.</param>
        <param name="dataRoles">To be added.</param>
        <summary>
            Exposed version of the method.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMandatoryTransforms">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] GetMandatoryTransforms (Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] availableTransforms);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] GetMandatoryTransforms(valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] availableTransforms) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.GetMandatoryTransforms(Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMandatoryTransforms (availableTransforms As TransformInference.SuggestedTransform()) As TransformInference.SuggestedTransform()" />
      <MemberSignature Language="F#" Value="static member GetMandatoryTransforms : Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] -&gt; Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[]" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.GetMandatoryTransforms availableTransforms" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableTransforms" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]" />
      </Parameters>
      <Docs>
        <param name="availableTransforms">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSweepRanges">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute[] GetSweepRanges (Type learnerInputType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.EntryPoints.TlcModule/SweepableParamAttribute[] GetSweepRanges(class System.Type learnerInputType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.GetSweepRanges(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSweepRanges (learnerInputType As Type) As TlcModule.SweepableParamAttribute()" />
      <MemberSignature Language="F#" Value="static member GetSweepRanges : Type -&gt; Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute[]" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.GetSweepRanges learnerInputType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.TlcModule+SweepableParamAttribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="learnerInputType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="learnerInputType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeMandatoryTransforms">
      <MemberSignature Language="C#" Value="public static long IncludeMandatoryTransforms (System.Collections.Generic.List&lt;Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform&gt; availableTransforms);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 IncludeMandatoryTransforms(class System.Collections.Generic.List`1&lt;valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform&gt; availableTransforms) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.IncludeMandatoryTransforms(System.Collections.Generic.List{Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IncludeMandatoryTransforms (availableTransforms As List(Of TransformInference.SuggestedTransform)) As Long" />
      <MemberSignature Language="F#" Value="static member IncludeMandatoryTransforms : System.Collections.Generic.List&lt;Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform&gt; -&gt; int64" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.IncludeMandatoryTransforms availableTransforms" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableTransforms" Type="System.Collections.Generic.List&lt;Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform&gt;" />
      </Parameters>
      <Docs>
        <param name="availableTransforms">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidTransformsPipeline">
      <MemberSignature Language="C#" Value="public static bool IsValidTransformsPipeline (long transformsBitMask, Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] selectedAndFinalTransforms, Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] allTransforms, Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap dependencyMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidTransformsPipeline(int64 transformsBitMask, valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] selectedAndFinalTransforms, valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] allTransforms, class Microsoft.ML.Runtime.PipelineInference.AutoInference/DependencyMap dependencyMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.IsValidTransformsPipeline(System.Int64,Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[],Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[],Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValidTransformsPipeline (transformsBitMask As Long, selectedAndFinalTransforms As TransformInference.SuggestedTransform(), allTransforms As TransformInference.SuggestedTransform(), dependencyMapping As AutoInference.DependencyMap) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsValidTransformsPipeline : int64 * Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] * Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] * Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap -&gt; bool" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.IsValidTransformsPipeline (transformsBitMask, selectedAndFinalTransforms, allTransforms, dependencyMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transformsBitMask" Type="System.Int64" />
        <Parameter Name="selectedAndFinalTransforms" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]" />
        <Parameter Name="allTransforms" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]" />
        <Parameter Name="dependencyMapping" Type="Microsoft.ML.Runtime.PipelineInference.AutoInference+DependencyMap" />
      </Parameters>
      <Docs>
        <param name="transformsBitMask">To be added.</param>
        <param name="selectedAndFinalTransforms">To be added.</param>
        <param name="allTransforms">To be added.</param>
        <param name="dependencyMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateSweepableParams">
      <MemberSignature Language="C#" Value="public static void PopulateSweepableParams (Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe.SuggestedLearner learner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PopulateSweepableParams(valuetype Microsoft.ML.Runtime.PipelineInference.RecipeInference/SuggestedRecipe/SuggestedLearner learner) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.PopulateSweepableParams(Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe.SuggestedLearner)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PopulateSweepableParams (learner As RecipeInference.SuggestedRecipe.SuggestedLearner)" />
      <MemberSignature Language="F#" Value="static member PopulateSweepableParams : Microsoft.ML.Runtime.PipelineInference.RecipeInference.SuggestedRecipe.SuggestedLearner -&gt; unit" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.PopulateSweepableParams learner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="learner" Type="Microsoft.ML.Runtime.PipelineInference.RecipeInference+SuggestedRecipe+SuggestedLearner" />
      </Parameters>
      <Docs>
        <param name="learner">To be added.</param>
        <summary>
            Updates properties of entryPointObj instance based on the values in sweepParams
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessWeight">
      <MemberSignature Language="C#" Value="public static double ProcessWeight (double weight, double maxWeight, bool isMaximizingMetric);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ProcessWeight(float64 weight, float64 maxWeight, bool isMaximizingMetric) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ProcessWeight(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ProcessWeight (weight As Double, maxWeight As Double, isMaximizingMetric As Boolean) As Double" />
      <MemberSignature Language="F#" Value="static member ProcessWeight : double * double * bool -&gt; double" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ProcessWeight (weight, maxWeight, isMaximizingMetric)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="weight" Type="System.Double" />
        <Parameter Name="maxWeight" Type="System.Double" />
        <Parameter Name="isMaximizingMetric" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="weight">To be added.</param>
        <param name="maxWeight">To be added.</param>
        <param name="isMaximizingMetric">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIValueGenerator">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.IValueGenerator ToIValueGenerator (Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute attr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.IValueGenerator ToIValueGenerator(class Microsoft.ML.Runtime.EntryPoints.TlcModule/SweepableParamAttribute attr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ToIValueGenerator(Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIValueGenerator (attr As TlcModule.SweepableParamAttribute) As IValueGenerator" />
      <MemberSignature Language="F#" Value="static member ToIValueGenerator : Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute -&gt; Microsoft.ML.Runtime.IValueGenerator" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ToIValueGenerator attr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IValueGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attr" Type="Microsoft.ML.Runtime.EntryPoints.TlcModule+SweepableParamAttribute" />
      </Parameters>
      <Docs>
        <param name="attr">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformsToBitmask">
      <MemberSignature Language="C#" Value="public static long TransformsToBitmask (Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] transforms);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 TransformsToBitmask(valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] transforms) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.TransformsToBitmask(Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TransformsToBitmask (transforms As TransformInference.SuggestedTransform()) As Long" />
      <MemberSignature Language="F#" Value="static member TransformsToBitmask : Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] -&gt; int64" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.TransformsToBitmask transforms" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transforms" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]" />
      </Parameters>
      <Docs>
        <param name="transforms">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateProperties">
      <MemberSignature Language="C#" Value="public static bool UpdateProperties (object entryPointObj, Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute[] sweepParams);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UpdateProperties(object entryPointObj, class Microsoft.ML.Runtime.EntryPoints.TlcModule/SweepableParamAttribute[] sweepParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.UpdateProperties(System.Object,Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UpdateProperties (entryPointObj As Object, sweepParams As TlcModule.SweepableParamAttribute()) As Boolean" />
      <MemberSignature Language="F#" Value="static member UpdateProperties : obj * Microsoft.ML.Runtime.EntryPoints.TlcModule.SweepableParamAttribute[] -&gt; bool" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.UpdateProperties (entryPointObj, sweepParams)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryPointObj" Type="System.Object" />
        <Parameter Name="sweepParams" Type="Microsoft.ML.Runtime.EntryPoints.TlcModule+SweepableParamAttribute[]" />
      </Parameters>
      <Docs>
        <param name="entryPointObj">To be added.</param>
        <param name="sweepParams">To be added.</param>
        <summary>
            Updates properties of entryPointObj instance based on the values in sweepParams
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationWrapper">
      <MemberSignature Language="C#" Value="public static Func&lt;Microsoft.ML.Runtime.PipelineInference.PipelinePattern,long,bool&gt; ValidationWrapper (Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] allTransforms, Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap dependencyMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`3&lt;class Microsoft.ML.Runtime.PipelineInference.PipelinePattern, int64, bool&gt; ValidationWrapper(valuetype Microsoft.ML.Runtime.PipelineInference.TransformInference/SuggestedTransform[] allTransforms, class Microsoft.ML.Runtime.PipelineInference.AutoInference/DependencyMap dependencyMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ValidationWrapper(Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[],Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ValidationWrapper (allTransforms As TransformInference.SuggestedTransform(), dependencyMapping As AutoInference.DependencyMap) As Func(Of PipelinePattern, Long, Boolean)" />
      <MemberSignature Language="F#" Value="static member ValidationWrapper : Microsoft.ML.Runtime.PipelineInference.TransformInference.SuggestedTransform[] * Microsoft.ML.Runtime.PipelineInference.AutoInference.DependencyMap -&gt; Func&lt;Microsoft.ML.Runtime.PipelineInference.PipelinePattern, int64, bool&gt;" Usage="Microsoft.ML.Runtime.PipelineInference.AutoMlUtils.ValidationWrapper (allTransforms, dependencyMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PipelineInference</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.ML.Runtime.PipelineInference.PipelinePattern,System.Int64,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allTransforms" Type="Microsoft.ML.Runtime.PipelineInference.TransformInference+SuggestedTransform[]" />
        <Parameter Name="dependencyMapping" Type="Microsoft.ML.Runtime.PipelineInference.AutoInference+DependencyMap" />
      </Parameters>
      <Docs>
        <param name="allTransforms">To be added.</param>
        <param name="dependencyMapping">To be added.</param>
        <summary>
            Simple wrapper which allows the call signature to match the signature needed for the PipelineOptimizerBase interface.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>