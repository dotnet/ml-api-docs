<Type Name="TrainingCursorBase+FactoryBase&lt;TCurs&gt;" FullName="Microsoft.ML.Runtime.Training.TrainingCursorBase+FactoryBase&lt;TCurs&gt;">
  <TypeSignature Language="C#" Value="public abstract class TrainingCursorBase.FactoryBase&lt;TCurs&gt; where TCurs : TrainingCursorBase" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract beforefieldinit TrainingCursorBase/FactoryBase`1&lt;(class Microsoft.ML.Runtime.Training.TrainingCursorBase) TCurs&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Training.TrainingCursorBase.FactoryBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TrainingCursorBase.FactoryBase(Of TCurs)" />
  <TypeSignature Language="F#" Value="type TrainingCursorBase.FactoryBase&lt;'Curs (requires 'Curs :&gt; TrainingCursorBase)&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TCurs">
      <Constraints>
        <BaseTypeName>Microsoft.ML.Runtime.Training.TrainingCursorBase</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TCurs">To be added.</typeparam>
    <summary>
            This is the base class for a data cursor factory. The factory is a reusable object,
            created with data and cursor options. From external non-implementing users it will
            appear to be more or less stateless, but internally it is keeping track of what sorts
            of filtering it needs to perform. For example, if we construct the factory with the
            option that it needs to filter out rows with bad feature values, but on the first
            iteration it is revealed there are no bad feature values, then it would be a complete
            waste of time to check on subsequent iterations over the data whether there are bad
            feature values again.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FactoryBase (Microsoft.ML.Runtime.Data.RoleMappedData data, Microsoft.ML.Runtime.Training.CursOpt opt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.Data.RoleMappedData data, valuetype Microsoft.ML.Runtime.Training.CursOpt opt) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Training.TrainingCursorBase.FactoryBase`1.#ctor(Microsoft.ML.Runtime.Data.RoleMappedData,Microsoft.ML.Runtime.Training.CursOpt)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (data As RoleMappedData, opt As CursOpt)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Training.TrainingCursorBase.FactoryBase&lt;'Curs (requires 'Curs :&gt; Microsoft.ML.Runtime.Training.TrainingCursorBase)&gt; : Microsoft.ML.Runtime.Data.RoleMappedData * Microsoft.ML.Runtime.Training.CursOpt -&gt; Microsoft.ML.Runtime.Training.TrainingCursorBase.FactoryBase&lt;'Curs (requires 'Curs :&gt; Microsoft.ML.Runtime.Training.TrainingCursorBase)&gt;" Usage="new Microsoft.ML.Runtime.Training.TrainingCursorBase.FactoryBase&lt;'Curs (requires 'Curs :&gt; Microsoft.ML.Runtime.Training.TrainingCursorBase)&gt; (data, opt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="Microsoft.ML.Runtime.Data.RoleMappedData" />
        <Parameter Name="opt" Type="Microsoft.ML.Runtime.Training.CursOpt" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="opt">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public TCurs Create (Microsoft.ML.Runtime.IRandom rand = null, params int[] extraCols);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TCurs Create(class Microsoft.ML.Runtime.IRandom rand, int32[] extraCols) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Training.TrainingCursorBase.FactoryBase`1.Create(Microsoft.ML.Runtime.IRandom,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Create (Optional rand As IRandom = null, ParamArray extraCols As Integer()) As TCurs" />
      <MemberSignature Language="F#" Value="member this.Create : Microsoft.ML.Runtime.IRandom * int[] -&gt; 'Curs" Usage="factoryBase.Create (rand, extraCols)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TCurs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rand" Type="Microsoft.ML.Runtime.IRandom" />
        <Parameter Name="extraCols" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="rand">Non-null if we are requesting a shuffled cursor.</param>
        <param name="extraCols">The extra columns to activate on the row cursor
            in addition to those required by the factory's options.</param>
        <summary>
            The typed analog to <see cref="M:Microsoft.ML.Runtime.Data.IDataView.GetRowCursor(System.Func{System.Int32,System.Boolean},Microsoft.ML.Runtime.IRandom)" />.
            </summary>
        <returns>The wrapping typed cursor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCursorCore">
      <MemberSignature Language="C#" Value="protected abstract TCurs CreateCursorCore (Microsoft.ML.Runtime.Data.IRowCursor input, Microsoft.ML.Runtime.Data.RoleMappedData data, Microsoft.ML.Runtime.Training.CursOpt opt, Action&lt;Microsoft.ML.Runtime.Training.CursOpt&gt; signal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TCurs CreateCursorCore(class Microsoft.ML.Runtime.Data.IRowCursor input, class Microsoft.ML.Runtime.Data.RoleMappedData data, valuetype Microsoft.ML.Runtime.Training.CursOpt opt, class System.Action`1&lt;valuetype Microsoft.ML.Runtime.Training.CursOpt&gt; signal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Training.TrainingCursorBase.FactoryBase`1.CreateCursorCore(Microsoft.ML.Runtime.Data.IRowCursor,Microsoft.ML.Runtime.Data.RoleMappedData,Microsoft.ML.Runtime.Training.CursOpt,System.Action{Microsoft.ML.Runtime.Training.CursOpt})" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateCursorCore (input As IRowCursor, data As RoleMappedData, opt As CursOpt, signal As Action(Of CursOpt)) As TCurs" />
      <MemberSignature Language="F#" Value="abstract member CreateCursorCore : Microsoft.ML.Runtime.Data.IRowCursor * Microsoft.ML.Runtime.Data.RoleMappedData * Microsoft.ML.Runtime.Training.CursOpt * Action&lt;Microsoft.ML.Runtime.Training.CursOpt&gt; -&gt; 'Curs" Usage="factoryBase.CreateCursorCore (input, data, opt, signal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TCurs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.Runtime.Data.IRowCursor" />
        <Parameter Name="data" Type="Microsoft.ML.Runtime.Data.RoleMappedData" />
        <Parameter Name="opt" Type="Microsoft.ML.Runtime.Training.CursOpt" />
        <Parameter Name="signal" Type="System.Action&lt;Microsoft.ML.Runtime.Training.CursOpt&gt;" />
      </Parameters>
      <Docs>
        <param name="input">The row cursor we will wrap.</param>
        <param name="data">The data from which the row cursor was instantiated.</param>
        <param name="opt">The cursor options this row cursor was created with.</param>
        <param name="signal">The action that our wrapping cursor will call. Implementors of the cursor
            do not usually call it directly, but instead override
            <see cref="M:Microsoft.ML.Runtime.Training.TrainingCursorBase.CursoringCompleteFlags" />, whose return value is used to call
            this action.</param>
        <summary>
            Called by both the <see cref="M:Microsoft.ML.Runtime.Training.TrainingCursorBase.FactoryBase`1.Create(Microsoft.ML.Runtime.IRandom,System.Int32[])" /> and <see cref="M:Microsoft.ML.Runtime.Training.TrainingCursorBase.FactoryBase`1.CreateSet(System.Int32,Microsoft.ML.Runtime.IRandom,System.Int32[])" /> factory methods. Implementors
            should instantiate the particular wrapping cursor.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSet">
      <MemberSignature Language="C#" Value="public TCurs[] CreateSet (int n, Microsoft.ML.Runtime.IRandom rand = null, params int[] extraCols);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TCurs[] CreateSet(int32 n, class Microsoft.ML.Runtime.IRandom rand, int32[] extraCols) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Training.TrainingCursorBase.FactoryBase`1.CreateSet(System.Int32,Microsoft.ML.Runtime.IRandom,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSet (n As Integer, Optional rand As IRandom = null, ParamArray extraCols As Integer()) As TCurs()" />
      <MemberSignature Language="F#" Value="member this.CreateSet : int * Microsoft.ML.Runtime.IRandom * int[] -&gt; 'Curs[]" Usage="factoryBase.CreateSet (n, rand, extraCols)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TCurs[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="rand" Type="Microsoft.ML.Runtime.IRandom" />
        <Parameter Name="extraCols" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="n">Suggested degree of parallelism.</param>
        <param name="rand">Non-null if we are requesting a shuffled cursor.</param>
        <param name="extraCols">The extra columns to activate on the row cursor
            in addition to those required by the factory's options.</param>
        <summary>
            The typed analog to <see cref="M:Microsoft.ML.Runtime.Data.IDataView.GetRowCursorSet(Microsoft.ML.Runtime.Data.IRowCursorConsolidator@,System.Func{System.Int32,System.Boolean},System.Int32,Microsoft.ML.Runtime.IRandom)" />, this provides a
            partitioned cursoring of the data set, appropriate to multithreaded algorithms
            that want to consume parallel cursors without any consolidation.
            </summary>
        <returns>The cursor set. Note that this needn't necessarily be of size
            <paramref name="n" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Data.RoleMappedData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.Data.RoleMappedData Data" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Training.TrainingCursorBase.FactoryBase`1.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As RoleMappedData" />
      <MemberSignature Language="F#" Value="member this.Data : Microsoft.ML.Runtime.Data.RoleMappedData" Usage="Microsoft.ML.Runtime.Training.TrainingCursorBase.FactoryBase&lt;'Curs (requires 'Curs :&gt; Microsoft.ML.Runtime.Training.TrainingCursorBase)&gt;.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.RoleMappedData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>