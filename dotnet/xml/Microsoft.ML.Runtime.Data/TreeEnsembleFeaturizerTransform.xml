<Type Name="TreeEnsembleFeaturizerTransform" FullName="Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform">
  <TypeSignature Language="C#" Value="public static class TreeEnsembleFeaturizerTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TreeEnsembleFeaturizerTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform" />
  <TypeSignature Language="VB.NET" Value="Public Class TreeEnsembleFeaturizerTransform" />
  <TypeSignature Language="F#" Value="type TreeEnsembleFeaturizerTransform = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
    <member name="TreeEnsembleFeaturizerTransform">
      <summary>
        Trains a tree ensemble, or loads it from a file, then maps a numeric feature vector
        to three outputs:
        <list><item><description>A vector containing the individual tree outputs of the tree ensemble.</description></item><item><description>A vector indicating the leaves that the feature vector falls on in the tree ensemble.</description></item><item><description>A vector indicating the paths that the feature vector falls on in the tree ensemble.</description></item></list>
        If a both a model file and a trainer are specified - will use the model file. If neither are specified, 
        will train a default FastTree model. 
        This can handle key labels by training a regression model towards their optionally permuted indices.
      </summary>
      <remarks>
        In machine learning​ it is a pretty common and powerful approach to utilize the already trained model in the process of defining features.
        <para>One such example would be the use of model's scores as features to downstream models. For example, we might run clustering on the original features, 
        and use the cluster distances as the new feature set.
        Instead of consuming the model's output, we could go deeper, and extract the 'intermediate outputs' that are used to produce the final score. </para>
        There are a number of famous or popular examples of this technique:
        <list><item><description>A deep neural net trained on the ImageNet dataset, with the last layer removed, is commonly used to compute the 'projection' of the image into the 'semantic feature space'.
            It is observed that the Euclidean distance in this space often correlates with the 'semantic similarity': that is, all pictures of pizza are located close together,
            and far away from pictures of kittens. </description></item><item><description>A matrix factorization and/or LDA model is also often used to extract the 'latent topics' or 'latent features' associated with users and items.</description></item><item><description>The weights of the linear model are often used as a crude indicator of 'feature importance'. At the very minimum, the 0-weight features are not needed by the model,
            and there's no reason to compute them. </description></item></list><para>Tree featurizer uses the decision tree ensembles for feature engineering in the same fashion as above.</para><para>Let's assume that we've built a tree ensemble of 100 trees with 100 leaves each (it doesn't matter whether boosting was used or not in training). 
        If we associate each leaf of each tree with a sequential integer, we can, for every incoming example x, 
        produce an indicator vector L(x), where Li(x) = 1 if the example x 'falls' into the leaf #i, and 0 otherwise.</para><para>Thus, for every example x, we produce a 10000-valued vector L, with exactly 100 1s and the rest zeroes. 
        This 'leaf indicator' vector can be considered the ensemble-induced 'footprint' of the example.</para><para>The 'distance' between two examples in the L-space is actually a Hamming distance, and is equal to the number of trees that do not distinguish the two examples.</para><para>We could repeat the same thought process for the non-leaf, or internal, nodes of the trees (we know that each tree has exactly 99 of them in our 100-leaf example), 
        and produce another indicator vector, N (size 9900), for each example, indicating the 'trajectory' of each example through each of the trees.</para><para>The distance in the combined 19900-dimensional LN-space will be equal to the number of 'decisions' in all trees that 'agree' on the given pair of examples.</para><para>The TreeLeafFeaturizer is also producing the third vector, T, which is defined as Ti(x) = output of tree #i on example x.</para></remarks>
      <example>
        <code language="csharp">
          pipeline.Add(new TreeLeafFeaturizer())
        </code>
      </example>
    </member>
    <member name="TreeEnsembleFeaturizerTransform">
      <summary>
        Trains a tree ensemble, or loads it from a file, then maps a numeric feature vector
        to three outputs:
        <list type="number"><item><description>A vector containing the individual tree outputs of the tree ensemble.</description></item><item><description>A vector indicating the leaves that the feature vector falls on in the tree ensemble.</description></item><item><description>A vector indicating the paths that the feature vector falls on in the tree ensemble.</description></item></list>
        If a both a model file and a trainer are specified - will use the model file. If neither are specified, 
        will train a default FastTree model. 
        This can handle key labels by training a regression model towards their optionally permuted indices.
      </summary>
      <remarks>
        In machine learning​ it is a pretty common and powerful approach to utilize the already trained model in the process of defining features.
        <para>One such example would be the use of model's scores as features to downstream models. For example, we might run clustering on the original features, 
        and use the cluster distances as the new feature set.
        Instead of consuming the model's output, we could go deeper, and extract the 'intermediate outputs' that are used to produce the final score. </para>
        There are a number of famous or popular examples of this technique:
        <list type="bullet"><item><description>A deep neural net trained on the ImageNet dataset, with the last layer removed, is commonly used to compute the 'projection' of the image into the 'semantic feature space'.
            It is observed that the Euclidean distance in this space often correlates with the 'semantic similarity': that is, all pictures of pizza are located close together,
            and far away from pictures of kittens. </description></item><item><description>A matrix factorization and/or LDA model is also often used to extract the 'latent topics' or 'latent features' associated with users and items.</description></item><item><description>The weights of the linear model are often used as a crude indicator of 'feature importance'. At the very minimum, the 0-weight features are not needed by the model,
            and there's no reason to compute them. </description></item></list><para>Tree featurizer uses the decision tree ensembles for feature engineering in the same fashion as above.</para><para>Let's assume that we've built a tree ensemble of 100 trees with 100 leaves each (it doesn't matter whether boosting was used or not in training). 
        If we associate each leaf of each tree with a sequential integer, we can, for every incoming example x, 
        produce an indicator vector L(x), where Li(x) = 1 if the example x 'falls' into the leaf #i, and 0 otherwise.</para><para>Thus, for every example x, we produce a 10000-valued vector L, with exactly 100 1s and the rest zeroes. 
        This 'leaf indicator' vector can be considered the ensemble-induced 'footprint' of the example.</para><para>The 'distance' between two examples in the L-space is actually a Hamming distance, and is equal to the number of trees that do not distinguish the two examples.</para><para>We could repeat the same thought process for the non-leaf, or internal, nodes of the trees (we know that each tree has exactly 99 of them in our 100-leaf example), 
        and produce another indicator vector, N (size 9900), for each example, indicating the 'trajectory' of each example through each of the trees.</para><para>The distance in the combined 19900-dimensional LN-space will be equal to the number of 'decisions' in all trees that 'agree' on the given pair of examples.</para><para>The TreeLeafFeaturizer is also producing the third vector, T, which is defined as Ti(x) = output of tree #i on example x.</para></remarks>
      <example>
        <code language="csharp">
          pipeline.Add(new TreeLeafFeaturizer())
        </code>
      </example>
    </member>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.ISchemaBindableMapper Create (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Model.ModelLoadContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.ISchemaBindableMapper Create(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Model.ModelLoadContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Model.ModelLoadContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (env As IHostEnvironment, ctx As ModelLoadContext) As ISchemaBindableMapper" />
      <MemberSignature Language="F#" Value="static member Create : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Model.ModelLoadContext -&gt; Microsoft.ML.Runtime.Data.ISchemaBindableMapper" Usage="Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.Create (env, ctx)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.ISchemaBindableMapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="ctx" Type="Microsoft.ML.Runtime.Model.ModelLoadContext" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="ctx">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.ISchemaBindableMapper Create (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerBindableMapper.Arguments args, Microsoft.ML.Runtime.IPredictor predictor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.ISchemaBindableMapper Create(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerBindableMapper/Arguments args, class Microsoft.ML.Runtime.IPredictor predictor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerBindableMapper.Arguments,Microsoft.ML.Runtime.IPredictor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (env As IHostEnvironment, args As TreeEnsembleFeaturizerBindableMapper.Arguments, predictor As IPredictor) As ISchemaBindableMapper" />
      <MemberSignature Language="F#" Value="static member Create : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerBindableMapper.Arguments * Microsoft.ML.Runtime.IPredictor -&gt; Microsoft.ML.Runtime.Data.ISchemaBindableMapper" Usage="Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.Create (env, args, predictor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.ISchemaBindableMapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="args" Type="Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerBindableMapper+Arguments" />
        <Parameter Name="predictor" Type="Microsoft.ML.Runtime.IPredictor" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="args">To be added.</param>
        <param name="predictor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.IDataTransform Create (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.Arguments args, Microsoft.ML.Runtime.Data.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.IDataTransform Create(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform/Arguments args, class Microsoft.ML.Runtime.Data.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.Arguments,Microsoft.ML.Runtime.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (env As IHostEnvironment, args As TreeEnsembleFeaturizerTransform.Arguments, input As IDataView) As IDataTransform" />
      <MemberSignature Language="F#" Value="static member Create : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.Arguments * Microsoft.ML.Runtime.Data.IDataView -&gt; Microsoft.ML.Runtime.Data.IDataTransform" Usage="Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.Create (env, args, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.IDataTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="args" Type="Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform+Arguments" />
        <Parameter Name="input" Type="Microsoft.ML.Runtime.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="args">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.IDataScorerTransform Create (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerBindableMapper.Arguments args, Microsoft.ML.Runtime.Data.IDataView data, Microsoft.ML.Runtime.Data.ISchemaBoundMapper mapper, Microsoft.ML.Runtime.Data.RoleMappedSchema trainSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.IDataScorerTransform Create(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerBindableMapper/Arguments args, class Microsoft.ML.Runtime.Data.IDataView data, class Microsoft.ML.Runtime.Data.ISchemaBoundMapper mapper, class Microsoft.ML.Runtime.Data.RoleMappedSchema trainSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerBindableMapper.Arguments,Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Runtime.Data.ISchemaBoundMapper,Microsoft.ML.Runtime.Data.RoleMappedSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (env As IHostEnvironment, args As TreeEnsembleFeaturizerBindableMapper.Arguments, data As IDataView, mapper As ISchemaBoundMapper, trainSchema As RoleMappedSchema) As IDataScorerTransform" />
      <MemberSignature Language="F#" Value="static member Create : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerBindableMapper.Arguments * Microsoft.ML.Runtime.Data.IDataView * Microsoft.ML.Runtime.Data.ISchemaBoundMapper * Microsoft.ML.Runtime.Data.RoleMappedSchema -&gt; Microsoft.ML.Runtime.Data.IDataScorerTransform" Usage="Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.Create (env, args, data, mapper, trainSchema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.IDataScorerTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="args" Type="Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerBindableMapper+Arguments" />
        <Parameter Name="data" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="mapper" Type="Microsoft.ML.Runtime.Data.ISchemaBoundMapper" />
        <Parameter Name="trainSchema" Type="Microsoft.ML.Runtime.Data.RoleMappedSchema" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="args">To be added.</param>
        <param name="data">To be added.</param>
        <param name="mapper">To be added.</param>
        <param name="trainSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForEntryPoint">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.IDataTransform CreateForEntryPoint (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.ArgumentsForEntryPoint args, Microsoft.ML.Runtime.Data.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.IDataTransform CreateForEntryPoint(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform/ArgumentsForEntryPoint args, class Microsoft.ML.Runtime.Data.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.CreateForEntryPoint(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.ArgumentsForEntryPoint,Microsoft.ML.Runtime.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateForEntryPoint (env As IHostEnvironment, args As TreeEnsembleFeaturizerTransform.ArgumentsForEntryPoint, input As IDataView) As IDataTransform" />
      <MemberSignature Language="F#" Value="static member CreateForEntryPoint : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.ArgumentsForEntryPoint * Microsoft.ML.Runtime.Data.IDataView -&gt; Microsoft.ML.Runtime.Data.IDataTransform" Usage="Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform.CreateForEntryPoint (env, args, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.IDataTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="args" Type="Microsoft.ML.Runtime.Data.TreeEnsembleFeaturizerTransform+ArgumentsForEntryPoint" />
        <Parameter Name="input" Type="Microsoft.ML.Runtime.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="args">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>