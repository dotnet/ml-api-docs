<Type Name="ICounted" FullName="Microsoft.ML.Runtime.Data.ICounted">
  <TypeSignature Language="C#" Value="public interface ICounted" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICounted" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Data.ICounted" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICounted" />
  <TypeSignature Language="F#" Value="type ICounted = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            This is a base interface for an <see cref="T:Microsoft.ML.Runtime.Data.ICursor" /> and <see cref="T:Microsoft.ML.Runtime.Data.IRow" />. It contains only the
            positional properties, no behavioral methods, and no data.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Batch">
      <MemberSignature Language="C#" Value="public long Batch { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Batch" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Data.ICounted.Batch" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Batch As Long" />
      <MemberSignature Language="F#" Value="member this.Batch : int64" Usage="Microsoft.ML.Runtime.Data.ICounted.Batch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             This provides a means for reconciling multiple streams of counted things. Generally, in each stream,
             batch numbers should be non-decreasing. Furthermore, any given batch number should only appear in one
             of the streams. Order is determined by batch number. The reconciler ensures that each stream (that is
             still active) has at least one item available, then takes the item with the smallest batch number.
            
             Note that there is no suggestion that the batches for a particular entry will be consistent from
             cursoring to cursoring, except for the consistency in resulting in the same overall ordering. The same
             entry could have different batch numbers from one cursoring to another. There is also no requirement
             that any given batch number must appear, at all.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIdGetter">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Data.ValueGetter&lt;Microsoft.ML.Runtime.Data.UInt128&gt; GetIdGetter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.Data.ValueGetter`1&lt;valuetype Microsoft.ML.Runtime.Data.UInt128&gt; GetIdGetter() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ICounted.GetIdGetter" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIdGetter () As ValueGetter(Of UInt128)" />
      <MemberSignature Language="F#" Value="abstract member GetIdGetter : unit -&gt; Microsoft.ML.Runtime.Data.ValueGetter&lt;Microsoft.ML.Runtime.Data.UInt128&gt;" Usage="iCounted.GetIdGetter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.ValueGetter&lt;Microsoft.ML.Runtime.Data.UInt128&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             A getter for a 128-bit ID value. It is common for objects to serve multiple <see cref="T:Microsoft.ML.Runtime.Data.ICounted" />
             instances to iterate over what is supposed to be the same data, e.g., in a <see cref="T:Microsoft.ML.Runtime.Data.IDataView" />
             a cursor set will produce the same data as a serial cursor, just partitioned, and a shuffled cursor
             will produce the same data as a serial cursor or any other shuffled cursor, only shuffled. The ID
             exists for applications that need to reconcile which entry is actually which. Ideally this ID should
             be unique, but for practical reasons, it suffices if collisions are simply extremely improbable.
            
             Note that this ID, while it must be consistent for multiple streams according to the semantics
             above, is not considered part of the data per se. So, to take the example of a data view specifically,
             a single data view must render consistent IDs across all cursorings, but there is no suggestion at
             all that if the "same" data were presented in a different data view (as by, say, being transformed,
             cached, saved, or whatever), that the IDs between the two different data views would have any
             discernable relationship.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public long Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Data.ICounted.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As Long" />
      <MemberSignature Language="F#" Value="member this.Position : int64" Usage="Microsoft.ML.Runtime.Data.ICounted.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             This is incremented for ICursor when the underlying contents changes, giving clients a way to detect change.
             Generally it's -1 when the object is in an invalid state. In particular, for an <see cref="T:Microsoft.ML.Runtime.Data.ICursor" />, this is -1
             when the <see cref="P:Microsoft.ML.Runtime.Data.ICursor.State" /> is <see cref="F:Microsoft.ML.Runtime.Data.CursorState.NotStarted" /> or <see cref="F:Microsoft.ML.Runtime.Data.CursorState.Done" />.
            
             Note that this position is not position within the underlying data, but position of this cursor only.
             If one, for example, opened a set of parallel streaming cursors, or a shuffled cursor, each such cursor's
             first valid entry would always have position 0.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>