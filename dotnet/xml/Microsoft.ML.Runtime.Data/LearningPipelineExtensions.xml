<Type Name="LearningPipelineExtensions" FullName="Microsoft.ML.Runtime.Data.LearningPipelineExtensions">
  <TypeSignature Language="C#" Value="public static class LearningPipelineExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LearningPipelineExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Data.LearningPipelineExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module LearningPipelineExtensions" />
  <TypeSignature Language="F#" Value="type LearningPipelineExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods that allow chaining estimator and transformer pipes together.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Append&lt;TTrans&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.TransformerChain&lt;TTrans&gt; Append&lt;TTrans&gt; (this Microsoft.ML.Core.Data.ITransformer start, TTrans transformer) where TTrans : class, Microsoft.ML.Core.Data.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.TransformerChain`1&lt;!!TTrans&gt; Append&lt;class (class Microsoft.ML.Core.Data.ITransformer) TTrans&gt;(class Microsoft.ML.Core.Data.ITransformer start, !!TTrans transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.LearningPipelineExtensions.Append``1(Microsoft.ML.Core.Data.ITransformer,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TTrans As {Class, ITransformer}) (start As ITransformer, transformer As TTrans) As TransformerChain(Of TTrans)" />
      <MemberSignature Language="F#" Value="static member Append : Microsoft.ML.Core.Data.ITransformer * 'rans -&gt; Microsoft.ML.Runtime.Data.TransformerChain&lt;'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)&gt; (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)" Usage="Microsoft.ML.Runtime.Data.LearningPipelineExtensions.Append (start, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.TransformerChain&lt;TTrans&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTrans">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.Core.Data.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="Microsoft.ML.Core.Data.ITransformer" RefType="this" />
        <Parameter Name="transformer" Type="TTrans" />
      </Parameters>
      <Docs>
        <typeparam name="TTrans">To be added.</typeparam>
        <param name="start">To be added.</param>
        <param name="transformer">To be added.</param>
        <summary>
            Create a transformer chain by appending a transformer to a transformer.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TTrans&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.EstimatorChain&lt;TTrans&gt; Append&lt;TTrans&gt; (this Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Core.Data.ITransformer&gt; start, Microsoft.ML.Core.Data.IEstimator&lt;TTrans&gt; estimator, Microsoft.ML.Runtime.Data.TransformerScope scope = Microsoft.ML.Runtime.Data.TransformerScope.Everything) where TTrans : class, Microsoft.ML.Core.Data.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.EstimatorChain`1&lt;!!TTrans&gt; Append&lt;class (class Microsoft.ML.Core.Data.ITransformer) TTrans&gt;(class Microsoft.ML.Core.Data.IEstimator`1&lt;class Microsoft.ML.Core.Data.ITransformer&gt; start, class Microsoft.ML.Core.Data.IEstimator`1&lt;!!TTrans&gt; estimator, valuetype Microsoft.ML.Runtime.Data.TransformerScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.LearningPipelineExtensions.Append``1(Microsoft.ML.Core.Data.IEstimator{Microsoft.ML.Core.Data.ITransformer},Microsoft.ML.Core.Data.IEstimator{``0},Microsoft.ML.Runtime.Data.TransformerScope)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TTrans As {Class, ITransformer}) (start As IEstimator(Of ITransformer), estimator As IEstimator(Of TTrans), Optional scope As TransformerScope = Microsoft.ML.Runtime.Data.TransformerScope.Everything) As EstimatorChain(Of TTrans)" />
      <MemberSignature Language="F#" Value="static member Append : Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Core.Data.ITransformer&gt; * Microsoft.ML.Core.Data.IEstimator&lt;'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)&gt; * Microsoft.ML.Runtime.Data.TransformerScope -&gt; Microsoft.ML.Runtime.Data.EstimatorChain&lt;'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)&gt; (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)" Usage="Microsoft.ML.Runtime.Data.LearningPipelineExtensions.Append (start, estimator, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.EstimatorChain&lt;TTrans&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTrans">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.Core.Data.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Core.Data.ITransformer&gt;" RefType="this" />
        <Parameter Name="estimator" Type="Microsoft.ML.Core.Data.IEstimator&lt;TTrans&gt;" />
        <Parameter Name="scope" Type="Microsoft.ML.Runtime.Data.TransformerScope" />
      </Parameters>
      <Docs>
        <typeparam name="TTrans">To be added.</typeparam>
        <param name="start">To be added.</param>
        <param name="estimator">To be added.</param>
        <param name="scope">To be added.</param>
        <summary>
            Create an estimator chain by appending an estimator to an estimator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource,TTrans&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.CompositeReaderEstimator&lt;TSource,TTrans&gt; Append&lt;TSource,TTrans&gt; (this Microsoft.ML.Core.Data.IDataReader&lt;TSource&gt; start, Microsoft.ML.Core.Data.IEstimator&lt;TTrans&gt; estimator) where TTrans : class, Microsoft.ML.Core.Data.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.CompositeReaderEstimator`2&lt;!!TSource, !!TTrans&gt; Append&lt;TSource, class (class Microsoft.ML.Core.Data.ITransformer) TTrans&gt;(class Microsoft.ML.Core.Data.IDataReader`1&lt;!!TSource&gt; start, class Microsoft.ML.Core.Data.IEstimator`1&lt;!!TTrans&gt; estimator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.LearningPipelineExtensions.Append``2(Microsoft.ML.Core.Data.IDataReader{``0},Microsoft.ML.Core.Data.IEstimator{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource, TTrans) (start As IDataReader(Of TSource), estimator As IEstimator(Of TTrans)) As CompositeReaderEstimator(Of TSource, TTrans)" />
      <MemberSignature Language="F#" Value="static member Append : Microsoft.ML.Core.Data.IDataReader&lt;'Source&gt; * Microsoft.ML.Core.Data.IEstimator&lt;'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)&gt; -&gt; Microsoft.ML.Runtime.Data.CompositeReaderEstimator&lt;'Source, 'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)&gt; (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)" Usage="Microsoft.ML.Runtime.Data.LearningPipelineExtensions.Append (start, estimator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.CompositeReaderEstimator&lt;TSource,TTrans&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TTrans">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.Core.Data.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="Microsoft.ML.Core.Data.IDataReader&lt;TSource&gt;" RefType="this" />
        <Parameter Name="estimator" Type="Microsoft.ML.Core.Data.IEstimator&lt;TTrans&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <typeparam name="TTrans">To be added.</typeparam>
        <param name="start">To be added.</param>
        <param name="estimator">To be added.</param>
        <summary>
            Create a composite reader estimator by appending an estimator to a reader.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource,TTrans&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.CompositeDataReader&lt;TSource,TTrans&gt; Append&lt;TSource,TTrans&gt; (this Microsoft.ML.Core.Data.IDataReader&lt;TSource&gt; reader, TTrans transformer) where TTrans : class, Microsoft.ML.Core.Data.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.CompositeDataReader`2&lt;!!TSource, !!TTrans&gt; Append&lt;TSource, class (class Microsoft.ML.Core.Data.ITransformer) TTrans&gt;(class Microsoft.ML.Core.Data.IDataReader`1&lt;!!TSource&gt; reader, !!TTrans transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.LearningPipelineExtensions.Append``2(Microsoft.ML.Core.Data.IDataReader{``0},``1)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource, TTrans) (reader As IDataReader(Of TSource), transformer As TTrans) As CompositeDataReader(Of TSource, TTrans)" />
      <MemberSignature Language="F#" Value="static member Append : Microsoft.ML.Core.Data.IDataReader&lt;'Source&gt; * 'rans -&gt; Microsoft.ML.Runtime.Data.CompositeDataReader&lt;'Source, 'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)&gt; (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)" Usage="Microsoft.ML.Runtime.Data.LearningPipelineExtensions.Append (reader, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.CompositeDataReader&lt;TSource,TTrans&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TTrans">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.Core.Data.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="Microsoft.ML.Core.Data.IDataReader&lt;TSource&gt;" RefType="this" />
        <Parameter Name="transformer" Type="TTrans" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <typeparam name="TTrans">To be added.</typeparam>
        <param name="reader">To be added.</param>
        <param name="transformer">To be added.</param>
        <summary>
            Create a composite reader by appending a transformer to a data reader.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource,TTrans&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Data.CompositeReaderEstimator&lt;TSource,TTrans&gt; Append&lt;TSource,TTrans&gt; (this Microsoft.ML.Core.Data.IDataReaderEstimator&lt;TSource,Microsoft.ML.Core.Data.IDataReader&lt;TSource&gt;&gt; start, Microsoft.ML.Core.Data.IEstimator&lt;TTrans&gt; estimator) where TTrans : class, Microsoft.ML.Core.Data.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Data.CompositeReaderEstimator`2&lt;!!TSource, !!TTrans&gt; Append&lt;TSource, class (class Microsoft.ML.Core.Data.ITransformer) TTrans&gt;(class Microsoft.ML.Core.Data.IDataReaderEstimator`2&lt;!!TSource, class Microsoft.ML.Core.Data.IDataReader`1&lt;!!TSource&gt;&gt; start, class Microsoft.ML.Core.Data.IEstimator`1&lt;!!TTrans&gt; estimator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.LearningPipelineExtensions.Append``2(Microsoft.ML.Core.Data.IDataReaderEstimator{``0,Microsoft.ML.Core.Data.IDataReader{``0}},Microsoft.ML.Core.Data.IEstimator{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource, TTrans) (start As IDataReaderEstimator(Of TSource, IDataReader(Of TSource)), estimator As IEstimator(Of TTrans)) As CompositeReaderEstimator(Of TSource, TTrans)" />
      <MemberSignature Language="F#" Value="static member Append : Microsoft.ML.Core.Data.IDataReaderEstimator&lt;'Source, Microsoft.ML.Core.Data.IDataReader&lt;'Source&gt;&gt; * Microsoft.ML.Core.Data.IEstimator&lt;'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)&gt; -&gt; Microsoft.ML.Runtime.Data.CompositeReaderEstimator&lt;'Source, 'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)&gt; (requires 'rans : null and 'rans :&gt; Microsoft.ML.Core.Data.ITransformer)" Usage="Microsoft.ML.Runtime.Data.LearningPipelineExtensions.Append (start, estimator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.CompositeReaderEstimator&lt;TSource,TTrans&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TTrans">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.Core.Data.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="Microsoft.ML.Core.Data.IDataReaderEstimator&lt;TSource,Microsoft.ML.Core.Data.IDataReader&lt;TSource&gt;&gt;" RefType="this" />
        <Parameter Name="estimator" Type="Microsoft.ML.Core.Data.IEstimator&lt;TTrans&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <typeparam name="TTrans">To be added.</typeparam>
        <param name="start">To be added.</param>
        <param name="estimator">To be added.</param>
        <summary>
            Create a composite reader estimator by appending an estimator to a reader estimator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>