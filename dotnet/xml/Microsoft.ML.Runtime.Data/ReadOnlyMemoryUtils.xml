<Type Name="ReadOnlyMemoryUtils" FullName="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils">
  <TypeSignature Language="C#" Value="public static class ReadOnlyMemoryUtils" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ReadOnlyMemoryUtils extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils" />
  <TypeSignature Language="VB.NET" Value="Public Module ReadOnlyMemoryUtils" />
  <TypeSignature Language="F#" Value="type ReadOnlyMemoryUtils = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddLowerCaseToStringBuilder">
      <MemberSignature Language="C#" Value="public static void AddLowerCaseToStringBuilder (ReadOnlySpan&lt;char&gt; span, System.Text.StringBuilder sb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddLowerCaseToStringBuilder(valuetype System.ReadOnlySpan`1&lt;char&gt; span, class System.Text.StringBuilder sb) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.AddLowerCaseToStringBuilder(System.ReadOnlySpan{System.Char},System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLowerCaseToStringBuilder (span As ReadOnlySpan(Of Char), sb As StringBuilder)" />
      <MemberSignature Language="F#" Value="static member AddLowerCaseToStringBuilder : ReadOnlySpan&lt;char&gt; * System.Text.StringBuilder -&gt; unit" Usage="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.AddLowerCaseToStringBuilder (span, sb)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="sb" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="span">To be added.</param>
        <param name="sb">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToPool">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Internal.Utilities.NormStr AddToPool (ReadOnlyMemory&lt;char&gt; memory, Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool pool);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Internal.Utilities.NormStr AddToPool(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, class Microsoft.ML.Runtime.Internal.Utilities.NormStr/Pool pool) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.AddToPool(System.ReadOnlyMemory{System.Char},Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool)" />
      <MemberSignature Language="F#" Value="static member AddToPool : ReadOnlyMemory&lt;char&gt; * Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool -&gt; Microsoft.ML.Runtime.Internal.Utilities.NormStr" Usage="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.AddToPool (memory, pool)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Internal.Utilities.NormStr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="pool" Type="Microsoft.ML.Runtime.Internal.Utilities.NormStr+Pool" />
      </Parameters>
      <Docs>
        <param name="memory">To be added.</param>
        <param name="pool">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendMemory">
      <MemberSignature Language="C#" Value="public static System.Text.StringBuilder AppendMemory (this System.Text.StringBuilder sb, ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.StringBuilder AppendMemory(class System.Text.StringBuilder sb, valuetype System.ReadOnlyMemory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.AppendMemory(System.Text.StringBuilder,System.ReadOnlyMemory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AppendMemory (sb As StringBuilder, memory As ReadOnlyMemory(Of Char)) As StringBuilder" />
      <MemberSignature Language="F#" Value="static member AppendMemory : System.Text.StringBuilder * ReadOnlyMemory&lt;char&gt; -&gt; System.Text.StringBuilder" Usage="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.AppendMemory (sb, memory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sb" Type="System.Text.StringBuilder" RefType="this" />
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="sb">To be added.</param>
        <param name="memory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSpan">
      <MemberSignature Language="C#" Value="public static System.Text.StringBuilder AppendSpan (this System.Text.StringBuilder sb, ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.StringBuilder AppendSpan(class System.Text.StringBuilder sb, valuetype System.ReadOnlySpan`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.AppendSpan(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AppendSpan (sb As StringBuilder, span As ReadOnlySpan(Of Char)) As StringBuilder" />
      <MemberSignature Language="F#" Value="static member AppendSpan : System.Text.StringBuilder * ReadOnlySpan&lt;char&gt; -&gt; System.Text.StringBuilder" Usage="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.AppendSpan (sb, span)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sb" Type="System.Text.StringBuilder" RefType="this" />
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="sb">To be added.</param>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsStr">
      <MemberSignature Language="C#" Value="public static bool EqualsStr (string s, ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EqualsStr(string s, valuetype System.ReadOnlyMemory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.EqualsStr(System.String,System.ReadOnlyMemory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsStr (s As String, memory As ReadOnlyMemory(Of Char)) As Boolean" />
      <MemberSignature Language="F#" Value="static member EqualsStr : string * ReadOnlyMemory&lt;char&gt; -&gt; bool" Usage="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.EqualsStr (s, memory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="memory">To be added.</param>
        <summary>
            Compare equality with the given system string value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindInPool">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Runtime.Internal.Utilities.NormStr FindInPool (ReadOnlyMemory&lt;char&gt; memory, Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool pool);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Runtime.Internal.Utilities.NormStr FindInPool(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, class Microsoft.ML.Runtime.Internal.Utilities.NormStr/Pool pool) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.FindInPool(System.ReadOnlyMemory{System.Char},Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool)" />
      <MemberSignature Language="F#" Value="static member FindInPool : ReadOnlyMemory&lt;char&gt; * Microsoft.ML.Runtime.Internal.Utilities.NormStr.Pool -&gt; Microsoft.ML.Runtime.Internal.Utilities.NormStr" Usage="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.FindInPool (memory, pool)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Internal.Utilities.NormStr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="pool" Type="Microsoft.ML.Runtime.Internal.Utilities.NormStr+Pool" />
      </Parameters>
      <Docs>
        <param name="memory">To be added.</param>
        <param name="pool">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;ReadOnlyMemory&lt;char&gt;&gt; Split (ReadOnlyMemory&lt;char&gt; memory, char[] separators);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype System.ReadOnlyMemory`1&lt;char&gt;&gt; Split(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, char[] separators) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.Split(System.ReadOnlyMemory{System.Char},System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function Split (memory As ReadOnlyMemory(Of Char), separators As Char()) As IEnumerable(Of ReadOnlyMemory(Of Char))" />
      <MemberSignature Language="F#" Value="static member Split : ReadOnlyMemory&lt;char&gt; * char[] -&gt; seq&lt;ReadOnlyMemory&lt;char&gt;&gt;" Usage="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.Split (memory, separators)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils/&lt;Split&gt;d__1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ReadOnlyMemory&lt;System.Char&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="separators" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="memory">To be added.</param>
        <param name="separators">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitOne">
      <MemberSignature Language="C#" Value="public static bool SplitOne (ReadOnlyMemory&lt;char&gt; memory, char separator, out ReadOnlyMemory&lt;char&gt; left, out ReadOnlyMemory&lt;char&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SplitOne(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, char separator, [out] valuetype System.ReadOnlyMemory`1&lt;char&gt;&amp; left, [out] valuetype System.ReadOnlyMemory`1&lt;char&gt;&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.SplitOne(System.ReadOnlyMemory{System.Char},System.Char,System.ReadOnlyMemory{System.Char}@,System.ReadOnlyMemory{System.Char}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function SplitOne (memory As ReadOnlyMemory(Of Char), separator As Char, ByRef left As ReadOnlyMemory(Of Char), ByRef right As ReadOnlyMemory(Of Char)) As Boolean" />
      <MemberSignature Language="F#" Value="static member SplitOne : ReadOnlyMemory&lt;char&gt; * char *  *  -&gt; bool" Usage="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.SplitOne (memory, separator, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="left" Type="System.ReadOnlyMemory&lt;System.Char&gt;" RefType="out" />
        <Parameter Name="right" Type="System.ReadOnlyMemory&lt;System.Char&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memory">To be added.</param>
        <param name="separator">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Splits <paramref name="memory" /> on the left-most occurrence of separator and produces the left
            and right <see cref="T:System.ReadOnlyMemory`1" /> of <see cref="T:System.Char" /> values. If <paramref name="memory" /> does not contain the separator character,
            this returns false and sets <paramref name="left" /> to this instance and <paramref name="right" />
            to the default <see cref="T:System.ReadOnlyMemory`1" /> of <see cref="T:System.Char" /> value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitOne">
      <MemberSignature Language="C#" Value="public static bool SplitOne (ReadOnlyMemory&lt;char&gt; memory, char[] separators, out ReadOnlyMemory&lt;char&gt; left, out ReadOnlyMemory&lt;char&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SplitOne(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, char[] separators, [out] valuetype System.ReadOnlyMemory`1&lt;char&gt;&amp; left, [out] valuetype System.ReadOnlyMemory`1&lt;char&gt;&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.SplitOne(System.ReadOnlyMemory{System.Char},System.Char[],System.ReadOnlyMemory{System.Char}@,System.ReadOnlyMemory{System.Char}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function SplitOne (memory As ReadOnlyMemory(Of Char), separators As Char(), ByRef left As ReadOnlyMemory(Of Char), ByRef right As ReadOnlyMemory(Of Char)) As Boolean" />
      <MemberSignature Language="F#" Value="static member SplitOne : ReadOnlyMemory&lt;char&gt; * char[] *  *  -&gt; bool" Usage="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.SplitOne (memory, separators, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="separators" Type="System.Char[]" />
        <Parameter Name="left" Type="System.ReadOnlyMemory&lt;System.Char&gt;" RefType="out" />
        <Parameter Name="right" Type="System.ReadOnlyMemory&lt;System.Char&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memory">To be added.</param>
        <param name="separators">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Splits <paramref name="memory" /> on the left-most occurrence of an element of separators character array and
            produces the left and right <see cref="T:System.ReadOnlyMemory`1" /> of <see cref="T:System.Char" /> values. If <paramref name="memory" /> does not contain any of the
            characters in separators, this return false and initializes <paramref name="left" /> to this instance
            and <paramref name="right" /> to the default <see cref="T:System.ReadOnlyMemory`1" /> of <see cref="T:System.Char" /> value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEndWhiteSpace">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; TrimEndWhiteSpace (ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; TrimEndWhiteSpace(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.TrimEndWhiteSpace(System.ReadOnlyMemory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEndWhiteSpace (memory As ReadOnlyMemory(Of Char)) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="F#" Value="static member TrimEndWhiteSpace : ReadOnlyMemory&lt;char&gt; -&gt; ReadOnlyMemory&lt;char&gt;" Usage="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.TrimEndWhiteSpace memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="memory">To be added.</param>
        <summary>
            Returns a <see cref="T:System.ReadOnlyMemory`1" /> of <see cref="T:System.Char" /> with trailing whitespace trimmed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimSpaces">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; TrimSpaces (ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; TrimSpaces(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.TrimSpaces(System.ReadOnlyMemory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimSpaces (memory As ReadOnlyMemory(Of Char)) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="F#" Value="static member TrimSpaces : ReadOnlyMemory&lt;char&gt; -&gt; ReadOnlyMemory&lt;char&gt;" Usage="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.TrimSpaces memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="memory">To be added.</param>
        <summary>
            Returns a <see cref="T:System.ReadOnlyMemory`1" /> of <see cref="T:System.Char" /> with leading and trailing spaces trimmed. Note that this
            will remove only spaces, not any form of whitespace.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; TrimWhiteSpace (ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; TrimWhiteSpace(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.TrimWhiteSpace(System.ReadOnlyMemory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimWhiteSpace (memory As ReadOnlyMemory(Of Char)) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="F#" Value="static member TrimWhiteSpace : ReadOnlyMemory&lt;char&gt; -&gt; ReadOnlyMemory&lt;char&gt;" Usage="Microsoft.ML.Runtime.Data.ReadOnlyMemoryUtils.TrimWhiteSpace memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="memory">To be added.</param>
        <summary>
            Returns a <see cref="T:System.ReadOnlyMemory`1" /> of <see cref="T:System.Char" /> with leading and trailing whitespace trimmed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>