<Type Name="TrainContext" FullName="Microsoft.ML.Runtime.TrainContext">
  <TypeSignature Language="C#" Value="public sealed class TrainContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TrainContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.TrainContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TrainContext" />
  <TypeSignature Language="F#" Value="type TrainContext = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Holds information relevant to trainers. Instances of this class are meant to be constructed and passed
            into <see cref="M:Microsoft.ML.Runtime.ITrainer`1.Train(Microsoft.ML.Runtime.TrainContext)" /> or <see cref="M:Microsoft.ML.Runtime.ITrainer.Train(Microsoft.ML.Runtime.TrainContext)" />.
            This holds at least a training set, as well as optioonally a predictor.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TrainContext (Microsoft.ML.Runtime.Data.RoleMappedData trainingSet, Microsoft.ML.Runtime.Data.RoleMappedData validationSet = null, Microsoft.ML.Runtime.IPredictor initialPredictor = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.Data.RoleMappedData trainingSet, class Microsoft.ML.Runtime.Data.RoleMappedData validationSet, class Microsoft.ML.Runtime.IPredictor initialPredictor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.TrainContext.#ctor(Microsoft.ML.Runtime.Data.RoleMappedData,Microsoft.ML.Runtime.Data.RoleMappedData,Microsoft.ML.Runtime.IPredictor)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (trainingSet As RoleMappedData, Optional validationSet As RoleMappedData = null, Optional initialPredictor As IPredictor = null)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.TrainContext : Microsoft.ML.Runtime.Data.RoleMappedData * Microsoft.ML.Runtime.Data.RoleMappedData * Microsoft.ML.Runtime.IPredictor -&gt; Microsoft.ML.Runtime.TrainContext" Usage="new Microsoft.ML.Runtime.TrainContext (trainingSet, validationSet, initialPredictor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="trainingSet" Type="Microsoft.ML.Runtime.Data.RoleMappedData" />
        <Parameter Name="validationSet" Type="Microsoft.ML.Runtime.Data.RoleMappedData" />
        <Parameter Name="initialPredictor" Type="Microsoft.ML.Runtime.IPredictor" />
      </Parameters>
      <Docs>
        <param name="trainingSet">Will set <see cref="P:Microsoft.ML.Runtime.TrainContext.TrainingSet" /> to this value. This must be specified</param>
        <param name="validationSet">Will set <see cref="P:Microsoft.ML.Runtime.TrainContext.ValidationSet" /> to this value if specified</param>
        <param name="initialPredictor">Will set <see cref="P:Microsoft.ML.Runtime.TrainContext.InitialPredictor" /> to this value if specified</param>
        <summary>
            Constructor, given a training set and optional other arguments.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialPredictor">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.IPredictor InitialPredictor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.IPredictor InitialPredictor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.TrainContext.InitialPredictor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InitialPredictor As IPredictor" />
      <MemberSignature Language="F#" Value="member this.InitialPredictor : Microsoft.ML.Runtime.IPredictor" Usage="Microsoft.ML.Runtime.TrainContext.InitialPredictor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IPredictor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The initial predictor, for incremental training. Note that if a <see cref="T:Microsoft.ML.Runtime.ITrainer" /> implementor
            does not support incremental training, then it can ignore it similarly to how one would ignore
            <see cref="P:Microsoft.ML.Runtime.TrainContext.ValidationSet" />. However, if the trainer does support incremental training and there
            is something wrong with a non-<c>null</c> value of this, then the trainer ought to throw an exception.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrainingSet">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Data.RoleMappedData TrainingSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.Data.RoleMappedData TrainingSet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.TrainContext.TrainingSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TrainingSet As RoleMappedData" />
      <MemberSignature Language="F#" Value="member this.TrainingSet : Microsoft.ML.Runtime.Data.RoleMappedData" Usage="Microsoft.ML.Runtime.TrainContext.TrainingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.RoleMappedData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The training set. Cannot be <c>null</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationSet">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.Data.RoleMappedData ValidationSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.Data.RoleMappedData ValidationSet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.TrainContext.ValidationSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidationSet As RoleMappedData" />
      <MemberSignature Language="F#" Value="member this.ValidationSet : Microsoft.ML.Runtime.Data.RoleMappedData" Usage="Microsoft.ML.Runtime.TrainContext.ValidationSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.Data.RoleMappedData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The validation set. Can be <c>null</c>. Note that passing a non-<c>null</c> validation set into
            a trainer that does not support validation sets should not be considered an error condition. It
            should simply be ignored in that case.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>