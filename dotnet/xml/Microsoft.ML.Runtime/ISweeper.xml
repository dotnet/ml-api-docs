<Type Name="ISweeper" FullName="Microsoft.ML.Runtime.ISweeper">
  <TypeSignature Language="C#" Value="public interface ISweeper" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISweeper" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.ISweeper" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISweeper" />
  <TypeSignature Language="F#" Value="type ISweeper = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISweeper" />
  <TypeSignature Language="C++ CX" Value="public interface class ISweeper" />
  <TypeSignature Language="C++ WINRT" Value="__interface ISweeper" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            The main interface of the sweeper
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ProposeSweeps">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.ParameterSet[] ProposeSweeps (int maxSweeps, System.Collections.Generic.IEnumerable&lt;Microsoft.ML.Runtime.IRunResult&gt; previousRuns = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.ParameterSet[] ProposeSweeps(int32 maxSweeps, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ML.Runtime.IRunResult&gt; previousRuns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.ISweeper.ProposeSweeps(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.ML.Runtime.IRunResult})" />
      <MemberSignature Language="VB.NET" Value="Public Function ProposeSweeps (maxSweeps As Integer, Optional previousRuns As IEnumerable(Of IRunResult) = null) As ParameterSet()" />
      <MemberSignature Language="F#" Value="abstract member ProposeSweeps : int * seq&lt;Microsoft.ML.Runtime.IRunResult&gt; -&gt; Microsoft.ML.Runtime.ParameterSet[]" Usage="iSweeper.ProposeSweeps (maxSweeps, previousRuns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.ParameterSet[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxSweeps" Type="System.Int32" />
        <Parameter Name="previousRuns" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.ML.Runtime.IRunResult&gt;" />
      </Parameters>
      <Docs>
        <param name="maxSweeps">To be added.</param>
        <param name="previousRuns">To be added.</param>
        <summary>
            Returns between 0 and maxSweeps configurations to run.
            It expects a list of previous runs such that it can generate configurations that were not already tried.
            The list of runs can be null if there were no previous runs.
            Some smart sweepers can take advantage of the metric(s) that the caller computes for previous runs.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>