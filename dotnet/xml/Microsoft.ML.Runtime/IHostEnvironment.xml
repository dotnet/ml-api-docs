<Type Name="IHostEnvironment" FullName="Microsoft.ML.Runtime.IHostEnvironment">
  <TypeSignature Language="C#" Value="public interface IHostEnvironment : Microsoft.ML.Runtime.IChannelProvider, Microsoft.ML.Runtime.IProgressChannelProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHostEnvironment implements class Microsoft.ML.Runtime.IChannelProvider, class Microsoft.ML.Runtime.IExceptionContext, class Microsoft.ML.Runtime.IProgressChannelProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.IHostEnvironment" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHostEnvironment&#xA;Implements IChannelProvider, IProgressChannelProvider" />
  <TypeSignature Language="F#" Value="type IHostEnvironment = interface&#xA;    interface IChannelProvider&#xA;    interface IExceptionContext&#xA;    interface IProgressChannelProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.IChannelProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.IProgressChannelProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            The host environment interface creates hosts for components. Note that the methods of
            this interface should be called from the main thread for the environment. To get an environment
            to service another thread, call Fork and pass the return result to that thread.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ConcurrencyFactor">
      <MemberSignature Language="C#" Value="public int ConcurrencyFactor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConcurrencyFactor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.IHostEnvironment.ConcurrencyFactor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConcurrencyFactor As Integer" />
      <MemberSignature Language="F#" Value="member this.ConcurrencyFactor : int" Usage="Microsoft.ML.Runtime.IHostEnvironment.ConcurrencyFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            How much concurrency the component should use. A value of 1 means
            single-threaded. Higher values generally mean number of threads. Less
            than 1 means whatever the component views as ideal.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOutputFile">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.IFileHandle CreateOutputFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.IFileHandle CreateOutputFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.IHostEnvironment.CreateOutputFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateOutputFile (path As String) As IFileHandle" />
      <MemberSignature Language="F#" Value="abstract member CreateOutputFile : string -&gt; Microsoft.ML.Runtime.IFileHandle" Usage="iHostEnvironment.CreateOutputFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IFileHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>
            Create an output "file" and return a handle to it.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTempFile">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.IFileHandle CreateTempFile (string suffix = null, string prefix = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.IFileHandle CreateTempFile(string suffix, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.IHostEnvironment.CreateTempFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTempFile (Optional suffix As String = null, Optional prefix As String = null) As IFileHandle" />
      <MemberSignature Language="F#" Value="abstract member CreateTempFile : string * string -&gt; Microsoft.ML.Runtime.IFileHandle" Usage="iHostEnvironment.CreateTempFile (suffix, prefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IFileHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="suffix">To be added.</param>
        <param name="prefix">To be added.</param>
        <summary>
             Create a temporary "file" and return a handle to it. Generally temp files are expected to be
             written to exactly once, and then can be read multiple times.
             Note that IFileHandle derives from IDisposable. Clients may dispose the IFileHandle when it is
             no longer needed, but they are not required to. The host environment should track all temp file
             handles and ensure that they are disposed properly when the environment is "shut down".
            
             The suffix and prefix are optional. A common use for suffix is to specify an extension, eg, ".txt".
             The use of suffix and prefix, including whether they have any affect, is up to the host enviroment.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancelled">
      <MemberSignature Language="C#" Value="public bool IsCancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancelled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.IHostEnvironment.IsCancelled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancelled As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsCancelled : bool" Usage="Microsoft.ML.Runtime.IHostEnvironment.IsCancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Flag which indicate should we stop any code execution in this host.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenInputFile">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.IFileHandle OpenInputFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.IFileHandle OpenInputFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.IHostEnvironment.OpenInputFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenInputFile (path As String) As IFileHandle" />
      <MemberSignature Language="F#" Value="abstract member OpenInputFile : string -&gt; Microsoft.ML.Runtime.IFileHandle" Usage="iHostEnvironment.OpenInputFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IFileHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>
            Return a file handle for an input "file".
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.IHost Register (string name, Nullable&lt;int&gt; seed = null, Nullable&lt;bool&gt; verbose = null, Nullable&lt;int&gt; conc = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Runtime.IHost Register(string name, valuetype System.Nullable`1&lt;int32&gt; seed, valuetype System.Nullable`1&lt;bool&gt; verbose, valuetype System.Nullable`1&lt;int32&gt; conc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.IHostEnvironment.Register(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (name As String, Optional seed As Nullable(Of Integer) = null, Optional verbose As Nullable(Of Boolean) = null, Optional conc As Nullable(Of Integer) = null) As IHost" />
      <MemberSignature Language="F#" Value="abstract member Register : string * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; -&gt; Microsoft.ML.Runtime.IHost" Usage="iHostEnvironment.Register (name, seed, verbose, conc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IHost</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="verbose" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="conc" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="seed">To be added.</param>
        <param name="verbose">To be added.</param>
        <param name="conc">To be added.</param>
        <summary>
            Create a host with the given registration name.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>