<Type Name="ServerChannel+IPendingBundleNotification" FullName="Microsoft.ML.Runtime.ServerChannel+IPendingBundleNotification">
  <TypeSignature Language="C#" Value="public interface ServerChannel.IPendingBundleNotification" />
  <TypeSignature Language="ILAsm" Value=".class nested public interface auto ansi abstract ServerChannel/IPendingBundleNotification" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.ServerChannel.IPendingBundleNotification" />
  <TypeSignature Language="VB.NET" Value="Public Interface ServerChannel.IPendingBundleNotification" />
  <TypeSignature Language="F#" Value="type ServerChannel.IPendingBundleNotification = interface" />
  <TypeSignature Language="C++ CLI" Value="public: interface class ServerChannel::IPendingBundleNotification" />
  <TypeSignature Language="C++ CX" Value="public: interface class ServerChannel::IPendingBundleNotification" />
  <TypeSignature Language="C++ WINRT" Value="__interface ServerChannel::IPendingBundleNotification" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            When a <see cref="T:Microsoft.ML.Runtime.ServerChannel" /> is created, the creation method will send an implementation
            is a notification sent through an <see cref="T:Microsoft.ML.Runtime.IPipe`1" />, to indicate that
            a <see cref="T:Microsoft.ML.Runtime.ServerChannel.Bundle" /> may be pending soon. Listeners that want to receive the bundle to
            expose it, e.g., a web service, should register this interest by passing in an action to be called.
            If no listener registers interest, the server channel that sent the notification will act
            differently by, say, acting as a no-op w.r.t. client calls to it.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Acknowledge">
      <MemberSignature Language="C#" Value="public void Acknowledge (Action&lt;Microsoft.ML.Runtime.ServerChannel.Bundle&gt; toDo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Acknowledge(class System.Action`1&lt;class Microsoft.ML.Runtime.ServerChannel/Bundle&gt; toDo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.ServerChannel.IPendingBundleNotification.Acknowledge(System.Action{Microsoft.ML.Runtime.ServerChannel.Bundle})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Acknowledge (toDo As Action(Of ServerChannel.Bundle))" />
      <MemberSignature Language="F#" Value="abstract member Acknowledge : Action&lt;Microsoft.ML.Runtime.ServerChannel.Bundle&gt; -&gt; unit" Usage="iPendingBundleNotification.Acknowledge toDo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Acknowledge(Action&lt;Microsoft::ML::Runtime::ServerChannel::Bundle ^&gt; ^ toDo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toDo" Type="System.Action&lt;Microsoft.ML.Runtime.ServerChannel+Bundle&gt;" />
      </Parameters>
      <Docs>
        <param name="toDo">The callback to perform when all named delegates have been registered,
            and <see cref="M:Microsoft.ML.Runtime.ServerChannel.Publish" /> is called.</param>
        <summary>
            Any publisher of the named delegates will call this method, upon receiving an instance
            of this object through the pipe. This method serves two purposes: firstly it detects
            whether anyone is even interested in publishing anything at all, so that we can just
            ignore any input delegates in the case where no one is listening (which, we must expect,
            is the majority of scenarios). The second is that it provides an action to call, once
            all publishing is complete, and <see cref="M:Microsoft.ML.Runtime.ServerChannel.Publish" /> has been called by the client code.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>