<Type Name="IPredictorProducing&lt;TResult&gt;" FullName="Microsoft.ML.Runtime.IPredictorProducing&lt;TResult&gt;">
  <TypeSignature Language="C#" Value="public interface IPredictorProducing&lt;out TResult&gt; : Microsoft.ML.Runtime.IPredictor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPredictorProducing`1&lt;+ TResult&gt; implements class Microsoft.ML.Runtime.IPredictor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.IPredictorProducing`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPredictorProducing(Of Out TResult)&#xA;Implements IPredictor" />
  <TypeSignature Language="F#" Value="type IPredictorProducing&lt;'Result&gt; = interface&#xA;    interface IPredictor" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public interface class IPredictorProducing : Microsoft::ML::Runtime::IPredictor" />
  <TypeSignature Language="C++ CX" Value="public interface class IPredictorProducing : Microsoft::ML::Runtime::IPredictor" />
  <TypeSignature Language="C++ WINRT" Value="template &lt;typename TResult&gt;&#xA;__interface IPredictorProducing : Microsoft::ML::Runtime::IPredictor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.IPredictor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TResult">To be added.</typeparam>
    <summary>
            A predictor the produces values of the indicated type.
            REVIEW: Determine whether this is just a temporary shim or long term solution.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members />
</Type>