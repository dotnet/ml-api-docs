<Type Name="IComponentFactory&lt;TArg1,TArg2,TArg3,TComponent&gt;" FullName="Microsoft.ML.Runtime.IComponentFactory&lt;TArg1,TArg2,TArg3,TComponent&gt;">
  <TypeSignature Language="C#" Value="public interface IComponentFactory&lt;in TArg1,in TArg2,in TArg3,out TComponent&gt; : Microsoft.ML.Runtime.IComponentFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComponentFactory`4&lt;- TArg1, - TArg2, - TArg3, + TComponent&gt; implements class Microsoft.ML.Runtime.IComponentFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.IComponentFactory`4" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComponentFactory(Of In TArg1, In TArg2, In TArg3, Out TComponent)&#xA;Implements IComponentFactory" />
  <TypeSignature Language="F#" Value="type IComponentFactory&lt;'TArg1, 'TArg2, 'TArg3, 'Component&gt; = interface&#xA;    interface IComponentFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TArg1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TArg2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TArg3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TComponent">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.IComponentFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TArg1">To be added.</typeparam>
    <typeparam name="TArg2">To be added.</typeparam>
    <typeparam name="TArg3">To be added.</typeparam>
    <typeparam name="TComponent">To be added.</typeparam>
    <summary>
            An interface for creating a component when we take three extra parameters (and an <see cref="T:Microsoft.ML.Runtime.IHostEnvironment" />).
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateComponent">
      <MemberSignature Language="C#" Value="public TComponent CreateComponent (Microsoft.ML.Runtime.IHostEnvironment env, TArg1 argument1, TArg2 argument2, TArg3 argument3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TComponent CreateComponent(class Microsoft.ML.Runtime.IHostEnvironment env, !TArg1 argument1, !TArg2 argument2, !TArg3 argument3) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.IComponentFactory`4.CreateComponent(Microsoft.ML.Runtime.IHostEnvironment,`0,`1,`2)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateComponent (env As IHostEnvironment, argument1 As TArg1, argument2 As TArg2, argument3 As TArg3) As TComponent" />
      <MemberSignature Language="F#" Value="abstract member CreateComponent : Microsoft.ML.Runtime.IHostEnvironment * 'TArg1 * 'TArg2 * 'TArg3 -&gt; 'Component" Usage="iComponentFactory.CreateComponent (env, argument1, argument2, argument3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TComponent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="argument1" Type="TArg1" />
        <Parameter Name="argument2" Type="TArg2" />
        <Parameter Name="argument3" Type="TArg3" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="argument1">To be added.</param>
        <param name="argument2">To be added.</param>
        <param name="argument3">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>