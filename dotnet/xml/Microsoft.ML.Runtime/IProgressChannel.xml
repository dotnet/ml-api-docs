<Type Name="IProgressChannel" FullName="Microsoft.ML.Runtime.IProgressChannel">
  <TypeSignature Language="C#" Value="public interface IProgressChannel : IDisposable, Microsoft.ML.Runtime.IProgressChannelProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProgressChannel implements class Microsoft.ML.Runtime.IProgressChannelProvider, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.IProgressChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProgressChannel&#xA;Implements IDisposable, IProgressChannelProvider" />
  <TypeSignature Language="F#" Value="type IProgressChannel = interface&#xA;    interface IProgressChannelProvider&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Runtime.IProgressChannelProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             A common interface for progress reporting.
             It is expected that the progress channel interface is used from only one thread.
            
             Supported workflow:
             1) Create the channel via <see cref="M:Microsoft.ML.Runtime.IProgressChannelProvider.StartProgressChannel(System.String)" />.
             2) Call <see cref="M:Microsoft.ML.Runtime.IProgressChannel.SetHeader(Microsoft.ML.Runtime.ProgressHeader,System.Action{Microsoft.ML.Runtime.IProgressEntry})" /> as many times as desired (including 0).
                   Each call to <see cref="M:Microsoft.ML.Runtime.IProgressChannel.SetHeader(Microsoft.ML.Runtime.ProgressHeader,System.Action{Microsoft.ML.Runtime.IProgressEntry})" /> supersedes the previous one.
             3) Report checkpoints (0 or more) by calling <see cref="M:Microsoft.ML.Runtime.IProgressChannel.Checkpoint(System.Nullable{System.Double}[])" />.
             4) Repeat steps 2-3 as often as necessary.
             5) Dispose the channel.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Checkpoint">
      <MemberSignature Language="C#" Value="public void Checkpoint (params Nullable&lt;double&gt;[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Checkpoint(valuetype System.Nullable`1&lt;float64&gt;[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.IProgressChannel.Checkpoint(System.Nullable{System.Double}[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Checkpoint (ParamArray values As Nullable(Of Double)())" />
      <MemberSignature Language="F#" Value="abstract member Checkpoint : Nullable&lt;double&gt;[] -&gt; unit" Usage="iProgressChannel.Checkpoint values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Nullable&lt;System.Double&gt;[]">
          <Attributes>
            <Attribute FrameworkAlternate="ml-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="values">The metrics, progress units and progress limits.</param>
        <summary>
             Submit a 'checkpoint' entry. These entries are guaranteed to be delivered to the progress listener,
             if it is interested. Typically, this would contain some intermediate metrics, that are only calculated
             at certain moments ('checkpoints') of the computation.
            
             For example, SDCA may report a checkpoint every time it computes the loss, or LBFGS may report a checkpoint
             every iteration.
            
             The only parameter, <paramref name="values" />, is interpreted in the following fashion:
             * First MetricNames.Length items, if present, are metrics.
             * Subsequent ProgressNames.Length items, if present, are progress units.
             * Subsequent ProgressNames.Length items, if present, are progress limits.
             * If any more values remain, an exception is thrown.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHeader">
      <MemberSignature Language="C#" Value="public void SetHeader (Microsoft.ML.Runtime.ProgressHeader header, Action&lt;Microsoft.ML.Runtime.IProgressEntry&gt; fillAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetHeader(class Microsoft.ML.Runtime.ProgressHeader header, class System.Action`1&lt;class Microsoft.ML.Runtime.IProgressEntry&gt; fillAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.IProgressChannel.SetHeader(Microsoft.ML.Runtime.ProgressHeader,System.Action{Microsoft.ML.Runtime.IProgressEntry})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetHeader (header As ProgressHeader, fillAction As Action(Of IProgressEntry))" />
      <MemberSignature Language="F#" Value="abstract member SetHeader : Microsoft.ML.Runtime.ProgressHeader * Action&lt;Microsoft.ML.Runtime.IProgressEntry&gt; -&gt; unit" Usage="iProgressChannel.SetHeader (header, fillAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="header" Type="Microsoft.ML.Runtime.ProgressHeader" />
        <Parameter Name="fillAction" Type="System.Action&lt;Microsoft.ML.Runtime.IProgressEntry&gt;" />
      </Parameters>
      <Docs>
        <param name="header">The header object.</param>
        <param name="fillAction">The delegate to provide actual progress. The <see cref="T:Microsoft.ML.Runtime.IProgressEntry" /> parameter of
             the delegate will correspond to the provided <paramref name="header" />.</param>
        <summary>
             Set up the reporting structure:
             - Set the 'header' of the progress reports, defining which progress units and metrics are going to be reported.
             - Provide a thread-safe delegate to be invoked whenever anyone needs to know the progress.
            
             It is acceptable to call <see cref="M:Microsoft.ML.Runtime.IProgressChannel.SetHeader(Microsoft.ML.Runtime.ProgressHeader,System.Action{Microsoft.ML.Runtime.IProgressEntry})" /> multiple times (or none), regardless of whether the calculation is running
             or not. Because of synchronization, the computation should not deny calls to the 'old' <paramref name="fillAction" />
             delegates even after a new one is provided.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>