<Type Name="CalibratorEstimatorBase&lt;TCalibratorTrainer,TICalibrator&gt;" FullName="Microsoft.ML.Calibrator.CalibratorEstimatorBase&lt;TCalibratorTrainer,TICalibrator&gt;">
  <TypeSignature Language="C#" Value="public abstract class CalibratorEstimatorBase&lt;TCalibratorTrainer,TICalibrator&gt; : Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Calibrator.CalibratorTransformer&lt;TICalibrator&gt;&gt; where TCalibratorTrainer : ICalibratorTrainer where TICalibrator : class, ICalibrator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CalibratorEstimatorBase`2&lt;(class Microsoft.ML.Internal.Calibration.ICalibratorTrainer) TCalibratorTrainer, class (class Microsoft.ML.Calibrator.ICalibrator) TICalibrator&gt; extends System.Object implements class Microsoft.ML.Core.Data.IEstimator`1&lt;class Microsoft.ML.Calibrator.CalibratorTransformer`1&lt;!TICalibrator&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CalibratorEstimatorBase(Of TCalibratorTrainer, TICalibrator)&#xA;Implements IEstimator(Of CalibratorTransformer(Of TICalibrator))" />
  <TypeSignature Language="F#" Value="type CalibratorEstimatorBase&lt;'CalibratorTrainer, 'ICalibrator (requires 'CalibratorTrainer :&gt; ICalibratorTrainer and 'ICalibrator : null and 'ICalibrator :&gt; ICalibrator)&gt; = class&#xA;    interface IEstimator&lt;CalibratorTransformer&lt;'ICalibrator&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TCalibratorTrainer">
      <Constraints>
        <InterfaceName>Microsoft.ML.Internal.Calibration.ICalibratorTrainer</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TICalibrator">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <InterfaceName>Microsoft.ML.Calibrator.ICalibrator</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Calibrator.CalibratorTransformer&lt;TICalibrator&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TCalibratorTrainer">To be added.</typeparam>
    <typeparam name="TICalibrator">To be added.</typeparam>
    <summary>
            Base class for CalibratorEstimators.
            </summary>
    <remarks>
            CalibratorEstimators take an <see cref="T:Microsoft.Data.DataView.IDataView" /> (the output of a <see cref="T:Microsoft.ML.Data.BinaryClassifierScorer" />)
            that contains a "Score" column, and converts the scores to probabilities(through binning, interpolation etc.), based on the <typeparamref name="TICalibrator" /> type.
            They are used in pipelines where the binary classifier produces non-calibrated scores.
            </remarks>
    <example>
      <format type="text/markdown"><![CDATA[
             [!code-csharp[Calibrators](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Calibrator.cs)]
            ]]></format>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CalibratorEstimatorBase (Microsoft.ML.IHostEnvironment env, TCalibratorTrainer calibratorTrainer, Microsoft.ML.IPredictor predictor = null, string labelColumn = &quot;Label&quot;, string featureColumn = &quot;Features&quot;, string weightColumn = null);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, !TCalibratorTrainer calibratorTrainer, class Microsoft.ML.IPredictor predictor, string labelColumn, string featureColumn, string weightColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2.#ctor(Microsoft.ML.IHostEnvironment,`0,Microsoft.ML.IPredictor,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (env As IHostEnvironment, calibratorTrainer As TCalibratorTrainer, Optional predictor As IPredictor = null, Optional labelColumn As String = &quot;Label&quot;, Optional featureColumn As String = &quot;Features&quot;, Optional weightColumn As String = null)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Calibrator.CalibratorEstimatorBase&lt;'CalibratorTrainer, 'ICalibrator (requires 'CalibratorTrainer :&gt; Microsoft.ML.Internal.Calibration.ICalibratorTrainer and 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt; : Microsoft.ML.IHostEnvironment * 'CalibratorTrainer * Microsoft.ML.IPredictor * string * string * string -&gt; Microsoft.ML.Calibrator.CalibratorEstimatorBase&lt;'CalibratorTrainer, 'ICalibrator (requires 'CalibratorTrainer :&gt; Microsoft.ML.Internal.Calibration.ICalibratorTrainer and 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt;" Usage="new Microsoft.ML.Calibrator.CalibratorEstimatorBase&lt;'CalibratorTrainer, 'ICalibrator (requires 'CalibratorTrainer :&gt; Microsoft.ML.Internal.Calibration.ICalibratorTrainer and 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt; (env, calibratorTrainer, predictor, labelColumn, featureColumn, weightColumn)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="calibratorTrainer" Type="TCalibratorTrainer" />
        <Parameter Name="predictor" Type="Microsoft.ML.IPredictor" />
        <Parameter Name="labelColumn" Type="System.String" />
        <Parameter Name="featureColumn" Type="System.String" />
        <Parameter Name="weightColumn" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="calibratorTrainer">To be added.</param>
        <param name="predictor">To be added.</param>
        <param name="labelColumn">To be added.</param>
        <param name="featureColumn">To be added.</param>
        <param name="weightColumn">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalibratorTrainer">
      <MemberSignature Language="C#" Value="protected readonly TCalibratorTrainer CalibratorTrainer;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly !TCalibratorTrainer CalibratorTrainer" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2.CalibratorTrainer" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly CalibratorTrainer As TCalibratorTrainer " />
      <MemberSignature Language="F#" Value="val mutable CalibratorTrainer : 'CalibratorTrainer" Usage="Microsoft.ML.Calibrator.CalibratorEstimatorBase&lt;'CalibratorTrainer, 'ICalibrator (requires 'CalibratorTrainer :&gt; Microsoft.ML.Internal.Calibration.ICalibratorTrainer and 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt;.CalibratorTrainer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TCalibratorTrainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.ML.Calibrator.CalibratorTransformer&lt;TICalibrator&gt; Create (Microsoft.ML.IHostEnvironment env, TICalibrator calibrator);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.ML.Calibrator.CalibratorTransformer`1&lt;!TICalibrator&gt; Create(class Microsoft.ML.IHostEnvironment env, !TICalibrator calibrator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2.Create(Microsoft.ML.IHostEnvironment,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function Create (env As IHostEnvironment, calibrator As TICalibrator) As CalibratorTransformer(Of TICalibrator)" />
      <MemberSignature Language="F#" Value="abstract member Create : Microsoft.ML.IHostEnvironment * 'ICalibrator -&gt; Microsoft.ML.Calibrator.CalibratorTransformer&lt;'ICalibrator (requires 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt;" Usage="calibratorEstimatorBase.Create (env, calibrator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Calibrator.CalibratorTransformer&lt;TICalibrator&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="calibrator" Type="TICalibrator" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="calibrator">To be added.</param>
        <summary>
            Implemented by deriving classes that create a concrete calibrator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FeatureColumn">
      <MemberSignature Language="C#" Value="protected readonly Microsoft.ML.Core.Data.SchemaShape.Column FeatureColumn;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly valuetype Microsoft.ML.Core.Data.SchemaShape/Column FeatureColumn" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2.FeatureColumn" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly FeatureColumn As SchemaShape.Column " />
      <MemberSignature Language="F#" Value="val mutable FeatureColumn : Microsoft.ML.Core.Data.SchemaShape.Column" Usage="Microsoft.ML.Calibrator.CalibratorEstimatorBase&lt;'CalibratorTrainer, 'ICalibrator (requires 'CalibratorTrainer :&gt; Microsoft.ML.Internal.Calibration.ICalibratorTrainer and 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt;.FeatureColumn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Core.Data.SchemaShape+Column</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Calibrator.CalibratorTransformer&lt;TICalibrator&gt; Fit (Microsoft.Data.DataView.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Calibrator.CalibratorTransformer`1&lt;!TICalibrator&gt; Fit(class Microsoft.Data.DataView.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2.Fit(Microsoft.Data.DataView.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As CalibratorTransformer(Of TICalibrator)" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.Data.DataView.IDataView -&gt; Microsoft.ML.Calibrator.CalibratorTransformer&lt;'ICalibrator (requires 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt;&#xA;override this.Fit : Microsoft.Data.DataView.IDataView -&gt; Microsoft.ML.Calibrator.CalibratorTransformer&lt;'ICalibrator (requires 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt;" Usage="calibratorEstimatorBase.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Core.Data.IEstimator`1.Fit(Microsoft.Data.DataView.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Calibrator.CalibratorTransformer&lt;TICalibrator&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.Data.DataView.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <summary>
            Fits the scored <see cref="T:Microsoft.Data.DataView.IDataView" /> creating a <see cref="T:Microsoft.ML.Calibrator.CalibratorTransformer`1" /> that can transform the data by adding a
            <see cref="F:Microsoft.ML.Data.DefaultColumnNames.Probability" /> column containing the calibrated <see cref="F:Microsoft.ML.Data.DefaultColumnNames.Score" />.
            </summary>
        <returns>A trained <see cref="T:Microsoft.ML.Calibrator.CalibratorTransformer`1" /> that will transform the data by adding the
            <see cref="F:Microsoft.ML.Data.DefaultColumnNames.Probability" /> column.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="protected readonly Microsoft.ML.IHostEnvironment Host;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly class Microsoft.ML.IHostEnvironment Host" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2.Host" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Host As IHostEnvironment " />
      <MemberSignature Language="F#" Value="val mutable Host : Microsoft.ML.IHostEnvironment" Usage="Microsoft.ML.Calibrator.CalibratorEstimatorBase&lt;'CalibratorTrainer, 'ICalibrator (requires 'CalibratorTrainer :&gt; Microsoft.ML.Internal.Calibration.ICalibratorTrainer and 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt;.Host" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IHostEnvironment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LabelColumn">
      <MemberSignature Language="C#" Value="protected readonly Microsoft.ML.Core.Data.SchemaShape.Column LabelColumn;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly valuetype Microsoft.ML.Core.Data.SchemaShape/Column LabelColumn" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2.LabelColumn" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly LabelColumn As SchemaShape.Column " />
      <MemberSignature Language="F#" Value="val mutable LabelColumn : Microsoft.ML.Core.Data.SchemaShape.Column" Usage="Microsoft.ML.Calibrator.CalibratorEstimatorBase&lt;'CalibratorTrainer, 'ICalibrator (requires 'CalibratorTrainer :&gt; Microsoft.ML.Internal.Calibration.ICalibratorTrainer and 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt;.LabelColumn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Core.Data.SchemaShape+Column</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Calibrator.CalibratorTransformer&lt;TICalibrator&gt;&gt;.GetOutputSchema">
      <MemberSignature Language="C#" Value="Microsoft.ML.Core.Data.SchemaShape IEstimator&lt;CalibratorTransformer&lt;TICalibrator&gt;&gt;.GetOutputSchema (Microsoft.ML.Core.Data.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.ML.Core.Data.SchemaShape Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Calibrator.CalibratorTransformer&lt;TICalibrator&gt;&gt;.GetOutputSchema(class Microsoft.ML.Core.Data.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2.Microsoft#ML#Core#Data#IEstimator&lt;Microsoft#ML#Calibrator#CalibratorTransformer&lt;TICalibrator&gt;&gt;#GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape Implements IEstimator(Of CalibratorTransformer(Of TICalibrator)).GetOutputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Core.Data.IEstimator`1.GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Core.Data.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.Core.Data.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">The input <see cref="T:Microsoft.ML.Core.Data.SchemaShape" />.</param>
        <summary>
            Gets the output <see cref="T:Microsoft.ML.Core.Data.SchemaShape" /> of the <see cref="T:Microsoft.Data.DataView.IDataView" /> after fitting the calibrator.
            Fitting the calibrator will add a column named "Probability" to the schema. If you already had such a column, a new one will be added.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictedLabel">
      <MemberSignature Language="C#" Value="protected readonly Microsoft.ML.Core.Data.SchemaShape.Column PredictedLabel;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly valuetype Microsoft.ML.Core.Data.SchemaShape/Column PredictedLabel" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2.PredictedLabel" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly PredictedLabel As SchemaShape.Column " />
      <MemberSignature Language="F#" Value="val mutable PredictedLabel : Microsoft.ML.Core.Data.SchemaShape.Column" Usage="Microsoft.ML.Calibrator.CalibratorEstimatorBase&lt;'CalibratorTrainer, 'ICalibrator (requires 'CalibratorTrainer :&gt; Microsoft.ML.Internal.Calibration.ICalibratorTrainer and 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt;.PredictedLabel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Core.Data.SchemaShape+Column</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Predictor">
      <MemberSignature Language="C#" Value="protected readonly Microsoft.ML.IPredictor Predictor;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly class Microsoft.ML.IPredictor Predictor" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2.Predictor" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Predictor As IPredictor " />
      <MemberSignature Language="F#" Value="val mutable Predictor : Microsoft.ML.IPredictor" Usage="Microsoft.ML.Calibrator.CalibratorEstimatorBase&lt;'CalibratorTrainer, 'ICalibrator (requires 'CalibratorTrainer :&gt; Microsoft.ML.Internal.Calibration.ICalibratorTrainer and 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt;.Predictor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IPredictor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScoreColumn">
      <MemberSignature Language="C#" Value="protected readonly Microsoft.ML.Core.Data.SchemaShape.Column ScoreColumn;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly valuetype Microsoft.ML.Core.Data.SchemaShape/Column ScoreColumn" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2.ScoreColumn" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly ScoreColumn As SchemaShape.Column " />
      <MemberSignature Language="F#" Value="val mutable ScoreColumn : Microsoft.ML.Core.Data.SchemaShape.Column" Usage="Microsoft.ML.Calibrator.CalibratorEstimatorBase&lt;'CalibratorTrainer, 'ICalibrator (requires 'CalibratorTrainer :&gt; Microsoft.ML.Internal.Calibration.ICalibratorTrainer and 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt;.ScoreColumn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Core.Data.SchemaShape+Column</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeightColumn">
      <MemberSignature Language="C#" Value="protected readonly Microsoft.ML.Core.Data.SchemaShape.Column WeightColumn;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly valuetype Microsoft.ML.Core.Data.SchemaShape/Column WeightColumn" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Calibrator.CalibratorEstimatorBase`2.WeightColumn" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly WeightColumn As SchemaShape.Column " />
      <MemberSignature Language="F#" Value="val mutable WeightColumn : Microsoft.ML.Core.Data.SchemaShape.Column" Usage="Microsoft.ML.Calibrator.CalibratorEstimatorBase&lt;'CalibratorTrainer, 'ICalibrator (requires 'CalibratorTrainer :&gt; Microsoft.ML.Internal.Calibration.ICalibratorTrainer and 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrator.ICalibrator)&gt;.WeightColumn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Core.Data.SchemaShape+Column</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
