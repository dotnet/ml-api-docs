<Type Name="ValueMappingEstimator&lt;TKey,TValue&gt;" FullName="Microsoft.ML.Transforms.Conversions.ValueMappingEstimator&lt;TKey,TValue&gt;">
  <TypeSignature Language="C#" Value="public sealed class ValueMappingEstimator&lt;TKey,TValue&gt; : Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&lt;TKey,TValue&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ValueMappingEstimator`2&lt;TKey, TValue&gt; extends Microsoft.ML.Data.TrivialEstimator`1&lt;class Microsoft.ML.Transforms.Conversions.ValueMappingTransformer`2&lt;!TKey, !TValue&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.Conversions.ValueMappingEstimator`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ValueMappingEstimator(Of TKey, TValue)&#xA;Inherits TrivialEstimator(Of ValueMappingTransformer(Of TKey, TValue))" />
  <TypeSignature Language="F#" Value="type ValueMappingEstimator&lt;'Key, 'Value&gt; = class&#xA;    inherit TrivialEstimator&lt;ValueMappingTransformer&lt;'Key, 'Value&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&lt;TKey,TValue&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TTransformer">Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&lt;TKey,TValue&gt;</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TKey">Specifies the key type.</typeparam>
    <typeparam name="TValue">Specifies the value type.</typeparam>
    <summary>
            The ValueMappingEstimator is a 1-1 mapping from a key to value. The key type and value type are specified
            through TKey and TValue. Arrays are supported for vector types which can be used as either a key or a value
            or both. The mapping is specified, not trained by providiing a list of keys and a list of values.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValueMappingEstimator (Microsoft.ML.IHostEnvironment env, System.Collections.Generic.IEnumerable&lt;TKey&gt; keys, System.Collections.Generic.IEnumerable&lt;TValue[]&gt; values, params ValueTuple&lt;string,string&gt;[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, class System.Collections.Generic.IEnumerable`1&lt;!TKey&gt; keys, class System.Collections.Generic.IEnumerable`1&lt;!TValue[]&gt; values, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Conversions.ValueMappingEstimator`2.#ctor(Microsoft.ML.IHostEnvironment,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1[]},System.ValueTuple{System.String,System.String}[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, keys As IEnumerable(Of TKey), values As IEnumerable(Of TValue()), ParamArray columns As ValueTuple(Of String, String)())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Conversions.ValueMappingEstimator&lt;'Key, 'Value&gt; : Microsoft.ML.IHostEnvironment * seq&lt;'Key&gt; * seq&lt;'Value[]&gt; * ValueTuple&lt;string, string&gt;[] -&gt; Microsoft.ML.Transforms.Conversions.ValueMappingEstimator&lt;'Key, 'Value&gt;" Usage="new Microsoft.ML.Transforms.Conversions.ValueMappingEstimator&lt;'Key, 'Value&gt; (env, keys, values, columns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;TKey&gt;" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;TValue[]&gt;" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "input", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="env">The environment to use.</param>
        <param name="keys">The list of keys of TKey.</param>
        <param name="values">The list of values of TValue[].</param>
        <param name="columns">The list of columns to apply.</param>
        <summary>
            Constructs the ValueMappingEstimator, key type -&gt; value array type mapping
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValueMappingEstimator (Microsoft.ML.IHostEnvironment env, System.Collections.Generic.IEnumerable&lt;TKey&gt; keys, System.Collections.Generic.IEnumerable&lt;TValue&gt; values, params ValueTuple&lt;string,string&gt;[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, class System.Collections.Generic.IEnumerable`1&lt;!TKey&gt; keys, class System.Collections.Generic.IEnumerable`1&lt;!TValue&gt; values, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Conversions.ValueMappingEstimator`2.#ctor(Microsoft.ML.IHostEnvironment,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.ValueTuple{System.String,System.String}[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, keys As IEnumerable(Of TKey), values As IEnumerable(Of TValue), ParamArray columns As ValueTuple(Of String, String)())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Conversions.ValueMappingEstimator&lt;'Key, 'Value&gt; : Microsoft.ML.IHostEnvironment * seq&lt;'Key&gt; * seq&lt;'Value&gt; * ValueTuple&lt;string, string&gt;[] -&gt; Microsoft.ML.Transforms.Conversions.ValueMappingEstimator&lt;'Key, 'Value&gt;" Usage="new Microsoft.ML.Transforms.Conversions.ValueMappingEstimator&lt;'Key, 'Value&gt; (env, keys, values, columns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;TKey&gt;" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;TValue&gt;" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "input", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="env">The environment to use.</param>
        <param name="keys">The list of keys of TKey.</param>
        <param name="values">The list of values of TValue.</param>
        <param name="columns">The list of columns to apply.</param>
        <summary>
            Constructs the ValueMappingEstimator, key type -&gt; value type mapping
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValueMappingEstimator (Microsoft.ML.IHostEnvironment env, System.Collections.Generic.IEnumerable&lt;TKey&gt; keys, System.Collections.Generic.IEnumerable&lt;TValue&gt; values, bool treatValuesAsKeyType, params ValueTuple&lt;string,string&gt;[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, class System.Collections.Generic.IEnumerable`1&lt;!TKey&gt; keys, class System.Collections.Generic.IEnumerable`1&lt;!TValue&gt; values, bool treatValuesAsKeyType, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Conversions.ValueMappingEstimator`2.#ctor(Microsoft.ML.IHostEnvironment,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Boolean,System.ValueTuple{System.String,System.String}[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, keys As IEnumerable(Of TKey), values As IEnumerable(Of TValue), treatValuesAsKeyType As Boolean, ParamArray columns As ValueTuple(Of String, String)())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Conversions.ValueMappingEstimator&lt;'Key, 'Value&gt; : Microsoft.ML.IHostEnvironment * seq&lt;'Key&gt; * seq&lt;'Value&gt; * bool * ValueTuple&lt;string, string&gt;[] -&gt; Microsoft.ML.Transforms.Conversions.ValueMappingEstimator&lt;'Key, 'Value&gt;" Usage="new Microsoft.ML.Transforms.Conversions.ValueMappingEstimator&lt;'Key, 'Value&gt; (env, keys, values, treatValuesAsKeyType, columns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;TKey&gt;" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;TValue&gt;" />
        <Parameter Name="treatValuesAsKeyType" Type="System.Boolean" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "input", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="env">The environment to use.</param>
        <param name="keys">The list of keys of TKey.</param>
        <param name="values">The list of values of TValue.</param>
        <param name="treatValuesAsKeyType">Specifies to treat the values as a <see cref="T:Microsoft.ML.Data.KeyType" />.</param>
        <param name="columns">The list of columns to apply.</param>
        <summary>
            Constructs the ValueMappingEstimator, key type -&gt; value type mapping
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Core.Data.SchemaShape GetOutputSchema (Microsoft.ML.Core.Data.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.ML.Core.Data.SchemaShape GetOutputSchema(class Microsoft.ML.Core.Data.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Conversions.ValueMappingEstimator`2.GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="override this.GetOutputSchema : Microsoft.ML.Core.Data.SchemaShape -&gt; Microsoft.ML.Core.Data.SchemaShape" Usage="valueMappingEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Core.Data.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.Core.Data.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">Input schema</param>
        <summary>
            Retrieves the output schema given the input schema
            </summary>
        <returns>Returns the generated output schema</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>