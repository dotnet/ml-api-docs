<Type Name="ValueMappingEstimator" FullName="Microsoft.ML.Transforms.Conversions.ValueMappingEstimator">
  <TypeSignature Language="C#" Value="public class ValueMappingEstimator : Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ValueMappingEstimator extends Microsoft.ML.Data.TrivialEstimator`1&lt;class Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.Conversions.ValueMappingEstimator" />
  <TypeSignature Language="VB.NET" Value="Public Class ValueMappingEstimator&#xA;Inherits TrivialEstimator(Of ValueMappingTransformer)" />
  <TypeSignature Language="F#" Value="type ValueMappingEstimator = class&#xA;    inherit TrivialEstimator&lt;ValueMappingTransformer&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TTransformer">Microsoft.ML.Transforms.Conversions.ValueMappingTransformer</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
        The ValueMappingEstimator is a 1-1 mapping from a key to value. 
      </summary>
    <remarks>
        Given a set of keys and values, the ValueMappingEstimator builds up a dictionary so that when given a specific key it will return a 
        specific value. The ValueMappingEstimator supports keys and values of different <see cref="T:System.Type" /> to support different data types.
        Examples for using a ValueMappingEstimator are:
        <list><item><description>Converting a string value to a string value, this can be useful for grouping (i.e. 'cat', 'dog', 'horse' maps to 'mammals')</description></item><item><description>Converting a string value to a integer value (i.e. converting the text description like quality to an numeric where 'good' maps to 1, 'poor' maps to 0</description></item><item><description>
              Converting a integer value to a string value and have the string value represented as a <see cref="T:Microsoft.ML.Data.KeyType" />
              (i.e. convert zip codes to a state string value, which will generate a unique integer value that can be used as a label.
            </description></item></list>
        Values can be repeated to allow for multiple keys to map to the same value, however keys can not be repeated. The mapping between keys and values
        can be specified either through lists, where the key list and value list must be the same size or can be done through an <see cref="T:Microsoft.Data.DataView.IDataView" />.
      </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValueMappingEstimator (Microsoft.ML.IHostEnvironment env, Microsoft.Data.DataView.IDataView lookupMap, string keyColumn, string valueColumn, params ValueTuple&lt;string,string&gt;[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, class Microsoft.Data.DataView.IDataView lookupMap, string keyColumn, string valueColumn, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Conversions.ValueMappingEstimator.#ctor(Microsoft.ML.IHostEnvironment,Microsoft.Data.DataView.IDataView,System.String,System.String,System.ValueTuple{System.String,System.String}[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, lookupMap As IDataView, keyColumn As String, valueColumn As String, ParamArray columns As ValueTuple(Of String, String)())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Conversions.ValueMappingEstimator : Microsoft.ML.IHostEnvironment * Microsoft.Data.DataView.IDataView * string * string * ValueTuple&lt;string, string&gt;[] -&gt; Microsoft.ML.Transforms.Conversions.ValueMappingEstimator" Usage="new Microsoft.ML.Transforms.Conversions.ValueMappingEstimator (env, lookupMap, keyColumn, valueColumn, columns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="lookupMap" Type="Microsoft.Data.DataView.IDataView" />
        <Parameter Name="keyColumn" Type="System.String" />
        <Parameter Name="valueColumn" Type="System.String" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "outputColumnName", "inputColumnName" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="env">The environment to use.</param>
        <param name="lookupMap">An instance of <see cref="T:Microsoft.Data.DataView.IDataView" /> that contains the key and value columns.</param>
        <param name="keyColumn">Name of the key column in <paramref name="lookupMap" />.</param>
        <param name="valueColumn">Name of the value column in <paramref name="lookupMap" />.</param>
        <param name="columns">The list of names of the input columns to apply the transformation, and the name of the resulting column.</param>
        <summary>
            Constructs the ValueMappingEstimator, key type -&gt; value type mapping
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Core.Data.SchemaShape GetOutputSchema (Microsoft.ML.Core.Data.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.ML.Core.Data.SchemaShape GetOutputSchema(class Microsoft.ML.Core.Data.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Conversions.ValueMappingEstimator.GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="override this.GetOutputSchema : Microsoft.ML.Core.Data.SchemaShape -&gt; Microsoft.ML.Core.Data.SchemaShape" Usage="valueMappingEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Core.Data.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.Core.Data.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">Input schema</param>
        <summary>
            Retrieves the output schema given the input schema
            </summary>
        <returns>Returns the generated output schema</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>