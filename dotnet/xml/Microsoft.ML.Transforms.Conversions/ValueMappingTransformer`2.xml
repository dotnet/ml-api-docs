<Type Name="ValueMappingTransformer&lt;TKey,TValue&gt;" FullName="Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&lt;TKey,TValue&gt;">
  <TypeSignature Language="C#" Value="public sealed class ValueMappingTransformer&lt;TKey,TValue&gt; : Microsoft.ML.Transforms.Conversions.ValueMappingTransformer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ValueMappingTransformer`2&lt;TKey, TValue&gt; extends Microsoft.ML.Transforms.Conversions.ValueMappingTransformer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.Conversions.ValueMappingTransformer`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ValueMappingTransformer(Of TKey, TValue)&#xA;Inherits ValueMappingTransformer" />
  <TypeSignature Language="F#" Value="type ValueMappingTransformer&lt;'Key, 'Value&gt; = class&#xA;    inherit ValueMappingTransformer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.ML.Transforms.Conversions.ValueMappingTransformer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TKey">Specifies the key type</typeparam>
    <typeparam name="TValue">Specifies the value type</typeparam>
    <summary>
            The ValueMappingTransformer is a 1-1 mapping from a key to value. The key type and value type are specified
            through TKey and TValue. Arrays are supported for vector types which can be used as either a key or a value
            or both. The mapping is specified, not trained by providiing a list of keys and a list of values.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValueMappingTransformer (Microsoft.ML.IHostEnvironment env, System.Collections.Generic.IEnumerable&lt;TKey&gt; keys, System.Collections.Generic.IEnumerable&lt;TValue[]&gt; values, ValueTuple&lt;string,string&gt;[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, class System.Collections.Generic.IEnumerable`1&lt;!TKey&gt; keys, class System.Collections.Generic.IEnumerable`1&lt;!TValue[]&gt; values, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Conversions.ValueMappingTransformer`2.#ctor(Microsoft.ML.IHostEnvironment,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1[]},System.ValueTuple{System.String,System.String}[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, keys As IEnumerable(Of TKey), values As IEnumerable(Of TValue()), columns As ValueTuple(Of String, String)())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&lt;'Key, 'Value&gt; : Microsoft.ML.IHostEnvironment * seq&lt;'Key&gt; * seq&lt;'Value[]&gt; * ValueTuple&lt;string, string&gt;[] -&gt; Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&lt;'Key, 'Value&gt;" Usage="new Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&lt;'Key, 'Value&gt; (env, keys, values, columns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;TKey&gt;" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;TValue[]&gt;" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "input", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="env">The environment to use.</param>
        <param name="keys">The list of keys that are TKey.</param>
        <param name="values">The list of values that are TValue[].</param>
        <param name="columns">The specified columns to apply.</param>
        <summary>
            Constructs a ValueMappingTransformer with a key type to value array type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValueMappingTransformer (Microsoft.ML.IHostEnvironment env, System.Collections.Generic.IEnumerable&lt;TKey&gt; keys, System.Collections.Generic.IEnumerable&lt;TValue&gt; values, bool treatValuesAsKeyTypes, ValueTuple&lt;string,string&gt;[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, class System.Collections.Generic.IEnumerable`1&lt;!TKey&gt; keys, class System.Collections.Generic.IEnumerable`1&lt;!TValue&gt; values, bool treatValuesAsKeyTypes, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Conversions.ValueMappingTransformer`2.#ctor(Microsoft.ML.IHostEnvironment,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Boolean,System.ValueTuple{System.String,System.String}[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, keys As IEnumerable(Of TKey), values As IEnumerable(Of TValue), treatValuesAsKeyTypes As Boolean, columns As ValueTuple(Of String, String)())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&lt;'Key, 'Value&gt; : Microsoft.ML.IHostEnvironment * seq&lt;'Key&gt; * seq&lt;'Value&gt; * bool * ValueTuple&lt;string, string&gt;[] -&gt; Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&lt;'Key, 'Value&gt;" Usage="new Microsoft.ML.Transforms.Conversions.ValueMappingTransformer&lt;'Key, 'Value&gt; (env, keys, values, treatValuesAsKeyTypes, columns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;TKey&gt;" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;TValue&gt;" />
        <Parameter Name="treatValuesAsKeyTypes" Type="System.Boolean" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "input", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="env">The environment to use.</param>
        <param name="keys">The list of keys that are TKey.</param>
        <param name="values">The list of values that are TValue.</param>
        <param name="treatValuesAsKeyTypes">Specifies to treat the values as a <see cref="T:Microsoft.ML.Data.KeyType" />.</param>
        <param name="columns">The specified columns to apply</param>
        <summary>
            Constructs a ValueMappingTransformer with a key type to value type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>