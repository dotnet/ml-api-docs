<Type Name="ValueToKeyMappingTransformer" FullName="Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer">
  <TypeSignature Language="C#" Value="public sealed class ValueToKeyMappingTransformer : Microsoft.ML.Data.OneToOneTransformerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ValueToKeyMappingTransformer extends Microsoft.ML.Data.OneToOneTransformerBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ValueToKeyMappingTransformer&#xA;Inherits OneToOneTransformerBase" />
  <TypeSignature Language="F#" Value="type ValueToKeyMappingTransformer = class&#xA;    inherit OneToOneTransformerBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Runtime.Data.OneToOneTransformerBase</BaseTypeName>
    <BaseTypeName FrameworkAlternate="ml-dotnet">Microsoft.ML.Data.OneToOneTransformerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
        Converts input values (words, numbers, etc.) to index in a dictionary.
      </summary>
    <remarks>
        The TextToKeyConverter transform builds up term vocabularies (dictionaries).
        The TextToKeyConverter and the <see cref="T:Microsoft.ML.Transforms.HashConverter" /> are the two one primary mechanisms by which raw input is transformed into keys.
        If multiple columns are used, each column builds/uses exactly one vocabulary.
        The output columns are KeyType-valued.
        The Key value is the one-based index of the item in the dictionary.
        If the key is not found in the dictionary, it is assigned the missing value indicator.
        This dictionary mapping values to keys is most commonly learnt from the unique values in input data,
        but can be defined through other means: either with the mapping defined directly on the command line, or as loaded from an external file.
      </remarks>
    <altmember cref="T:Microsoft.ML.Transforms.HashConverter" />
    <altmember cref="T:Microsoft.ML.Transforms.KeyToTextConverter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValueToKeyMappingTransformer (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Data.IDataView input, params Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer.ColumnInfo[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Data.IDataView input, class Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer/ColumnInfo[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer.#ctor(Microsoft.ML.IHostEnvironment,Microsoft.ML.Data.IDataView,Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer.ColumnInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, input As IDataView, ParamArray columns As ValueToKeyMappingTransformer.ColumnInfo())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer : Microsoft.ML.IHostEnvironment * Microsoft.ML.Data.IDataView * Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer.ColumnInfo[] -&gt; Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer" Usage="new Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer (env, input, columns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="input" Type="Microsoft.ML.Data.IDataView" />
        <Parameter Name="columns" Type="Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer+ColumnInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="input">To be added.</param>
        <param name="columns">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public override void Save (Microsoft.ML.Model.ModelSaveContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Save(class Microsoft.ML.Model.ModelSaveContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer.Save(Microsoft.ML.Model.ModelSaveContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Save (ctx As ModelSaveContext)" />
      <MemberSignature Language="F#" Value="override this.Save : Microsoft.ML.Model.ModelSaveContext -&gt; unit" Usage="valueToKeyMappingTransformer.Save ctx" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.Model.ModelSaveContext" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>