<Type Name="CpuAligenedMathUtils&lt;TMatrix&gt;" FullName="Microsoft.ML.Runtime.Internal.CpuMath.CpuAligenedMathUtils&lt;TMatrix&gt;">
  <TypeSignature Language="C#" Value="public static class CpuAligenedMathUtils&lt;TMatrix&gt; where TMatrix : CpuAlignedMatrixBase, ICpuFullMatrix" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CpuAligenedMathUtils`1&lt;(class Microsoft.ML.Runtime.Internal.CpuMath.CpuAlignedMatrixBase, class Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix) TMatrix&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Internal.CpuMath.CpuAligenedMathUtils`1" />
  <TypeSignature Language="VB.NET" Value="Public Class CpuAligenedMathUtils(Of TMatrix)" />
  <TypeSignature Language="F#" Value="type CpuAligenedMathUtils&lt;'Matrix (requires 'Matrix :&gt; CpuAlignedMatrixBase and 'Matrix :&gt; ICpuFullMatrix)&gt; = class" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TMatrix&gt;&#xA; where TMatrix : CpuAlignedMatrixBase, ICpuFullMatrixpublic ref class CpuAligenedMathUtils abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.CpuMath</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TMatrix">
      <Constraints>
        <BaseTypeName>Microsoft.ML.Runtime.Internal.CpuMath.CpuAlignedMatrixBase</BaseTypeName>
        <InterfaceName>Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TMatrix">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AssertCompatible">
      <MemberSignature Language="C#" Value="public static void AssertCompatible (Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AssertCompatible(class Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.CpuMath.CpuAligenedMathUtils`1.AssertCompatible(Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AssertCompatible (values As ICpuFullMatrix)" />
      <MemberSignature Language="F#" Value="static member AssertCompatible : Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.CpuMath.CpuAligenedMathUtils&lt;'Matrix (requires 'Matrix :&gt; Microsoft.ML.Runtime.Internal.CpuMath.CpuAlignedMatrixBase and 'Matrix :&gt; Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix)&gt;.AssertCompatible values" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AssertCompatible(Microsoft::ML::Runtime::Internal::CpuMath::ICpuFullMatrix ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.CpuMath</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix" />
      </Parameters>
      <Docs>
        <param name="values">The input matrix</param>
        <summary>
            Assert the compatibility of the underlying AlignedArray for the input matrix in terms of alignment amount.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertCompatible">
      <MemberSignature Language="C#" Value="public static void AssertCompatible (Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AssertCompatible(class Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.CpuMath.CpuAligenedMathUtils`1.AssertCompatible(Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AssertCompatible (values As ICpuVector)" />
      <MemberSignature Language="F#" Value="static member AssertCompatible : Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.CpuMath.CpuAligenedMathUtils&lt;'Matrix (requires 'Matrix :&gt; Microsoft.ML.Runtime.Internal.CpuMath.CpuAlignedMatrixBase and 'Matrix :&gt; Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix)&gt;.AssertCompatible values" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AssertCompatible(Microsoft::ML::Runtime::Internal::CpuMath::ICpuVector ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.CpuMath</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector" />
      </Parameters>
      <Docs>
        <param name="values">The input vector</param>
        <summary>
            Assert the compatibility of the underlying AlignedArray for the input vector in terms of alignment amount.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertCompatible">
      <MemberSignature Language="C#" Value="public static void AssertCompatible (Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix mat, Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector src, Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector dst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AssertCompatible(class Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix mat, class Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector src, class Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.CpuMath.CpuAligenedMathUtils`1.AssertCompatible(Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix,Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector,Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AssertCompatible (mat As ICpuFullMatrix, src As ICpuVector, dst As ICpuVector)" />
      <MemberSignature Language="F#" Value="static member AssertCompatible : Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix * Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector * Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.CpuMath.CpuAligenedMathUtils&lt;'Matrix (requires 'Matrix :&gt; Microsoft.ML.Runtime.Internal.CpuMath.CpuAlignedMatrixBase and 'Matrix :&gt; Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix)&gt;.AssertCompatible (mat, src, dst)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AssertCompatible(Microsoft::ML::Runtime::Internal::CpuMath::ICpuFullMatrix ^ mat, Microsoft::ML::Runtime::Internal::CpuMath::ICpuVector ^ src, Microsoft::ML::Runtime::Internal::CpuMath::ICpuVector ^ dst);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.CpuMath</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mat" Type="Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix" />
        <Parameter Name="src" Type="Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector" />
        <Parameter Name="dst" Type="Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector" />
      </Parameters>
      <Docs>
        <param name="mat"></param>
        <param name="src"></param>
        <param name="dst"></param>
        <summary>
            Asserts the following:
            1. The compatibility of the underlying AlignedArray for mat in terms of alignment amount.
            2. The compatibility of the underlying AlignedArray for src in terms of alignment amount.
            3. The compatibility of the underlying AlignedArray for dst in terms of alignment amount.
            4. The compatibility of the matrix-vector multiplication mat * src = dst.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatTimesSrc">
      <MemberSignature Language="C#" Value="public static void MatTimesSrc (bool add, Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix mat, Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector src, Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector dst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MatTimesSrc(bool add, class Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix mat, class Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector src, class Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.CpuMath.CpuAligenedMathUtils`1.MatTimesSrc(System.Boolean,Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix,Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector,Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MatTimesSrc (add As Boolean, mat As ICpuFullMatrix, src As ICpuVector, dst As ICpuVector)" />
      <MemberSignature Language="F#" Value="static member MatTimesSrc : bool * Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix * Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector * Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.CpuMath.CpuAligenedMathUtils&lt;'Matrix (requires 'Matrix :&gt; Microsoft.ML.Runtime.Internal.CpuMath.CpuAlignedMatrixBase and 'Matrix :&gt; Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix)&gt;.MatTimesSrc (add, mat, src, dst)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MatTimesSrc(bool add, Microsoft::ML::Runtime::Internal::CpuMath::ICpuFullMatrix ^ mat, Microsoft::ML::Runtime::Internal::CpuMath::ICpuVector ^ src, Microsoft::ML::Runtime::Internal::CpuMath::ICpuVector ^ dst);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.CpuMath</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="add" Type="System.Boolean" />
        <Parameter Name="mat" Type="Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix" />
        <Parameter Name="src" Type="Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector" />
        <Parameter Name="dst" Type="Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector" />
      </Parameters>
      <Docs>
        <param name="add">The addition flag</param>
        <param name="mat">The multiplier matrix</param>
        <param name="src">The source vector</param>
        <param name="dst">The destination vector</param>
        <summary>
            Matrix multiplication:
            if (add)
                dst = mat * src
            else
                dest += mat * src
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatTranTimesSrc">
      <MemberSignature Language="C#" Value="public static void MatTranTimesSrc (bool add, Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix mat, Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector src, Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector dst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MatTranTimesSrc(bool add, class Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix mat, class Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector src, class Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.CpuMath.CpuAligenedMathUtils`1.MatTranTimesSrc(System.Boolean,Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix,Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector,Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MatTranTimesSrc (add As Boolean, mat As ICpuFullMatrix, src As ICpuVector, dst As ICpuVector)" />
      <MemberSignature Language="F#" Value="static member MatTranTimesSrc : bool * Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix * Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector * Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector -&gt; unit" Usage="Microsoft.ML.Runtime.Internal.CpuMath.CpuAligenedMathUtils&lt;'Matrix (requires 'Matrix :&gt; Microsoft.ML.Runtime.Internal.CpuMath.CpuAlignedMatrixBase and 'Matrix :&gt; Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix)&gt;.MatTranTimesSrc (add, mat, src, dst)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MatTranTimesSrc(bool add, Microsoft::ML::Runtime::Internal::CpuMath::ICpuFullMatrix ^ mat, Microsoft::ML::Runtime::Internal::CpuMath::ICpuVector ^ src, Microsoft::ML::Runtime::Internal::CpuMath::ICpuVector ^ dst);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.CpuMath</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="add" Type="System.Boolean" />
        <Parameter Name="mat" Type="Microsoft.ML.Runtime.Internal.CpuMath.ICpuFullMatrix" />
        <Parameter Name="src" Type="Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector" />
        <Parameter Name="dst" Type="Microsoft.ML.Runtime.Internal.CpuMath.ICpuVector" />
      </Parameters>
      <Docs>
        <param name="add">The addition flag</param>
        <param name="mat">The multiplier matrix</param>
        <param name="src">The source vector</param>
        <param name="dst">The destination vector</param>
        <summary>
            Matrix transpose multiplication:
            if (add)
                dst = mat' * src
            else
                dest += mat' * src
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>