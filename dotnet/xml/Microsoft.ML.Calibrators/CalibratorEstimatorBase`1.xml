<Type Name="CalibratorEstimatorBase&lt;TICalibrator&gt;" FullName="Microsoft.ML.Calibrators.CalibratorEstimatorBase&lt;TICalibrator&gt;">
  <TypeSignature Language="C#" Value="public abstract class CalibratorEstimatorBase&lt;TICalibrator&gt; : Microsoft.ML.IEstimator&lt;Microsoft.ML.Calibrators.CalibratorTransformer&lt;TICalibrator&gt;&gt; where TICalibrator : class, ICalibrator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CalibratorEstimatorBase`1&lt;class (class Microsoft.ML.Calibrators.ICalibrator) TICalibrator&gt; extends System.Object implements class Microsoft.ML.IEstimator`1&lt;class Microsoft.ML.Calibrators.CalibratorTransformer`1&lt;!TICalibrator&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Calibrators.CalibratorEstimatorBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CalibratorEstimatorBase(Of TICalibrator)&#xA;Implements IEstimator(Of CalibratorTransformer(Of TICalibrator))" />
  <TypeSignature Language="F#" Value="type CalibratorEstimatorBase&lt;'ICalibrator (requires 'ICalibrator : null and 'ICalibrator :&gt; ICalibrator)&gt; = class&#xA;    interface IEstimator&lt;CalibratorTransformer&lt;'ICalibrator&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TICalibrator">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <InterfaceName>Microsoft.ML.Calibrators.ICalibrator</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.IEstimator&lt;Microsoft.ML.Calibrators.CalibratorTransformer&lt;TICalibrator&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TICalibrator">To be added.</typeparam>
    <summary>
            Base class for calibrator estimators.
            </summary>
    <remarks>
            CalibratorEstimators take an <see cref="T:Microsoft.ML.IDataView" /> (the output of a <see cref="T:Microsoft.ML.Data.BinaryClassifierScorer" />)
            that contains a "Score" column, and converts the scores to probabilities(through binning, interpolation etc.), based on the <typeparamref name="TICalibrator" /> type.
            They are used in pipelines where the binary classifier produces non-calibrated scores.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Calibrators.CalibratorTransformer&lt;TICalibrator&gt; Fit (Microsoft.ML.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Calibrators.CalibratorTransformer`1&lt;!TICalibrator&gt; Fit(class Microsoft.ML.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Calibrators.CalibratorEstimatorBase`1.Fit(Microsoft.ML.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As CalibratorTransformer(Of TICalibrator)" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Calibrators.CalibratorTransformer&lt;'ICalibrator (requires 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrators.ICalibrator)&gt;&#xA;override this.Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Calibrators.CalibratorTransformer&lt;'ICalibrator (requires 'ICalibrator : null and 'ICalibrator :&gt; Microsoft.ML.Calibrators.ICalibrator)&gt;" Usage="calibratorEstimatorBase.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Calibrators.CalibratorTransformer&lt;TICalibrator&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
      </Parameters>
      <Docs>
        <param name="input"></param>
        <summary>
            Fits the scored <see cref="T:Microsoft.ML.IDataView" /> creating a <see cref="T:Microsoft.ML.Calibrators.CalibratorTransformer`1" /> that can transform the data by adding a
            <see cref="F:Microsoft.ML.Data.DefaultColumnNames.Probability" /> column containing the calibrated <see cref="F:Microsoft.ML.Data.DefaultColumnNames.Score" />.
            </summary>
        <returns>A trained <see cref="T:Microsoft.ML.Calibrators.CalibratorTransformer`1" /> that will transform the data by adding the
            <see cref="F:Microsoft.ML.Data.DefaultColumnNames.Probability" /> column.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.ML.IEstimator&lt;Microsoft.ML.Calibrators.CalibratorTransformer&lt;TICalibrator&gt;&gt;.GetOutputSchema">
      <MemberSignature Language="C#" Value="Microsoft.ML.SchemaShape IEstimator&lt;CalibratorTransformer&lt;TICalibrator&gt;&gt;.GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.ML.SchemaShape Microsoft.ML.IEstimator&lt;Microsoft.ML.Calibrators.CalibratorTransformer&lt;TICalibrator&gt;&gt;.GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Calibrators.CalibratorEstimatorBase`1.Microsoft#ML#IEstimator&lt;Microsoft#ML#Calibrators#CalibratorTransformer&lt;TICalibrator&gt;&gt;#GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape Implements IEstimator(Of CalibratorTransformer(Of TICalibrator)).GetOutputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.GetOutputSchema(Microsoft.ML.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">The input <see cref="T:Microsoft.ML.SchemaShape" />.</param>
        <summary>
            Gets the output <see cref="T:Microsoft.ML.SchemaShape" /> of the <see cref="T:Microsoft.ML.IDataView" /> after fitting the calibrator.
            Fitting the calibrator will add a column named "Probability" to the schema. If you already had such a column, a new one will be added.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>