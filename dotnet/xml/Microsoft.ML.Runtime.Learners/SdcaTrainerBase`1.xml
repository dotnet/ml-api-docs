<Type Name="SdcaTrainerBase&lt;TPredictor&gt;" FullName="Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;">
  <TypeSignature Language="C#" Value="public abstract class SdcaTrainerBase&lt;TPredictor&gt; : Microsoft.ML.Runtime.Learners.LinearTrainerBase&lt;TPredictor&gt; where TPredictor : IPredictor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SdcaTrainerBase`1&lt;(class Microsoft.ML.Runtime.IPredictor) TPredictor&gt; extends Microsoft.ML.Runtime.Learners.LinearTrainerBase`1&lt;!TPredictor&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SdcaTrainerBase(Of TPredictor)&#xA;Inherits LinearTrainerBase(Of TPredictor)" />
  <TypeSignature Language="F#" Value="type SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; IPredictor)&gt; = class&#xA;    inherit LinearTrainerBase&lt;'Predictor (requires 'Predictor :&gt; IPredictor)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TPredictor">
      <Constraints>
        <InterfaceName>Microsoft.ML.Runtime.IPredictor</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.ML.Runtime.Learners.LinearTrainerBase&lt;TPredictor&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TPredictor">TPredictor</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TPredictor">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SdcaTrainerBase (Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;.ArgumentsBase args, Microsoft.ML.Runtime.IHostEnvironment env, string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1/ArgumentsBase&lt;!TPredictor&gt; args, class Microsoft.ML.Runtime.IHostEnvironment env, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.#ctor(Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.ArgumentsBase{`0},Microsoft.ML.Runtime.IHostEnvironment,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (args As SdcaTrainerBase(Of TPredictor).ArgumentsBase, env As IHostEnvironment, name As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt; : Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.ArgumentsBase * Microsoft.ML.Runtime.IHostEnvironment * string -&gt; Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;" Usage="new Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt; (args, env, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="args" Type="Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;+ArgumentsBase" />
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="args">To be added.</param>
        <param name="env">To be added.</param>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckConvergence">
      <MemberSignature Language="C#" Value="protected virtual bool CheckConvergence (Microsoft.ML.Runtime.IProgressChannel pch, int iter, Microsoft.ML.Runtime.Training.FloatLabelCursor.Factory cursorFactory, Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;.DualsTableBase duals, Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;.IdToIdxLookup idToIdx, Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt;[] weights, Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt;[] bestWeights, float[] biasUnreg, float[] bestBiasUnreg, float[] biasReg, float[] bestBiasReg, long count, double[] metrics, ref double bestPrimalLoss, ref int bestIter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckConvergence(class Microsoft.ML.Runtime.IProgressChannel pch, int32 iter, class Microsoft.ML.Runtime.Training.FloatLabelCursor/Factory cursorFactory, class Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1/DualsTableBase&lt;!TPredictor&gt; duals, class Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1/IdToIdxLookup&lt;!TPredictor&gt; idToIdx, valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;[] weights, valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;[] bestWeights, float32[] biasUnreg, float32[] bestBiasUnreg, float32[] biasReg, float32[] bestBiasReg, int64 count, float64[] metrics, float64&amp; bestPrimalLoss, int32&amp; bestIter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.CheckConvergence(Microsoft.ML.Runtime.IProgressChannel,System.Int32,Microsoft.ML.Runtime.Training.FloatLabelCursor.Factory,Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.DualsTableBase{`0},Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.IdToIdxLookup{`0},Microsoft.ML.Runtime.Data.VBuffer{System.Single}[],Microsoft.ML.Runtime.Data.VBuffer{System.Single}[],System.Single[],System.Single[],System.Single[],System.Single[],System.Int64,System.Double[],System.Double@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CheckConvergence (pch As IProgressChannel, iter As Integer, cursorFactory As FloatLabelCursor.Factory, duals As SdcaTrainerBase(Of TPredictor).DualsTableBase, idToIdx As SdcaTrainerBase(Of TPredictor).IdToIdxLookup, weights As VBuffer(Of Single)(), bestWeights As VBuffer(Of Single)(), biasUnreg As Single(), bestBiasUnreg As Single(), biasReg As Single(), bestBiasReg As Single(), count As Long, metrics As Double(), ByRef bestPrimalLoss As Double, ByRef bestIter As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CheckConvergence : Microsoft.ML.Runtime.IProgressChannel * int * Microsoft.ML.Runtime.Training.FloatLabelCursor.Factory * Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.DualsTableBase * Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.IdToIdxLookup * Microsoft.ML.Runtime.Data.VBuffer&lt;single&gt;[] * Microsoft.ML.Runtime.Data.VBuffer&lt;single&gt;[] * single[] * single[] * single[] * single[] * int64 * double[] *  *  -&gt; bool&#xA;override this.CheckConvergence : Microsoft.ML.Runtime.IProgressChannel * int * Microsoft.ML.Runtime.Training.FloatLabelCursor.Factory * Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.DualsTableBase * Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.IdToIdxLookup * Microsoft.ML.Runtime.Data.VBuffer&lt;single&gt;[] * Microsoft.ML.Runtime.Data.VBuffer&lt;single&gt;[] * single[] * single[] * single[] * single[] * int64 * double[] *  *  -&gt; bool" Usage="sdcaTrainerBase.CheckConvergence (pch, iter, cursorFactory, duals, idToIdx, weights, bestWeights, biasUnreg, bestBiasUnreg, biasReg, bestBiasReg, count, metrics, bestPrimalLoss, bestIter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pch" Type="Microsoft.ML.Runtime.IProgressChannel" />
        <Parameter Name="iter" Type="System.Int32" />
        <Parameter Name="cursorFactory" Type="Microsoft.ML.Runtime.Training.FloatLabelCursor+Factory" />
        <Parameter Name="duals" Type="Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;+DualsTableBase" />
        <Parameter Name="idToIdx" Type="Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;+IdToIdxLookup" />
        <Parameter Name="weights" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;[]" />
        <Parameter Name="bestWeights" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;[]" />
        <Parameter Name="biasUnreg" Type="System.Single[]" />
        <Parameter Name="bestBiasUnreg" Type="System.Single[]" />
        <Parameter Name="biasReg" Type="System.Single[]" />
        <Parameter Name="bestBiasReg" Type="System.Single[]" />
        <Parameter Name="count" Type="System.Int64" />
        <Parameter Name="metrics" Type="System.Double[]" />
        <Parameter Name="bestPrimalLoss" Type="System.Double" RefType="ref" />
        <Parameter Name="bestIter" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="pch">The progress reporting channel.</param>
        <param name="iter">The iteration number, zero based.</param>
        <param name="cursorFactory">The cursor factory to create cursors over the training data.</param>
        <param name="duals">
            The dual variables. For binary classification and regression, there is one dual variable per row.
            For multiclass classification, there is one dual variable per class per row.
            </param>
        <param name="idToIdx">
            The id to index mapping. May be null. If it is null, the index is given by the
            corresponding lower bits of the id.
            </param>
        <param name="weights">
            The weights array. For binary classification or regression, it consists of only one VBuffer.
            For multiclass classification, its size equals the number of classes.
            </param>
        <param name="bestWeights">
            The weights array that corresponds to the best model obtained from the training iterations thus far.
            </param>
        <param name="biasUnreg">
            The array containing unregularized bias terms. For binary classification or regression,
            it contains only a single value. For multiclass classification its size equals the number of classes.
            </param>
        <param name="bestBiasUnreg">
            The array containing unregularized bias terms corresponding to the best model obtained from the training iterations thus far.
            For binary classification or regression, it contains only a single value.
            For multiclass classification its size equals the number of classes.
            </param>
        <param name="biasReg">
            The array containing regularized bias terms. For binary classification or regression,
            it contains only a single value. For multiclass classification its size equals the number of classes.
            </param>
        <param name="bestBiasReg">
            The array containing regularized bias terms corresponding to the best model obtained from the training iterations thus far.
            For binary classification or regression, it contains only a single value.
            For multiclass classification its size equals the number of classes.
            </param>
        <param name="count">
            The count of (valid) training examples. Bad training examples are excluded from this count.
            </param>
        <param name="metrics">
            The array of metrics for progress reporting.
            </param>
        <param name="bestPrimalLoss">
            The primal loss function value corresponding to the best model obtained thus far.
            </param>
        <param name="bestIter">The iteration number when the best model is obtained.</param>
        <summary>
             Returns whether the algorithm converged, and also populates the <paramref name="metrics" />
            (which is expected to be parallel to the names returned by <see cref="M:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.InitializeConvergenceMetrics(System.String[]@,System.Double[]@)" />).
            When called, the <paramref name="metrics" /> is expected to hold the previously reported values.
            </summary>
        <returns>Whether the optimization has converged.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePredictor">
      <MemberSignature Language="C#" Value="protected abstract TPredictor CreatePredictor (Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt;[] weights, float[] bias);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TPredictor CreatePredictor(valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;[] weights, float32[] bias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.CreatePredictor(Microsoft.ML.Runtime.Data.VBuffer{System.Single}[],System.Single[])" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreatePredictor (weights As VBuffer(Of Single)(), bias As Single()) As TPredictor" />
      <MemberSignature Language="F#" Value="abstract member CreatePredictor : Microsoft.ML.Runtime.Data.VBuffer&lt;single&gt;[] * single[] -&gt; 'Predictor" Usage="sdcaTrainerBase.CreatePredictor (weights, bias)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TPredictor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="weights" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;[]" />
        <Parameter Name="bias" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="weights">To be added.</param>
        <param name="bias">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexFromIdAndRowGetter">
      <MemberSignature Language="C#" Value="protected Func&lt;Microsoft.ML.Runtime.Data.UInt128,long,long&gt; GetIndexFromIdAndRowGetter (Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;.IdToIdxLookup idToIdx, int biasLength);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Func`3&lt;valuetype Microsoft.ML.Runtime.Data.UInt128, int64, int64&gt; GetIndexFromIdAndRowGetter(class Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1/IdToIdxLookup&lt;!TPredictor&gt; idToIdx, int32 biasLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.GetIndexFromIdAndRowGetter(Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.IdToIdxLookup{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetIndexFromIdAndRowGetter (idToIdx As SdcaTrainerBase(Of TPredictor).IdToIdxLookup, biasLength As Integer) As Func(Of UInt128, Long, Long)" />
      <MemberSignature Language="F#" Value="member this.GetIndexFromIdAndRowGetter : Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.IdToIdxLookup * int -&gt; Func&lt;Microsoft.ML.Runtime.Data.UInt128, int64, int64&gt;" Usage="sdcaTrainerBase.GetIndexFromIdAndRowGetter (idToIdx, biasLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.ML.Runtime.Data.UInt128,System.Int64,System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idToIdx" Type="Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;+IdToIdxLookup" />
        <Parameter Name="biasLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="idToIdx">To be added.</param>
        <param name="biasLength">To be added.</param>
        <summary>
            Returns a function delegate to retrieve index from id and row.
            Only works if the cursor is not shuffled.
            This is to avoid redundant conditional branches in the tight loop of training.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexFromIdGetter">
      <MemberSignature Language="C#" Value="protected Func&lt;Microsoft.ML.Runtime.Data.UInt128,long&gt; GetIndexFromIdGetter (Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;.IdToIdxLookup idToIdx, int biasLength);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Func`2&lt;valuetype Microsoft.ML.Runtime.Data.UInt128, int64&gt; GetIndexFromIdGetter(class Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1/IdToIdxLookup&lt;!TPredictor&gt; idToIdx, int32 biasLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.GetIndexFromIdGetter(Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.IdToIdxLookup{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetIndexFromIdGetter (idToIdx As SdcaTrainerBase(Of TPredictor).IdToIdxLookup, biasLength As Integer) As Func(Of UInt128, Long)" />
      <MemberSignature Language="F#" Value="member this.GetIndexFromIdGetter : Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.IdToIdxLookup * int -&gt; Func&lt;Microsoft.ML.Runtime.Data.UInt128, int64&gt;" Usage="sdcaTrainerBase.GetIndexFromIdGetter (idToIdx, biasLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.ML.Runtime.Data.UInt128,System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idToIdx" Type="Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;+IdToIdxLookup" />
        <Parameter Name="biasLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="idToIdx">To be added.</param>
        <param name="biasLength">To be added.</param>
        <summary>
            Returns a function delegate to retrieve index from id.
            This is to avoid redundant conditional branches in the tight loop of training.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstanceWeight">
      <MemberSignature Language="C#" Value="protected abstract float GetInstanceWeight (Microsoft.ML.Runtime.Training.FloatLabelCursor cursor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance float32 GetInstanceWeight(class Microsoft.ML.Runtime.Training.FloatLabelCursor cursor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.GetInstanceWeight(Microsoft.ML.Runtime.Training.FloatLabelCursor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetInstanceWeight (cursor As FloatLabelCursor) As Single" />
      <MemberSignature Language="F#" Value="abstract member GetInstanceWeight : Microsoft.ML.Runtime.Training.FloatLabelCursor -&gt; single" Usage="sdcaTrainerBase.GetInstanceWeight cursor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursor" Type="Microsoft.ML.Runtime.Training.FloatLabelCursor" />
      </Parameters>
      <Docs>
        <param name="cursor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeFeatureNormSquared">
      <MemberSignature Language="C#" Value="protected virtual float[] InitializeFeatureNormSquared (int length);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance float32[] InitializeFeatureNormSquared(int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.InitializeFeatureNormSquared(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function InitializeFeatureNormSquared (length As Integer) As Single()" />
      <MemberSignature Language="F#" Value="abstract member InitializeFeatureNormSquared : int -&gt; single[]&#xA;override this.InitializeFeatureNormSquared : int -&gt; single[]" Usage="sdcaTrainerBase.InitializeFeatureNormSquared length" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loss">
      <MemberSignature Language="C#" Value="protected Microsoft.ML.Runtime.ISupportSdcaLoss Loss;" />
      <MemberSignature Language="ILAsm" Value=".field family class Microsoft.ML.Runtime.ISupportSdcaLoss Loss" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.Loss" />
      <MemberSignature Language="VB.NET" Value="Protected Loss As ISupportSdcaLoss " />
      <MemberSignature Language="F#" Value="val mutable Loss : Microsoft.ML.Runtime.ISupportSdcaLoss" Usage="Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.Loss" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.ISupportSdcaLoss</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShuffleData">
      <MemberSignature Language="C#" Value="protected override bool ShuffleData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShuffleData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.ShuffleData" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ShuffleData As Boolean" />
      <MemberSignature Language="F#" Value="member this.ShuffleData : bool" Usage="Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.ShuffleData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrainCore">
      <MemberSignature Language="C#" Value="protected override sealed TPredictor TrainCore (Microsoft.ML.Runtime.IChannel ch, Microsoft.ML.Runtime.Data.RoleMappedData data, Microsoft.ML.Runtime.Learners.LinearPredictor predictor, int weightSetCount);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance !TPredictor TrainCore(class Microsoft.ML.Runtime.IChannel ch, class Microsoft.ML.Runtime.Data.RoleMappedData data, class Microsoft.ML.Runtime.Learners.LinearPredictor predictor, int32 weightSetCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.TrainCore(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Runtime.Data.RoleMappedData,Microsoft.ML.Runtime.Learners.LinearPredictor,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function TrainCore (ch As IChannel, data As RoleMappedData, predictor As LinearPredictor, weightSetCount As Integer) As TPredictor" />
      <MemberSignature Language="F#" Value="override this.TrainCore : Microsoft.ML.Runtime.IChannel * Microsoft.ML.Runtime.Data.RoleMappedData * Microsoft.ML.Runtime.Learners.LinearPredictor * int -&gt; 'Predictor" Usage="sdcaTrainerBase.TrainCore (ch, data, predictor, weightSetCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TPredictor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="Microsoft.ML.Runtime.IChannel" />
        <Parameter Name="data" Type="Microsoft.ML.Runtime.Data.RoleMappedData" />
        <Parameter Name="predictor" Type="Microsoft.ML.Runtime.Learners.LinearPredictor" />
        <Parameter Name="weightSetCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ch">To be added.</param>
        <param name="data">To be added.</param>
        <param name="predictor">To be added.</param>
        <param name="weightSetCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrainWithoutLock">
      <MemberSignature Language="C#" Value="protected virtual void TrainWithoutLock (Microsoft.ML.Runtime.IProgressChannelProvider progress, Microsoft.ML.Runtime.Training.FloatLabelCursor.Factory cursorFactory, Microsoft.ML.Runtime.IRandom rand, Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;.IdToIdxLookup idToIdx, int numThreads, Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;.DualsTableBase duals, float[] biasReg, float[] invariants, float lambdaNInv, Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt;[] weights, float[] biasUnreg, Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt;[] l1IntermediateWeights, float[] l1IntermediateBias, float[] featureNormSquared);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TrainWithoutLock(class Microsoft.ML.Runtime.IProgressChannelProvider progress, class Microsoft.ML.Runtime.Training.FloatLabelCursor/Factory cursorFactory, class Microsoft.ML.Runtime.IRandom rand, class Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1/IdToIdxLookup&lt;!TPredictor&gt; idToIdx, int32 numThreads, class Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1/DualsTableBase&lt;!TPredictor&gt; duals, float32[] biasReg, float32[] invariants, float32 lambdaNInv, valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;[] weights, float32[] biasUnreg, valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;[] l1IntermediateWeights, float32[] l1IntermediateBias, float32[] featureNormSquared) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.TrainWithoutLock(Microsoft.ML.Runtime.IProgressChannelProvider,Microsoft.ML.Runtime.Training.FloatLabelCursor.Factory,Microsoft.ML.Runtime.IRandom,Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.IdToIdxLookup{`0},System.Int32,Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.DualsTableBase{`0},System.Single[],System.Single[],System.Single,Microsoft.ML.Runtime.Data.VBuffer{System.Single}[],System.Single[],Microsoft.ML.Runtime.Data.VBuffer{System.Single}[],System.Single[],System.Single[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TrainWithoutLock (progress As IProgressChannelProvider, cursorFactory As FloatLabelCursor.Factory, rand As IRandom, idToIdx As SdcaTrainerBase(Of TPredictor).IdToIdxLookup, numThreads As Integer, duals As SdcaTrainerBase(Of TPredictor).DualsTableBase, biasReg As Single(), invariants As Single(), lambdaNInv As Single, weights As VBuffer(Of Single)(), biasUnreg As Single(), l1IntermediateWeights As VBuffer(Of Single)(), l1IntermediateBias As Single(), featureNormSquared As Single())" />
      <MemberSignature Language="F#" Value="abstract member TrainWithoutLock : Microsoft.ML.Runtime.IProgressChannelProvider * Microsoft.ML.Runtime.Training.FloatLabelCursor.Factory * Microsoft.ML.Runtime.IRandom * Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.IdToIdxLookup * int * Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.DualsTableBase * single[] * single[] * single * Microsoft.ML.Runtime.Data.VBuffer&lt;single&gt;[] * single[] * Microsoft.ML.Runtime.Data.VBuffer&lt;single&gt;[] * single[] * single[] -&gt; unit&#xA;override this.TrainWithoutLock : Microsoft.ML.Runtime.IProgressChannelProvider * Microsoft.ML.Runtime.Training.FloatLabelCursor.Factory * Microsoft.ML.Runtime.IRandom * Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.IdToIdxLookup * int * Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;'Predictor (requires 'Predictor :&gt; Microsoft.ML.Runtime.IPredictor)&gt;.DualsTableBase * single[] * single[] * single * Microsoft.ML.Runtime.Data.VBuffer&lt;single&gt;[] * single[] * Microsoft.ML.Runtime.Data.VBuffer&lt;single&gt;[] * single[] * single[] -&gt; unit" Usage="sdcaTrainerBase.TrainWithoutLock (progress, cursorFactory, rand, idToIdx, numThreads, duals, biasReg, invariants, lambdaNInv, weights, biasUnreg, l1IntermediateWeights, l1IntermediateBias, featureNormSquared)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progress" Type="Microsoft.ML.Runtime.IProgressChannelProvider" />
        <Parameter Name="cursorFactory" Type="Microsoft.ML.Runtime.Training.FloatLabelCursor+Factory" />
        <Parameter Name="rand" Type="Microsoft.ML.Runtime.IRandom" />
        <Parameter Name="idToIdx" Type="Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;+IdToIdxLookup" />
        <Parameter Name="numThreads" Type="System.Int32" />
        <Parameter Name="duals" Type="Microsoft.ML.Runtime.Learners.SdcaTrainerBase&lt;TPredictor&gt;+DualsTableBase" />
        <Parameter Name="biasReg" Type="System.Single[]" />
        <Parameter Name="invariants" Type="System.Single[]" />
        <Parameter Name="lambdaNInv" Type="System.Single" />
        <Parameter Name="weights" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;[]" />
        <Parameter Name="biasUnreg" Type="System.Single[]" />
        <Parameter Name="l1IntermediateWeights" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;[]" />
        <Parameter Name="l1IntermediateBias" Type="System.Single[]" />
        <Parameter Name="featureNormSquared" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="progress">The progress reporting channel.</param>
        <param name="cursorFactory">The cursor factory to create cursors over the training examples.</param>
        <param name="rand">
            The random number generator to generate random numbers for randomized shuffling of the training examples.
            It may be null. When it is null, the training examples are not shuffled and are cursored in its original order.
            </param>
        <param name="idToIdx">
            The id to index mapping. May be null. If it is null, the index is given by the
            corresponding lower bits of the id.
            </param>
        <param name="numThreads">The number of threads used in parallel training. It is used in computing the dual update.</param>
        <param name="duals">
            The dual variables. For binary classification and regression, there is one dual variable per row.
            For multiclass classification, there is one dual variable per class per row.
            </param>
        <param name="biasReg">The array containing regularized bias terms. For binary classification or regression,
            it contains only a single value. For multiclass classification its size equals the number of classes.</param>
        <param name="invariants">
            The dual updates invariants. It may be null. If not null, it holds an array of pre-computed numerical quantities
            that depend on the training example label and features, not the value of dual variables.
            </param>
        <param name="lambdaNInv">The precomputed numerical quantity 1 / (l2Const * (count of training examples)).</param>
        <param name="weights">
            The weights array. For binary classification or regression, it consists of only one VBuffer.
            For multiclass classification, its size equals the number of classes.
            </param>
        <param name="biasUnreg">
            The array containing unregularized bias terms. For binary classification or regression,
            it contains only a single value. For multiclass classification its size equals the number of classes.
            </param>
        <param name="l1IntermediateWeights">
            The array holding the intermediate weights prior to making L1 shrinkage adjustment. It is null iff l1Threshold is zero.
            Otherwise, for binary classification or regression, it consists of only one VBuffer;
            for multiclass classification, its size equals the number of classes.
            </param>
        <param name="l1IntermediateBias">
            The array holding the intermediate bias prior to making L1 shrinkage adjustment. It is null iff l1Threshold is zero.
            Otherwise, for binary classification or regression, it consists of only one value;
            for multiclass classification, its size equals the number of classes.
            </param>
        <param name="featureNormSquared">
            The array holding the pre-computed squared L2-norm of features for each training example. It may be null. It is always null for
            binary classification and regression because this quantity is not needed.
            </param>
        <summary>
            Train the SDCA optimizer with one iteration over the entire training examples.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TuneDefaultL2">
      <MemberSignature Language="C#" Value="protected virtual float TuneDefaultL2 (Microsoft.ML.Runtime.IChannel ch, int maxIterations, long rowCount, int numThreads);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance float32 TuneDefaultL2(class Microsoft.ML.Runtime.IChannel ch, int32 maxIterations, int64 rowCount, int32 numThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Learners.SdcaTrainerBase`1.TuneDefaultL2(Microsoft.ML.Runtime.IChannel,System.Int32,System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TuneDefaultL2 (ch As IChannel, maxIterations As Integer, rowCount As Long, numThreads As Integer) As Single" />
      <MemberSignature Language="F#" Value="abstract member TuneDefaultL2 : Microsoft.ML.Runtime.IChannel * int * int64 * int -&gt; single&#xA;override this.TuneDefaultL2 : Microsoft.ML.Runtime.IChannel * int * int64 * int -&gt; single" Usage="sdcaTrainerBase.TuneDefaultL2 (ch, maxIterations, rowCount, numThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="Microsoft.ML.Runtime.IChannel" />
        <Parameter Name="maxIterations" Type="System.Int32" />
        <Parameter Name="rowCount" Type="System.Int64" />
        <Parameter Name="numThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ch">To be added.</param>
        <param name="maxIterations">To be added.</param>
        <param name="rowCount">To be added.</param>
        <param name="numThreads">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>