<Type Name="OnnxConverter" FullName="Microsoft.ML.Models.OnnxConverter">
  <TypeSignature Language="C#" Value="public sealed class OnnxConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OnnxConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Models.OnnxConverter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OnnxConverter" />
  <TypeSignature Language="F#" Value="type OnnxConverter = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Converts the model to ONNX format.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OnnxConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Models.OnnxConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public void Convert (Microsoft.ML.PredictionModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Convert(class Microsoft.ML.PredictionModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Models.OnnxConverter.Convert(Microsoft.ML.PredictionModel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Convert (model As PredictionModel)" />
      <MemberSignature Language="F#" Value="member this.Convert : Microsoft.ML.PredictionModel -&gt; unit" Usage="onnxConverter.Convert model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.ML.PredictionModel" />
      </Parameters>
      <Docs>
        <param name="model">Model that needs to be converted to ONNX format.</param>
        <summary>
          <a href="https://onnx.ai/">ONNX</a> is an intermediate representation format
             for machine learning models. It is used to make models portable such that you can
             train a model using a toolkit and run it in another tookit's runtime, for example,
             you can create a model using ML.NET, export it to an ONNX-ML model file,
             then load and run that ONNX-ML model in Windows ML, on an UWP Windows 10 app.
            
             This API converts an ML.NET model to ONNX-ML format by inspecting the transform pipeline
             from the end, checking for components that know how to save themselves as ONNX.
             The first item in the transform pipeline that does not know how to save itself
             as ONNX, is considered the "input" to the ONNX pipeline. (Ideally this would be the
             original loader itself, but this may not be possible if the user used unsavable
             transforms in defining the pipe.) All the columns in the source that are a type the
             ONNX knows how to deal with will be tracked. Intermediate transformations of the
             data appearing as new columns will appear in the output block of the ONNX, with names
             derived from the corresponding column names. The ONNX JSON will be serialized to a
             path defined through the Json option.
            
             This API supports the following arguments:
             <see cref="P:Microsoft.ML.Models.OnnxConverter.Onnx" /> indicates the file to write the ONNX protocol buffer file to. This is required.
             <see cref="P:Microsoft.ML.Models.OnnxConverter.Json" /> indicates the file to write the JSON representation of the ONNX model. This is optional.
             <see cref="P:Microsoft.ML.Models.OnnxConverter.Name" /> indicates the name property in the ONNX model. If left unspecified, it will
             be the extension-less name of the file specified in the onnx indicates the protocol buffer file
             to write the ONNX representation to.
             <see cref="P:Microsoft.ML.Models.OnnxConverter.Domain" /> indicates the domain name of the model. ONNX uses reverse domain name space indicators.
             For example com.microsoft.cognitiveservices. This is a required field.
             <see cref="P:Microsoft.ML.Models.OnnxConverter.InputsToDrop" /> is a string array of input column names to omit from the input mapping.
             A common scenario might be to drop the label column, for instance, since it may not be practically
             useful for the pipeline. Note that any columns depending on these naturally cannot be saved.
             <see cref="P:Microsoft.ML.Models.OnnxConverter.OutputsToDrop" /> is similar, except for the output schema. Note that the pipeline handler
             is currently not intelligent enough to drop intermediate calculations that produce this value: this will
             merely omit that value from the actual output.
            
             Transforms that can be exported to ONNX
             1. Concat
             2. KeyToVector
             3. NAReplace
             4. Normalize
             5. Term
             6. Categorical
            
             Learners that can be exported to ONNX
             1. FastTree
             2. LightGBM
             3. Logistic Regression
            
             See <a href="https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Tests/OnnxTests.cs" />
             for an example on how to train a model and then convert that model to ONNX.
             </summary>
        <remarks>
          <para>
            <a href="https://onnx.ai/">ONNX</a> is an intermediate representation format for machine learning models. It is used to make models portable such that you can train a model using a toolkit and run it in another toolkit's runtime. For example, you create a model using ML.NET or any ONNX compatible toolkit, convert it to ONNX and then the ONNX model can be converted into say, CoreML, TensorFlow, or WinML model to run on the respective runtime.
          </para>
          <para>This API converts an ML.NET model to ONNX format by inspecting the transform pipeline from the end, checking for components that know how to save themselves as ONNX. The first item in the transform pipeline that does not know how to save itself as ONNX, is considered the "input" to the ONNX pipeline (Ideally, this would be the original loader itself, but this may not be possible if the user used unsavable transforms in defining the pipe.). All the columns in the source that are a type the ONNX knows how to deal with will be tracked. Intermediate transformations of the data appearing as new columns will appear in the output block of the ONNX, with names derived from the corresponding column names. The ONNX JSON will be serialized to a path defined through the Json option.
          </para>
          <para>This API supports the following arguments:
             <list type="bullet"><item><description><see cref="P:Microsoft.ML.Models.OnnxConverter.Onnx" /> indicates the file to write the ONNX protocol buffer file to. This is optional.</description></item><item><description><see cref="P:Microsoft.ML.Models.OnnxConverter.Json" /> indicates the file to write the JSON representation of the ONNX model. This is optional.</description></item><item><description><see cref="P:Microsoft.ML.Models.OnnxConverter.Name" /> indicates the name property in the ONNX model. If left unspecified, it will be the extension-less name of the file specified in the ONNX indicates the protocol buffer file to write the ONNX representation to.</description></item><item><description><see cref="P:Microsoft.ML.Models.OnnxConverter.Domain" /> indicates the domain name of the model. ONNX uses reverse domain name space indicators. For example com.microsoft.cognitiveservices. This is a required field.</description></item><item><description><see cref="P:Microsoft.ML.Models.OnnxConverter.InputsToDrop" /> is a string array of input column names to omit from the input mapping. A common scenario might be to drop the label column, for instance, since it may not be practically useful for the pipeline. Note that any columns depending on these naturally cannot be saved.</description></item><item><description><see cref="P:Microsoft.ML.Models.OnnxConverter.OutputsToDrop" /> is similar, except for the output schema. Note that the pipeline handler is currently not intelligent enough to drop intermediate calculations that produce this value: this will merely omit that value from the actual output.</description></item></list></para>
          <para>Transforms that can be exported to ONNX:
            <list type="number"><item><description>Concat</description></item><item><description>KeyToVector</description></item><item><description>NAReplace</description></item><item><description>Normalize</description></item><item><description>Term</description></item><item><description>Categorical</description></item></list></para>
          <para>Learners that can be exported to ONNX:
            <list type="number"><item><description>FastTree</description></item><item><description>LightGBM</description></item><item><description>Logistic Regression</description></item></list></para>
          <para>See <a href="https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Tests/OnnxTests.cs">the ONNX unit test at the dotnet/machinelearning GitHub repo</a> for an example on how to train a model and then convert that model to ONNX.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public string DataFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Models.OnnxConverter.DataFile" />
      <MemberSignature Language="VB.NET" Value="Public Property DataFile As String" />
      <MemberSignature Language="F#" Value="member this.DataFile : string with get, set" Usage="Microsoft.ML.Models.OnnxConverter.DataFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The data file
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public string Domain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Domain" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Models.OnnxConverter.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Property Domain As String" />
      <MemberSignature Language="F#" Value="member this.Domain : string with get, set" Usage="Microsoft.ML.Models.OnnxConverter.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The 'domain' property in the output ONNX.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputsToDrop">
      <MemberSignature Language="C#" Value="public string[] InputsToDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] InputsToDrop" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Models.OnnxConverter.InputsToDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property InputsToDrop As String()" />
      <MemberSignature Language="F#" Value="member this.InputsToDrop : string[] with get, set" Usage="Microsoft.ML.Models.OnnxConverter.InputsToDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Array of input column names to drop
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Json">
      <MemberSignature Language="C#" Value="public string Json { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Json" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Models.OnnxConverter.Json" />
      <MemberSignature Language="VB.NET" Value="Public Property Json As String" />
      <MemberSignature Language="F#" Value="member this.Json : string with get, set" Usage="Microsoft.ML.Models.OnnxConverter.Json" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The path to write the output JSON to.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.EntryPoints.ITransformModel&gt; Model { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Runtime.EntryPoints.Var`1&lt;class Microsoft.ML.Runtime.EntryPoints.ITransformModel&gt; Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Models.OnnxConverter.Model" />
      <MemberSignature Language="VB.NET" Value="Public Property Model As Var(Of ITransformModel)" />
      <MemberSignature Language="F#" Value="member this.Model : Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.EntryPoints.ITransformModel&gt; with get, set" Usage="Microsoft.ML.Models.OnnxConverter.Model" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.EntryPoints.Var&lt;Microsoft.ML.Runtime.EntryPoints.ITransformModel&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Model that needs to be converted to ONNX format.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Models.OnnxConverter.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="Microsoft.ML.Models.OnnxConverter.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The 'name' property in the output ONNX. By default this will be the ONNX extension-less name.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Onnx">
      <MemberSignature Language="C#" Value="public string Onnx { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Onnx" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Models.OnnxConverter.Onnx" />
      <MemberSignature Language="VB.NET" Value="Public Property Onnx As String" />
      <MemberSignature Language="F#" Value="member this.Onnx : string with get, set" Usage="Microsoft.ML.Models.OnnxConverter.Onnx" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The path to write the output ONNX to.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputsToDrop">
      <MemberSignature Language="C#" Value="public string[] OutputsToDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] OutputsToDrop" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Models.OnnxConverter.OutputsToDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property OutputsToDrop As String()" />
      <MemberSignature Language="F#" Value="member this.OutputsToDrop : string[] with get, set" Usage="Microsoft.ML.Models.OnnxConverter.OutputsToDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Array of output column names to drop
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
