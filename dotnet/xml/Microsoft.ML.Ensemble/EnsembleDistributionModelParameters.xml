<Type Name="EnsembleDistributionModelParameters" FullName="Microsoft.ML.Ensemble.EnsembleDistributionModelParameters">
  <TypeSignature Language="C#" Value="public sealed class EnsembleDistributionModelParameters : Microsoft.ML.Ensemble.EnsembleModelParametersBase&lt;Microsoft.ML.IDistPredictorProducing&lt;float,float&gt;,float&gt;, Microsoft.ML.IDistPredictorProducing&lt;float,float&gt;, Microsoft.ML.IPredictorProducing&lt;float&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EnsembleDistributionModelParameters extends Microsoft.ML.Ensemble.EnsembleModelParametersBase`2&lt;class Microsoft.ML.IDistPredictorProducing`2&lt;float32, float32&gt;, float32&gt; implements class Microsoft.ML.IDistPredictorProducing`2&lt;float32, float32&gt;, class Microsoft.ML.IPredictor, class Microsoft.ML.IPredictorProducing`1&lt;float32&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Ensemble.EnsembleDistributionModelParameters" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EnsembleDistributionModelParameters&#xA;Inherits EnsembleModelParametersBase(Of IDistPredictorProducing(Of Single, Single), Single)&#xA;Implements IDistPredictorProducing(Of Single, Single), IPredictorProducing(Of Single)" />
  <TypeSignature Language="F#" Value="type EnsembleDistributionModelParameters = class&#xA;    inherit EnsembleModelParametersBase&lt;IDistPredictorProducing&lt;single, single&gt;, single&gt;&#xA;    interface IDistPredictorProducing&lt;single, single&gt;&#xA;    interface IPredictorProducing&lt;single&gt;&#xA;    interface IPredictor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Ensemble</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Ensemble.EnsembleModelParametersBase&lt;Microsoft.ML.IDistPredictorProducing&lt;System.Single,System.Single&gt;,System.Single&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TPredictor">Microsoft.ML.IDistPredictorProducing&lt;System.Single,System.Single&gt;</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="TOutput">System.Single</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.IDistPredictorProducing&lt;System.Single,System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.IPredictor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.IPredictorProducing&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.IPredictorProducing&lt;TResult&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnsembleDistributionModelParameters (Microsoft.ML.IHostEnvironment env, Microsoft.ML.PredictionKind kind, Microsoft.ML.Ensemble.FeatureSubsetModel&lt;Microsoft.ML.IDistPredictorProducing&lt;float,float&gt;&gt;[] models, Microsoft.ML.Ensemble.OutputCombiners.IOutputCombiner&lt;float&gt; combiner, float[] weights = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, valuetype Microsoft.ML.PredictionKind kind, class Microsoft.ML.Ensemble.FeatureSubsetModel`1&lt;class Microsoft.ML.IDistPredictorProducing`2&lt;float32, float32&gt;&gt;[] models, class Microsoft.ML.Ensemble.OutputCombiners.IOutputCombiner`1&lt;float32&gt; combiner, float32[] weights) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Ensemble.EnsembleDistributionModelParameters.#ctor(Microsoft.ML.IHostEnvironment,Microsoft.ML.PredictionKind,Microsoft.ML.Ensemble.FeatureSubsetModel{Microsoft.ML.IDistPredictorProducing{System.Single,System.Single}}[],Microsoft.ML.Ensemble.OutputCombiners.IOutputCombiner{System.Single},System.Single[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, kind As PredictionKind, models As FeatureSubsetModel(Of IDistPredictorProducing(Of Single, Single))(), combiner As IOutputCombiner(Of Single), Optional weights As Single() = null)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Ensemble.EnsembleDistributionModelParameters : Microsoft.ML.IHostEnvironment * Microsoft.ML.PredictionKind * Microsoft.ML.Ensemble.FeatureSubsetModel&lt;Microsoft.ML.IDistPredictorProducing&lt;single, single&gt;&gt;[] * Microsoft.ML.Ensemble.OutputCombiners.IOutputCombiner&lt;single&gt; * single[] -&gt; Microsoft.ML.Ensemble.EnsembleDistributionModelParameters" Usage="new Microsoft.ML.Ensemble.EnsembleDistributionModelParameters (env, kind, models, combiner, weights)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Ensemble</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="kind" Type="Microsoft.ML.PredictionKind" />
        <Parameter Name="models" Type="Microsoft.ML.Ensemble.FeatureSubsetModel&lt;Microsoft.ML.IDistPredictorProducing&lt;System.Single,System.Single&gt;&gt;[]" />
        <Parameter Name="combiner" Type="Microsoft.ML.Ensemble.OutputCombiners.IOutputCombiner&lt;System.Single&gt;" />
        <Parameter Name="weights" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="env">The host environment.</param>
        <param name="kind">The prediction kind <see cref="P:Microsoft.ML.Ensemble.EnsembleDistributionModelParameters.PredictionKind" /></param>
        <param name="models">Array of sub-models that you want to ensemble together.</param>
        <param name="combiner">The combiner class to use to ensemble the models.</param>
        <param name="weights">The weights assigned to each model to be ensembled.</param>
        <summary>
            Instantiate new ensemble model from existing sub-models.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictionKind">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.PredictionKind PredictionKind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.ML.PredictionKind PredictionKind" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Ensemble.EnsembleDistributionModelParameters.PredictionKind" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PredictionKind As PredictionKind" />
      <MemberSignature Language="F#" Value="member this.PredictionKind : Microsoft.ML.PredictionKind" Usage="Microsoft.ML.Ensemble.EnsembleDistributionModelParameters.PredictionKind" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.IPredictor.PredictionKind</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Ensemble</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.PredictionKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>