<Type Name="ImageGrayscalingEstimator" FullName="Microsoft.ML.ImageAnalytics.ImageGrayscalingEstimator">
  <TypeSignature Language="C#" Value="public sealed class ImageGrayscalingEstimator : Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.ImageAnalytics.ImageGrayscalingTransformer&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImageGrayscalingEstimator extends Microsoft.ML.Data.TrivialEstimator`1&lt;class Microsoft.ML.ImageAnalytics.ImageGrayscalingTransformer&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.ImageAnalytics.ImageGrayscalingEstimator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImageGrayscalingEstimator&#xA;Inherits TrivialEstimator(Of ImageGrayscalingTransformer)" />
  <TypeSignature Language="F#" Value="type ImageGrayscalingEstimator = class&#xA;    inherit TrivialEstimator&lt;ImageGrayscalingTransformer&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.ImageAnalytics</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.ImageAnalytics.ImageGrayscaleTransform&gt;</BaseTypeName>
    <BaseTypeName FrameworkAlternate="ml-dotnet">Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.ImageAnalytics.ImageGrayscaleTransformer&gt;</BaseTypeName>
    <BaseTypeName FrameworkAlternate="ml-dotnet">Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.ImageAnalytics.ImageGrayscalingTransformer&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Microsoft.ML.ImageAnalytics.ImageGrayscalingTransformer</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:Microsoft.ML.IEstimator`1" /> that converts the image to grayscale.
            </summary>
    <remarks>
            Calling <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.Data.DataView.IDataView)" /> in this estimator, produces an <see cref="T:Microsoft.ML.ImageAnalytics.ImageGrayscalingEstimator" />.
            The images might be converted to grayscale to reduce the complexity of the model.
            The grayed out images contain less information to process than the colored images.
            Another use case for converting to grayscale is to generate new images out of the existing ones, so you can have a larger dataset,
            a technique known as <a href="http://www.stat.harvard.edu/Faculty_Content/meng/JCGS01.pdf"> data augmentation</a>.
            For end-to-end image processing pipelines, and scenarios in your applications, see the
            <a href="https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started"> examples in the machinelearning-samples github repository.</a><seealso cref="T:Microsoft.ML.ImageEstimatorsCatalog" /></remarks>
  </Docs>
  <Members>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.SchemaShape GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.ML.SchemaShape GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ImageAnalytics.ImageGrayscalingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="override this.GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape" Usage="imageGrayscalingEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.ImageAnalytics</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape" /> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>