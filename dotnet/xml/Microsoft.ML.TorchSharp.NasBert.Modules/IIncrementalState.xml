<Type Name="IIncrementalState" FullName="Microsoft.ML.TorchSharp.NasBert.Modules.IIncrementalState">
  <TypeSignature Language="C#" Value="public interface IIncrementalState" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IIncrementalState" FrameworkAlternate="ml-dotnet;ml-dotnet-preview" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.TorchSharp.NasBert.Modules.IIncrementalState" />
  <TypeSignature Language="VB.NET" Value="Public Interface IIncrementalState" />
  <TypeSignature Language="F#" Value="type IIncrementalState = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IIncrementalState" FrameworkAlternate="ml-dotnet-2.0.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.TorchSharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Incremental state for incremental generation.
            Refer to https://github.com/facebookresearch/fairseq/blob/main/fairseq/incremental_decoding_utils.py.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetIncrementalState">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;string,TorchSharp.torch.Tensor&gt; GetIncrementalState (TorchSharp.torch.nn.Module module, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.Dictionary&lt;string,TorchSharp.torch.Tensor&gt;&gt; incrementalState, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.Dictionary`2&lt;string, class TorchSharp.torch/Tensor&gt; GetIncrementalState(class TorchSharp.torch/nn/Module module, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.Dictionary`2&lt;string, class TorchSharp.torch/Tensor&gt;&gt; incrementalState, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TorchSharp.NasBert.Modules.IIncrementalState.GetIncrementalState(TorchSharp.torch.nn.Module,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,TorchSharp.torch.Tensor}},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIncrementalState (module As torch.nn.Module, incrementalState As Dictionary(Of String, Dictionary(Of String, torch.Tensor)), key As String) As Dictionary(Of String, torch.Tensor)" />
      <MemberSignature Language="F#" Value="abstract member GetIncrementalState : TorchSharp.torch.nn.Module * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.Dictionary&lt;string, TorchSharp.torch.Tensor&gt;&gt; * string -&gt; System.Collections.Generic.Dictionary&lt;string, TorchSharp.torch.Tensor&gt;" Usage="iIncrementalState.GetIncrementalState (module, incrementalState, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TorchSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.String,TorchSharp.torch+Tensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="module" Type="TorchSharp.torch+nn+Module" />
        <Parameter Name="incrementalState" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.Dictionary&lt;System.String,TorchSharp.torch+Tensor&gt;&gt;" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="module">To be added.</param>
        <param name="incrementalState">To be added.</param>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitIncrementalState">
      <MemberSignature Language="C#" Value="public void InitIncrementalState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitIncrementalState() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TorchSharp.NasBert.Modules.IIncrementalState.InitIncrementalState" />
      <MemberSignature Language="VB.NET" Value="Public Sub InitIncrementalState ()" />
      <MemberSignature Language="F#" Value="abstract member InitIncrementalState : unit -&gt; unit" Usage="iIncrementalState.InitIncrementalState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TorchSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIncrementalState">
      <MemberSignature Language="C#" Value="public void SetIncrementalState (TorchSharp.torch.nn.Module module, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.Dictionary&lt;string,TorchSharp.torch.Tensor&gt;&gt; incrementalState, string key, System.Collections.Generic.Dictionary&lt;string,TorchSharp.torch.Tensor&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetIncrementalState(class TorchSharp.torch/nn/Module module, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.Dictionary`2&lt;string, class TorchSharp.torch/Tensor&gt;&gt; incrementalState, string key, class System.Collections.Generic.Dictionary`2&lt;string, class TorchSharp.torch/Tensor&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TorchSharp.NasBert.Modules.IIncrementalState.SetIncrementalState(TorchSharp.torch.nn.Module,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,TorchSharp.torch.Tensor}},System.String,System.Collections.Generic.Dictionary{System.String,TorchSharp.torch.Tensor})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetIncrementalState (module As torch.nn.Module, incrementalState As Dictionary(Of String, Dictionary(Of String, torch.Tensor)), key As String, value As Dictionary(Of String, torch.Tensor))" />
      <MemberSignature Language="F#" Value="abstract member SetIncrementalState : TorchSharp.torch.nn.Module * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.Dictionary&lt;string, TorchSharp.torch.Tensor&gt;&gt; * string * System.Collections.Generic.Dictionary&lt;string, TorchSharp.torch.Tensor&gt; -&gt; unit" Usage="iIncrementalState.SetIncrementalState (module, incrementalState, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TorchSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="module" Type="TorchSharp.torch+nn+Module" />
        <Parameter Name="incrementalState" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.Dictionary&lt;System.String,TorchSharp.torch+Tensor&gt;&gt;" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Collections.Generic.Dictionary&lt;System.String,TorchSharp.torch+Tensor&gt;" />
      </Parameters>
      <Docs>
        <param name="module">To be added.</param>
        <param name="incrementalState">To be added.</param>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
