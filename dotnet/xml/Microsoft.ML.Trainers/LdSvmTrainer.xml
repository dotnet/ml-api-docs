<Type Name="LdSvmTrainer" FullName="Microsoft.ML.Trainers.LdSvmTrainer">
  <TypeSignature Language="C#" Value="public sealed class LdSvmTrainer : Microsoft.ML.Trainers.TrainerEstimatorBase&lt;Microsoft.ML.Data.BinaryPredictionTransformer&lt;Microsoft.ML.Trainers.LdSvmModelParameters&gt;,Microsoft.ML.Trainers.LdSvmModelParameters&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LdSvmTrainer extends Microsoft.ML.Trainers.TrainerEstimatorBase`2&lt;class Microsoft.ML.Data.BinaryPredictionTransformer`1&lt;class Microsoft.ML.Trainers.LdSvmModelParameters&gt;, class Microsoft.ML.Trainers.LdSvmModelParameters&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Trainers.LdSvmTrainer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LdSvmTrainer&#xA;Inherits TrainerEstimatorBase(Of BinaryPredictionTransformer(Of LdSvmModelParameters), LdSvmModelParameters)" />
  <TypeSignature Language="F#" Value="type LdSvmTrainer = class&#xA;    inherit TrainerEstimatorBase&lt;BinaryPredictionTransformer&lt;LdSvmModelParameters&gt;, LdSvmModelParameters&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StandardTrainers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Trainers.TrainerEstimatorBase&lt;Microsoft.ML.Data.BinaryPredictionTransformer&lt;Microsoft.ML.Trainers.LdSvmModelParameters&gt;,Microsoft.ML.Trainers.LdSvmModelParameters&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Microsoft.ML.Data.BinaryPredictionTransformer&lt;Microsoft.ML.Trainers.LdSvmModelParameters&gt;</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!1">Microsoft.ML.Trainers.LdSvmModelParameters</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1" /> to predict a target using a non-linear binary classification model
             trained with Local Deep SVM.
             </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
             To create this trainer, use [LdSvm](xref:Microsoft.ML.StandardTrainersCatalog.LdSvm(BinaryClassificationCatalog.BinaryClassificationTrainers, string, string, string, int, int, bool, bool))
             or [LdSvm(Options)](xref:Microsoft.ML.StandardTrainersCatalog.LdSvm(BinaryClassificationCatalog.BinaryClassificationTrainers, LdSvmTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-binary-classification-no-prob.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Binary classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | No |
            
             ### Training Algorithm Details
             Local Deep SVM (LD-SVM) is a generalization of Localized Multiple Kernel Learning for non-linear SVM. Multiple kernel methods learn a different
             kernel, and hence a different classifier, for each point in the feature space. The prediction time cost for multiple kernal methods can be prohibitively
             expensive for large training sets because it is proportional to the number of support vectors, and these grow linearly with the size of the training
             set. LD-SVM reduces the prediction cost by learning a tree-based local feature embedding that is high dimensional and sparse, efficiently encoding
             non-linearities. Using LD-SVM, the prediction cost grows logarithmically with the size of the training set, rather than linearly, with a tolerable loss
             in classification accuracy.
            
             Local Deep SVM is an implementation of the algorithm decribed in [C. Jose, P. Goyal, P. Aggrwal, and M. Varma, Local Deep
             Kernel Learning for Efficient Non-linear SVM Prediction, ICML, 2013](http://proceedings.mlr.press/v28/jose13.pdf).
            
             Check the See Also section for links to usage examples.
             ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.ML.StandardTrainersCatalog.LdSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.LdSvmTrainer.Options)" />
    <altmember cref="M:Microsoft.ML.StandardTrainersCatalog.LdSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)" />
  </Docs>
  <Members>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.TrainerInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.TrainerInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Trainers.LdSvmTrainer.Info" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Info As TrainerInfo" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.ML.TrainerInfo" Usage="Microsoft.ML.Trainers.LdSvmTrainer.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardTrainers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.TrainerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
