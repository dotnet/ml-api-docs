<Type Name="ISupportSdcaLoss" FullName="Microsoft.ML.Trainers.ISupportSdcaLoss">
  <TypeSignature Language="C#" Value="public interface ISupportSdcaLoss : Microsoft.ML.Trainers.ILossFunction&lt;float,float&gt;, Microsoft.ML.Trainers.IScalarLoss" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISupportSdcaLoss implements class Microsoft.ML.Trainers.ILossFunction`2&lt;float32, float32&gt;, class Microsoft.ML.Trainers.IScalarLoss" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Trainers.ISupportSdcaLoss" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISupportSdcaLoss&#xA;Implements ILossFunction(Of Single, Single), IScalarLoss" />
  <TypeSignature Language="F#" Value="type ISupportSdcaLoss = interface&#xA;    interface IScalarLoss&#xA;    interface ILossFunction&lt;single, single&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Trainers.ILossFunction&lt;System.Single,System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.Trainers.IScalarLoss</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            The loss function may know the close-form solution to the optimal dual update
            Ref: Sec(6.2) of http://jmlr.org/papers/volume14/shalev-shwartz13a/shalev-shwartz13a.pdf
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ComputeDualUpdateInvariant">
      <MemberSignature Language="C#" Value="public float ComputeDualUpdateInvariant (float scaledFeaturesNormSquared);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ComputeDualUpdateInvariant(float32 scaledFeaturesNormSquared) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.ISupportSdcaLoss.ComputeDualUpdateInvariant(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeDualUpdateInvariant (scaledFeaturesNormSquared As Single) As Single" />
      <MemberSignature Language="F#" Value="abstract member ComputeDualUpdateInvariant : single -&gt; single" Usage="iSupportSdcaLoss.ComputeDualUpdateInvariant scaledFeaturesNormSquared" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaledFeaturesNormSquared" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="scaledFeaturesNormSquared">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DualLoss">
      <MemberSignature Language="C#" Value="public double DualLoss (float label, float dual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DualLoss(float32 label, float32 dual) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.ISupportSdcaLoss.DualLoss(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function DualLoss (label As Single, dual As Single) As Double" />
      <MemberSignature Language="F#" Value="abstract member DualLoss : single * single -&gt; double" Usage="iSupportSdcaLoss.DualLoss (label, dual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.Single" />
        <Parameter Name="dual" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="label">The label of the example.</param>
        <param name="dual">The dual variable of the example.</param>
        <summary>
            The dual loss function for a training example.
            If f(x) denotes the loss function on an individual training example,
            then this function returns -f*(-x*), where f*(x*) is the Fenchel conjugate
            of f(x).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DualUpdate">
      <MemberSignature Language="C#" Value="public float DualUpdate (float output, float label, float dual, float invariant, int maxNumThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 DualUpdate(float32 output, float32 label, float32 dual, float32 invariant, int32 maxNumThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.ISupportSdcaLoss.DualUpdate(System.Single,System.Single,System.Single,System.Single,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DualUpdate (output As Single, label As Single, dual As Single, invariant As Single, maxNumThreads As Integer) As Single" />
      <MemberSignature Language="F#" Value="abstract member DualUpdate : single * single * single * single * int -&gt; single" Usage="iSupportSdcaLoss.DualUpdate (output, label, dual, invariant, maxNumThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Single" />
        <Parameter Name="label" Type="System.Single" />
        <Parameter Name="dual" Type="System.Single" />
        <Parameter Name="invariant" Type="System.Single" />
        <Parameter Name="maxNumThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="output">To be added.</param>
        <param name="label">To be added.</param>
        <param name="dual">To be added.</param>
        <param name="invariant">To be added.</param>
        <param name="maxNumThreads">To be added.</param>
        <summary>
            Compute the dual update (\Delta\alpha_i) in SDCA
            - alpha: dual variable at the specified instance
            - lambdaN: L2 const x number of instances
            - cached invariant, hinted by the method above
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>