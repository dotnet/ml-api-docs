<Type Name="TrainerEstimatorBase&lt;TTransformer,TModel&gt;" FullName="Microsoft.ML.Trainers.TrainerEstimatorBase&lt;TTransformer,TModel&gt;">
  <TypeSignature Language="C#" Value="public abstract class TrainerEstimatorBase&lt;TTransformer,TModel&gt; : Microsoft.ML.IEstimator&lt;TTransformer&gt;, Microsoft.ML.Trainers.ITrainerEstimator&lt;TTransformer,TModel&gt; where TTransformer : ISingleFeaturePredictionTransformer&lt;TModel&gt; where TModel : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TrainerEstimatorBase`2&lt;(class Microsoft.ML.ISingleFeaturePredictionTransformer`1&lt;!TModel&gt;) TTransformer, class TModel&gt; extends System.Object implements class Microsoft.ML.IEstimator`1&lt;!TTransformer&gt;, class Microsoft.ML.Trainers.ITrainerEstimator`2&lt;!TTransformer, !TModel&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Trainers.TrainerEstimatorBase`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TrainerEstimatorBase(Of TTransformer, TModel)&#xA;Implements IEstimator(Of TTransformer), ITrainerEstimator(Of TTransformer, TModel)" />
  <TypeSignature Language="F#" Value="type TrainerEstimatorBase&lt;'ransformer, 'Model (requires 'ransformer :&gt; ISingleFeaturePredictionTransformer&lt;'Model&gt; and 'Model : null)&gt; = class&#xA;    interface ITrainerEstimator&lt;'ransformer, 'Model (requires 'ransformer :&gt; ISingleFeaturePredictionTransformer&lt;'Model&gt; and 'Model : null)&gt;&#xA;    interface IEstimator&lt;'ransformer (requires 'ransformer :&gt; ISingleFeaturePredictionTransformer&lt;'Model&gt;)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TTransformer">
      <Constraints>
        <InterfaceName>Microsoft.ML.ISingleFeaturePredictionTransformer&lt;TModel&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TModel">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.IEstimator&lt;TTransformer&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.Trainers.ITrainerEstimator&lt;TTransformer,TModel&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TTransformer">To be added.</typeparam>
    <typeparam name="TModel">To be added.</typeparam>
    <summary>
            This represents a basic class for 'simple trainer'.
            A 'simple trainer' accepts one feature column and one label column, also optionally a weight column.
            It produces a 'prediction transformer'.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="FeatureColumn">
      <MemberSignature Language="C#" Value="public readonly Microsoft.ML.SchemaShape.Column FeatureColumn;" />
      <MemberSignature Language="ILAsm" Value=".field public initonly valuetype Microsoft.ML.SchemaShape/Column FeatureColumn" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Trainers.TrainerEstimatorBase`2.FeatureColumn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly FeatureColumn As SchemaShape.Column " />
      <MemberSignature Language="F#" Value="val mutable FeatureColumn : Microsoft.ML.SchemaShape.Column" Usage="Microsoft.ML.Trainers.TrainerEstimatorBase&lt;'ransformer, 'Model (requires 'ransformer :&gt; Microsoft.ML.ISingleFeaturePredictionTransformer&lt;'Model&gt; and 'Model : null)&gt;.FeatureColumn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape+Column</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The feature column that the trainer expects.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public TTransformer Fit (Microsoft.ML.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TTransformer Fit(class Microsoft.ML.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.TrainerEstimatorBase`2.Fit(Microsoft.ML.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As TTransformer" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.ML.IDataView -&gt; 'ransformer&#xA;override this.Fit : Microsoft.ML.IDataView -&gt; 'ransformer" Usage="trainerEstimatorBase.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TTransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary> Trains and returns a <see cref="T:Microsoft.ML.ITransformer" />.</summary>
        <returns>To be added.</returns>
        <remarks>
            Derived class can overload this function.
            For example, it could take an additional dataset to train with a separate validation set.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.SchemaShape GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.SchemaShape GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.TrainerEstimatorBase`2.GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape&#xA;override this.GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape" Usage="trainerEstimatorBase.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.GetOutputSchema(Microsoft.ML.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public abstract Microsoft.ML.TrainerInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.TrainerInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Trainers.TrainerEstimatorBase`2.Info" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Info As TrainerInfo" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.ML.TrainerInfo" Usage="Microsoft.ML.Trainers.TrainerEstimatorBase&lt;'ransformer, 'Model (requires 'ransformer :&gt; Microsoft.ML.ISingleFeaturePredictionTransformer&lt;'Model&gt; and 'Model : null)&gt;.Info" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.Trainers.ITrainerEstimator`2.Info</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.TrainerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The information about the trainer: whether it benefits from normalization, caching etc.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LabelColumn">
      <MemberSignature Language="C#" Value="public readonly Microsoft.ML.SchemaShape.Column LabelColumn;" />
      <MemberSignature Language="ILAsm" Value=".field public initonly valuetype Microsoft.ML.SchemaShape/Column LabelColumn" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Trainers.TrainerEstimatorBase`2.LabelColumn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly LabelColumn As SchemaShape.Column " />
      <MemberSignature Language="F#" Value="val mutable LabelColumn : Microsoft.ML.SchemaShape.Column" Usage="Microsoft.ML.Trainers.TrainerEstimatorBase&lt;'ransformer, 'Model (requires 'ransformer :&gt; Microsoft.ML.ISingleFeaturePredictionTransformer&lt;'Model&gt; and 'Model : null)&gt;.LabelColumn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape+Column</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The label column that the trainer expects. Can be <c>null</c>, which indicates that label
            is not used for training.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeightColumn">
      <MemberSignature Language="C#" Value="public readonly Microsoft.ML.SchemaShape.Column WeightColumn;" />
      <MemberSignature Language="ILAsm" Value=".field public initonly valuetype Microsoft.ML.SchemaShape/Column WeightColumn" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Trainers.TrainerEstimatorBase`2.WeightColumn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly WeightColumn As SchemaShape.Column " />
      <MemberSignature Language="F#" Value="val mutable WeightColumn : Microsoft.ML.SchemaShape.Column" Usage="Microsoft.ML.Trainers.TrainerEstimatorBase&lt;'ransformer, 'Model (requires 'ransformer :&gt; Microsoft.ML.ISingleFeaturePredictionTransformer&lt;'Model&gt; and 'Model : null)&gt;.WeightColumn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape+Column</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The weight column that the trainer expects. Can be <c>null</c>, which indicates that weight is
            not used for training.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>