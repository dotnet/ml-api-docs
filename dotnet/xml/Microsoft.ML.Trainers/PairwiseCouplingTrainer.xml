<Type Name="PairwiseCouplingTrainer" FullName="Microsoft.ML.Trainers.PairwiseCouplingTrainer">
  <TypeSignature Language="C#" Value="public sealed class PairwiseCouplingTrainer : Microsoft.ML.Trainers.MetaMulticlassTrainer&lt;Microsoft.ML.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PairwiseCouplingModelParameters&gt;,Microsoft.ML.Trainers.PairwiseCouplingModelParameters&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PairwiseCouplingTrainer extends Microsoft.ML.Trainers.MetaMulticlassTrainer`2&lt;class Microsoft.ML.Data.MulticlassPredictionTransformer`1&lt;class Microsoft.ML.Trainers.PairwiseCouplingModelParameters&gt;, class Microsoft.ML.Trainers.PairwiseCouplingModelParameters&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Trainers.PairwiseCouplingTrainer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PairwiseCouplingTrainer&#xA;Inherits MetaMulticlassTrainer(Of MulticlassPredictionTransformer(Of PairwiseCouplingModelParameters), PairwiseCouplingModelParameters)" />
  <TypeSignature Language="F#" Value="type PairwiseCouplingTrainer = class&#xA;    inherit MetaMulticlassTrainer&lt;MulticlassPredictionTransformer&lt;PairwiseCouplingModelParameters&gt;, PairwiseCouplingModelParameters&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StandardTrainers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Trainers.MetaMulticlassTrainer&lt;Microsoft.ML.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PairwiseCouplingModelParameters&gt;,Microsoft.ML.Trainers.PairwiseCouplingModelParameters&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TTransformer">Microsoft.ML.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PairwiseCouplingModelParameters&gt;</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="TModel">Microsoft.ML.Trainers.PairwiseCouplingModelParameters</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             In this strategy, a binary classification algorithm is trained on each pair of classes.
             The pairs are unordered but created with replacement: so, if there were three classes, 0, 1,
             2, we would train classifiers for the pairs (0,0), (0,1), (0,2), (1,1), (1,2),
             and (2,2). For each binary classifier, an input data point is considered a
             positive example if it is in either of the two classes in the pair, and a
             negative example otherwise. At prediction time, the probabilities for each
             pair of classes is considered as the probability of being in either class of
             the pair given the data, and the final predictive probabilities out of that
             per class are calculated given the probability that an example is in any given
             pair.
            
             These two can allow you to exploit trainers that do not naturally have a
             multiclass option, for example, using the FastTree Binary Classification
             to solve a multiclass problem.
             Alternately, it can allow ML.NET to solve a "simpler" problem even in the cases
             where the trainer has a multiclass option, but using it directly is not
             practical due to, usually, memory constraints. For example, while a multiclass
             logistic regression is a more principled way to solve a multiclass problem, it
             requires that the learner store a lot more intermediate state in the form of
             L-BFGS history for all classes *simultaneously*, rather than just one-by-one
             as would be needed for a one-versus-all classification model.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PairwiseCouplingModelParameters&gt; Fit (Microsoft.ML.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.ML.Data.MulticlassPredictionTransformer`1&lt;class Microsoft.ML.Trainers.PairwiseCouplingModelParameters&gt; Fit(class Microsoft.ML.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.PairwiseCouplingTrainer.Fit(Microsoft.ML.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Fit (input As IDataView) As MulticlassPredictionTransformer(Of PairwiseCouplingModelParameters)" />
      <MemberSignature Language="F#" Value="override this.Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PairwiseCouplingModelParameters&gt;" Usage="pairwiseCouplingTrainer.Fit input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardTrainers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PairwiseCouplingModelParameters&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">The input data.</param>
        <summary>
            Fits the data to the transformer
            </summary>
        <returns>The trained predictor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>