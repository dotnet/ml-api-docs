<Type Name="FieldAwareFactorizationMachineTrainer" FullName="Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer">
  <TypeSignature Language="C#" Value="public sealed class FieldAwareFactorizationMachineTrainer : Microsoft.ML.IEstimator&lt;Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FieldAwareFactorizationMachineTrainer extends System.Object implements class Microsoft.ML.IEstimator`1&lt;class Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FieldAwareFactorizationMachineTrainer&#xA;Implements IEstimator(Of FieldAwareFactorizationMachinePredictionTransformer)" />
  <TypeSignature Language="F#" Value="type FieldAwareFactorizationMachineTrainer = class&#xA;    interface IEstimator&lt;FieldAwareFactorizationMachinePredictionTransformer&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StandardTrainers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.IEstimator&lt;Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1" /> to predict a target using a field-aware factorization machine model trained using a stochastic gradient method.
             </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-binary-classification.md)]
             To create this trainer, use [FieldAwareFactorizationMachine](xref:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String))
             [FieldAwareFactorizationMachine](xref:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String[],System.String,System.String)),
             or [FieldAwareFactorizationMachine(Options)](xref:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options)).
            
             In contrast to other binary classifiers, which can only support one feature column, field-aware factorization machine can consume multiple feature columns.
             Each column is viewed as a container of some features and such a container is called a field.
             Note that all feature columns must be float vectors but their dimensions can be different.
             The motivation of splitting features into different fields is to model features from different distributions independently.
             For example, in online game store, features created from user profile and those from game profile can be assigned to two different fields.
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Binary classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
            
             ### Background
             Factorization machine family is a powerful model group for supervised learning problems.
             It was first introduced in Steffen Rendle's [Factorization Machines](http://ieeexplore.ieee.org/document/5694074/?reload=true) paper in 2010.
             Later, one of its generalized versions, field-aware factorization machine, became an important predictive module in recent recommender systems and click-through rate prediction contests.
             For examples, see winning solutions in Steffen Rendle's KDD-Cup 2012 ([Track 1](http://www.kdd.org/kdd-cup/view/kdd-cup-2012-track-1) and [Track 2](http://www.kdd.org/kdd-cup/view/kdd-cup-2012-track-2)),
             [Criteo's](https://www.kaggle.com/c/criteo-display-ad-challenge), [Avazu's](https://www.kaggle.com/c/avazu-ctr-prediction), and [Outbrain's](https://www.kaggle.com/c/outbrain-click-prediction) click prediction challenges on Kaggle.
            
             Factorization machines are especially powerful when feature conjunctions are extremely correlated to the signal you want to predict.
             An example of feature pairs which can form important conjunctions is user ID and music ID in music recommendation.
             When a dataset consists of only dense numerical features, usage of factorization machine is not recommended or some featurizations should be performed.
            
             ### Scoring Function
             Field-aware factorization machine is a scoring function which maps feature vectors from different fields to a scalar score.
             Assume that all $m$ feature columns are concatenated into a long feature vector $\textbf{x} \in {\mathbb R}^n$ and ${\mathcal F}(j)$ denotes the $j$-th feature's field indentifier.
             The corresponding score is $\hat{y}(\textbf{x}) = \langle \textbf{w}, \textbf{x} \rangle + \sum_{j = 1}^n \sum_{j' = j + 1}^n \langle \textbf{v}\_{j, {\mathcal F}(j')}, \textbf{v}\_{j', {\mathcal F}(j)} \rangle x_j x_{j'}$,
             where $\langle \cdot, \cdot \rangle$ is the inner product operator, $\textbf{w} \in {\mathbb R}^n$ stores the linear coefficients, and $\textbf{v}_{j, f}\in {\mathbb R}^k$ is the $j$-th feature's representation in the $f$-th field's latent space.
             Note that $k$ is the latent dimension specified by the user.
            
             The predicted label is the sign of $\hat{y}$. If $\hat{y} > 0$, this model predicts true. Otherwise, it predicts false.
            
             For a systematic introduction to field-aware factorization machine, please see [this paper](https://www.csie.ntu.edu.tw/~cjlin/papers/ffm.pdf)
            
             ### Training Algorithm Details
             The algorithm implemented in <xref:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer> is based on [a stochastic gradient method](http://jmlr.org/papers/volume12/duchi11a/duchi11a.pdf).
             Algorithm details is described in Algorithm 3 in [this online document](https://github.com/wschin/fast-ffm/blob/master/fast-ffm.pdf).
             The minimized loss function is [logistic loss](https://en.wikipedia.org/wiki/Loss_functions_for_classification), so the trained model can be viewed as a non-linear logistic regression.
            
             Check the See Also section for links to usage examples.
             ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String)" />
    <altmember cref="M:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String[],System.String,System.String)" />
    <altmember cref="M:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options)" />
    <altmember cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options" />
  </Docs>
  <Members>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer Fit (Microsoft.ML.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer Fit(class Microsoft.ML.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Fit(Microsoft.ML.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As FieldAwareFactorizationMachinePredictionTransformer" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer&#xA;override this.Fit : Microsoft.ML.IDataView -&gt; Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer" Usage="fieldAwareFactorizationMachineTrainer.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardTrainers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary> Trains and returns a <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer Fit (Microsoft.ML.IDataView trainData, Microsoft.ML.IDataView validationData = null, Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters modelParameters = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer Fit(class Microsoft.ML.IDataView trainData, class Microsoft.ML.IDataView validationData, class Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters modelParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Fit(Microsoft.ML.IDataView,Microsoft.ML.IDataView,Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (trainData As IDataView, Optional validationData As IDataView = null, Optional modelParameters As FieldAwareFactorizationMachineModelParameters = null) As FieldAwareFactorizationMachinePredictionTransformer" />
      <MemberSignature Language="F#" Value="member this.Fit : Microsoft.ML.IDataView * Microsoft.ML.IDataView * Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters -&gt; Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer" Usage="fieldAwareFactorizationMachineTrainer.Fit (trainData, validationData, modelParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardTrainers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trainData" Type="Microsoft.ML.IDataView" />
        <Parameter Name="validationData" Type="Microsoft.ML.IDataView" />
        <Parameter Name="modelParameters" Type="Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters" />
      </Parameters>
      <Docs>
        <param name="trainData">To be added.</param>
        <param name="validationData">To be added.</param>
        <param name="modelParameters">To be added.</param>
        <summary>
            Continues the training of a <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer" /> using an already trained <paramref name="modelParameters" /> and/or validation data,
            and returns a <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.SchemaShape GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.SchemaShape GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape&#xA;override this.GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape" Usage="fieldAwareFactorizationMachineTrainer.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.GetOutputSchema(Microsoft.ML.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardTrainers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>
            Schema propagation for transformers. Returns the output schema of the data, if
            the input schema is like the one provided.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>