<Type Name="RandomizedPcaTrainer" FullName="Microsoft.ML.Trainers.RandomizedPcaTrainer">
  <TypeSignature Language="C#" Value="public sealed class RandomizedPcaTrainer : Microsoft.ML.Trainers.TrainerEstimatorBase&lt;Microsoft.ML.Data.AnomalyPredictionTransformer&lt;Microsoft.ML.Trainers.PcaModelParameters&gt;,Microsoft.ML.Trainers.PcaModelParameters&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RandomizedPcaTrainer extends Microsoft.ML.Trainers.TrainerEstimatorBase`2&lt;class Microsoft.ML.Data.AnomalyPredictionTransformer`1&lt;class Microsoft.ML.Trainers.PcaModelParameters&gt;, class Microsoft.ML.Trainers.PcaModelParameters&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Trainers.RandomizedPcaTrainer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RandomizedPcaTrainer&#xA;Inherits TrainerEstimatorBase(Of AnomalyPredictionTransformer(Of PcaModelParameters), PcaModelParameters)" />
  <TypeSignature Language="F#" Value="type RandomizedPcaTrainer = class&#xA;    inherit TrainerEstimatorBase&lt;AnomalyPredictionTransformer&lt;PcaModelParameters&gt;, PcaModelParameters&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.PCA</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Trainers.TrainerEstimatorBase&lt;Microsoft.ML.Data.AnomalyPredictionTransformer&lt;Microsoft.ML.Trainers.PcaModelParameters&gt;,Microsoft.ML.Trainers.PcaModelParameters&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Microsoft.ML.Data.AnomalyPredictionTransformer&lt;Microsoft.ML.Trainers.PcaModelParameters&gt;</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!1">Microsoft.ML.Trainers.PcaModelParameters</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1" /> for training an approximate PCA using Randomized SVD algorithm.
             </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
             To create this trainer, use [RandomizedPca](xref:Microsoft.ML.PcaCatalog.RandomizedPca(Microsoft.ML.AnomalyDetectionCatalog.AnomalyDetectionTrainers,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32}))
             or [RandomizedPca(Options)](xref:Microsoft.ML.PcaCatalog.RandomizedPca(Microsoft.ML.AnomalyDetectionCatalog.AnomalyDetectionTrainers,Microsoft.ML.Trainers.RandomizedPcaTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-anomaly-detection.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Anomaly Detection |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
            
             ### Training Algorithm Details
             This trainer uses the top eigenvectors to approximate the subspace containing the normal class.
             For each new instance, it computes the norm difference between the raw feature vector and the projected feature on that subspace.
             If the error is close to 0, the instance is considered normal (non-anomaly).
            
             More specifically, this trainer trains an approximate PCA using a randomized method for computing the singular value decomposition (SVD) of
             the matrix whose rows are the input vectors.
             The model generated by this trainer contains three parameters:
             - A projection matrix $U$
             - The mean vector in the original feature space $m$
             - The mean vector in the projected feature space $p$
            
             For an input feature vector $x$, the anomaly score is computed by comparing the $L_2$
             norm of the original input vector, and the $L_2$ norm of the projected vector:
             $\sqrt{\left(\|x-m\|_2^2 - \|Ux-p\|_2^2\right)\|x-m\|_2^2}$.
            
             The method is described [here](https://web.stanford.edu/group/mmds/slides2010/Martinsson.pdf).
            
             Note that the algorithm can be made into Kernel PCA by applying the <xref:Microsoft.ML.Transforms.ApproximatedKernelTransformer>
             to the data before passing it to the trainer.
            
             Check the See Also section for links to usage examples.
             ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.ML.PcaCatalog.RandomizedPca(Microsoft.ML.AnomalyDetectionCatalog.AnomalyDetectionTrainers,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32})" />
    <altmember cref="M:Microsoft.ML.PcaCatalog.RandomizedPca(Microsoft.ML.AnomalyDetectionCatalog.AnomalyDetectionTrainers,Microsoft.ML.Trainers.RandomizedPcaTrainer.Options)" />
    <altmember cref="T:Microsoft.ML.Trainers.RandomizedPcaTrainer.Options" />
  </Docs>
  <Members>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.TrainerInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.TrainerInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Trainers.RandomizedPcaTrainer.Info" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Info As TrainerInfo" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.ML.TrainerInfo" Usage="Microsoft.ML.Trainers.RandomizedPcaTrainer.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.PCA</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.TrainerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>