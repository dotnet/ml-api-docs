<Type Name="ITrainerEstimator&lt;TTransformer,TModel&gt;" FullName="Microsoft.ML.Trainers.ITrainerEstimator&lt;TTransformer,TModel&gt;">
  <TypeSignature Language="C#" Value="public interface ITrainerEstimator&lt;out TTransformer,out TModel&gt; : Microsoft.ML.IEstimator&lt;out TTransformer&gt; where TTransformer : ISingleFeaturePredictionTransformer&lt;out TModel&gt; where TModel : class" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITrainerEstimator`2&lt;(class Microsoft.ML.ISingleFeaturePredictionTransformer`1&lt;!TModel&gt;) + TTransformer, class + TModel&gt; implements class Microsoft.ML.IEstimator`1&lt;!TTransformer&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Trainers.ITrainerEstimator`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITrainerEstimator(Of Out TTransformer, Out TModel)&#xA;Implements IEstimator(Of Out TTransformer)" />
  <TypeSignature Language="F#" Value="type ITrainerEstimator&lt;'ransformer, 'Model (requires 'ransformer :&gt; ISingleFeaturePredictionTransformer&lt;'Model&gt; and 'Model : null)&gt; = interface&#xA;    interface IEstimator&lt;'ransformer (requires 'ransformer :&gt; ISingleFeaturePredictionTransformer&lt;'Model&gt;)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TTransformer">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
        <InterfaceName>Microsoft.ML.ISingleFeaturePredictionTransformer&lt;TModel&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TModel">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.IEstimator&lt;TTransformer&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TTransformer">The type of the transformer returned by the estimator.</typeparam>
    <typeparam name="TModel">The type of the model parameters.</typeparam>
    <summary>
            Interface for the Trainer Estimator.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public Microsoft.ML.TrainerInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.TrainerInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Trainers.ITrainerEstimator`2.Info" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Info As TrainerInfo" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.ML.TrainerInfo" Usage="Microsoft.ML.Trainers.ITrainerEstimator&lt;'ransformer, 'Model (requires 'ransformer :&gt; Microsoft.ML.ISingleFeaturePredictionTransformer&lt;'Model&gt; and 'Model : null)&gt;.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.TrainerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Microsoft.ML.TrainerInfo" /> information about the trainer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>