<Type Name="RandomTrainer" FullName="Microsoft.ML.Trainers.RandomTrainer">
  <TypeSignature Language="C#" Value="public sealed class RandomTrainer : Microsoft.ML.IEstimator&lt;Microsoft.ML.Data.BinaryPredictionTransformer&lt;Microsoft.ML.Trainers.RandomModelParameters&gt;&gt;, Microsoft.ML.Trainers.ITrainerEstimator&lt;Microsoft.ML.Data.BinaryPredictionTransformer&lt;Microsoft.ML.Trainers.RandomModelParameters&gt;,Microsoft.ML.Trainers.RandomModelParameters&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RandomTrainer extends System.Object implements class Microsoft.ML.IEstimator`1&lt;class Microsoft.ML.Data.BinaryPredictionTransformer`1&lt;class Microsoft.ML.Trainers.RandomModelParameters&gt;&gt;, class Microsoft.ML.Trainers.ITrainerEstimator`2&lt;class Microsoft.ML.Data.BinaryPredictionTransformer`1&lt;class Microsoft.ML.Trainers.RandomModelParameters&gt;, class Microsoft.ML.Trainers.RandomModelParameters&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Trainers.RandomTrainer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RandomTrainer&#xA;Implements IEstimator(Of BinaryPredictionTransformer(Of RandomModelParameters)), ITrainerEstimator(Of BinaryPredictionTransformer(Of RandomModelParameters), RandomModelParameters)" />
  <TypeSignature Language="F#" Value="type RandomTrainer = class&#xA;    interface ITrainerEstimator&lt;BinaryPredictionTransformer&lt;RandomModelParameters&gt;, RandomModelParameters&gt;&#xA;    interface IEstimator&lt;BinaryPredictionTransformer&lt;RandomModelParameters&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Runtime.Training.TrainerBase&lt;Microsoft.ML.Trainers.RandomPredictor&gt;</BaseTypeName>
    <BaseTypeName FrameworkAlternate="ml-dotnet">Microsoft.ML.Training.TrainerBase&lt;Microsoft.ML.Trainers.RandomModelParameters&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Microsoft.ML.Trainers.RandomModelParameters</BaseTypeArgument>
    </BaseTypeArguments>
    <BaseTypeName FrameworkAlternate="ml-dotnet">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.IEstimator&lt;Microsoft.ML.Data.BinaryPredictionTransformer&lt;Microsoft.ML.Trainers.RandomModelParameters&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.IEstimator&lt;TTransformer&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.Trainers.ITrainerEstimator&lt;Microsoft.ML.Data.BinaryPredictionTransformer&lt;Microsoft.ML.Trainers.RandomModelParameters&gt;,Microsoft.ML.Trainers.RandomModelParameters&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A trainer that trains a predictor that returns random values
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.BinaryPredictionTransformer&lt;Microsoft.ML.Trainers.RandomModelParameters&gt; Fit (Microsoft.Data.DataView.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.BinaryPredictionTransformer`1&lt;class Microsoft.ML.Trainers.RandomModelParameters&gt; Fit(class Microsoft.Data.DataView.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.RandomTrainer.Fit(Microsoft.Data.DataView.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As BinaryPredictionTransformer(Of RandomModelParameters)" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.Data.DataView.IDataView -&gt; Microsoft.ML.Data.BinaryPredictionTransformer&lt;Microsoft.ML.Trainers.RandomModelParameters&gt;&#xA;override this.Fit : Microsoft.Data.DataView.IDataView -&gt; Microsoft.ML.Data.BinaryPredictionTransformer&lt;Microsoft.ML.Trainers.RandomModelParameters&gt;" Usage="randomTrainer.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.Fit(Microsoft.Data.DataView.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.BinaryPredictionTransformer&lt;Microsoft.ML.Trainers.RandomModelParameters&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.Data.DataView.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Data.BinaryPredictionTransformer`1" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.SchemaShape GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.SchemaShape GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.RandomTrainer.GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape&#xA;override this.GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape" Usage="randomTrainer.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.GetOutputSchema(Microsoft.ML.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape" /> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public Microsoft.ML.TrainerInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.TrainerInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Trainers.RandomTrainer.Info" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Info As TrainerInfo" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.ML.TrainerInfo" Usage="Microsoft.ML.Trainers.RandomTrainer.Info" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.ITrainer.Info</InterfaceMember>
        <InterfaceMember>P:Microsoft.ML.Trainers.ITrainerEstimator`2.Info</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.TrainerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Auxiliary information about the trainer in terms of its capabilities
            and requirements.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>