<Type Name="Pkpd" FullName="Microsoft.ML.Trainers.Pkpd">
  <TypeSignature Language="C#" Value="public sealed class Pkpd : Microsoft.ML.Learners.MetaMulticlassTrainer&lt;Microsoft.ML.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PkpdModelParameters&gt;,Microsoft.ML.Trainers.PkpdModelParameters&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Pkpd extends Microsoft.ML.Learners.MetaMulticlassTrainer`2&lt;class Microsoft.ML.Data.MulticlassPredictionTransformer`1&lt;class Microsoft.ML.Trainers.PkpdModelParameters&gt;, class Microsoft.ML.Trainers.PkpdModelParameters&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Trainers.Pkpd" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Pkpd&#xA;Inherits MetaMulticlassTrainer(Of MulticlassPredictionTransformer(Of PkpdModelParameters), PkpdModelParameters)" />
  <TypeSignature Language="F#" Value="type Pkpd = class&#xA;    inherit MetaMulticlassTrainer&lt;MulticlassPredictionTransformer&lt;PkpdModelParameters&gt;, PkpdModelParameters&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Runtime.Learners.MetaMulticlassTrainer&lt;Microsoft.ML.Runtime.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PkpdPredictor&gt;,Microsoft.ML.Trainers.PkpdPredictor&gt;</BaseTypeName>
    <BaseTypeName FrameworkAlternate="ml-dotnet">Microsoft.ML.Learners.MetaMulticlassTrainer&lt;Microsoft.ML.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PkpdModelParameters&gt;,Microsoft.ML.Trainers.PkpdModelParameters&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TTransformer">Microsoft.ML.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PkpdModelParameters&gt;</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="TModel">Microsoft.ML.Trainers.PkpdModelParameters</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             In this strategy, a binary classification algorithm is trained on each pair of classes.
             The pairs are unordered but created with replacement: so, if there were three classes, 0, 1,
             2, we would train classifiers for the pairs (0,0), (0,1), (0,2), (1,1), (1,2),
             and(2,2). For each binary classifier, an input data point is considered a
             positive example if it is in either of the two classes in the pair, and a
             negative example otherwise. At prediction time, the probabilities for each
             pair of classes is considered as the probability of being in either class of
             the pair given the data, and the final predictive probabilities out of that
             per class are calculated given the probability that an example is in any given
             pair.
            
             These two can allow you to exploit trainers that do not naturally have a
             multiclass option, for example, using the Runtime.FastTree.FastTreeBinaryClassificationTrainer
             to solve a multiclass problem.
             Alternately, it can allow ML.NET to solve a "simpler" problem even in the cases
             where the trainer has a multiclass option, but using it directly is not
             practical due to, usually, memory constraints.For example, while a multiclass
             logistic regression is a more principled way to solve a multiclass problem, it
             requires that the learner store a lot more intermediate state in the form of
             L-BFGS history for all classes *simultaneously*, rather than just one-by-one
             as would be needed for OVA.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pkpd (Microsoft.ML.IHostEnvironment env, Microsoft.ML.Training.ITrainerEstimator&lt;Microsoft.ML.ISingleFeaturePredictionTransformer&lt;Microsoft.ML.IPredictorProducing&lt;float&gt;&gt;,Microsoft.ML.IPredictorProducing&lt;float&gt;&gt; binaryEstimator, string labelColumn = &quot;Label&quot;, bool imputeMissingLabelsAsNegative = false, Microsoft.ML.Internal.Calibration.ICalibratorTrainer calibrator = null, int maxCalibrationExamples = 1000000000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Training.ITrainerEstimator`2&lt;class Microsoft.ML.ISingleFeaturePredictionTransformer`1&lt;class Microsoft.ML.IPredictorProducing`1&lt;float32&gt;&gt;, class Microsoft.ML.IPredictorProducing`1&lt;float32&gt;&gt; binaryEstimator, string labelColumn, bool imputeMissingLabelsAsNegative, class Microsoft.ML.Internal.Calibration.ICalibratorTrainer calibrator, int32 maxCalibrationExamples) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.Pkpd.#ctor(Microsoft.ML.IHostEnvironment,Microsoft.ML.Training.ITrainerEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.IPredictorProducing{System.Single}},Microsoft.ML.IPredictorProducing{System.Single}},System.String,System.Boolean,Microsoft.ML.Internal.Calibration.ICalibratorTrainer,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, binaryEstimator As ITrainerEstimator(Of ISingleFeaturePredictionTransformer(Of IPredictorProducing(Of Single)), IPredictorProducing(Of Single)), Optional labelColumn As String = &quot;Label&quot;, Optional imputeMissingLabelsAsNegative As Boolean = false, Optional calibrator As ICalibratorTrainer = null, Optional maxCalibrationExamples As Integer = 1000000000)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Trainers.Pkpd : Microsoft.ML.IHostEnvironment * Microsoft.ML.Training.ITrainerEstimator&lt;Microsoft.ML.ISingleFeaturePredictionTransformer&lt;Microsoft.ML.IPredictorProducing&lt;single&gt;&gt;, Microsoft.ML.IPredictorProducing&lt;single&gt;&gt; * string * bool * Microsoft.ML.Internal.Calibration.ICalibratorTrainer * int -&gt; Microsoft.ML.Trainers.Pkpd" Usage="new Microsoft.ML.Trainers.Pkpd (env, binaryEstimator, labelColumn, imputeMissingLabelsAsNegative, calibrator, maxCalibrationExamples)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="binaryEstimator" Type="Microsoft.ML.Training.ITrainerEstimator&lt;Microsoft.ML.ISingleFeaturePredictionTransformer&lt;Microsoft.ML.IPredictorProducing&lt;System.Single&gt;&gt;,Microsoft.ML.IPredictorProducing&lt;System.Single&gt;&gt;" />
        <Parameter Name="labelColumn" Type="System.String" />
        <Parameter Name="imputeMissingLabelsAsNegative" Type="System.Boolean" />
        <Parameter Name="calibrator" Type="Microsoft.ML.Internal.Calibration.ICalibratorTrainer" />
        <Parameter Name="maxCalibrationExamples" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="env">The <see cref="T:Microsoft.ML.IHostEnvironment" /> instance.</param>
        <param name="binaryEstimator">An instance of a binary <see cref="T:Microsoft.ML.Training.ITrainerEstimator`2" /> used as the base trainer.</param>
        <param name="labelColumn">The name of the label colum.</param>
        <param name="imputeMissingLabelsAsNegative">Whether to treat missing labels as having negative labels, instead of keeping them missing.</param>
        <param name="calibrator">The calibrator. If a calibrator is not explicitely provided, it will default to <see cref="T:Microsoft.ML.Internal.Calibration.PlattCalibratorTrainer" /></param>
        <param name="maxCalibrationExamples">Number of instances to train the calibrator.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.Trainers.Pkpd" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PkpdModelParameters&gt; Fit (Microsoft.ML.Data.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.ML.Data.MulticlassPredictionTransformer`1&lt;class Microsoft.ML.Trainers.PkpdModelParameters&gt; Fit(class Microsoft.ML.Data.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.Pkpd.Fit(Microsoft.ML.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Fit (input As IDataView) As MulticlassPredictionTransformer(Of PkpdModelParameters)" />
      <MemberSignature Language="F#" Value="override this.Fit : Microsoft.ML.Data.IDataView -&gt; Microsoft.ML.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PkpdModelParameters&gt;" Usage="pkpd.Fit input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.MulticlassPredictionTransformer&lt;Microsoft.ML.Trainers.PkpdModelParameters&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">The input data.</param>
        <summary>
            Fits the data to the transformer
            </summary>
        <returns>The trained predictor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>