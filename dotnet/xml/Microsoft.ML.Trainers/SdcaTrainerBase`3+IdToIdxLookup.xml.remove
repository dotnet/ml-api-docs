<Type Name="SdcaTrainerBase&lt;TArgs,TTransformer,TModel&gt;+IdToIdxLookup" FullName="Microsoft.ML.Trainers.SdcaTrainerBase&lt;TArgs,TTransformer,TModel&gt;+IdToIdxLookup">
  <TypeSignature Language="C#" Value="protected sealed class SdcaTrainerBase&lt;TArgs,TTransformer,TModel&gt;.IdToIdxLookup where TArgs : SdcaTrainerBase&lt;TArgs,TTransformer,TModel&gt;.ArgumentsBasenew() where TTransformer : ISingleFeaturePredictionTransformer&lt;TModel&gt; where TModel : IPredictor" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi sealed beforefieldinit SdcaTrainerBase`3/IdToIdxLookup&lt;.ctor (class Microsoft.ML.Trainers.SdcaTrainerBase`3/ArgumentsBase&lt;!TArgs, !TTransformer, !TModel&gt;) TArgs, (class Microsoft.ML.ISingleFeaturePredictionTransformer`1&lt;!TModel&gt;) TTransformer, (class Microsoft.ML.IPredictor) TModel&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup" />
  <TypeSignature Language="VB.NET" Value="Protected NotInheritable Class SdcaTrainerBase(Of TArgs, TTransformer, TModel).IdToIdxLookup" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TArgs">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.ML.Trainers.SdcaTrainerBase&lt;TArgs,TTransformer,TModel&gt;+ArgumentsBase</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TTransformer">
      <Constraints>
        <InterfaceName>Microsoft.ML.Runtime.ISingleFeaturePredictionTransformer&lt;TModel&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TModel">
      <Constraints>
        <InterfaceName>Microsoft.ML.Runtime.IPredictor</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A hash table data structure to store Id of type <see cref="T:Microsoft.ML.Data.RowId" />,
            and accommodates size larger than 2 billion. This class is an extension based on BCL.
            Two operations are supported: adding and retrieving an id with asymptotically constant complexity.
            The bucket size are prime numbers, starting from 3 and grows to the next prime larger than
            double the current size until it reaches the maximum possible size. When a table growth is triggered,
            the table growing operation initializes a new larger bucket and rehash the existing entries to
            the new bucket. Such operation has an expected complexity proportional to the size.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdToIdxLookup (long size = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional size As Long = 0)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Trainers.SdcaTrainerBase&lt;'Args, 'ransformer, 'Model (requires 'Args :&gt; Microsoft.ML.Trainers.SdcaTrainerBase&lt;'Args, 'ransformer, 'Model&gt;.ArgumentsBase and 'Args : (new : unit -&gt; 'Args) and 'ransformer :&gt; Microsoft.ML.ISingleFeaturePredictionTransformer&lt;'Model&gt; and 'Model :&gt; Microsoft.ML.IPredictor)&gt;.IdToIdxLookup : int64 -&gt; Microsoft.ML.Trainers.SdcaTrainerBase&lt;'Args, 'ransformer, 'Model (requires 'Args :&gt; Microsoft.ML.Trainers.SdcaTrainerBase&lt;'Args, 'ransformer, 'Model&gt;.ArgumentsBase and 'Args : (new : unit -&gt; 'Args) and 'ransformer :&gt; Microsoft.ML.ISingleFeaturePredictionTransformer&lt;'Model&gt; and 'Model :&gt; Microsoft.ML.IPredictor)&gt;.IdToIdxLookup" Usage="new Microsoft.ML.Trainers.SdcaTrainerBase&lt;'Args, 'ransformer, 'Model (requires 'Args :&gt; Microsoft.ML.Trainers.SdcaTrainerBase&lt;'Args, 'ransformer, 'Model&gt;.ArgumentsBase and 'Args : (new : unit -&gt; 'Args) and 'ransformer :&gt; Microsoft.ML.ISingleFeaturePredictionTransformer&lt;'Model&gt; and 'Model :&gt; Microsoft.ML.IPredictor)&gt;.IdToIdxLookup size" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <summary>
            Initializes an instance of the <see cref="T:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup" /> class with the specified size.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public long Add (Microsoft.Data.DataView.RowId id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Add(valuetype Microsoft.Data.DataView.RowId id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup.Add(Microsoft.Data.DataView.RowId)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (id As RowId) As Long" />
      <MemberSignature Language="F#" Value="member this.Add : Microsoft.Data.DataView.RowId -&gt; int64" Usage="idToIdxLookup.Add id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Microsoft.Data.DataView.RowId" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>
            Make sure the given id is in this lookup table and return the index of the id.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public long Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Long" />
      <MemberSignature Language="F#" Value="member this.Count : int64" Usage="Microsoft.ML.Trainers.SdcaTrainerBase&lt;'Args, 'ransformer, 'Model (requires 'Args :&gt; Microsoft.ML.Trainers.SdcaTrainerBase&lt;'Args, 'ransformer, 'Model&gt;.ArgumentsBase and 'Args : (new : unit -&gt; 'Args) and 'ransformer :&gt; Microsoft.ML.ISingleFeaturePredictionTransformer&lt;'Model&gt; and 'Model :&gt; Microsoft.ML.IPredictor)&gt;.IdToIdxLookup.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the count of id entries.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public bool TryGetIndex (Microsoft.Data.DataView.RowId id, out long index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetIndex(valuetype Microsoft.Data.DataView.RowId id, [out] int64&amp; index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup.TryGetIndex(Microsoft.Data.DataView.RowId,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetIndex (id As RowId, ByRef index As Long) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetIndex : Microsoft.Data.DataView.RowId *  -&gt; bool" Usage="idToIdxLookup.TryGetIndex (id, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Microsoft.Data.DataView.RowId" />
        <Parameter Name="index" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <param name="index">To be added.</param>
        <summary>
            Find the index of the given id.
            Returns a bool representing if id is present.
            Index outputs the index that the id, -1 otherwise.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
