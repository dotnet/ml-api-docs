<Type Name="SgdBinaryTrainerBase&lt;TModel&gt;" FullName="Microsoft.ML.Trainers.SgdBinaryTrainerBase&lt;TModel&gt;">
  <TypeSignature Language="C#" Value="public abstract class SgdBinaryTrainerBase&lt;TModel&gt; : Microsoft.ML.Trainers.LinearTrainerBase&lt;Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt;,TModel&gt; where TModel : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SgdBinaryTrainerBase`1&lt;class TModel&gt; extends Microsoft.ML.Trainers.LinearTrainerBase`2&lt;class Microsoft.ML.Data.BinaryPredictionTransformer`1&lt;!TModel&gt;, !TModel&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SgdBinaryTrainerBase(Of TModel)&#xA;Inherits LinearTrainerBase(Of BinaryPredictionTransformer(Of TModel), TModel)" />
  <TypeSignature Language="F#" Value="type SgdBinaryTrainerBase&lt;'Model (requires 'Model : null)&gt; = class&#xA;    inherit LinearTrainerBase&lt;BinaryPredictionTransformer&lt;'Model&gt;, 'Model (requires 'Model : null)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StandardTrainers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TModel">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.ML.Trainers.LinearTrainerBase&lt;Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt;,TModel&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TTransformer">Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt;</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="TModel">TModel</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TModel">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt; Fit (Microsoft.ML.IDataView trainData, Microsoft.ML.Trainers.LinearModelParameters modelParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.Data.BinaryPredictionTransformer`1&lt;!TModel&gt; Fit(class Microsoft.ML.IDataView trainData, class Microsoft.ML.Trainers.LinearModelParameters modelParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.Fit(Microsoft.ML.IDataView,Microsoft.ML.Trainers.LinearModelParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (trainData As IDataView, modelParameters As LinearModelParameters) As BinaryPredictionTransformer(Of TModel)" />
      <MemberSignature Language="F#" Value="override this.Fit : Microsoft.ML.IDataView * Microsoft.ML.Trainers.LinearModelParameters -&gt; Microsoft.ML.Data.BinaryPredictionTransformer&lt;'Model (requires 'Model : null)&gt;" Usage="sgdBinaryTrainerBase.Fit (trainData, modelParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardTrainers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trainData" Type="Microsoft.ML.IDataView" />
        <Parameter Name="modelParameters" Type="Microsoft.ML.Trainers.LinearModelParameters" />
      </Parameters>
      <Docs>
        <param name="trainData">To be added.</param>
        <param name="modelParameters">To be added.</param>
        <summary>
            Continues the training of a <see cref="T:Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer" /> using an already trained <paramref name="modelParameters" /> and returns a <see cref="T:Microsoft.ML.Data.BinaryPredictionTransformer" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.TrainerInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.TrainerInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.Info" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Info As TrainerInfo" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.ML.TrainerInfo" Usage="Microsoft.ML.Trainers.SgdBinaryTrainerBase&lt;'Model (requires 'Model : null)&gt;.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardTrainers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.TrainerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>