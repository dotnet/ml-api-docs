<Type Name="BinaryClassificationCatalog" FullName="Microsoft.ML.BinaryClassificationCatalog">
  <TypeSignature Language="C#" Value="public sealed class BinaryClassificationCatalog : Microsoft.ML.TrainCatalogBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BinaryClassificationCatalog extends Microsoft.ML.TrainCatalogBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.BinaryClassificationCatalog" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BinaryClassificationCatalog&#xA;Inherits TrainCatalogBase" />
  <TypeSignature Language="F#" Value="type BinaryClassificationCatalog = class&#xA;    inherit TrainCatalogBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.TrainCatalogBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The central catalog for binary classification tasks and trainers.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Calibrators">
      <MemberSignature Language="C#" Value="public Microsoft.ML.BinaryClassificationCatalog.CalibratorsCatalog Calibrators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.BinaryClassificationCatalog/CalibratorsCatalog Calibrators" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.BinaryClassificationCatalog.Calibrators" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Calibrators As BinaryClassificationCatalog.CalibratorsCatalog" />
      <MemberSignature Language="F#" Value="member this.Calibrators : Microsoft.ML.BinaryClassificationCatalog.CalibratorsCatalog" Usage="Microsoft.ML.BinaryClassificationCatalog.Calibrators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.BinaryClassificationCatalog+CalibratorsCatalog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The list of trainers for performing binary classification.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeModelThreshold&lt;TModel&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt; ChangeModelThreshold&lt;TModel&gt; (Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt; model, float threshold) where TModel : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.Data.BinaryPredictionTransformer`1&lt;!!TModel&gt; ChangeModelThreshold&lt;class TModel&gt;(class Microsoft.ML.Data.BinaryPredictionTransformer`1&lt;!!TModel&gt; model, float32 threshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.BinaryClassificationCatalog.ChangeModelThreshold``1(Microsoft.ML.Data.BinaryPredictionTransformer{``0},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChangeModelThreshold(Of TModel As Class) (model As BinaryPredictionTransformer(Of TModel), threshold As Single) As BinaryPredictionTransformer(Of TModel)" />
      <MemberSignature Language="F#" Value="member this.ChangeModelThreshold : Microsoft.ML.Data.BinaryPredictionTransformer&lt;'Model (requires 'Model : null)&gt; * single -&gt; Microsoft.ML.Data.BinaryPredictionTransformer&lt;'Model (requires 'Model : null)&gt; (requires 'Model : null)" Usage="binaryClassificationCatalog.ChangeModelThreshold (model, threshold)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TModel">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt;" />
        <Parameter Name="threshold" Type="System.Single" />
      </Parameters>
      <Docs>
        <typeparam name="TModel">To be added.</typeparam>
        <param name="model">To be added.</param>
        <param name="threshold">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossValidate">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.TrainCatalogBase.CrossValidationResult&lt;Microsoft.ML.Data.CalibratedBinaryClassificationMetrics&gt;&gt; CrossValidate (Microsoft.ML.IDataView data, Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt; estimator, int numberOfFolds = 5, string labelColumnName = &quot;Label&quot;, string samplingKeyColumnName = null, Nullable&lt;int&gt; seed = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.ML.TrainCatalogBase/CrossValidationResult`1&lt;class Microsoft.ML.Data.CalibratedBinaryClassificationMetrics&gt;&gt; CrossValidate(class Microsoft.ML.IDataView data, class Microsoft.ML.IEstimator`1&lt;class Microsoft.ML.ITransformer&gt; estimator, int32 numberOfFolds, string labelColumnName, string samplingKeyColumnName, valuetype System.Nullable`1&lt;int32&gt; seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.BinaryClassificationCatalog.CrossValidate(Microsoft.ML.IDataView,Microsoft.ML.IEstimator{Microsoft.ML.ITransformer},System.Int32,System.String,System.String,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function CrossValidate (data As IDataView, estimator As IEstimator(Of ITransformer), Optional numberOfFolds As Integer = 5, Optional labelColumnName As String = &quot;Label&quot;, Optional samplingKeyColumnName As String = null, Optional seed As Nullable(Of Integer) = null) As IReadOnlyList(Of TrainCatalogBase.CrossValidationResult(Of CalibratedBinaryClassificationMetrics))" />
      <MemberSignature Language="F#" Value="member this.CrossValidate : Microsoft.ML.IDataView * Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt; * int * string * string * Nullable&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.TrainCatalogBase.CrossValidationResult&lt;Microsoft.ML.Data.CalibratedBinaryClassificationMetrics&gt;&gt;" Usage="binaryClassificationCatalog.CrossValidate (data, estimator, numberOfFolds, labelColumnName, samplingKeyColumnName, seed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.TrainCatalogBase+CrossValidationResult&lt;Microsoft.ML.Data.CalibratedBinaryClassificationMetrics&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Microsoft.ML.IDataView" />
        <Parameter Name="estimator" Type="Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt;" />
        <Parameter Name="numberOfFolds" Type="System.Int32" />
        <Parameter Name="labelColumnName" Type="System.String" />
        <Parameter Name="samplingKeyColumnName" Type="System.String" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="data">The data to run cross-validation on.</param>
        <param name="estimator">The estimator to fit.</param>
        <param name="numberOfFolds">Number of cross-validation folds.</param>
        <param name="labelColumnName">The label column (for evaluation).</param>
        <param name="samplingKeyColumnName">Name of a column to use for grouping rows. If two examples share the same value of the <paramref name="samplingKeyColumnName" />,
            they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set.
            If <see langword="null" /> no row grouping will be performed.</param>
        <param name="seed">Seed for the random number generator used to select rows for cross-validation folds.</param>
        <summary>
            Run cross-validation over <paramref name="numberOfFolds" /> folds of <paramref name="data" />, by fitting <paramref name="estimator" />,
            and respecting <paramref name="samplingKeyColumnName" /> if provided.
            Then evaluate each sub-model against <paramref name="labelColumnName" /> and return metrics.
            </summary>
        <returns>Per-fold results: metrics, models, scored datasets.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossValidateNonCalibrated">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.TrainCatalogBase.CrossValidationResult&lt;Microsoft.ML.Data.BinaryClassificationMetrics&gt;&gt; CrossValidateNonCalibrated (Microsoft.ML.IDataView data, Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt; estimator, int numberOfFolds = 5, string labelColumnName = &quot;Label&quot;, string samplingKeyColumnName = null, Nullable&lt;int&gt; seed = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.ML.TrainCatalogBase/CrossValidationResult`1&lt;class Microsoft.ML.Data.BinaryClassificationMetrics&gt;&gt; CrossValidateNonCalibrated(class Microsoft.ML.IDataView data, class Microsoft.ML.IEstimator`1&lt;class Microsoft.ML.ITransformer&gt; estimator, int32 numberOfFolds, string labelColumnName, string samplingKeyColumnName, valuetype System.Nullable`1&lt;int32&gt; seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.BinaryClassificationCatalog.CrossValidateNonCalibrated(Microsoft.ML.IDataView,Microsoft.ML.IEstimator{Microsoft.ML.ITransformer},System.Int32,System.String,System.String,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function CrossValidateNonCalibrated (data As IDataView, estimator As IEstimator(Of ITransformer), Optional numberOfFolds As Integer = 5, Optional labelColumnName As String = &quot;Label&quot;, Optional samplingKeyColumnName As String = null, Optional seed As Nullable(Of Integer) = null) As IReadOnlyList(Of TrainCatalogBase.CrossValidationResult(Of BinaryClassificationMetrics))" />
      <MemberSignature Language="F#" Value="member this.CrossValidateNonCalibrated : Microsoft.ML.IDataView * Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt; * int * string * string * Nullable&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.TrainCatalogBase.CrossValidationResult&lt;Microsoft.ML.Data.BinaryClassificationMetrics&gt;&gt;" Usage="binaryClassificationCatalog.CrossValidateNonCalibrated (data, estimator, numberOfFolds, labelColumnName, samplingKeyColumnName, seed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.TrainCatalogBase+CrossValidationResult&lt;Microsoft.ML.Data.BinaryClassificationMetrics&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Microsoft.ML.IDataView" />
        <Parameter Name="estimator" Type="Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt;" />
        <Parameter Name="numberOfFolds" Type="System.Int32" />
        <Parameter Name="labelColumnName" Type="System.String" />
        <Parameter Name="samplingKeyColumnName" Type="System.String" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="data">The data to run cross-validation on.</param>
        <param name="estimator">The estimator to fit.</param>
        <param name="numberOfFolds">Number of cross-validation folds.</param>
        <param name="labelColumnName">The label column (for evaluation).</param>
        <param name="samplingKeyColumnName">Name of a column to use for grouping rows. If two examples share the same value of the <paramref name="samplingKeyColumnName" />,
            they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set.
            If <see langword="null" /> no row grouping will be performed.</param>
        <param name="seed">Seed for the random number generator used to select rows for cross-validation folds.</param>
        <summary>
            Run cross-validation over <paramref name="numberOfFolds" /> folds of <paramref name="data" />, by fitting <paramref name="estimator" />,
            and respecting <paramref name="samplingKeyColumnName" /> if provided.
            Then evaluate each sub-model against <paramref name="labelColumnName" /> and return metrics.
            </summary>
        <returns>Per-fold results: metrics, models, scored datasets.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.CalibratedBinaryClassificationMetrics Evaluate (Microsoft.ML.IDataView data, string labelColumnName = &quot;Label&quot;, string scoreColumnName = &quot;Score&quot;, string probabilityColumnName = &quot;Probability&quot;, string predictedLabelColumnName = &quot;PredictedLabel&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.Data.CalibratedBinaryClassificationMetrics Evaluate(class Microsoft.ML.IDataView data, string labelColumnName, string scoreColumnName, string probabilityColumnName, string predictedLabelColumnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.BinaryClassificationCatalog.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Evaluate (data As IDataView, Optional labelColumnName As String = &quot;Label&quot;, Optional scoreColumnName As String = &quot;Score&quot;, Optional probabilityColumnName As String = &quot;Probability&quot;, Optional predictedLabelColumnName As String = &quot;PredictedLabel&quot;) As CalibratedBinaryClassificationMetrics" />
      <MemberSignature Language="F#" Value="member this.Evaluate : Microsoft.ML.IDataView * string * string * string * string -&gt; Microsoft.ML.Data.CalibratedBinaryClassificationMetrics" Usage="binaryClassificationCatalog.Evaluate (data, labelColumnName, scoreColumnName, probabilityColumnName, predictedLabelColumnName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.CalibratedBinaryClassificationMetrics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Microsoft.ML.IDataView" />
        <Parameter Name="labelColumnName" Type="System.String" />
        <Parameter Name="scoreColumnName" Type="System.String" />
        <Parameter Name="probabilityColumnName" Type="System.String" />
        <Parameter Name="predictedLabelColumnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">The scored data.</param>
        <param name="labelColumnName">The name of the label column in <paramref name="data" />.</param>
        <param name="scoreColumnName">The name of the score column in <paramref name="data" />.</param>
        <param name="probabilityColumnName">The name of the probability column in <paramref name="data" />, the calibrated version of <paramref name="scoreColumnName" />.</param>
        <param name="predictedLabelColumnName">The name of the predicted label column in <paramref name="data" />.</param>
        <summary>
            Evaluates scored binary classification data.
            </summary>
        <returns>The evaluation results for these calibrated outputs.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateNonCalibrated">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.BinaryClassificationMetrics EvaluateNonCalibrated (Microsoft.ML.IDataView data, string labelColumnName = &quot;Label&quot;, string scoreColumnName = &quot;Score&quot;, string predictedLabelColumnName = &quot;PredictedLabel&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.Data.BinaryClassificationMetrics EvaluateNonCalibrated(class Microsoft.ML.IDataView data, string labelColumnName, string scoreColumnName, string predictedLabelColumnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.BinaryClassificationCatalog.EvaluateNonCalibrated(Microsoft.ML.IDataView,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EvaluateNonCalibrated (data As IDataView, Optional labelColumnName As String = &quot;Label&quot;, Optional scoreColumnName As String = &quot;Score&quot;, Optional predictedLabelColumnName As String = &quot;PredictedLabel&quot;) As BinaryClassificationMetrics" />
      <MemberSignature Language="F#" Value="member this.EvaluateNonCalibrated : Microsoft.ML.IDataView * string * string * string -&gt; Microsoft.ML.Data.BinaryClassificationMetrics" Usage="binaryClassificationCatalog.EvaluateNonCalibrated (data, labelColumnName, scoreColumnName, predictedLabelColumnName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.BinaryClassificationMetrics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Microsoft.ML.IDataView" />
        <Parameter Name="labelColumnName" Type="System.String" />
        <Parameter Name="scoreColumnName" Type="System.String" />
        <Parameter Name="predictedLabelColumnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">The scored data.</param>
        <param name="labelColumnName">The name of the label column in <paramref name="data" />.</param>
        <param name="scoreColumnName">The name of the score column in <paramref name="data" />.</param>
        <param name="predictedLabelColumnName">The name of the predicted label column in <paramref name="data" />.</param>
        <summary>
            Evaluates scored binary classification data, without probability-based metrics.
            </summary>
        <returns>The evaluation results for these uncalibrated outputs.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trainers">
      <MemberSignature Language="C#" Value="public Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers Trainers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.BinaryClassificationCatalog/BinaryClassificationTrainers Trainers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.BinaryClassificationCatalog.Trainers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Trainers As BinaryClassificationCatalog.BinaryClassificationTrainers" />
      <MemberSignature Language="F#" Value="member this.Trainers : Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers" Usage="Microsoft.ML.BinaryClassificationCatalog.Trainers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.BinaryClassificationCatalog+BinaryClassificationTrainers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The list of trainers for performing binary classification.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>