<Type Name="LearningPipelineExtensions" FullName="Microsoft.ML.LearningPipelineExtensions">
  <TypeSignature Language="C#" Value="public static class LearningPipelineExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LearningPipelineExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.LearningPipelineExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module LearningPipelineExtensions" />
  <TypeSignature Language="F#" Value="type LearningPipelineExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods that allow chaining estimator and transformer pipes together.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Append&lt;TTrans&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.TransformerChain&lt;TTrans&gt; Append&lt;TTrans&gt; (this Microsoft.ML.ITransformer start, TTrans transformer) where TTrans : class, Microsoft.ML.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.TransformerChain`1&lt;!!TTrans&gt; Append&lt;class (class Microsoft.ML.ITransformer) TTrans&gt;(class Microsoft.ML.ITransformer start, !!TTrans transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.LearningPipelineExtensions.Append``1(Microsoft.ML.ITransformer,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TTrans As {Class, ITransformer}) (start As ITransformer, transformer As TTrans) As TransformerChain(Of TTrans)" />
      <MemberSignature Language="F#" Value="static member Append : Microsoft.ML.ITransformer * 'rans -&gt; Microsoft.ML.Data.TransformerChain&lt;'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)&gt; (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)" Usage="Microsoft.ML.LearningPipelineExtensions.Append (start, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.TransformerChain&lt;TTrans&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTrans">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="Microsoft.ML.ITransformer" RefType="this" />
        <Parameter Name="transformer" Type="TTrans" />
      </Parameters>
      <Docs>
        <typeparam name="TTrans">To be added.</typeparam>
        <param name="start">To be added.</param>
        <param name="transformer">To be added.</param>
        <summary>
            Create a new transformer chain, by appending another transformer to the end of this transformer chain.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TTrans&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.EstimatorChain&lt;TTrans&gt; Append&lt;TTrans&gt; (this Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt; start, Microsoft.ML.IEstimator&lt;TTrans&gt; estimator, Microsoft.ML.Data.TransformerScope scope = Microsoft.ML.Data.TransformerScope.Everything) where TTrans : class, Microsoft.ML.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.EstimatorChain`1&lt;!!TTrans&gt; Append&lt;class (class Microsoft.ML.ITransformer) TTrans&gt;(class Microsoft.ML.IEstimator`1&lt;class Microsoft.ML.ITransformer&gt; start, class Microsoft.ML.IEstimator`1&lt;!!TTrans&gt; estimator, valuetype Microsoft.ML.Data.TransformerScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.LearningPipelineExtensions.Append``1(Microsoft.ML.IEstimator{Microsoft.ML.ITransformer},Microsoft.ML.IEstimator{``0},Microsoft.ML.Data.TransformerScope)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TTrans As {Class, ITransformer}) (start As IEstimator(Of ITransformer), estimator As IEstimator(Of TTrans), Optional scope As TransformerScope = Microsoft.ML.Data.TransformerScope.Everything) As EstimatorChain(Of TTrans)" />
      <MemberSignature Language="F#" Value="static member Append : Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt; * Microsoft.ML.IEstimator&lt;'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)&gt; * Microsoft.ML.Data.TransformerScope -&gt; Microsoft.ML.Data.EstimatorChain&lt;'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)&gt; (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)" Usage="Microsoft.ML.LearningPipelineExtensions.Append (start, estimator, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.EstimatorChain&lt;TTrans&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTrans">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="Microsoft.ML.IEstimator&lt;Microsoft.ML.ITransformer&gt;" RefType="this" />
        <Parameter Name="estimator" Type="Microsoft.ML.IEstimator&lt;TTrans&gt;" />
        <Parameter Name="scope" Type="Microsoft.ML.Data.TransformerScope" />
      </Parameters>
      <Docs>
        <typeparam name="TTrans">To be added.</typeparam>
        <param name="start">To be added.</param>
        <param name="estimator">To be added.</param>
        <param name="scope">To be added.</param>
        <summary>
            Create a new estimator chain, by appending another estimator to the end of this estimator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource,TTrans&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.CompositeLoaderEstimator&lt;TSource,TTrans&gt; Append&lt;TSource,TTrans&gt; (this Microsoft.ML.IDataLoader&lt;TSource&gt; start, Microsoft.ML.IEstimator&lt;TTrans&gt; estimator) where TTrans : class, Microsoft.ML.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.CompositeLoaderEstimator`2&lt;!!TSource, !!TTrans&gt; Append&lt;TSource, class (class Microsoft.ML.ITransformer) TTrans&gt;(class Microsoft.ML.IDataLoader`1&lt;!!TSource&gt; start, class Microsoft.ML.IEstimator`1&lt;!!TTrans&gt; estimator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.LearningPipelineExtensions.Append``2(Microsoft.ML.IDataLoader{``0},Microsoft.ML.IEstimator{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource, TTrans) (start As IDataLoader(Of TSource), estimator As IEstimator(Of TTrans)) As CompositeLoaderEstimator(Of TSource, TTrans)" />
      <MemberSignature Language="F#" Value="static member Append : Microsoft.ML.IDataLoader&lt;'Source&gt; * Microsoft.ML.IEstimator&lt;'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)&gt; -&gt; Microsoft.ML.Data.CompositeLoaderEstimator&lt;'Source, 'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)&gt; (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)" Usage="Microsoft.ML.LearningPipelineExtensions.Append (start, estimator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.CompositeLoaderEstimator&lt;TSource,TTrans&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TTrans">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="Microsoft.ML.IDataLoader&lt;TSource&gt;" RefType="this" />
        <Parameter Name="estimator" Type="Microsoft.ML.IEstimator&lt;TTrans&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <typeparam name="TTrans">To be added.</typeparam>
        <param name="start">To be added.</param>
        <param name="estimator">To be added.</param>
        <summary>
            Create a new composite loader estimator, by appending an estimator to this data loader.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource,TTrans&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.CompositeDataLoader&lt;TSource,TTrans&gt; Append&lt;TSource,TTrans&gt; (this Microsoft.ML.IDataLoader&lt;TSource&gt; loader, TTrans transformer) where TTrans : class, Microsoft.ML.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.CompositeDataLoader`2&lt;!!TSource, !!TTrans&gt; Append&lt;TSource, class (class Microsoft.ML.ITransformer) TTrans&gt;(class Microsoft.ML.IDataLoader`1&lt;!!TSource&gt; loader, !!TTrans transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.LearningPipelineExtensions.Append``2(Microsoft.ML.IDataLoader{``0},``1)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource, TTrans) (loader As IDataLoader(Of TSource), transformer As TTrans) As CompositeDataLoader(Of TSource, TTrans)" />
      <MemberSignature Language="F#" Value="static member Append : Microsoft.ML.IDataLoader&lt;'Source&gt; * 'rans -&gt; Microsoft.ML.Data.CompositeDataLoader&lt;'Source, 'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)&gt; (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)" Usage="Microsoft.ML.LearningPipelineExtensions.Append (loader, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.CompositeDataLoader&lt;TSource,TTrans&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TTrans">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="loader" Type="Microsoft.ML.IDataLoader&lt;TSource&gt;" RefType="this" />
        <Parameter Name="transformer" Type="TTrans" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <typeparam name="TTrans">To be added.</typeparam>
        <param name="loader">To be added.</param>
        <param name="transformer">To be added.</param>
        <summary>
            Create a new composite loader, by appending a transformer to this data loader.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource,TTrans&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.CompositeLoaderEstimator&lt;TSource,TTrans&gt; Append&lt;TSource,TTrans&gt; (this Microsoft.ML.IDataLoaderEstimator&lt;TSource,Microsoft.ML.IDataLoader&lt;TSource&gt;&gt; start, Microsoft.ML.IEstimator&lt;TTrans&gt; estimator) where TTrans : class, Microsoft.ML.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.CompositeLoaderEstimator`2&lt;!!TSource, !!TTrans&gt; Append&lt;TSource, class (class Microsoft.ML.ITransformer) TTrans&gt;(class Microsoft.ML.IDataLoaderEstimator`2&lt;!!TSource, class Microsoft.ML.IDataLoader`1&lt;!!TSource&gt;&gt; start, class Microsoft.ML.IEstimator`1&lt;!!TTrans&gt; estimator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.LearningPipelineExtensions.Append``2(Microsoft.ML.IDataLoaderEstimator{``0,Microsoft.ML.IDataLoader{``0}},Microsoft.ML.IEstimator{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource, TTrans) (start As IDataLoaderEstimator(Of TSource, IDataLoader(Of TSource)), estimator As IEstimator(Of TTrans)) As CompositeLoaderEstimator(Of TSource, TTrans)" />
      <MemberSignature Language="F#" Value="static member Append : Microsoft.ML.IDataLoaderEstimator&lt;'Source, Microsoft.ML.IDataLoader&lt;'Source&gt;&gt; * Microsoft.ML.IEstimator&lt;'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)&gt; -&gt; Microsoft.ML.Data.CompositeLoaderEstimator&lt;'Source, 'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)&gt; (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)" Usage="Microsoft.ML.LearningPipelineExtensions.Append (start, estimator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.CompositeLoaderEstimator&lt;TSource,TTrans&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TTrans">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="Microsoft.ML.IDataLoaderEstimator&lt;TSource,Microsoft.ML.IDataLoader&lt;TSource&gt;&gt;" RefType="this" />
        <Parameter Name="estimator" Type="Microsoft.ML.IEstimator&lt;TTrans&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <typeparam name="TTrans">To be added.</typeparam>
        <param name="start">To be added.</param>
        <param name="estimator">To be added.</param>
        <summary>
            Create a new composite loader estimator, by appending another estimator to the end of this data loader estimator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendCacheCheckpoint&lt;TTrans&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.EstimatorChain&lt;TTrans&gt; AppendCacheCheckpoint&lt;TTrans&gt; (this Microsoft.ML.IEstimator&lt;TTrans&gt; start, Microsoft.ML.Runtime.IHostEnvironment env) where TTrans : class, Microsoft.ML.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.EstimatorChain`1&lt;!!TTrans&gt; AppendCacheCheckpoint&lt;class (class Microsoft.ML.ITransformer) TTrans&gt;(class Microsoft.ML.IEstimator`1&lt;!!TTrans&gt; start, class Microsoft.ML.Runtime.IHostEnvironment env) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.LearningPipelineExtensions.AppendCacheCheckpoint``1(Microsoft.ML.IEstimator{``0},Microsoft.ML.Runtime.IHostEnvironment)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AppendCacheCheckpoint(Of TTrans As {Class, ITransformer}) (start As IEstimator(Of TTrans), env As IHostEnvironment) As EstimatorChain(Of TTrans)" />
      <MemberSignature Language="F#" Value="static member AppendCacheCheckpoint : Microsoft.ML.IEstimator&lt;'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)&gt; * Microsoft.ML.Runtime.IHostEnvironment -&gt; Microsoft.ML.Data.EstimatorChain&lt;'rans (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)&gt; (requires 'rans : null and 'rans :&gt; Microsoft.ML.ITransformer)" Usage="Microsoft.ML.LearningPipelineExtensions.AppendCacheCheckpoint (start, env)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.EstimatorChain&lt;TTrans&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTrans">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="start" Type="Microsoft.ML.IEstimator&lt;TTrans&gt;" RefType="this" />
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
      </Parameters>
      <Docs>
        <typeparam name="TTrans">To be added.</typeparam>
        <param name="start">The starting estimator</param>
        <param name="env">The host environment to use for caching.</param>
        <summary>
            Append a 'caching checkpoint' to the estimator chain. This will ensure that the downstream estimators will be trained against
            cached data. It is helpful to have a caching checkpoint before trainers that take multiple data passes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithOnFitDelegate&lt;TTransformer&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.IEstimator&lt;TTransformer&gt; WithOnFitDelegate&lt;TTransformer&gt; (this Microsoft.ML.IEstimator&lt;TTransformer&gt; estimator, Action&lt;TTransformer&gt; onFit) where TTransformer : class, Microsoft.ML.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.IEstimator`1&lt;!!TTransformer&gt; WithOnFitDelegate&lt;class (class Microsoft.ML.ITransformer) TTransformer&gt;(class Microsoft.ML.IEstimator`1&lt;!!TTransformer&gt; estimator, class System.Action`1&lt;!!TTransformer&gt; onFit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.LearningPipelineExtensions.WithOnFitDelegate``1(Microsoft.ML.IEstimator{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithOnFitDelegate(Of TTransformer As {Class, ITransformer}) (estimator As IEstimator(Of TTransformer), onFit As Action(Of TTransformer)) As IEstimator(Of TTransformer)" />
      <MemberSignature Language="F#" Value="static member WithOnFitDelegate : Microsoft.ML.IEstimator&lt;'ransformer (requires 'ransformer : null and 'ransformer :&gt; Microsoft.ML.ITransformer)&gt; * Action&lt;'ransformer (requires 'ransformer : null and 'ransformer :&gt; Microsoft.ML.ITransformer)&gt; -&gt; Microsoft.ML.IEstimator&lt;'ransformer (requires 'ransformer : null and 'ransformer :&gt; Microsoft.ML.ITransformer)&gt; (requires 'ransformer : null and 'ransformer :&gt; Microsoft.ML.ITransformer)" Usage="Microsoft.ML.LearningPipelineExtensions.WithOnFitDelegate (estimator, onFit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IEstimator&lt;TTransformer&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTransformer">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="estimator" Type="Microsoft.ML.IEstimator&lt;TTransformer&gt;" RefType="this" />
        <Parameter Name="onFit" Type="System.Action&lt;TTransformer&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TTransformer">The type of <see cref="T:Microsoft.ML.ITransformer" /> returned by <paramref name="estimator" /></typeparam>
        <param name="estimator">The estimator to wrap</param>
        <param name="onFit">The delegate that is called with the resulting <typeparamref name="TTransformer" /> instances once
            <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)" /> is called. Because <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)" />
            may be called multiple times, this delegate may also be called multiple times.</param>
        <summary>
            Given an estimator, return a wrapping object that will call a delegate once <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)" />
            is called. It is often important for an estimator to return information about what was fit, which is why the
            <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)" /> method returns a specifically typed object, rather than just a general
            <see cref="T:Microsoft.ML.ITransformer" />. However, at the same time, <see cref="T:Microsoft.ML.IEstimator`1" /> are often formed into pipelines
            with many objects, so we may need to build a chain of estimators via <see cref="T:Microsoft.ML.Data.EstimatorChain`1" /> where the
            estimator for which we want to get the transformer is buried somewhere in this chain. For that scenario, we can through this
            method attach a delegate that will be called once fit is called.
            </summary>
        <returns>A wrapping estimator that calls the indicated delegate whenever fit is called</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>