<Type Name="DataOperationsCatalog" FullName="Microsoft.ML.DataOperationsCatalog">
  <TypeSignature Language="C#" Value="public sealed class DataOperationsCatalog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataOperationsCatalog extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.DataOperationsCatalog" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataOperationsCatalog" />
  <TypeSignature Language="F#" Value="type DataOperationsCatalog = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A catalog of operations over data that are not transformers or estimators.
            This includes data loaders, saving, caching, filtering etc.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BootstrapSample">
      <MemberSignature Language="C#" Value="public Microsoft.ML.IDataView BootstrapSample (Microsoft.ML.IDataView input, Nullable&lt;int&gt; seed = null, bool complement = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.IDataView BootstrapSample(class Microsoft.ML.IDataView input, valuetype System.Nullable`1&lt;int32&gt; seed, bool complement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.BootstrapSample(Microsoft.ML.IDataView,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BootstrapSample (input As IDataView, Optional seed As Nullable(Of Integer) = null, Optional complement As Boolean = false) As IDataView" />
      <MemberSignature Language="F#" Value="member this.BootstrapSample : Microsoft.ML.IDataView * Nullable&lt;int&gt; * bool -&gt; Microsoft.ML.IDataView" Usage="dataOperationsCatalog.BootstrapSample (input, seed, complement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="complement" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="input">The input data.</param>
        <param name="seed">The random seed. If unspecified, the random state will be instead derived from the <see cref="T:Microsoft.ML.MLContext" />.</param>
        <param name="complement">Whether this is the out-of-bag sample, that is, all those rows that are not selected by the transform.
            Can be used to create a complementary pair of samples by using the same seed.</param>
        <summary>
            Take an approximate bootstrap sample of <paramref name="input" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This sampler is a streaming version of <a href="https://en.wikipedia.org/wiki/Bootstrapping_(statistics)">bootstrap resampling</a>.
            Instead of taking the whole dataset into memory and resampling, <see cref="M:Microsoft.ML.DataOperationsCatalog.BootstrapSample(Microsoft.ML.IDataView,System.Nullable{System.Int32},System.Boolean)" /> streams through the dataset and
            uses a <a href="https://en.wikipedia.org/wiki/Poisson_distribution">Poisson</a>(1) distribution to select the number of times a
            given row will be added to the sample. The <paramref name="complement" /> parameter allows for the creation of a bootstap sample
            and complementary out-of-bag sample by using the same <paramref name="seed" />.
            </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[BootstrapSample](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/BootstrapSample.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Cache">
      <MemberSignature Language="C#" Value="public Microsoft.ML.IDataView Cache (Microsoft.ML.IDataView input, params string[] columnsToPrefetch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.IDataView Cache(class Microsoft.ML.IDataView input, string[] columnsToPrefetch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.Cache(Microsoft.ML.IDataView,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Cache (input As IDataView, ParamArray columnsToPrefetch As String()) As IDataView" />
      <MemberSignature Language="F#" Value="member this.Cache : Microsoft.ML.IDataView * string[] -&gt; Microsoft.ML.IDataView" Usage="dataOperationsCatalog.Cache (input, columnsToPrefetch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
        <Parameter Name="columnsToPrefetch" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="ml-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="input">The input data.</param>
        <param name="columnsToPrefetch">The columns that must be cached whenever anything is cached. An empty array or null
            value means that columns are cached upon their first access.</param>
        <summary>
            Creates a lazy in-memory cache of <paramref name="input" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Caching happens per-column. A column is only cached when it is first accessed.
            In addition, <paramref name="columnsToPrefetch" /> are considered 'always needed', so these columns
            will be cached the first time any data is requested.
            </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[Cache](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/Cache.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateEnumerable&lt;TRow&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TRow&gt; CreateEnumerable&lt;TRow&gt; (Microsoft.ML.IDataView data, bool reuseRowObject, bool ignoreMissingColumns = false, Microsoft.ML.Data.SchemaDefinition schemaDefinition = null) where TRow : class, new();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!TRow&gt; CreateEnumerable&lt;class .ctor TRow&gt;(class Microsoft.ML.IDataView data, bool reuseRowObject, bool ignoreMissingColumns, class Microsoft.ML.Data.SchemaDefinition schemaDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.CreateEnumerable``1(Microsoft.ML.IDataView,System.Boolean,System.Boolean,Microsoft.ML.Data.SchemaDefinition)" />
      <MemberSignature Language="F#" Value="member this.CreateEnumerable : Microsoft.ML.IDataView * bool * bool * Microsoft.ML.Data.SchemaDefinition -&gt; seq&lt;'Row (requires 'Row : null and 'Row : (new : unit -&gt; 'Row))&gt; (requires 'Row : null and 'Row : (new : unit -&gt; 'Row))" Usage="dataOperationsCatalog.CreateEnumerable (data, reuseRowObject, ignoreMissingColumns, schemaDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TRow&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRow">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="data" Type="Microsoft.ML.IDataView" />
        <Parameter Name="reuseRowObject" Type="System.Boolean" />
        <Parameter Name="ignoreMissingColumns" Type="System.Boolean" />
        <Parameter Name="schemaDefinition" Type="Microsoft.ML.Data.SchemaDefinition" />
      </Parameters>
      <Docs>
        <typeparam name="TRow">The user-defined row type.</typeparam>
        <param name="data">The underlying data view.</param>
        <param name="reuseRowObject">Whether to return the same object on every row, or allocate a new one per row.</param>
        <param name="ignoreMissingColumns">Whether to ignore the case when a requested column is not present in the data view.</param>
        <param name="schemaDefinition">Optional user-provided schema definition. If it is not present, the schema is inferred from the definition of T.</param>
        <summary>
            Convert an <see cref="T:Microsoft.ML.IDataView" /> into a strongly-typed <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> that holds the data in <paramref name="data" />. It can be enumerated multiple times.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[CreateEnumerable](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/DataViewEnumerable.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CrossValidationSplit">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.DataOperationsCatalog.TrainTestData&gt; CrossValidationSplit (Microsoft.ML.IDataView data, int numberOfFolds = 5, string samplingKeyColumnName = null, Nullable&lt;int&gt; seed = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.ML.DataOperationsCatalog/TrainTestData&gt; CrossValidationSplit(class Microsoft.ML.IDataView data, int32 numberOfFolds, string samplingKeyColumnName, valuetype System.Nullable`1&lt;int32&gt; seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.CrossValidationSplit(Microsoft.ML.IDataView,System.Int32,System.String,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function CrossValidationSplit (data As IDataView, Optional numberOfFolds As Integer = 5, Optional samplingKeyColumnName As String = null, Optional seed As Nullable(Of Integer) = null) As IReadOnlyList(Of DataOperationsCatalog.TrainTestData)" />
      <MemberSignature Language="F#" Value="member this.CrossValidationSplit : Microsoft.ML.IDataView * int * string * Nullable&lt;int&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.DataOperationsCatalog.TrainTestData&gt;" Usage="dataOperationsCatalog.CrossValidationSplit (data, numberOfFolds, samplingKeyColumnName, seed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.DataOperationsCatalog+TrainTestData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Microsoft.ML.IDataView" />
        <Parameter Name="numberOfFolds" Type="System.Int32" />
        <Parameter Name="samplingKeyColumnName" Type="System.String" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="data">The dataset to split.</param>
        <param name="numberOfFolds">Number of cross-validation folds.</param>
        <param name="samplingKeyColumnName">Name of a column to use for grouping rows. If two examples share the same value of the <paramref name="samplingKeyColumnName" />,
            they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set.
            If <see langword="null" /> no row grouping will be performed.</param>
        <param name="seed">Seed for the random number generator used to select rows for cross-validation folds.</param>
        <summary>
            Split the dataset into cross-validation folds of train set and test set.
            Respects the <paramref name="samplingKeyColumnName" /> if provided.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[CrossValidationSplit](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/CrossValidationSplit.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="FilterRowsByColumn">
      <MemberSignature Language="C#" Value="public Microsoft.ML.IDataView FilterRowsByColumn (Microsoft.ML.IDataView input, string columnName, double lowerBound = -∞, double upperBound = ∞);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.IDataView FilterRowsByColumn(class Microsoft.ML.IDataView input, string columnName, float64 lowerBound, float64 upperBound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.FilterRowsByColumn(Microsoft.ML.IDataView,System.String,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterRowsByColumn (input As IDataView, columnName As String, Optional lowerBound As Double = -∞, Optional upperBound As Double = ∞) As IDataView" />
      <MemberSignature Language="F#" Value="member this.FilterRowsByColumn : Microsoft.ML.IDataView * string * double * double -&gt; Microsoft.ML.IDataView" Usage="dataOperationsCatalog.FilterRowsByColumn (input, columnName, lowerBound, upperBound)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="lowerBound" Type="System.Double" />
        <Parameter Name="upperBound" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="input">The input data.</param>
        <param name="columnName">The name of a column to use for filtering.</param>
        <param name="lowerBound">The inclusive lower bound.</param>
        <param name="upperBound">The exclusive upper bound.</param>
        <summary>
            Filter the dataset by the values of a numeric column.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Keep only those rows that satisfy the range condition: the value of column <paramref name="columnName" />
            must be between <paramref name="lowerBound" /> (inclusive) and <paramref name="upperBound" /> (exclusive).
            </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[FilterRowsByColumn](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/FilterRowsByColumn.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="FilterRowsByKeyColumnFraction">
      <MemberSignature Language="C#" Value="public Microsoft.ML.IDataView FilterRowsByKeyColumnFraction (Microsoft.ML.IDataView input, string columnName, double lowerBound = 0, double upperBound = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.IDataView FilterRowsByKeyColumnFraction(class Microsoft.ML.IDataView input, string columnName, float64 lowerBound, float64 upperBound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.FilterRowsByKeyColumnFraction(Microsoft.ML.IDataView,System.String,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterRowsByKeyColumnFraction (input As IDataView, columnName As String, Optional lowerBound As Double = 0, Optional upperBound As Double = 1) As IDataView" />
      <MemberSignature Language="F#" Value="member this.FilterRowsByKeyColumnFraction : Microsoft.ML.IDataView * string * double * double -&gt; Microsoft.ML.IDataView" Usage="dataOperationsCatalog.FilterRowsByKeyColumnFraction (input, columnName, lowerBound, upperBound)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="lowerBound" Type="System.Double" />
        <Parameter Name="upperBound" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="input">The input data.</param>
        <param name="columnName">The name of a column to use for filtering.</param>
        <param name="lowerBound">The inclusive lower bound.</param>
        <param name="upperBound">The exclusive upper bound.</param>
        <summary>
            Filter the dataset by the values of a <see cref="T:Microsoft.ML.Data.KeyDataViewType" /> column.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Keep only those rows that satisfy the range condition: the value of a key column <paramref name="columnName" />
            (treated as a fraction of the entire key range) must be between <paramref name="lowerBound" /> (inclusive) and <paramref name="upperBound" /> (exclusive).
            This filtering is useful if the <paramref name="columnName" /> is a key column obtained by some 'stable randomization',
            for example, hashing.
            </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[FilterRowsByKeyColumnFraction](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/FilterRowsByKeyColumnFraction.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="FilterRowsByMissingValues">
      <MemberSignature Language="C#" Value="public Microsoft.ML.IDataView FilterRowsByMissingValues (Microsoft.ML.IDataView input, params string[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.IDataView FilterRowsByMissingValues(class Microsoft.ML.IDataView input, string[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.FilterRowsByMissingValues(Microsoft.ML.IDataView,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterRowsByMissingValues (input As IDataView, ParamArray columns As String()) As IDataView" />
      <MemberSignature Language="F#" Value="member this.FilterRowsByMissingValues : Microsoft.ML.IDataView * string[] -&gt; Microsoft.ML.IDataView" Usage="dataOperationsCatalog.FilterRowsByMissingValues (input, columns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
        <Parameter Name="columns" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="ml-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="input">The input data.</param>
        <param name="columns">Name of the columns to filter on. If a row is has a missing value in any of
            these columns, it will be dropped from the dataset.</param>
        <summary>
            Drop rows where any column in <paramref name="columns" /> contains a missing value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[FilterRowsByMissingValues](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/FilterRowsByMissingValues.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="LoadFromEnumerable&lt;TRow&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.ML.IDataView LoadFromEnumerable&lt;TRow&gt; (System.Collections.Generic.IEnumerable&lt;TRow&gt; data, Microsoft.ML.Data.SchemaDefinition schemaDefinition = null) where TRow : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.IDataView LoadFromEnumerable&lt;class TRow&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TRow&gt; data, class Microsoft.ML.Data.SchemaDefinition schemaDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.LoadFromEnumerable``1(System.Collections.Generic.IEnumerable{``0},Microsoft.ML.Data.SchemaDefinition)" />
      <MemberSignature Language="F#" Value="member this.LoadFromEnumerable : seq&lt;'Row (requires 'Row : null)&gt; * Microsoft.ML.Data.SchemaDefinition -&gt; Microsoft.ML.IDataView (requires 'Row : null)" Usage="dataOperationsCatalog.LoadFromEnumerable (data, schemaDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRow">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IEnumerable&lt;TRow&gt;" />
        <Parameter Name="schemaDefinition" Type="Microsoft.ML.Data.SchemaDefinition" />
      </Parameters>
      <Docs>
        <typeparam name="TRow">The user-defined item type.</typeparam>
        <param name="data">The data to wrap around.</param>
        <param name="schemaDefinition">The optional schema definition of the data view to create. If <c>null</c>,
             the schema definition is inferred from <typeparamref name="TRow" />.</param>
        <summary>
             Create a new <see cref="T:Microsoft.ML.IDataView" /> over an enumerable of the items of user-defined type.
             The user maintains ownership of the <paramref name="data" /> and the resulting data view will
             never alter the contents of the <paramref name="data" />.
             Since <see cref="T:Microsoft.ML.IDataView" /> is assumed to be immutable, the user is expected to support
             multiple enumeration of the <paramref name="data" /> that would return the same results, unless
             the user knows that the data will only be cursored once.
            
             One typical usage for streaming data view could be: create the data view that lazily loads data
             as needed, then apply pre-trained transformations to it and cursor through it for transformation
             results.
             </summary>
        <returns>The constructed <see cref="T:Microsoft.ML.IDataView" />.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
             [!code-csharp[LoadFromEnumerable](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/DataViewEnumerable.cs)]
             ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="LoadFromEnumerable&lt;TRow&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.ML.IDataView LoadFromEnumerable&lt;TRow&gt; (System.Collections.Generic.IEnumerable&lt;TRow&gt; data, Microsoft.ML.DataViewSchema schema) where TRow : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.IDataView LoadFromEnumerable&lt;class TRow&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TRow&gt; data, class Microsoft.ML.DataViewSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.LoadFromEnumerable``1(System.Collections.Generic.IEnumerable{``0},Microsoft.ML.DataViewSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromEnumerable(Of TRow As Class) (data As IEnumerable(Of TRow), schema As DataViewSchema) As IDataView" />
      <MemberSignature Language="F#" Value="member this.LoadFromEnumerable : seq&lt;'Row (requires 'Row : null)&gt; * Microsoft.ML.DataViewSchema -&gt; Microsoft.ML.IDataView (requires 'Row : null)" Usage="dataOperationsCatalog.LoadFromEnumerable (data, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRow">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IEnumerable&lt;TRow&gt;" />
        <Parameter Name="schema" Type="Microsoft.ML.DataViewSchema" />
      </Parameters>
      <Docs>
        <typeparam name="TRow">The <typeparamref name="TRow" /> to convert to an <see cref="T:Microsoft.ML.IDataView" />.</typeparam>
        <param name="data">The data with <typeparamref name="TRow" /> to convert to an <see cref="T:Microsoft.ML.IDataView" />.</param>
        <param name="schema">The schema of the returned <see cref="T:Microsoft.ML.IDataView" />.</param>
        <summary>
            Create a new <see cref="T:Microsoft.ML.IDataView" /> over an enumerable of the items of user-defined type, and the provided <see cref="T:Microsoft.ML.DataViewSchema" />
            which might contain more information about the schema than the type can capture.
            </summary>
        <returns>An <see cref="T:Microsoft.ML.IDataView" /> with the given <paramref name="schema" />.</returns>
        <remarks>
            The user maintains ownership of the <paramref name="data" /> and the resulting data view will
            never alter the contents of the <paramref name="data" />.
            Since <see cref="T:Microsoft.ML.IDataView" /> is assumed to be immutable, the user is expected to support
            multiple enumeration of the <paramref name="data" /> that would return the same results, unless
            the user knows that the data will only be cursored once.
            One typical usage for streaming data view could be: create the data view that lazily loads data
            as needed, then apply pre-trained transformations to it and cursor through it for transformation
            results.
            One practical usage of this would be to supply the feature column names through the <see cref="T:Microsoft.ML.DataViewSchema.Annotations" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShuffleRows">
      <MemberSignature Language="C#" Value="public Microsoft.ML.IDataView ShuffleRows (Microsoft.ML.IDataView input, Nullable&lt;int&gt; seed = null, int shufflePoolSize = 1000, bool shuffleSource = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.IDataView ShuffleRows(class Microsoft.ML.IDataView input, valuetype System.Nullable`1&lt;int32&gt; seed, int32 shufflePoolSize, bool shuffleSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.ShuffleRows(Microsoft.ML.IDataView,System.Nullable{System.Int32},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShuffleRows (input As IDataView, Optional seed As Nullable(Of Integer) = null, Optional shufflePoolSize As Integer = 1000, Optional shuffleSource As Boolean = true) As IDataView" />
      <MemberSignature Language="F#" Value="member this.ShuffleRows : Microsoft.ML.IDataView * Nullable&lt;int&gt; * int * bool -&gt; Microsoft.ML.IDataView" Usage="dataOperationsCatalog.ShuffleRows (input, seed, shufflePoolSize, shuffleSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="shufflePoolSize" Type="System.Int32" />
        <Parameter Name="shuffleSource" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="input">The input data.</param>
        <param name="seed">The random seed. If unspecified, the random state will be instead derived from the <see cref="T:Microsoft.ML.MLContext" />.</param>
        <param name="shufflePoolSize">The number of rows to hold in the pool. Setting this to 1 will turn off pool shuffling and
            <see cref="M:Microsoft.ML.DataOperationsCatalog.ShuffleRows(Microsoft.ML.IDataView,System.Nullable{System.Int32},System.Int32,System.Boolean)" /> will only perform a shuffle by reading <paramref name="input" /> in a random order.</param>
        <param name="shuffleSource">If <see langword="false" />, the transform will not attempt to read <paramref name="input" /> in a random order and only use
            pooling to shuffle. This parameter has no effect if the <see cref="P:Microsoft.ML.IDataView.CanShuffle" /> property of <paramref name="input" /> is <see langword="false" />.
            </param>
        <summary>
            Shuffle the rows of <paramref name="input" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <see cref="M:Microsoft.ML.DataOperationsCatalog.ShuffleRows(Microsoft.ML.IDataView,System.Nullable{System.Int32},System.Int32,System.Boolean)" /> will shuffle the rows of any input <see cref="T:Microsoft.ML.IDataView" /> using a streaming approach.
            In order to not load the entire dataset in memory, a pool of <paramref name="shufflePoolSize" /> rows will be used
            to randomly select rows to output. The pool is constructed from the first <paramref name="shufflePoolSize" /> rows
            in <paramref name="input" />. Rows will then be randomly yielded from the pool and replaced with the next row from <paramref name="input" />
            until all the rows have been yielded, resulting in a new <see cref="T:Microsoft.ML.IDataView" /> of the same size as <paramref name="input" />
            but with the rows in a randomized order.
            If the <see cref="P:Microsoft.ML.IDataView.CanShuffle" /> property of <paramref name="input" /> is true, then it will also be read into the
            pool in a random order, offering two sources of randomness.
            </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[ShuffleRows](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/ShuffleRows.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="SkipRows">
      <MemberSignature Language="C#" Value="public Microsoft.ML.IDataView SkipRows (Microsoft.ML.IDataView input, long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.IDataView SkipRows(class Microsoft.ML.IDataView input, int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.SkipRows(Microsoft.ML.IDataView,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function SkipRows (input As IDataView, count As Long) As IDataView" />
      <MemberSignature Language="F#" Value="member this.SkipRows : Microsoft.ML.IDataView * int64 -&gt; Microsoft.ML.IDataView" Usage="dataOperationsCatalog.SkipRows (input, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="input">The input data.</param>
        <param name="count">Number of rows to skip.</param>
        <summary>
            Skip <paramref name="count" /> rows in <paramref name="input" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Skips the first <paramref name="count" /> rows from <paramref name="input" /> and returns an <see cref="T:Microsoft.ML.IDataView" /> with all other rows.
            </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[SkipRows](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/SkipRows.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="TakeRows">
      <MemberSignature Language="C#" Value="public Microsoft.ML.IDataView TakeRows (Microsoft.ML.IDataView input, long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.IDataView TakeRows(class Microsoft.ML.IDataView input, int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.TakeRows(Microsoft.ML.IDataView,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function TakeRows (input As IDataView, count As Long) As IDataView" />
      <MemberSignature Language="F#" Value="member this.TakeRows : Microsoft.ML.IDataView * int64 -&gt; Microsoft.ML.IDataView" Usage="dataOperationsCatalog.TakeRows (input, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="input">The input data.</param>
        <param name="count">Number of rows to take.</param>
        <summary>
            Take <paramref name="count" /> rows from <paramref name="input" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Returns returns an <see cref="T:Microsoft.ML.IDataView" /> with the first <paramref name="count" /> rows from <paramref name="input" />.
            </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[TakeRows](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/TakeRows.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="TrainTestSplit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.DataOperationsCatalog.TrainTestData TrainTestSplit (Microsoft.ML.IDataView data, double testFraction = 0.1, string samplingKeyColumnName = null, Nullable&lt;int&gt; seed = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.ML.DataOperationsCatalog/TrainTestData TrainTestSplit(class Microsoft.ML.IDataView data, float64 testFraction, string samplingKeyColumnName, valuetype System.Nullable`1&lt;int32&gt; seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DataOperationsCatalog.TrainTestSplit(Microsoft.ML.IDataView,System.Double,System.String,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrainTestSplit (data As IDataView, Optional testFraction As Double = 0.1, Optional samplingKeyColumnName As String = null, Optional seed As Nullable(Of Integer) = null) As DataOperationsCatalog.TrainTestData" />
      <MemberSignature Language="F#" Value="member this.TrainTestSplit : Microsoft.ML.IDataView * double * string * Nullable&lt;int&gt; -&gt; Microsoft.ML.DataOperationsCatalog.TrainTestData" Usage="dataOperationsCatalog.TrainTestSplit (data, testFraction, samplingKeyColumnName, seed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.DataOperationsCatalog+TrainTestData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Microsoft.ML.IDataView" />
        <Parameter Name="testFraction" Type="System.Double" />
        <Parameter Name="samplingKeyColumnName" Type="System.String" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="data">The dataset to split.</param>
        <param name="testFraction">The fraction of data to go into the test set.</param>
        <param name="samplingKeyColumnName">Name of a column to use for grouping rows. If two examples share the same value of the <paramref name="samplingKeyColumnName" />,
            they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set.
            If <see langword="null" /> no row grouping will be performed.</param>
        <param name="seed">Seed for the random number generator used to select rows for the train-test split.</param>
        <summary>
            Split the dataset into the train set and test set according to the given fraction.
            Respects the <paramref name="samplingKeyColumnName" /> if provided.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[TrainTestSplit](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/TrainTestSplit.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>