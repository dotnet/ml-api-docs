<Type Name="PermutationFeatureImportanceExtensions" FullName="Microsoft.ML.PermutationFeatureImportanceExtensions">
  <TypeSignature Language="C#" Value="public static class PermutationFeatureImportanceExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit PermutationFeatureImportanceExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.PermutationFeatureImportanceExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module PermutationFeatureImportanceExtensions" />
  <TypeSignature Language="F#" Value="type PermutationFeatureImportanceExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="PermutationFeatureImportance">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.ML.BinaryClassificationMetricsStatistics&gt; PermutationFeatureImportance (this Microsoft.ML.BinaryClassificationContext ctx, Microsoft.ML.IPredictionTransformer&lt;Microsoft.ML.IPredictor&gt; model, Microsoft.ML.Data.IDataView data, string label = &quot;Label&quot;, string features = &quot;Features&quot;, bool useFeatureWeightFilter = false, Nullable&lt;int&gt; topExamples = null, int permutationCount = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.ML.BinaryClassificationMetricsStatistics&gt; PermutationFeatureImportance(class Microsoft.ML.BinaryClassificationContext ctx, class Microsoft.ML.IPredictionTransformer`1&lt;class Microsoft.ML.IPredictor&gt; model, class Microsoft.ML.Data.IDataView data, string label, string features, bool useFeatureWeightFilter, valuetype System.Nullable`1&lt;int32&gt; topExamples, int32 permutationCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance(Microsoft.ML.BinaryClassificationContext,Microsoft.ML.IPredictionTransformer{Microsoft.ML.IPredictor},Microsoft.ML.Data.IDataView,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PermutationFeatureImportance (ctx As BinaryClassificationContext, model As IPredictionTransformer(Of IPredictor), data As IDataView, Optional label As String = &quot;Label&quot;, Optional features As String = &quot;Features&quot;, Optional useFeatureWeightFilter As Boolean = false, Optional topExamples As Nullable(Of Integer) = null, Optional permutationCount As Integer = 1) As ImmutableArray(Of BinaryClassificationMetricsStatistics)" />
      <MemberSignature Language="F#" Value="static member PermutationFeatureImportance : Microsoft.ML.BinaryClassificationContext * Microsoft.ML.IPredictionTransformer&lt;Microsoft.ML.IPredictor&gt; * Microsoft.ML.Data.IDataView * string * string * bool * Nullable&lt;int&gt; * int -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.ML.BinaryClassificationMetricsStatistics&gt;" Usage="Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance (ctx, model, data, label, features, useFeatureWeightFilter, topExamples, permutationCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.ML.BinaryClassificationMetricsStatistics&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.BinaryClassificationContext" RefType="this" />
        <Parameter Name="model" Type="Microsoft.ML.IPredictionTransformer&lt;Microsoft.ML.IPredictor&gt;" />
        <Parameter Name="data" Type="Microsoft.ML.Data.IDataView" />
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="features" Type="System.String" />
        <Parameter Name="useFeatureWeightFilter" Type="System.Boolean" />
        <Parameter Name="topExamples" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="permutationCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ctx">The binary classification context.</param>
        <param name="model">The model to evaluate.</param>
        <param name="data">The evaluation data set.</param>
        <param name="label">Label column name.</param>
        <param name="features">Feature column name.</param>
        <param name="useFeatureWeightFilter">Use features weight to pre-filter features.</param>
        <param name="topExamples">Limit the number of examples to evaluate on. null means examples (up to ~ 2 bln) from input will be used.</param>
        <param name="permutationCount">The number of permutations to perform.</param>
        <summary>
            Permutation Feature Importance (PFI) for Binary Classification
            </summary>
        <returns>Array of per-feature 'contributions' to the score.</returns>
        <remarks>
          <para>
            Permutation feature importance (PFI) is a technique to determine the global importance of features in a trained
            machine learning model. PFI is a simple yet powerful technique motivated by Breiman in his Random Forest paper, section 10
            (Breiman. <a href="https://www.stat.berkeley.edu/~breiman/randomforest2001.pdf">"Random Forests."</a> Machine Learning, 2001.)
            The advantage of the PFI method is that it is model agnostic -- it works with any model that can be
            evaluated -- and it can use any dataset, not just the training set, to compute feature importance metrics.
            </para>
          <para>
            PFI works by taking a labeled dataset, choosing a feature, and permuting the values
            for that feature across all the examples, so that each example now has a random value for the feature and
            the original values for all other features. The evalution metric (e.g. AUC) is then calculated
            for this modified dataset, and the change in the evaluation metric from the original dataset is computed.
            The larger the change in the evaluation metric, the more important the feature is to the model.
            PFI works by performing this permutation analysis across all the features of a model, one after another.
            </para>
          <para>
            In this implementation, PFI computes the change in all possible binary classification evaluation metrics for each feature, and an
            <code>ImmutableArray</code> of <code>BinaryClassificationMetrics</code> objects is returned. See the sample below for an
            example of working with these results to analyze the feature importance of a model.
            </para>
        </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[PFI](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/PermutationFeatureImportance/PfiBinaryClassificationExample.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="PermutationFeatureImportance">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.ML.MultiClassClassifierMetricsStatistics&gt; PermutationFeatureImportance (this Microsoft.ML.MulticlassClassificationContext ctx, Microsoft.ML.IPredictionTransformer&lt;Microsoft.ML.IPredictor&gt; model, Microsoft.ML.Data.IDataView data, string label = &quot;Label&quot;, string features = &quot;Features&quot;, bool useFeatureWeightFilter = false, Nullable&lt;int&gt; topExamples = null, int permutationCount = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.ML.MultiClassClassifierMetricsStatistics&gt; PermutationFeatureImportance(class Microsoft.ML.MulticlassClassificationContext ctx, class Microsoft.ML.IPredictionTransformer`1&lt;class Microsoft.ML.IPredictor&gt; model, class Microsoft.ML.Data.IDataView data, string label, string features, bool useFeatureWeightFilter, valuetype System.Nullable`1&lt;int32&gt; topExamples, int32 permutationCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance(Microsoft.ML.MulticlassClassificationContext,Microsoft.ML.IPredictionTransformer{Microsoft.ML.IPredictor},Microsoft.ML.Data.IDataView,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PermutationFeatureImportance (ctx As MulticlassClassificationContext, model As IPredictionTransformer(Of IPredictor), data As IDataView, Optional label As String = &quot;Label&quot;, Optional features As String = &quot;Features&quot;, Optional useFeatureWeightFilter As Boolean = false, Optional topExamples As Nullable(Of Integer) = null, Optional permutationCount As Integer = 1) As ImmutableArray(Of MultiClassClassifierMetricsStatistics)" />
      <MemberSignature Language="F#" Value="static member PermutationFeatureImportance : Microsoft.ML.MulticlassClassificationContext * Microsoft.ML.IPredictionTransformer&lt;Microsoft.ML.IPredictor&gt; * Microsoft.ML.Data.IDataView * string * string * bool * Nullable&lt;int&gt; * int -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.ML.MultiClassClassifierMetricsStatistics&gt;" Usage="Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance (ctx, model, data, label, features, useFeatureWeightFilter, topExamples, permutationCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.ML.MultiClassClassifierMetricsStatistics&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.MulticlassClassificationContext" RefType="this" />
        <Parameter Name="model" Type="Microsoft.ML.IPredictionTransformer&lt;Microsoft.ML.IPredictor&gt;" />
        <Parameter Name="data" Type="Microsoft.ML.Data.IDataView" />
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="features" Type="System.String" />
        <Parameter Name="useFeatureWeightFilter" Type="System.Boolean" />
        <Parameter Name="topExamples" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="permutationCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ctx">The clustering context.</param>
        <param name="model">The model to evaluate.</param>
        <param name="data">The evaluation data set.</param>
        <param name="label">Label column name.</param>
        <param name="features">Feature column name.</param>
        <param name="useFeatureWeightFilter">Use features weight to pre-filter features.</param>
        <param name="topExamples">Limit the number of examples to evaluate on. null means examples (up to ~ 2 bln) from input will be used.</param>
        <param name="permutationCount">The number of permutations to perform.</param>
        <summary>
            Permutation Feature Importance (PFI) for MulticlassClassification
            </summary>
        <returns>Array of per-feature 'contributions' to the score.</returns>
        <remarks>
          <para>
            Permutation feature importance (PFI) is a technique to determine the global importance of features in a trained
            machine learning model. PFI is a simple yet powerful technique motivated by Breiman in his Random Forest paper, section 10
            (Breiman. <a href="https://www.stat.berkeley.edu/~breiman/randomforest2001.pdf">"Random Forests."</a> Machine Learning, 2001.)
            The advantage of the PFI method is that it is model agnostic -- it works with any model that can be
            evaluated -- and it can use any dataset, not just the training set, to compute feature importance metrics.
            </para>
          <para>
            PFI works by taking a labeled dataset, choosing a feature, and permuting the values
            for that feature across all the examples, so that each example now has a random value for the feature and
            the original values for all other features. The evalution metric (e.g. micro-accuracy) is then calculated
            for this modified dataset, and the change in the evaluation metric from the original dataset is computed.
            The larger the change in the evaluation metric, the more important the feature is to the model.
            PFI works by performing this permutation analysis across all the features of a model, one after another.
            </para>
          <para>
            In this implementation, PFI computes the change in all possible multiclass classification evaluation metrics for each feature, and an
            <code>ImmutableArray</code> of <code>MultiClassClassifierMetrics</code> objects is returned. See the sample below for an
            example of working with these results to analyze the feature importance of a model.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PermutationFeatureImportance">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.ML.RegressionMetricsStatistics&gt; PermutationFeatureImportance (this Microsoft.ML.RegressionContext ctx, Microsoft.ML.IPredictionTransformer&lt;Microsoft.ML.IPredictor&gt; model, Microsoft.ML.Data.IDataView data, string label = &quot;Label&quot;, string features = &quot;Features&quot;, bool useFeatureWeightFilter = false, Nullable&lt;int&gt; topExamples = null, int permutationCount = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.ML.RegressionMetricsStatistics&gt; PermutationFeatureImportance(class Microsoft.ML.RegressionContext ctx, class Microsoft.ML.IPredictionTransformer`1&lt;class Microsoft.ML.IPredictor&gt; model, class Microsoft.ML.Data.IDataView data, string label, string features, bool useFeatureWeightFilter, valuetype System.Nullable`1&lt;int32&gt; topExamples, int32 permutationCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance(Microsoft.ML.RegressionContext,Microsoft.ML.IPredictionTransformer{Microsoft.ML.IPredictor},Microsoft.ML.Data.IDataView,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PermutationFeatureImportance (ctx As RegressionContext, model As IPredictionTransformer(Of IPredictor), data As IDataView, Optional label As String = &quot;Label&quot;, Optional features As String = &quot;Features&quot;, Optional useFeatureWeightFilter As Boolean = false, Optional topExamples As Nullable(Of Integer) = null, Optional permutationCount As Integer = 1) As ImmutableArray(Of RegressionMetricsStatistics)" />
      <MemberSignature Language="F#" Value="static member PermutationFeatureImportance : Microsoft.ML.RegressionContext * Microsoft.ML.IPredictionTransformer&lt;Microsoft.ML.IPredictor&gt; * Microsoft.ML.Data.IDataView * string * string * bool * Nullable&lt;int&gt; * int -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.ML.RegressionMetricsStatistics&gt;" Usage="Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance (ctx, model, data, label, features, useFeatureWeightFilter, topExamples, permutationCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.ML.RegressionMetricsStatistics&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.RegressionContext" RefType="this" />
        <Parameter Name="model" Type="Microsoft.ML.IPredictionTransformer&lt;Microsoft.ML.IPredictor&gt;" />
        <Parameter Name="data" Type="Microsoft.ML.Data.IDataView" />
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="features" Type="System.String" />
        <Parameter Name="useFeatureWeightFilter" Type="System.Boolean" />
        <Parameter Name="topExamples" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="permutationCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ctx">The regression context.</param>
        <param name="model">The model to evaluate.</param>
        <param name="data">The evaluation data set.</param>
        <param name="label">Label column name.</param>
        <param name="features">Feature column name.</param>
        <param name="useFeatureWeightFilter">Use features weight to pre-filter features.</param>
        <param name="topExamples">Limit the number of examples to evaluate on. null means examples (up to ~ 2 bln) from input will be used.</param>
        <param name="permutationCount">The number of permutations to perform.</param>
        <summary>
            Permutation Feature Importance (PFI) for Regression
            </summary>
        <returns>Array of per-feature 'contributions' to the score.</returns>
        <remarks>
          <para>
            Permutation feature importance (PFI) is a technique to determine the global importance of features in a trained
            machine learning model. PFI is a simple yet powerful technique motivated by Breiman in his Random Forest paper, section 10
            (Breiman. <a href="https://www.stat.berkeley.edu/~breiman/randomforest2001.pdf">"Random Forests."</a> Machine Learning, 2001.)
            The advantage of the PFI method is that it is model agnostic -- it works with any model that can be
            evaluated -- and it can use any dataset, not just the training set, to compute feature importance metrics.
            </para>
          <para>
            PFI works by taking a labeled dataset, choosing a feature, and permuting the values
            for that feature across all the examples, so that each example now has a random value for the feature and
            the original values for all other features. The evalution metric (e.g. R-squared) is then calculated
            for this modified dataset, and the change in the evaluation metric from the original dataset is computed.
            The larger the change in the evaluation metric, the more important the feature is to the model.
            PFI works by performing this permutation analysis across all the features of a model, one after another.
            </para>
          <para>
            In this implementation, PFI computes the change in all possible regression evaluation metrics for each feature, and an
            <code>ImmutableArray</code> of <code>RegressionMetrics</code> objects is returned. See the sample below for an
            example of working with these results to analyze the feature importance of a model.
            </para>
        </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[PFI](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/PermutationFeatureImportance/PFIRegressionExample.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="PermutationFeatureImportance">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.ML.RankerMetricsStatistics&gt; PermutationFeatureImportance (this Microsoft.ML.RankingContext ctx, Microsoft.ML.IPredictionTransformer&lt;Microsoft.ML.IPredictor&gt; model, Microsoft.ML.Data.IDataView data, string label = &quot;Label&quot;, string groupId = &quot;GroupId&quot;, string features = &quot;Features&quot;, bool useFeatureWeightFilter = false, Nullable&lt;int&gt; topExamples = null, int permutationCount = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.ML.RankerMetricsStatistics&gt; PermutationFeatureImportance(class Microsoft.ML.RankingContext ctx, class Microsoft.ML.IPredictionTransformer`1&lt;class Microsoft.ML.IPredictor&gt; model, class Microsoft.ML.Data.IDataView data, string label, string groupId, string features, bool useFeatureWeightFilter, valuetype System.Nullable`1&lt;int32&gt; topExamples, int32 permutationCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance(Microsoft.ML.RankingContext,Microsoft.ML.IPredictionTransformer{Microsoft.ML.IPredictor},Microsoft.ML.Data.IDataView,System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PermutationFeatureImportance (ctx As RankingContext, model As IPredictionTransformer(Of IPredictor), data As IDataView, Optional label As String = &quot;Label&quot;, Optional groupId As String = &quot;GroupId&quot;, Optional features As String = &quot;Features&quot;, Optional useFeatureWeightFilter As Boolean = false, Optional topExamples As Nullable(Of Integer) = null, Optional permutationCount As Integer = 1) As ImmutableArray(Of RankerMetricsStatistics)" />
      <MemberSignature Language="F#" Value="static member PermutationFeatureImportance : Microsoft.ML.RankingContext * Microsoft.ML.IPredictionTransformer&lt;Microsoft.ML.IPredictor&gt; * Microsoft.ML.Data.IDataView * string * string * string * bool * Nullable&lt;int&gt; * int -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.ML.RankerMetricsStatistics&gt;" Usage="Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance (ctx, model, data, label, groupId, features, useFeatureWeightFilter, topExamples, permutationCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.ML.RankerMetricsStatistics&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.RankingContext" RefType="this" />
        <Parameter Name="model" Type="Microsoft.ML.IPredictionTransformer&lt;Microsoft.ML.IPredictor&gt;" />
        <Parameter Name="data" Type="Microsoft.ML.Data.IDataView" />
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="features" Type="System.String" />
        <Parameter Name="useFeatureWeightFilter" Type="System.Boolean" />
        <Parameter Name="topExamples" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="permutationCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ctx">The clustering context.</param>
        <param name="model">The model to evaluate.</param>
        <param name="data">The evaluation data set.</param>
        <param name="label">Label column name.</param>
        <param name="groupId">GroupId column name</param>
        <param name="features">Feature column name.</param>
        <param name="useFeatureWeightFilter">Use features weight to pre-filter features.</param>
        <param name="topExamples">Limit the number of examples to evaluate on. null means examples (up to ~ 2 bln) from input will be used.</param>
        <param name="permutationCount">The number of permutations to perform.</param>
        <summary>
            Permutation Feature Importance (PFI) for Ranking
            </summary>
        <returns>Array of per-feature 'contributions' to the score.</returns>
        <remarks>
          <para>
            Permutation feature importance (PFI) is a technique to determine the global importance of features in a trained
            machine learning model. PFI is a simple yet powerful technique motivated by Breiman in his Random Forest paper, section 10
            (Breiman. <a href="https://www.stat.berkeley.edu/~breiman/randomforest2001.pdf">"Random Forests."</a> Machine Learning, 2001.)
            The advantage of the PFI method is that it is model agnostic -- it works with any model that can be
            evaluated -- and it can use any dataset, not just the training set, to compute feature importance metrics.
            </para>
          <para>
            PFI works by taking a labeled dataset, choosing a feature, and permuting the values
            for that feature across all the examples, so that each example now has a random value for the feature and
            the original values for all other features. The evalution metric (e.g. NDCG) is then calculated
            for this modified dataset, and the change in the evaluation metric from the original dataset is computed.
            The larger the change in the evaluation metric, the more important the feature is to the model.
            PFI works by performing this permutation analysis across all the features of a model, one after another.
            </para>
          <para>
            In this implementation, PFI computes the change in all possible ranking evaluation metrics for each feature, and an
            <code>ImmutableArray</code> of <code>RankingMetrics</code> objects is returned. See the sample below for an
            example of working with these results to analyze the feature importance of a model.
            </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>