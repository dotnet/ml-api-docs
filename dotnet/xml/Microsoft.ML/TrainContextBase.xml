<Type Name="TrainContextBase" FullName="Microsoft.ML.TrainContextBase">
  <TypeSignature Language="C#" Value="public abstract class TrainContextBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TrainContextBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.TrainContextBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TrainContextBase" />
  <TypeSignature Language="F#" Value="type TrainContextBase = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A training context is an object instantiable by a user to do various tasks relating to a particular
            "area" of machine learning. A subclass would represent a particular task in machine learning. The idea
            is that a user can instantiate that particular area, and get trainers and evaluators.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TrainContextBase (Microsoft.ML.Runtime.IHostEnvironment env, string registrationName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, string registrationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TrainContextBase.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (env As IHostEnvironment, registrationName As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.TrainContextBase : Microsoft.ML.Runtime.IHostEnvironment * string -&gt; Microsoft.ML.TrainContextBase" Usage="new Microsoft.ML.TrainContextBase (env, registrationName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="registrationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="registrationName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossValidateTrain">
      <MemberSignature Language="C#" Value="protected ValueTuple&lt;Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Core.Data.ITransformer&gt;[] CrossValidateTrain (Microsoft.ML.Runtime.Data.IDataView data, Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Core.Data.ITransformer&gt; estimator, int numFolds, string stratificationColumn);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.ValueTuple`2&lt;class Microsoft.ML.Runtime.Data.IDataView, class Microsoft.ML.Core.Data.ITransformer&gt;[] CrossValidateTrain(class Microsoft.ML.Runtime.Data.IDataView data, class Microsoft.ML.Core.Data.IEstimator`1&lt;class Microsoft.ML.Core.Data.ITransformer&gt; estimator, int32 numFolds, string stratificationColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TrainContextBase.CrossValidateTrain(Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Core.Data.IEstimator{Microsoft.ML.Core.Data.ITransformer},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function CrossValidateTrain (data As IDataView, estimator As IEstimator(Of ITransformer), numFolds As Integer, stratificationColumn As String) As ValueTuple(Of IDataView, ITransformer)()" />
      <MemberSignature Language="F#" Value="member this.CrossValidateTrain : Microsoft.ML.Runtime.Data.IDataView * Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Core.Data.ITransformer&gt; * int * string -&gt; ValueTuple&lt;Microsoft.ML.Runtime.Data.IDataView, Microsoft.ML.Core.Data.ITransformer&gt;[]" Usage="trainContextBase.CrossValidateTrain (data, estimator, numFolds, stratificationColumn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Core.Data.ITransformer&gt;[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "scoredTestSet", "model" })</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="estimator" Type="Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Core.Data.ITransformer&gt;" />
        <Parameter Name="numFolds" Type="System.Int32" />
        <Parameter Name="stratificationColumn" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="estimator">To be added.</param>
        <param name="numFolds">To be added.</param>
        <param name="stratificationColumn">To be added.</param>
        <summary>
            Train the <paramref name="estimator" /> on <paramref name="numFolds" /> folds of the data sequentially.
            Return each model and each scored test dataset.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="protected readonly Microsoft.ML.Runtime.IHost Host;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly class Microsoft.ML.Runtime.IHost Host" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.TrainContextBase.Host" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Host As IHost " />
      <MemberSignature Language="F#" Value="val mutable Host : Microsoft.ML.Runtime.IHost" Usage="Microsoft.ML.TrainContextBase.Host" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IHost</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrainTestSplit">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Runtime.Data.IDataView&gt; TrainTestSplit (Microsoft.ML.Runtime.Data.IDataView data, double testFraction = 0.1, string stratificationColumn = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;class Microsoft.ML.Runtime.Data.IDataView, class Microsoft.ML.Runtime.Data.IDataView&gt; TrainTestSplit(class Microsoft.ML.Runtime.Data.IDataView data, float64 testFraction, string stratificationColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TrainContextBase.TrainTestSplit(Microsoft.ML.Runtime.Data.IDataView,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrainTestSplit (data As IDataView, Optional testFraction As Double = 0.1, Optional stratificationColumn As String = null) As ValueTuple(Of IDataView, IDataView)" />
      <MemberSignature Language="F#" Value="member this.TrainTestSplit : Microsoft.ML.Runtime.Data.IDataView * double * string -&gt; ValueTuple&lt;Microsoft.ML.Runtime.Data.IDataView, Microsoft.ML.Runtime.Data.IDataView&gt;" Usage="trainContextBase.TrainTestSplit (data, testFraction, stratificationColumn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Runtime.Data.IDataView&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "trainSet", "testSet" })</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Microsoft.ML.Runtime.Data.IDataView" />
        <Parameter Name="testFraction" Type="System.Double" />
        <Parameter Name="stratificationColumn" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">The dataset to split.</param>
        <param name="testFraction">The fraction of data to go into the test set.</param>
        <param name="stratificationColumn">Optional stratification column.</param>
        <summary>
            Split the dataset into the train set and test set according to the given fraction.
            Respects the <paramref name="stratificationColumn" /> if provided.
            </summary>
        <returns>A pair of datasets, for the train and test set.</returns>
        <remarks>If two examples share the same value of the <paramref name="stratificationColumn" /> (if provided),
            they are guaranteed to appear in the same subset (train or test). Use this to make sure there is no label leakage from
            train to the test set.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>