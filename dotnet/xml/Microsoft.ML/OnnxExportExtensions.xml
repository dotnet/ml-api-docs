<Type Name="OnnxExportExtensions" FullName="Microsoft.ML.OnnxExportExtensions">
  <TypeSignature Language="C#" Value="public static class OnnxExportExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit OnnxExportExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.OnnxExportExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module OnnxExportExtensions" />
  <TypeSignature Language="F#" Value="type OnnxExportExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Onnx</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ConvertToOnnx">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.UniversalModelFormat.Onnx.ModelProto ConvertToOnnx (this Microsoft.ML.ModelOperationsCatalog catalog, Microsoft.ML.Core.Data.ITransformer transform, Microsoft.Data.DataView.IDataView inputData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.UniversalModelFormat.Onnx.ModelProto ConvertToOnnx(class Microsoft.ML.ModelOperationsCatalog catalog, class Microsoft.ML.Core.Data.ITransformer transform, class Microsoft.Data.DataView.IDataView inputData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.OnnxExportExtensions.ConvertToOnnx(Microsoft.ML.ModelOperationsCatalog,Microsoft.ML.Core.Data.ITransformer,Microsoft.Data.DataView.IDataView)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConvertToOnnx (catalog As ModelOperationsCatalog, transform As ITransformer, inputData As IDataView) As ModelProto" />
      <MemberSignature Language="F#" Value="static member ConvertToOnnx : Microsoft.ML.ModelOperationsCatalog * Microsoft.ML.Core.Data.ITransformer * Microsoft.Data.DataView.IDataView -&gt; Microsoft.ML.UniversalModelFormat.Onnx.ModelProto" Usage="Microsoft.ML.OnnxExportExtensions.ConvertToOnnx (catalog, transform, inputData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Onnx</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.UniversalModelFormat.Onnx.ModelProto</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.ModelOperationsCatalog" RefType="this" />
        <Parameter Name="transform" Type="Microsoft.ML.Core.Data.ITransformer" />
        <Parameter Name="inputData" Type="Microsoft.Data.DataView.IDataView" />
      </Parameters>
      <Docs>
        <param name="catalog">The class that <see cref="M:Microsoft.ML.OnnxExportExtensions.ConvertToOnnx(Microsoft.ML.ModelOperationsCatalog,Microsoft.ML.Core.Data.ITransformer,Microsoft.Data.DataView.IDataView)" /> attached to.</param>
        <param name="transform">The <see cref="T:Microsoft.ML.Core.Data.ITransformer" /> that will be converted into ONNX format.</param>
        <param name="inputData">The input of the specified transform.</param>
        <summary>
            Convert the specified <see cref="T:Microsoft.ML.Core.Data.ITransformer" /> to ONNX format. Note that ONNX uses Google's Protobuf so the returned value is a Protobuf object.
            </summary>
        <returns>An ONNX model equivalent to the converted ML.NET model.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>