<Type Name="DnnCatalog" FullName="Microsoft.ML.DnnCatalog">
  <TypeSignature Language="C#" Value="public static class DnnCatalog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DnnCatalog extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.DnnCatalog" />
  <TypeSignature Language="VB.NET" Value="Public Module DnnCatalog" />
  <TypeSignature Language="F#" Value="type DnnCatalog = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Dnn</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
        The <see cref="T:Microsoft.ML.Transforms.DnnTransformer" /> is used in following two scenarios.
        <list type="number"><item><description>
            Scoring with pretrained <a href="https://www.tensorflow.org/">TensorFlow</a> model: In this mode, the transform extracts hidden layers' values from a pre-trained Tensorflow model and uses outputs as features in ML.Net pipeline.
          </description></item><item><description>
            Retraining of <a href="https://www.tensorflow.org/">TensorFlow</a> model: In this mode, the transform retrains a TensorFlow model using the user data passed through ML.Net pipeline. Once the model is trained, it's outputs can be used as features for scoring.
          </description></item></list></summary>
    <remarks>
      <para>
          The DnnTransform extracts specified outputs using a pre-trained <a href="https://www.tensorflow.org">Tensorflow</a> model.
          Optionally, it can further retrain TensorFlow model on user data to adjust model parameters on the user data ( also know as "Transfer Learning").
        </para>
      <para>
          This transform requires the <a href="https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.ML.Dnn">Microsoft.ML.Dnn</a> nuget to be installed.
          The DnnTransform has the following assumptions regarding input, output, processing of data, and retraining.
        </para>
      <list type="number">
        <item>
          <description>
              For the input model, currently the DnnTransform supports both the <a href="https://www.tensorflow.org/mobile/prepare_models">Frozen model</a> format and also the <a href="https://www.tensorflow.org/guide/saved_model#build_and_load_a_savedmodel">SavedModel</a> format.
              However, retraining of the model is only possible for the <a href="https://www.tensorflow.org/guide/saved_model#build_and_load_a_savedmodel">SavedModel</a> format.
              <a href="https://www.tensorflow.org/guide/checkpoints">Checkpoint</a> format is currently neither supported for scoring nor for retraining due lack of TensorFlow C-API support for loading it.
            </description>
        </item>
        <item>
          <description>The transform supports scoring only one example at a time. However, retraining can be performed in batches.</description>
        </item>
        <item>
          <description>Advanced transfer learning/fine tuning scenarios (e.g. adding more layers into the network, changing the shape of inputs, freezing the layers which do not need to be updated during retraining process etc.) are currently not possible due to lack of support for network/graph manipulation inside the model using TensorFlow C-API.</description>
        </item>
        <item>
          <description>The name of input column(s) should match the name of input(s) in TensorFlow model.</description>
        </item>
        <item>
          <description>The name of each output column should match one of the operations in the TensorFlow graph.</description>
        </item>
        <item>
          <description>Currently, double, float, long, int, short, sbyte, ulong, uint, ushort, byte and bool are the acceptable data types for input/output.</description>
        </item>
        <item>
          <description>Upon success, the transform will introduce a new column in <see cref="T:Microsoft.ML.IDataView" /> corresponding to each output column specified.</description>
        </item>
      </list>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ImageClassification">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.DnnEstimator ImageClassification (this Microsoft.ML.ModelOperationsCatalog catalog, string featuresColumnName, string labelColumnName, string outputGraphPath = default, string scoreColumnName = &quot;Score&quot;, string predictedLabelColumnName = &quot;PredictedLabel&quot;, string checkpointName = &quot;_retrain_checkpoint&quot;, Microsoft.ML.Transforms.DnnEstimator.Architecture arch = Microsoft.ML.Transforms.DnnEstimator+Architecture.ResnetV2101, Microsoft.ML.Transforms.DnnEstimator.DnnFramework dnnFramework = Microsoft.ML.Transforms.DnnEstimator+DnnFramework.Tensorflow, int epoch = 10, int batchSize = 20, float learningRate = 0.01);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.DnnEstimator ImageClassification(class Microsoft.ML.ModelOperationsCatalog catalog, string featuresColumnName, string labelColumnName, string outputGraphPath, string scoreColumnName, string predictedLabelColumnName, string checkpointName, valuetype Microsoft.ML.Transforms.DnnEstimator/Architecture arch, valuetype Microsoft.ML.Transforms.DnnEstimator/DnnFramework dnnFramework, int32 epoch, int32 batchSize, float32 learningRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DnnCatalog.ImageClassification(Microsoft.ML.ModelOperationsCatalog,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.ML.Transforms.DnnEstimator.Architecture,Microsoft.ML.Transforms.DnnEstimator.DnnFramework,System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ImageClassification (catalog As ModelOperationsCatalog, featuresColumnName As String, labelColumnName As String, Optional outputGraphPath As String = null, Optional scoreColumnName As String = &quot;Score&quot;, Optional predictedLabelColumnName As String = &quot;PredictedLabel&quot;, Optional checkpointName As String = &quot;_retrain_checkpoint&quot;, Optional arch As DnnEstimator.Architecture = Microsoft.ML.Transforms.DnnEstimator+Architecture.ResnetV2101, Optional dnnFramework As DnnEstimator.DnnFramework = Microsoft.ML.Transforms.DnnEstimator+DnnFramework.Tensorflow, Optional epoch As Integer = 10, Optional batchSize As Integer = 20, Optional learningRate As Single = 0.01) As DnnEstimator" />
      <MemberSignature Language="F#" Value="static member ImageClassification : Microsoft.ML.ModelOperationsCatalog * string * string * string * string * string * string * Microsoft.ML.Transforms.DnnEstimator.Architecture * Microsoft.ML.Transforms.DnnEstimator.DnnFramework * int * int * single -&gt; Microsoft.ML.Transforms.DnnEstimator" Usage="Microsoft.ML.DnnCatalog.ImageClassification (catalog, featuresColumnName, labelColumnName, outputGraphPath, scoreColumnName, predictedLabelColumnName, checkpointName, arch, dnnFramework, epoch, batchSize, learningRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Dnn</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.DnnEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.ModelOperationsCatalog" RefType="this" />
        <Parameter Name="featuresColumnName" Type="System.String" />
        <Parameter Name="labelColumnName" Type="System.String" />
        <Parameter Name="outputGraphPath" Type="System.String" />
        <Parameter Name="scoreColumnName" Type="System.String" />
        <Parameter Name="predictedLabelColumnName" Type="System.String" />
        <Parameter Name="checkpointName" Type="System.String" />
        <Parameter Name="arch" Type="Microsoft.ML.Transforms.DnnEstimator+Architecture" />
        <Parameter Name="dnnFramework" Type="Microsoft.ML.Transforms.DnnEstimator+DnnFramework" />
        <Parameter Name="epoch" Type="System.Int32" />
        <Parameter Name="batchSize" Type="System.Int32" />
        <Parameter Name="learningRate" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="catalog" />
        <param name="featuresColumnName">The name of the input features column.</param>
        <param name="labelColumnName">The name of the labels column.</param>
        <param name="outputGraphPath">Optional name of the path where a copy new graph should be saved. The graph will be saved as part of model.</param>
        <param name="scoreColumnName">The name of the output score column.</param>
        <param name="predictedLabelColumnName">The name of the output predicted label columns.</param>
        <param name="checkpointName">The name of the prefix for checkpoint files.</param>
        <param name="arch">The architecture of the image recognition DNN model.</param>
        <param name="dnnFramework">The backend DNN framework to use, currently only Tensorflow is supported.</param>
        <param name="epoch">Number of training epochs.</param>
        <param name="batchSize">The batch size for training.</param>
        <param name="learningRate">The learning rate for training.</param>
        <summary>
            Performs image classification using transfer learning.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            The support for image classification is under preview.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrainDnnModel">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.DnnEstimator RetrainDnnModel (this Microsoft.ML.ModelOperationsCatalog catalog, string[] outputColumnNames, string[] inputColumnNames, string labelColumnName, string dnnLabel, string optimizationOperation, string modelPath, int epoch = 10, int batchSize = 20, string lossOperation = default, string metricOperation = default, string learningRateOperation = default, float learningRate = 0.01, bool addBatchDimensionInput = false, Microsoft.ML.Transforms.DnnEstimator.DnnFramework dnnFramework = Microsoft.ML.Transforms.DnnEstimator+DnnFramework.Tensorflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.DnnEstimator RetrainDnnModel(class Microsoft.ML.ModelOperationsCatalog catalog, string[] outputColumnNames, string[] inputColumnNames, string labelColumnName, string dnnLabel, string optimizationOperation, string modelPath, int32 epoch, int32 batchSize, string lossOperation, string metricOperation, string learningRateOperation, float32 learningRate, bool addBatchDimensionInput, valuetype Microsoft.ML.Transforms.DnnEstimator/DnnFramework dnnFramework) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.DnnCatalog.RetrainDnnModel(Microsoft.ML.ModelOperationsCatalog,System.String[],System.String[],System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Single,System.Boolean,Microsoft.ML.Transforms.DnnEstimator.DnnFramework)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RetrainDnnModel (catalog As ModelOperationsCatalog, outputColumnNames As String(), inputColumnNames As String(), labelColumnName As String, dnnLabel As String, optimizationOperation As String, modelPath As String, Optional epoch As Integer = 10, Optional batchSize As Integer = 20, Optional lossOperation As String = null, Optional metricOperation As String = null, Optional learningRateOperation As String = null, Optional learningRate As Single = 0.01, Optional addBatchDimensionInput As Boolean = false, Optional dnnFramework As DnnEstimator.DnnFramework = Microsoft.ML.Transforms.DnnEstimator+DnnFramework.Tensorflow) As DnnEstimator" />
      <MemberSignature Language="F#" Value="static member RetrainDnnModel : Microsoft.ML.ModelOperationsCatalog * string[] * string[] * string * string * string * string * int * int * string * string * string * single * bool * Microsoft.ML.Transforms.DnnEstimator.DnnFramework -&gt; Microsoft.ML.Transforms.DnnEstimator" Usage="Microsoft.ML.DnnCatalog.RetrainDnnModel (catalog, outputColumnNames, inputColumnNames, labelColumnName, dnnLabel, optimizationOperation, modelPath, epoch, batchSize, lossOperation, metricOperation, learningRateOperation, learningRate, addBatchDimensionInput, dnnFramework)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Dnn</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.DnnEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.ModelOperationsCatalog" RefType="this" />
        <Parameter Name="outputColumnNames" Type="System.String[]" />
        <Parameter Name="inputColumnNames" Type="System.String[]" />
        <Parameter Name="labelColumnName" Type="System.String" />
        <Parameter Name="dnnLabel" Type="System.String" />
        <Parameter Name="optimizationOperation" Type="System.String" />
        <Parameter Name="modelPath" Type="System.String" />
        <Parameter Name="epoch" Type="System.Int32" />
        <Parameter Name="batchSize" Type="System.Int32" />
        <Parameter Name="lossOperation" Type="System.String" />
        <Parameter Name="metricOperation" Type="System.String" />
        <Parameter Name="learningRateOperation" Type="System.String" />
        <Parameter Name="learningRate" Type="System.Single" />
        <Parameter Name="addBatchDimensionInput" Type="System.Boolean" />
        <Parameter Name="dnnFramework" Type="Microsoft.ML.Transforms.DnnEstimator+DnnFramework" />
      </Parameters>
      <Docs>
        <param name="catalog" />
        <param name="inputColumnNames"> The names of the model inputs.</param>
        <param name="outputColumnNames">The names of the requested model outputs.</param>
        <param name="labelColumnName">Name of the label column.</param>
        <param name="dnnLabel">Name of the node in DNN graph that is used as label during training in Dnn.
            The value of <paramref name="labelColumnName" /> from <see cref="T:Microsoft.ML.IDataView" /> is fed to this node.</param>
        <param name="optimizationOperation">The name of the optimization operation in the Dnn graph.</param>
        <param name="modelPath">Path to model file to retrain.</param>
        <param name="epoch">Number of training iterations.</param>
        <param name="batchSize">Number of samples to use for mini-batch training.</param>
        <param name="lossOperation">The name of the operation in the Dnn graph to compute training loss (Optional).</param>
        <param name="metricOperation">The name of the operation in the Dnn graph to compute performance metric during training (Optional).</param>
        <param name="learningRateOperation">The name of the operation in the Dnn graph which sets optimizer learning rate (Optional).</param>
        <param name="learningRate">Learning rate to use during optimization (Optional).</param>
        <param name="addBatchDimensionInput">Add a batch dimension to the input e.g. input = [224, 224, 3] =&gt; [-1, 224, 224, 3].
            This parameter is used to deal with models that have unknown shape but the internal operators in the model require data to have batch dimension as well.</param>
        <param name="dnnFramework" />
        <summary>
            Retrain the dnn model on new data.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            The support for retraining is under preview.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
