<Type Name="OnnxCatalog" FullName="Microsoft.ML.OnnxCatalog">
  <TypeSignature Language="C#" Value="public static class OnnxCatalog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit OnnxCatalog extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.OnnxCatalog" />
  <TypeSignature Language="VB.NET" Value="Public Module OnnxCatalog" />
  <TypeSignature Language="F#" Value="type OnnxCatalog = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplyOnnxModel">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel (this Microsoft.ML.TransformsCatalog catalog, Microsoft.ML.Transforms.Onnx.OnnxOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel(class Microsoft.ML.TransformsCatalog catalog, class Microsoft.ML.Transforms.Onnx.OnnxOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.OnnxCatalog.ApplyOnnxModel(Microsoft.ML.TransformsCatalog,Microsoft.ML.Transforms.Onnx.OnnxOptions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ApplyOnnxModel (catalog As TransformsCatalog, options As OnnxOptions) As OnnxScoringEstimator" />
      <MemberSignature Language="F#" Value="static member ApplyOnnxModel : Microsoft.ML.TransformsCatalog * Microsoft.ML.Transforms.Onnx.OnnxOptions -&gt; Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" Usage="Microsoft.ML.OnnxCatalog.ApplyOnnxModel (catalog, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="options" Type="Microsoft.ML.Transforms.Onnx.OnnxOptions" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="options">Options for the <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" />.</param>
        <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" /> using the specified <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxOptions" />.
            Please refer to <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" /> to learn more about the necessary dependencies,
            and how to run it on a GPU.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            If the options.GpuDeviceId value is <see langword="null" /> the <see cref="P:MLContext.GpuDeviceId" /> value will be used if it is not <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyOnnxModel">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel (this Microsoft.ML.TransformsCatalog catalog, string modelFile, int? gpuDeviceId = default, bool fallbackToCpu = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel(class Microsoft.ML.TransformsCatalog catalog, string modelFile, valuetype System.Nullable`1&lt;int32&gt; gpuDeviceId, bool fallbackToCpu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.OnnxCatalog.ApplyOnnxModel(Microsoft.ML.TransformsCatalog,System.String,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ApplyOnnxModel (catalog As TransformsCatalog, modelFile As String, Optional gpuDeviceId As Nullable(Of Integer) = Nothing, Optional fallbackToCpu As Boolean = false) As OnnxScoringEstimator" />
      <MemberSignature Language="F#" Value="static member ApplyOnnxModel : Microsoft.ML.TransformsCatalog * string * Nullable&lt;int&gt; * bool -&gt; Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" Usage="Microsoft.ML.OnnxCatalog.ApplyOnnxModel (catalog, modelFile, gpuDeviceId, fallbackToCpu)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" />
        <Parameter Name="modelFile" Type="System.String" />
        <Parameter Name="gpuDeviceId" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fallbackToCpu" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="modelFile">The path of the file containing the ONNX model.</param>
        <param name="gpuDeviceId">Optional GPU device ID to run execution on, <see langword="null" /> to run on CPU.</param>
        <param name="fallbackToCpu">If GPU error, raise exception or fallback to CPU.</param>
        <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" />, which applies a pre-trained Onnx model to the input column.
            Input/output columns are determined based on the input/output columns of the provided ONNX model.
            Please refer to <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" /> to learn more about the necessary dependencies,
            and how to run it on a GPU.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            The name/type of input columns must exactly match name/type of the ONNX model inputs.
            The name/type of the produced output columns will match name/type of the ONNX model outputs.
            If the gpuDeviceId value is <see langword="null" /> the <see cref="P:MLContext.GpuDeviceId" /> value will be used if it is not <see langword="null" />.
            </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[ApplyOnnxModel](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/ApplyOnnxModel.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ApplyOnnxModel">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel (this Microsoft.ML.TransformsCatalog catalog, string modelFile, System.Collections.Generic.IDictionary&lt;string,int[]&gt; shapeDictionary, int? gpuDeviceId = default, bool fallbackToCpu = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel(class Microsoft.ML.TransformsCatalog catalog, string modelFile, class System.Collections.Generic.IDictionary`2&lt;string, int32[]&gt; shapeDictionary, valuetype System.Nullable`1&lt;int32&gt; gpuDeviceId, bool fallbackToCpu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.OnnxCatalog.ApplyOnnxModel(Microsoft.ML.TransformsCatalog,System.String,System.Collections.Generic.IDictionary{System.String,System.Int32[]},System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ApplyOnnxModel (catalog As TransformsCatalog, modelFile As String, shapeDictionary As IDictionary(Of String, Integer()), Optional gpuDeviceId As Nullable(Of Integer) = Nothing, Optional fallbackToCpu As Boolean = false) As OnnxScoringEstimator" />
      <MemberSignature Language="F#" Value="static member ApplyOnnxModel : Microsoft.ML.TransformsCatalog * string * System.Collections.Generic.IDictionary&lt;string, int[]&gt; * Nullable&lt;int&gt; * bool -&gt; Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" Usage="Microsoft.ML.OnnxCatalog.ApplyOnnxModel (catalog, modelFile, shapeDictionary, gpuDeviceId, fallbackToCpu)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="modelFile" Type="System.String" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="shapeDictionary" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Int32[]&gt;" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="gpuDeviceId" Type="System.Nullable&lt;System.Int32&gt;" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="fallbackToCpu" Type="System.Boolean" Index="4" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="modelFile">The path of the file containing the ONNX model.</param>
        <param name="shapeDictionary">ONNX shapes to be used over those loaded from <paramref name="modelFile" />.
            For keys use names as stated in the ONNX model, e.g. "input". Stating the shapes with this parameter
            is particularly useful for working with variable dimension inputs and outputs.
            </param>
        <param name="gpuDeviceId">Optional GPU device ID to run execution on, <see langword="null" /> to run on CPU.</param>
        <param name="fallbackToCpu">If GPU error, raise exception or fallback to CPU.</param>
        <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" />, which applies a pre-trained Onnx model to the input column.
            Input/output columns are determined based on the input/output columns of the provided ONNX model.
            Please refer to <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" /> to learn more about the necessary dependencies,
            and how to run it on a GPU.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            The name/type of input columns must exactly match name/type of the ONNX model inputs.
            The name/type of the produced output columns will match name/type of the ONNX model outputs.
            If the gpuDeviceId value is <see langword="null" /> the <see cref="P:MLContext.GpuDeviceId" /> value will be used if it is not <see langword="null" />.
            </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[ApplyOnnxModel](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/ApplyOnnxModel.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ApplyOnnxModel">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, string modelFile, int? gpuDeviceId = default, bool fallbackToCpu = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, string modelFile, valuetype System.Nullable`1&lt;int32&gt; gpuDeviceId, bool fallbackToCpu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.OnnxCatalog.ApplyOnnxModel(Microsoft.ML.TransformsCatalog,System.String,System.String,System.String,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ApplyOnnxModel (catalog As TransformsCatalog, outputColumnName As String, inputColumnName As String, modelFile As String, Optional gpuDeviceId As Nullable(Of Integer) = Nothing, Optional fallbackToCpu As Boolean = false) As OnnxScoringEstimator" />
      <MemberSignature Language="F#" Value="static member ApplyOnnxModel : Microsoft.ML.TransformsCatalog * string * string * string * Nullable&lt;int&gt; * bool -&gt; Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" Usage="Microsoft.ML.OnnxCatalog.ApplyOnnxModel (catalog, outputColumnName, inputColumnName, modelFile, gpuDeviceId, fallbackToCpu)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="modelFile" Type="System.String" />
        <Parameter Name="gpuDeviceId" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fallbackToCpu" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">The output column resulting from the transformation.</param>
        <param name="inputColumnName">The input column.</param>
        <param name="modelFile">The path of the file containing the ONNX model.</param>
        <param name="gpuDeviceId">Optional GPU device ID to run execution on, <see langword="null" /> to run on CPU.</param>
        <param name="fallbackToCpu">If GPU error, raise exception or fallback to CPU.</param>
        <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" />, which applies a pre-trained Onnx model to the <paramref name="inputColumnName" /> column.
            Please refer to <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" /> to learn more about the necessary dependencies,
            and how to run it on a GPU.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            If the gpuDeviceId value is <see langword="null" /> the <see cref="P:MLContext.GpuDeviceId" /> value will be used if it is not <see langword="null" />.
            </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[ApplyOnnxModel](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/ApplyONNXModelWithInMemoryImages.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ApplyOnnxModel">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel (this Microsoft.ML.TransformsCatalog catalog, string[] outputColumnNames, string[] inputColumnNames, string modelFile, int? gpuDeviceId = default, bool fallbackToCpu = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel(class Microsoft.ML.TransformsCatalog catalog, string[] outputColumnNames, string[] inputColumnNames, string modelFile, valuetype System.Nullable`1&lt;int32&gt; gpuDeviceId, bool fallbackToCpu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.OnnxCatalog.ApplyOnnxModel(Microsoft.ML.TransformsCatalog,System.String[],System.String[],System.String,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ApplyOnnxModel (catalog As TransformsCatalog, outputColumnNames As String(), inputColumnNames As String(), modelFile As String, Optional gpuDeviceId As Nullable(Of Integer) = Nothing, Optional fallbackToCpu As Boolean = false) As OnnxScoringEstimator" />
      <MemberSignature Language="F#" Value="static member ApplyOnnxModel : Microsoft.ML.TransformsCatalog * string[] * string[] * string * Nullable&lt;int&gt; * bool -&gt; Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" Usage="Microsoft.ML.OnnxCatalog.ApplyOnnxModel (catalog, outputColumnNames, inputColumnNames, modelFile, gpuDeviceId, fallbackToCpu)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" />
        <Parameter Name="outputColumnNames" Type="System.String[]" />
        <Parameter Name="inputColumnNames" Type="System.String[]" />
        <Parameter Name="modelFile" Type="System.String" />
        <Parameter Name="gpuDeviceId" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fallbackToCpu" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnNames">The output columns resulting from the transformation.</param>
        <param name="inputColumnNames">The input columns.</param>
        <param name="modelFile">The path of the file containing the ONNX model.</param>
        <param name="gpuDeviceId">Optional GPU device ID to run execution on, <see langword="null" /> to run on CPU.</param>
        <param name="fallbackToCpu">If GPU error, raise exception or fallback to CPU.</param>
        <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" />, which applies a pre-trained Onnx model to the <paramref name="inputColumnNames" /> columns.
            Please refer to <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" /> to learn more about the necessary dependencies,
            and how to run it on a GPU.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            If the gpuDeviceId value is <see langword="null" /> the <see cref="P:MLContext.GpuDeviceId" /> value will be used if it is not <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyOnnxModel">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, string modelFile, System.Collections.Generic.IDictionary&lt;string,int[]&gt; shapeDictionary, int? gpuDeviceId = default, bool fallbackToCpu = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, string modelFile, class System.Collections.Generic.IDictionary`2&lt;string, int32[]&gt; shapeDictionary, valuetype System.Nullable`1&lt;int32&gt; gpuDeviceId, bool fallbackToCpu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.OnnxCatalog.ApplyOnnxModel(Microsoft.ML.TransformsCatalog,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Int32[]},System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ApplyOnnxModel (catalog As TransformsCatalog, outputColumnName As String, inputColumnName As String, modelFile As String, shapeDictionary As IDictionary(Of String, Integer()), Optional gpuDeviceId As Nullable(Of Integer) = Nothing, Optional fallbackToCpu As Boolean = false) As OnnxScoringEstimator" />
      <MemberSignature Language="F#" Value="static member ApplyOnnxModel : Microsoft.ML.TransformsCatalog * string * string * string * System.Collections.Generic.IDictionary&lt;string, int[]&gt; * Nullable&lt;int&gt; * bool -&gt; Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" Usage="Microsoft.ML.OnnxCatalog.ApplyOnnxModel (catalog, outputColumnName, inputColumnName, modelFile, shapeDictionary, gpuDeviceId, fallbackToCpu)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="outputColumnName" Type="System.String" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="inputColumnName" Type="System.String" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="modelFile" Type="System.String" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="shapeDictionary" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Int32[]&gt;" Index="4" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="gpuDeviceId" Type="System.Nullable&lt;System.Int32&gt;" Index="5" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="fallbackToCpu" Type="System.Boolean" Index="6" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">The output column resulting from the transformation.</param>
        <param name="inputColumnName">The input column.</param>
        <param name="modelFile">The path of the file containing the ONNX model.</param>
        <param name="shapeDictionary">ONNX shapes to be used over those loaded from <paramref name="modelFile" />.
            For keys use names as stated in the ONNX model, e.g. "input". Stating the shapes with this parameter
            is particularly useful for working with variable dimension inputs and outputs.
            </param>
        <param name="gpuDeviceId">Optional GPU device ID to run execution on, <see langword="null" /> to run on CPU.</param>
        <param name="fallbackToCpu">If GPU error, raise exception or fallback to CPU.</param>
        <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" />, which applies a pre-trained Onnx model to the <paramref name="inputColumnName" /> column.
            Please refer to <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" /> to learn more about the necessary dependencies,
            and how to run it on a GPU.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            If the gpuDeviceId value is <see langword="null" /> the <see cref="P:MLContext.GpuDeviceId" /> value will be used if it is not <see langword="null" />.
            </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[ApplyOnnxModel](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/ApplyONNXModelWithInMemoryImages.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ApplyOnnxModel">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel (this Microsoft.ML.TransformsCatalog catalog, string[] outputColumnNames, string[] inputColumnNames, string modelFile, System.Collections.Generic.IDictionary&lt;string,int[]&gt; shapeDictionary, int? gpuDeviceId = default, bool fallbackToCpu = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel(class Microsoft.ML.TransformsCatalog catalog, string[] outputColumnNames, string[] inputColumnNames, string modelFile, class System.Collections.Generic.IDictionary`2&lt;string, int32[]&gt; shapeDictionary, valuetype System.Nullable`1&lt;int32&gt; gpuDeviceId, bool fallbackToCpu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.OnnxCatalog.ApplyOnnxModel(Microsoft.ML.TransformsCatalog,System.String[],System.String[],System.String,System.Collections.Generic.IDictionary{System.String,System.Int32[]},System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ApplyOnnxModel (catalog As TransformsCatalog, outputColumnNames As String(), inputColumnNames As String(), modelFile As String, shapeDictionary As IDictionary(Of String, Integer()), Optional gpuDeviceId As Nullable(Of Integer) = Nothing, Optional fallbackToCpu As Boolean = false) As OnnxScoringEstimator" />
      <MemberSignature Language="F#" Value="static member ApplyOnnxModel : Microsoft.ML.TransformsCatalog * string[] * string[] * string * System.Collections.Generic.IDictionary&lt;string, int[]&gt; * Nullable&lt;int&gt; * bool -&gt; Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" Usage="Microsoft.ML.OnnxCatalog.ApplyOnnxModel (catalog, outputColumnNames, inputColumnNames, modelFile, shapeDictionary, gpuDeviceId, fallbackToCpu)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="outputColumnNames" Type="System.String[]" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="inputColumnNames" Type="System.String[]" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="modelFile" Type="System.String" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="shapeDictionary" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Int32[]&gt;" Index="4" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="gpuDeviceId" Type="System.Nullable&lt;System.Int32&gt;" Index="5" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="fallbackToCpu" Type="System.Boolean" Index="6" FrameworkAlternate="ml-dotnet;ml-dotnet-1.3.1;ml-dotnet-1.4.0;ml-dotnet-1.5.0;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnNames">The output columns resulting from the transformation.</param>
        <param name="inputColumnNames">The input columns.</param>
        <param name="modelFile">The path of the file containing the ONNX model.</param>
        <param name="shapeDictionary">ONNX shapes to be used over those loaded from <paramref name="modelFile" />.
            For keys use names as stated in the ONNX model, e.g. "input". Stating the shapes with this parameter
            is particularly useful for working with variable dimension inputs and outputs.
            </param>
        <param name="gpuDeviceId">Optional GPU device ID to run execution on, <see langword="null" /> to run on CPU.</param>
        <param name="fallbackToCpu">If GPU error, raise exception or fallback to CPU.</param>
        <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" />, which applies a pre-trained Onnx model to the <paramref name="inputColumnNames" /> columns.
            Please refer to <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" /> to learn more about the necessary dependencies,
            and how to run it on a GPU.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            If the gpuDeviceId value is <see langword="null" /> the <see cref="P:MLContext.GpuDeviceId" /> value will be used if it is not <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyOnnxModel">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel (this Microsoft.ML.TransformsCatalog catalog, string[] outputColumnNames, string[] inputColumnNames, string modelFile, System.Collections.Generic.IDictionary&lt;string,int[]&gt; shapeDictionary, int? gpuDeviceId = default, bool fallbackToCpu = false, int recursionLimit = 100);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator ApplyOnnxModel(class Microsoft.ML.TransformsCatalog catalog, string[] outputColumnNames, string[] inputColumnNames, string modelFile, class System.Collections.Generic.IDictionary`2&lt;string, int32[]&gt; shapeDictionary, valuetype System.Nullable`1&lt;int32&gt; gpuDeviceId, bool fallbackToCpu, int32 recursionLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.OnnxCatalog.ApplyOnnxModel(Microsoft.ML.TransformsCatalog,System.String[],System.String[],System.String,System.Collections.Generic.IDictionary{System.String,System.Int32[]},System.Nullable{System.Int32},System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ApplyOnnxModel (catalog As TransformsCatalog, outputColumnNames As String(), inputColumnNames As String(), modelFile As String, shapeDictionary As IDictionary(Of String, Integer()), Optional gpuDeviceId As Nullable(Of Integer) = Nothing, Optional fallbackToCpu As Boolean = false, Optional recursionLimit As Integer = 100) As OnnxScoringEstimator" />
      <MemberSignature Language="F#" Value="static member ApplyOnnxModel : Microsoft.ML.TransformsCatalog * string[] * string[] * string * System.Collections.Generic.IDictionary&lt;string, int[]&gt; * Nullable&lt;int&gt; * bool * int -&gt; Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" Usage="Microsoft.ML.OnnxCatalog.ApplyOnnxModel (catalog, outputColumnNames, inputColumnNames, modelFile, shapeDictionary, gpuDeviceId, fallbackToCpu, recursionLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" Index="0" FrameworkAlternate="ml-dotnet;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="outputColumnNames" Type="System.String[]" Index="1" FrameworkAlternate="ml-dotnet;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="inputColumnNames" Type="System.String[]" Index="2" FrameworkAlternate="ml-dotnet;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="modelFile" Type="System.String" Index="3" FrameworkAlternate="ml-dotnet;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="shapeDictionary" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Int32[]&gt;" Index="4" FrameworkAlternate="ml-dotnet;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="gpuDeviceId" Type="System.Nullable&lt;System.Int32&gt;" Index="5" FrameworkAlternate="ml-dotnet;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="fallbackToCpu" Type="System.Boolean" Index="6" FrameworkAlternate="ml-dotnet;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
        <Parameter Name="recursionLimit" Type="System.Int32" Index="7" FrameworkAlternate="ml-dotnet;ml-dotnet-1.6.0;ml-dotnet-1.7.0;ml-dotnet-2.0.0;ml-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnNames">The output columns resulting from the transformation.</param>
        <param name="inputColumnNames">The input columns.</param>
        <param name="modelFile">The path of the file containing the ONNX model.</param>
        <param name="shapeDictionary">ONNX shapes to be used over those loaded from <paramref name="modelFile" />.
            For keys use names as stated in the ONNX model, e.g. "input". Stating the shapes with this parameter
            is particularly useful for working with variable dimension inputs and outputs.
            </param>
        <param name="gpuDeviceId">Optional GPU device ID to run execution on, <see langword="null" /> to run on CPU.</param>
        <param name="fallbackToCpu">If GPU error, raise exception or fallback to CPU.</param>
        <param name="recursionLimit">Optional, specifies the Protobuf CodedInputStream recursion limit. Default value is 100.</param>
        <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" />, which applies a pre-trained Onnx model to the <paramref name="inputColumnNames" /> columns.
            Please refer to <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" /> to learn more about the necessary dependencies,
            and how to run it on a GPU.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            If the gpuDeviceId value is <see langword="null" /> the <see cref="P:MLContext.GpuDeviceId" /> value will be used if it is not <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DnnFeaturizeImage">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerEstimator DnnFeaturizeImage (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, Func&lt;Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerInput,Microsoft.ML.Data.EstimatorChain&lt;Microsoft.ML.Transforms.ColumnCopyingTransformer&gt;&gt; modelFactory, string inputColumnName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerEstimator DnnFeaturizeImage(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, class System.Func`2&lt;class Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerInput, class Microsoft.ML.Data.EstimatorChain`1&lt;class Microsoft.ML.Transforms.ColumnCopyingTransformer&gt;&gt; modelFactory, string inputColumnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.OnnxCatalog.DnnFeaturizeImage(Microsoft.ML.TransformsCatalog,System.String,System.Func{Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerInput,Microsoft.ML.Data.EstimatorChain{Microsoft.ML.Transforms.ColumnCopyingTransformer}},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DnnFeaturizeImage (catalog As TransformsCatalog, outputColumnName As String, modelFactory As Func(Of DnnImageFeaturizerInput, EstimatorChain(Of ColumnCopyingTransformer)), Optional inputColumnName As String = Nothing) As DnnImageFeaturizerEstimator" />
      <MemberSignature Language="F#" Value="static member DnnFeaturizeImage : Microsoft.ML.TransformsCatalog * string * Func&lt;Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerInput, Microsoft.ML.Data.EstimatorChain&lt;Microsoft.ML.Transforms.ColumnCopyingTransformer&gt;&gt; * string -&gt; Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerEstimator" Usage="Microsoft.ML.OnnxCatalog.DnnFeaturizeImage (catalog, outputColumnName, modelFactory, inputColumnName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.OnnxTransformer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="modelFactory" Type="System.Func&lt;Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerInput,Microsoft.ML.Data.EstimatorChain&lt;Microsoft.ML.Transforms.ColumnCopyingTransformer&gt;&gt;" />
        <Parameter Name="inputColumnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">The name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="modelFactory">An extension method on the <see cref="T:Microsoft.ML.Transforms.Onnx.DnnImageModelSelector" /> that creates a chain of two
            <see cref="T:Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator" /> (one for preprocessing and one with a pretrained image DNN) with specific models
            included in a package together with that extension method.</param>
        <param name="inputColumnName">Name of column to transform.
            If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <summary>
            Create <see cref="T:Microsoft.ML.Transforms.Onnx.DnnImageFeaturizerEstimator" />, which applies one of the pre-trained DNN models in
            <see cref="T:Microsoft.ML.Transforms.Onnx.DnnImageModelSelector" /> to featurize an image.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[DnnFeaturizeImage](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/ImageAnalytics/DnnFeaturizeImage.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>
