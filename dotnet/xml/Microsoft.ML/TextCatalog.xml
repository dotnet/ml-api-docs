<Type Name="TextCatalog" FullName="Microsoft.ML.TextCatalog">
  <TypeSignature Language="C#" Value="public static class TextCatalog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TextCatalog extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.TextCatalog" />
  <TypeSignature Language="VB.NET" Value="Public Module TextCatalog" />
  <TypeSignature Language="F#" Value="type TextCatalog = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The catalog of text related transformations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplyWordEmbedding">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordEmbeddingEstimator ApplyWordEmbedding (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null, Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind modelKind = Microsoft.ML.Transforms.Text.WordEmbeddingEstimator+PretrainedModelKind.SentimentSpecificWordEmbedding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordEmbeddingEstimator ApplyWordEmbedding(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string inputColumnName, valuetype Microsoft.ML.Transforms.Text.WordEmbeddingEstimator/PretrainedModelKind modelKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ApplyWordEmbedding(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ApplyWordEmbedding (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, Optional inputColumnName As String = null, Optional modelKind As WordEmbeddingEstimator.PretrainedModelKind = Microsoft.ML.Transforms.Text.WordEmbeddingEstimator+PretrainedModelKind.SentimentSpecificWordEmbedding) As WordEmbeddingEstimator" />
      <MemberSignature Language="F#" Value="static member ApplyWordEmbedding : Microsoft.ML.TransformsCatalog.TextTransforms * string * string * Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind -&gt; Microsoft.ML.Transforms.Text.WordEmbeddingEstimator" Usage="Microsoft.ML.TextCatalog.ApplyWordEmbedding (catalog, outputColumnName, inputColumnName, modelKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordEmbeddingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="modelKind" Type="Microsoft.ML.Transforms.Text.WordEmbeddingEstimator+PretrainedModelKind" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="modelKind">The embeddings <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind" /> to use. </param>
        <summary>
        Word Embeddings transform is a text featurizer which converts vectors of text tokens into sentence vectors using a pre-trained model.
      </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>WordEmbeddings wrap different embedding models, such as GloVe. Users can specify which embedding to use. 
        The available options are various versions of <a href="https://nlp.stanford.edu/projects/glove/">GloVe Models</a>, <a href="https://en.wikipedia.org/wiki/FastText">fastText</a>, and <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">SSWE</a>.
        </para>
          <para>Note: As WordEmbedding requires a column with text vector, for example, 'this', 'is', 'good', users need to create an input column by
          using the output_tokens=True for TextTransform to convert a column with sentences like 'This is good' into 'this', 'is', 'good'.
          The suffix of '_TransformedText' is added to the original column name to create the output token column. For instance if the input column is 'body',
          the output tokens column is named 'body_TransformedText'.</para>
          <para>
          WordEmbedding produces an output column of floats with size of 3 * dimensionality of model. For example if you use GloVe50D, which itself is 50 dimensional, we will produce 150 features.
          First 1/3rd of slots would contain minimum values of encountered embeddings, second 1/3rd will contain average values of encountered embeddings
          and last 1/3rd of slots would contain maximum values of encountered embeddings. The min/max provides a bounding hyper-rectangle for the words in the word embedding space.
          This can assist for longer phrases where the average of many words drowns out the useful signal and your label is reasonably correlated with a dimension of the embedding space.
        </para>
          <para>
          License attributes for pretrained models:
          <list type="bullet"><item><description>
                "fastText Wikipedia 300D" by Facebook, Inc. is licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA 3.0</a> based on:
                P. Bojanowski*, E. Grave*, A. Joulin, T. Mikolov,<a href="https://arxiv.org/abs/1607.04606">Enriching Word Vectors with Subword Information</a>
                More information can be found <a href="https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md">here</a>.
              </description></item><item><description>
                GloVe models by Stanford University, or (Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. 
                <a href="https://nlp.stanford.edu/pubs/glove.pdf">GloVe: Global Vectors for Word Representation</a>) is licensed under <a href="https://opendatacommons.org/licenses/pddl/1.0/">PDDL</a>.
                More information can be found <a href="https://nlp.stanford.edu/projects/glove/">here</a>. 
                Repository can be found <a href="https://github.com/stanfordnlp/GloVe">here</a>.
              </description></item></list></para>
        </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[FeaturizeText](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/WordEmbeddingTransform.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ApplyWordEmbedding">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordEmbeddingEstimator ApplyWordEmbedding (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string customModelFile, string inputColumnName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordEmbeddingEstimator ApplyWordEmbedding(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string customModelFile, string inputColumnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ApplyWordEmbedding(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ApplyWordEmbedding (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, customModelFile As String, Optional inputColumnName As String = null) As WordEmbeddingEstimator" />
      <MemberSignature Language="F#" Value="static member ApplyWordEmbedding : Microsoft.ML.TransformsCatalog.TextTransforms * string * string * string -&gt; Microsoft.ML.Transforms.Text.WordEmbeddingEstimator" Usage="Microsoft.ML.TextCatalog.ApplyWordEmbedding (catalog, outputColumnName, customModelFile, inputColumnName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordEmbeddingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="customModelFile" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="customModelFile">The path of the pre-trained embeedings model to use. </param>
        <param name="inputColumnName">Name of the column to transform.</param>
        <summary>
        Word Embeddings transform is a text featurizer which converts vectors of text tokens into sentence vectors using a pre-trained model.
      </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>WordEmbeddings wrap different embedding models, such as GloVe. Users can specify which embedding to use. 
        The available options are various versions of <a href="https://nlp.stanford.edu/projects/glove/">GloVe Models</a>, <a href="https://en.wikipedia.org/wiki/FastText">fastText</a>, and <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">SSWE</a>.
        </para>
          <para>Note: As WordEmbedding requires a column with text vector, for example, 'this', 'is', 'good', users need to create an input column by
          using the output_tokens=True for TextTransform to convert a column with sentences like 'This is good' into 'this', 'is', 'good'.
          The suffix of '_TransformedText' is added to the original column name to create the output token column. For instance if the input column is 'body',
          the output tokens column is named 'body_TransformedText'.</para>
          <para>
          WordEmbedding produces an output column of floats with size of 3 * dimensionality of model. For example if you use GloVe50D, which itself is 50 dimensional, we will produce 150 features.
          First 1/3rd of slots would contain minimum values of encountered embeddings, second 1/3rd will contain average values of encountered embeddings
          and last 1/3rd of slots would contain maximum values of encountered embeddings. The min/max provides a bounding hyper-rectangle for the words in the word embedding space.
          This can assist for longer phrases where the average of many words drowns out the useful signal and your label is reasonably correlated with a dimension of the embedding space.
        </para>
          <para>
          License attributes for pretrained models:
          <list type="bullet"><item><description>
                "fastText Wikipedia 300D" by Facebook, Inc. is licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA 3.0</a> based on:
                P. Bojanowski*, E. Grave*, A. Joulin, T. Mikolov,<a href="https://arxiv.org/abs/1607.04606">Enriching Word Vectors with Subword Information</a>
                More information can be found <a href="https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md">here</a>.
              </description></item><item><description>
                GloVe models by Stanford University, or (Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. 
                <a href="https://nlp.stanford.edu/pubs/glove.pdf">GloVe: Global Vectors for Word Representation</a>) is licensed under <a href="https://opendatacommons.org/licenses/pddl/1.0/">PDDL</a>.
                More information can be found <a href="https://nlp.stanford.edu/projects/glove/">here</a>. 
                Repository can be found <a href="https://github.com/stanfordnlp/GloVe">here</a>.
              </description></item></list></para>
        </remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[FeaturizeText](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/WordEmbeddingTransform.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="FeaturizeText">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.TextFeaturizingEstimator FeaturizeText (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.TextFeaturizingEstimator FeaturizeText(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string inputColumnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.FeaturizeText(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FeaturizeText (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, Optional inputColumnName As String = null) As TextFeaturizingEstimator" />
      <MemberSignature Language="F#" Value="static member FeaturizeText : Microsoft.ML.TransformsCatalog.TextTransforms * string * string -&gt; Microsoft.ML.Transforms.Text.TextFeaturizingEstimator" Usage="Microsoft.ML.TextCatalog.FeaturizeText (catalog, outputColumnName, inputColumnName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.TextFeaturizingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <summary>
            Transform a text column into featurized float array that represents counts of ngrams and char-grams.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FeaturizeText">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.TextFeaturizingEstimator FeaturizeText (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options options, params string[] inputColumnNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.TextFeaturizingEstimator FeaturizeText(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, class Microsoft.ML.Transforms.Text.TextFeaturizingEstimator/Options options, string[] inputColumnNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.FeaturizeText(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options,System.String[])" />
      <MemberSignature Language="F#" Value="static member FeaturizeText : Microsoft.ML.TransformsCatalog.TextTransforms * string * Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options * string[] -&gt; Microsoft.ML.Transforms.Text.TextFeaturizingEstimator" Usage="Microsoft.ML.TextCatalog.FeaturizeText (catalog, outputColumnName, options, inputColumnNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.TextFeaturizingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.ML.Transforms.Text.TextFeaturizingEstimator+Options" />
        <Parameter Name="inputColumnNames" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="ml-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnNames" />.</param>
        <param name="options">Advanced options to the algorithm.</param>
        <param name="inputColumnNames">Name of the columns to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <summary>
            Transform several text columns into featurized float array that represents counts of ngrams and char-grams.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[FeaturizeText](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/TextTransform.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="LatentDirichletAllocation">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator LatentDirichletAllocation (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null, int numberOfTopics = 100, float alphaSum = 100, float beta = 0.01, int samplingStepCount = 4, int maximumNumberOfIterations = 200, int likelihoodInterval = 5, int numberOfThreads = 0, int maximumTokenCountPerDocument = 512, int numberOfSummaryTermsPerTopic = 10, int numberOfBurninIterations = 10, bool resetRandomGenerator = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator LatentDirichletAllocation(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string inputColumnName, int32 numberOfTopics, float32 alphaSum, float32 beta, int32 samplingStepCount, int32 maximumNumberOfIterations, int32 likelihoodInterval, int32 numberOfThreads, int32 maximumTokenCountPerDocument, int32 numberOfSummaryTermsPerTopic, int32 numberOfBurninIterations, bool resetRandomGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.LatentDirichletAllocation(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LatentDirichletAllocation (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, Optional inputColumnName As String = null, Optional numberOfTopics As Integer = 100, Optional alphaSum As Single = 100, Optional beta As Single = 0.01, Optional samplingStepCount As Integer = 4, Optional maximumNumberOfIterations As Integer = 200, Optional likelihoodInterval As Integer = 5, Optional numberOfThreads As Integer = 0, Optional maximumTokenCountPerDocument As Integer = 512, Optional numberOfSummaryTermsPerTopic As Integer = 10, Optional numberOfBurninIterations As Integer = 10, Optional resetRandomGenerator As Boolean = false) As LatentDirichletAllocationEstimator" />
      <MemberSignature Language="F#" Value="static member LatentDirichletAllocation : Microsoft.ML.TransformsCatalog.TextTransforms * string * string * int * single * single * int * int * int * int * int * int * int * bool -&gt; Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator" Usage="Microsoft.ML.TextCatalog.LatentDirichletAllocation (catalog, outputColumnName, inputColumnName, numberOfTopics, alphaSum, beta, samplingStepCount, maximumNumberOfIterations, likelihoodInterval, numberOfThreads, maximumTokenCountPerDocument, numberOfSummaryTermsPerTopic, numberOfBurninIterations, resetRandomGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="numberOfTopics" Type="System.Int32" />
        <Parameter Name="alphaSum" Type="System.Single" />
        <Parameter Name="beta" Type="System.Single" />
        <Parameter Name="samplingStepCount" Type="System.Int32" />
        <Parameter Name="maximumNumberOfIterations" Type="System.Int32" />
        <Parameter Name="likelihoodInterval" Type="System.Int32" />
        <Parameter Name="numberOfThreads" Type="System.Int32" />
        <Parameter Name="maximumTokenCountPerDocument" Type="System.Int32" />
        <Parameter Name="numberOfSummaryTermsPerTopic" Type="System.Int32" />
        <Parameter Name="numberOfBurninIterations" Type="System.Int32" />
        <Parameter Name="resetRandomGenerator" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="numberOfTopics">The number of topics.</param>
        <param name="alphaSum">Dirichlet prior on document-topic vectors.</param>
        <param name="beta">Dirichlet prior on vocab-topic vectors.</param>
        <param name="samplingStepCount">Number of Metropolis Hasting step.</param>
        <param name="maximumNumberOfIterations">Number of iterations.</param>
        <param name="likelihoodInterval">Compute log likelihood over local dataset on this iteration interval.</param>
        <param name="numberOfThreads">The number of training threads. Default value depends on number of logical processors.</param>
        <param name="maximumTokenCountPerDocument">The threshold of maximum count of tokens per doc.</param>
        <param name="numberOfSummaryTermsPerTopic">The number of words to summarize the topic.</param>
        <param name="numberOfBurninIterations">The number of burn-in iterations.</param>
        <param name="resetRandomGenerator">Reset the random number generator for each document.</param>
        <summary>
            Uses <a href="https://arxiv.org/abs/1412.1576">LightLDA</a> to transform a document (represented as a vector of floats)
            into a vector of floats over a set of topics.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[LatentDirichletAllocation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/LdaTransform.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="NormalizeText">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.TextNormalizingEstimator NormalizeText (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null, Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseMode caseMode = Microsoft.ML.Transforms.Text.TextNormalizingEstimator+CaseMode.Lower, bool keepDiacritics = false, bool keepPunctuations = true, bool keepNumbers = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.TextNormalizingEstimator NormalizeText(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string inputColumnName, valuetype Microsoft.ML.Transforms.Text.TextNormalizingEstimator/CaseMode caseMode, bool keepDiacritics, bool keepPunctuations, bool keepNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.NormalizeText(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseMode,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member NormalizeText : Microsoft.ML.TransformsCatalog.TextTransforms * string * string * Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseMode * bool * bool * bool -&gt; Microsoft.ML.Transforms.Text.TextNormalizingEstimator" Usage="Microsoft.ML.TextCatalog.NormalizeText (catalog, outputColumnName, inputColumnName, caseMode, keepDiacritics, keepPunctuations, keepNumbers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.TextNormalizingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="caseMode" Type="Microsoft.ML.Transforms.Text.TextNormalizingEstimator+CaseMode" />
        <Parameter Name="keepDiacritics" Type="System.Boolean" />
        <Parameter Name="keepPunctuations" Type="System.Boolean" />
        <Parameter Name="keepNumbers" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="caseMode">Casing text using the rules of the invariant culture.</param>
        <param name="keepDiacritics">Whether to keep diacritical marks or remove them.</param>
        <param name="keepPunctuations">Whether to keep punctuation marks or remove them.</param>
        <param name="keepNumbers">Whether to keep numbers or remove them.</param>
        <summary>
            Normalizes incoming text in <paramref name="inputColumnName" /> by changing case, removing diacritical marks, punctuation marks and/or numbers
            and outputs new text as <paramref name="outputColumnName" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceHashedNgrams">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.NgramHashingEstimator ProduceHashedNgrams (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null, int numberOfBits = 16, int ngramLength = 2, int skipLength = 0, bool useAllLengths = true, uint seed = 314489979, bool useOrderedHashing = true, int maximumNumberOfInverts = 0, bool rehashUnigrams = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.NgramHashingEstimator ProduceHashedNgrams(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string inputColumnName, int32 numberOfBits, int32 ngramLength, int32 skipLength, bool useAllLengths, unsigned int32 seed, bool useOrderedHashing, int32 maximumNumberOfInverts, bool rehashUnigrams) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceHashedNgrams(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceHashedNgrams (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, Optional inputColumnName As String = null, Optional numberOfBits As Integer = 16, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional useAllLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional useOrderedHashing As Boolean = true, Optional maximumNumberOfInverts As Integer = 0, Optional rehashUnigrams As Boolean = false) As NgramHashingEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceHashedNgrams : Microsoft.ML.TransformsCatalog.TextTransforms * string * string * int * int * int * bool * uint32 * bool * int * bool -&gt; Microsoft.ML.Transforms.Text.NgramHashingEstimator" Usage="Microsoft.ML.TextCatalog.ProduceHashedNgrams (catalog, outputColumnName, inputColumnName, numberOfBits, ngramLength, skipLength, useAllLengths, seed, useOrderedHashing, maximumNumberOfInverts, rehashUnigrams)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.NgramHashingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="numberOfBits" Type="System.Int32" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="useAllLengths" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.UInt32" />
        <Parameter Name="useOrderedHashing" Type="System.Boolean" />
        <Parameter Name="maximumNumberOfInverts" Type="System.Int32" />
        <Parameter Name="rehashUnigrams" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
             Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
             <paramref name="maximumNumberOfInverts" /> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
             <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        <param name="rehashUnigrams">Whether to rehash unigrams.</param>
        <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumnName" />
             and outputs ngram vector as <paramref name="outputColumnName" /><see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" /> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" />
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> tokenizes text internally.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceHashedNgrams">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.NgramHashingEstimator ProduceHashedNgrams (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string[] inputColumnNames = null, int numberOfBits = 16, int ngramLength = 2, int skipLength = 0, bool useAllLengths = true, uint seed = 314489979, bool useOrderedHashing = true, int maximumNumberOfInverts = 0, bool rehashUnigrams = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.NgramHashingEstimator ProduceHashedNgrams(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string[] inputColumnNames, int32 numberOfBits, int32 ngramLength, int32 skipLength, bool useAllLengths, unsigned int32 seed, bool useOrderedHashing, int32 maximumNumberOfInverts, bool rehashUnigrams) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceHashedNgrams(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceHashedNgrams (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, Optional inputColumnNames As String() = null, Optional numberOfBits As Integer = 16, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional useAllLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional useOrderedHashing As Boolean = true, Optional maximumNumberOfInverts As Integer = 0, Optional rehashUnigrams As Boolean = false) As NgramHashingEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceHashedNgrams : Microsoft.ML.TransformsCatalog.TextTransforms * string * string[] * int * int * int * bool * uint32 * bool * int * bool -&gt; Microsoft.ML.Transforms.Text.NgramHashingEstimator" Usage="Microsoft.ML.TextCatalog.ProduceHashedNgrams (catalog, outputColumnName, inputColumnNames, numberOfBits, ngramLength, skipLength, useAllLengths, seed, useOrderedHashing, maximumNumberOfInverts, rehashUnigrams)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.NgramHashingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnNames" Type="System.String[]" />
        <Parameter Name="numberOfBits" Type="System.Int32" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="useAllLengths" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.UInt32" />
        <Parameter Name="useOrderedHashing" Type="System.Boolean" />
        <Parameter Name="maximumNumberOfInverts" Type="System.Int32" />
        <Parameter Name="rehashUnigrams" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnNames" />.</param>
        <param name="inputColumnNames">Names of the columns to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
             Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
             <paramref name="maximumNumberOfInverts" /> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
             <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        <param name="rehashUnigrams">Whether to rehash unigrams.</param>
        <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumnNames" />
             and outputs ngram vector as <paramref name="outputColumnName" /><see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" /> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator" />
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> tokenizes text internally.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceHashedWordBags">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordHashBagEstimator ProduceHashedWordBags (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null, int numberOfBits = 16, int ngramLength = 1, int skipLength = 0, bool useAllLengths = true, uint seed = 314489979, bool useOrderedHashing = true, int maximumNumberOfInverts = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordHashBagEstimator ProduceHashedWordBags(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string inputColumnName, int32 numberOfBits, int32 ngramLength, int32 skipLength, bool useAllLengths, unsigned int32 seed, bool useOrderedHashing, int32 maximumNumberOfInverts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceHashedWordBags(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceHashedWordBags (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, Optional inputColumnName As String = null, Optional numberOfBits As Integer = 16, Optional ngramLength As Integer = 1, Optional skipLength As Integer = 0, Optional useAllLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional useOrderedHashing As Boolean = true, Optional maximumNumberOfInverts As Integer = 0) As WordHashBagEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceHashedWordBags : Microsoft.ML.TransformsCatalog.TextTransforms * string * string * int * int * int * bool * uint32 * bool * int -&gt; Microsoft.ML.Transforms.Text.WordHashBagEstimator" Usage="Microsoft.ML.TextCatalog.ProduceHashedWordBags (catalog, outputColumnName, inputColumnName, numberOfBits, ngramLength, skipLength, useAllLengths, seed, useOrderedHashing, maximumNumberOfInverts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordHashBagEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="numberOfBits" Type="System.Int32" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="useAllLengths" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.UInt32" />
        <Parameter Name="useOrderedHashing" Type="System.Boolean" />
        <Parameter Name="maximumNumberOfInverts" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts" /> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="inputColumnName" />
            and outputs bag of word vector as <paramref name="outputColumnName" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceHashedWordBags">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordHashBagEstimator ProduceHashedWordBags (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string[] inputColumnNames, int numberOfBits = 16, int ngramLength = 1, int skipLength = 0, bool useAllLengths = true, uint seed = 314489979, bool useOrderedHashing = true, int maximumNumberOfInverts = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordHashBagEstimator ProduceHashedWordBags(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string[] inputColumnNames, int32 numberOfBits, int32 ngramLength, int32 skipLength, bool useAllLengths, unsigned int32 seed, bool useOrderedHashing, int32 maximumNumberOfInverts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceHashedWordBags(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceHashedWordBags (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, inputColumnNames As String(), Optional numberOfBits As Integer = 16, Optional ngramLength As Integer = 1, Optional skipLength As Integer = 0, Optional useAllLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional useOrderedHashing As Boolean = true, Optional maximumNumberOfInverts As Integer = 0) As WordHashBagEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceHashedWordBags : Microsoft.ML.TransformsCatalog.TextTransforms * string * string[] * int * int * int * bool * uint32 * bool * int -&gt; Microsoft.ML.Transforms.Text.WordHashBagEstimator" Usage="Microsoft.ML.TextCatalog.ProduceHashedWordBags (catalog, outputColumnName, inputColumnNames, numberOfBits, ngramLength, skipLength, useAllLengths, seed, useOrderedHashing, maximumNumberOfInverts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordHashBagEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnNames" Type="System.String[]" />
        <Parameter Name="numberOfBits" Type="System.Int32" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="useAllLengths" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.UInt32" />
        <Parameter Name="useOrderedHashing" Type="System.Boolean" />
        <Parameter Name="maximumNumberOfInverts" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnNames" />.</param>
        <param name="inputColumnNames">Name of the columns to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts" /> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="inputColumnNames" />
            and outputs bag of word vector as <paramref name="outputColumnName" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceNgrams">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.NgramExtractingEstimator ProduceNgrams (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null, int ngramLength = 2, int skipLength = 0, bool useAllLengths = true, int maximumNgramsCount = 10000000, Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria weighting = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.NgramExtractingEstimator ProduceNgrams(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string inputColumnName, int32 ngramLength, int32 skipLength, bool useAllLengths, int32 maximumNgramsCount, valuetype Microsoft.ML.Transforms.Text.NgramExtractingEstimator/WeightingCriteria weighting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceNgrams(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceNgrams (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, Optional inputColumnName As String = null, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional useAllLengths As Boolean = true, Optional maximumNgramsCount As Integer = 10000000, Optional weighting As NgramExtractingEstimator.WeightingCriteria = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf) As NgramExtractingEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceNgrams : Microsoft.ML.TransformsCatalog.TextTransforms * string * string * int * int * bool * int * Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria -&gt; Microsoft.ML.Transforms.Text.NgramExtractingEstimator" Usage="Microsoft.ML.TextCatalog.ProduceNgrams (catalog, outputColumnName, inputColumnName, ngramLength, skipLength, useAllLengths, maximumNgramsCount, weighting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.NgramExtractingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="useAllLengths" Type="System.Boolean" />
        <Parameter Name="maximumNgramsCount" Type="System.Int32" />
        <Parameter Name="weighting" Type="Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="maximumNgramsCount">Maximum number of n-grams to store in the dictionary.</param>
        <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumnName" />
            and outputs bag of word vector as <paramref name="outputColumnName" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[LpNormalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/NgramExtraction.cs?range=1-5,11-74)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ProduceWordBags">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordBagEstimator ProduceWordBags (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null, int ngramLength = 2, int skipLength = 0, bool useAllLengths = true, int maximumNgramsCount = 10000000, Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria weighting = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordBagEstimator ProduceWordBags(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string inputColumnName, int32 ngramLength, int32 skipLength, bool useAllLengths, int32 maximumNgramsCount, valuetype Microsoft.ML.Transforms.Text.NgramExtractingEstimator/WeightingCriteria weighting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceWordBags(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceWordBags (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, Optional inputColumnName As String = null, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional useAllLengths As Boolean = true, Optional maximumNgramsCount As Integer = 10000000, Optional weighting As NgramExtractingEstimator.WeightingCriteria = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf) As WordBagEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceWordBags : Microsoft.ML.TransformsCatalog.TextTransforms * string * string * int * int * bool * int * Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria -&gt; Microsoft.ML.Transforms.Text.WordBagEstimator" Usage="Microsoft.ML.TextCatalog.ProduceWordBags (catalog, outputColumnName, inputColumnName, ngramLength, skipLength, useAllLengths, maximumNgramsCount, weighting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordBagEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="useAllLengths" Type="System.Boolean" />
        <Parameter Name="maximumNgramsCount" Type="System.Int32" />
        <Parameter Name="weighting" Type="Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="maximumNgramsCount">Maximum number of ngrams to store in the dictionary.</param>
        <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumnName" />
            and outputs bag of word vector as <paramref name="outputColumnName" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceWordBags">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordBagEstimator ProduceWordBags (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string[] inputColumnNames, int ngramLength = 2, int skipLength = 0, bool useAllLengths = true, int maximumNgramsCount = 10000000, Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria weighting = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordBagEstimator ProduceWordBags(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string[] inputColumnNames, int32 ngramLength, int32 skipLength, bool useAllLengths, int32 maximumNgramsCount, valuetype Microsoft.ML.Transforms.Text.NgramExtractingEstimator/WeightingCriteria weighting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceWordBags(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String[],System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceWordBags (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, inputColumnNames As String(), Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional useAllLengths As Boolean = true, Optional maximumNgramsCount As Integer = 10000000, Optional weighting As NgramExtractingEstimator.WeightingCriteria = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf) As WordBagEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceWordBags : Microsoft.ML.TransformsCatalog.TextTransforms * string * string[] * int * int * bool * int * Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria -&gt; Microsoft.ML.Transforms.Text.WordBagEstimator" Usage="Microsoft.ML.TextCatalog.ProduceWordBags (catalog, outputColumnName, inputColumnNames, ngramLength, skipLength, useAllLengths, maximumNgramsCount, weighting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordBagEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnNames" Type="System.String[]" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="useAllLengths" Type="System.Boolean" />
        <Parameter Name="maximumNgramsCount" Type="System.Int32" />
        <Parameter Name="weighting" Type="Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnNames" />.</param>
        <param name="inputColumnNames">Name of the columns to transform.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="maximumNgramsCount">Maximum number of ngrams to store in the dictionary.</param>
        <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumnNames" />
            and outputs bag of word vector as <paramref name="outputColumnName" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDefaultStopWords">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator RemoveDefaultStopWords (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null, Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language language = Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator+Language.English);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator RemoveDefaultStopWords(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string inputColumnName, valuetype Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator/Language language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.RemoveDefaultStopWords(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language)" />
      <MemberSignature Language="F#" Value="static member RemoveDefaultStopWords : Microsoft.ML.TransformsCatalog.TextTransforms * string * string * Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language -&gt; Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator" Usage="Microsoft.ML.TextCatalog.RemoveDefaultStopWords (catalog, outputColumnName, inputColumnName, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="language" Type="Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator+Language" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">The column containing output text. Null means <paramref name="inputColumnName" /> is replaced.</param>
        <param name="inputColumnName">The column containing text to remove stop words on.</param>
        <param name="language">Langauge of the input text column <paramref name="inputColumnName" />.</param>
        <summary>
            Removes stop words from incoming token streams in <paramref name="inputColumnName" />
            and outputs the token streams without stopwords as <paramref name="outputColumnName" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
             [!code-csharp[FastTree](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/StopWordRemoverTransform.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="RemoveStopWords">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator RemoveStopWords (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null, params string[] stopwords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator RemoveStopWords(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string inputColumnName, string[] stopwords) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.RemoveStopWords(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveStopWords (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, Optional inputColumnName As String = null, ParamArray stopwords As String()) As CustomStopWordsRemovingEstimator" />
      <MemberSignature Language="F#" Value="static member RemoveStopWords : Microsoft.ML.TransformsCatalog.TextTransforms * string * string * string[] -&gt; Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator" Usage="Microsoft.ML.TextCatalog.RemoveStopWords (catalog, outputColumnName, inputColumnName, stopwords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="stopwords" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="ml-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">The column containing output text. Null means <paramref name="inputColumnName" /> is replaced.</param>
        <param name="inputColumnName">The column containing text to remove stop words on.</param>
        <param name="stopwords">Array of words to remove.</param>
        <summary>
            Removes stop words from incoming token streams in <paramref name="inputColumnName" />
            and outputs the token streams without stopwords as <paramref name="outputColumnName" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
             [!code-csharp[FastTree](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/StopWordRemoverTransform.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="TokenizeIntoCharactersAsKeys">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator TokenizeIntoCharactersAsKeys (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null, bool useMarkerCharacters = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator TokenizeIntoCharactersAsKeys(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string inputColumnName, bool useMarkerCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.TokenizeIntoCharactersAsKeys(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TokenizeIntoCharactersAsKeys (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, Optional inputColumnName As String = null, Optional useMarkerCharacters As Boolean = true) As TokenizingByCharactersEstimator" />
      <MemberSignature Language="F#" Value="static member TokenizeIntoCharactersAsKeys : Microsoft.ML.TransformsCatalog.TextTransforms * string * string * bool -&gt; Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator" Usage="Microsoft.ML.TextCatalog.TokenizeIntoCharactersAsKeys (catalog, outputColumnName, inputColumnName, useMarkerCharacters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="useMarkerCharacters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="useMarkerCharacters">Whether to prepend a marker character, <see langword="0x02" />, to the beginning,
            and append another marker character, <see langword="0x03" />, to the end of the output vector of characters.</param>
        <summary>
            Tokenize incoming text in <paramref name="inputColumnName" /> and output the tokens as <paramref name="outputColumnName" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenizeIntoWords">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordTokenizingEstimator TokenizeIntoWords (this Microsoft.ML.TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null, char[] separators = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordTokenizingEstimator TokenizeIntoWords(class Microsoft.ML.TransformsCatalog/TextTransforms catalog, string outputColumnName, string inputColumnName, char[] separators) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.TokenizeIntoWords(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Char[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TokenizeIntoWords (catalog As TransformsCatalog.TextTransforms, outputColumnName As String, Optional inputColumnName As String = null, Optional separators As Char() = null) As WordTokenizingEstimator" />
      <MemberSignature Language="F#" Value="static member TokenizeIntoWords : Microsoft.ML.TransformsCatalog.TextTransforms * string * string * char[] -&gt; Microsoft.ML.Transforms.Text.WordTokenizingEstimator" Usage="Microsoft.ML.TextCatalog.TokenizeIntoWords (catalog, outputColumnName, inputColumnName, separators)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordTokenizingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="separators" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="separators">The separators to use (uses space character by default).</param>
        <summary>
            Tokenizes incoming text in <paramref name="inputColumnName" />, using <paramref name="separators" /> as separators,
            and outputs the tokens as <paramref name="outputColumnName" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>