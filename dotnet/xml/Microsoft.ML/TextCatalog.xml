<Type Name="TextCatalog" FullName="Microsoft.ML.TextCatalog">
  <TypeSignature Language="C#" Value="public static class TextCatalog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TextCatalog extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.TextCatalog" />
  <TypeSignature Language="VB.NET" Value="Public Module TextCatalog" />
  <TypeSignature Language="F#" Value="type TextCatalog = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ExtractWordEmbeddings">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator ExtractWordEmbeddings (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind modelKind = Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer+PretrainedModelKind.Sswe, params Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.ColumnInfo[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator ExtractWordEmbeddings(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, valuetype Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer/PretrainedModelKind modelKind, class Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer/ColumnInfo[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ExtractWordEmbeddings(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.ColumnInfo[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExtractWordEmbeddings (catalog As TransformsCatalog.TextTransforms, Optional modelKind As WordEmbeddingsExtractingTransformer.PretrainedModelKind = Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer+PretrainedModelKind.Sswe, ParamArray columns As WordEmbeddingsExtractingTransformer.ColumnInfo()) As WordEmbeddingsExtractingEstimator" />
      <MemberSignature Language="F#" Value="static member ExtractWordEmbeddings : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind * Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.ColumnInfo[] -&gt; Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator" Usage="Microsoft.ML.TextCatalog.ExtractWordEmbeddings (catalog, modelKind, columns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="modelKind" Type="Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer+PretrainedModelKind" />
        <Parameter Name="columns" Type="Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer+ColumnInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="modelKind">The embeddings <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind" /> to use. </param>
        <param name="columns">The array columns, and per-column configurations to extract embeedings from.</param>
        <summary>
            Extracts word embeddings.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractWordEmbeddings">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator ExtractWordEmbeddings (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string inputColumn, string outputColumn = null, Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind modelKind = Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer+PretrainedModelKind.Sswe);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator ExtractWordEmbeddings(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string inputColumn, string outputColumn, valuetype Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer/PretrainedModelKind modelKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ExtractWordEmbeddings(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExtractWordEmbeddings (catalog As TransformsCatalog.TextTransforms, inputColumn As String, Optional outputColumn As String = null, Optional modelKind As WordEmbeddingsExtractingTransformer.PretrainedModelKind = Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer+PretrainedModelKind.Sswe) As WordEmbeddingsExtractingEstimator" />
      <MemberSignature Language="F#" Value="static member ExtractWordEmbeddings : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string * string * Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind -&gt; Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator" Usage="Microsoft.ML.TextCatalog.ExtractWordEmbeddings (catalog, inputColumn, outputColumn, modelKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="modelKind" Type="Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer+PretrainedModelKind" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumn">The input column.</param>
        <param name="outputColumn">The optional output column. If it is <value>null</value> the input column will be substituted with its value.</param>
        <param name="modelKind">The embeddings <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind" /> to use. </param>
        <summary>
            Extracts word embeddings.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractWordEmbeddings">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator ExtractWordEmbeddings (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string inputColumn, string customModelFile, string outputColumn = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator ExtractWordEmbeddings(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string inputColumn, string customModelFile, string outputColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ExtractWordEmbeddings(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExtractWordEmbeddings (catalog As TransformsCatalog.TextTransforms, inputColumn As String, customModelFile As String, Optional outputColumn As String = null) As WordEmbeddingsExtractingEstimator" />
      <MemberSignature Language="F#" Value="static member ExtractWordEmbeddings : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string * string * string -&gt; Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator" Usage="Microsoft.ML.TextCatalog.ExtractWordEmbeddings (catalog, inputColumn, customModelFile, outputColumn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="customModelFile" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumn">The input column.</param>
        <param name="customModelFile">The path of the pre-trained embeedings model to use. </param>
        <param name="outputColumn">The optional output column. If it is <value>null</value> the input column will be substituted with its value.</param>
        <summary>
            Extracts word embeddings.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FeaturizeText">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.TextFeaturizingEstimator FeaturizeText (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, System.Collections.Generic.IEnumerable&lt;string&gt; inputColumns, string outputColumn, Action&lt;Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Settings&gt; advancedSettings = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.TextFeaturizingEstimator FeaturizeText(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, class System.Collections.Generic.IEnumerable`1&lt;string&gt; inputColumns, string outputColumn, class System.Action`1&lt;class Microsoft.ML.Transforms.Text.TextFeaturizingEstimator/Settings&gt; advancedSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.FeaturizeText(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Settings})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FeaturizeText (catalog As TransformsCatalog.TextTransforms, inputColumns As IEnumerable(Of String), outputColumn As String, Optional advancedSettings As Action(Of TextFeaturizingEstimator.Settings) = null) As TextFeaturizingEstimator" />
      <MemberSignature Language="F#" Value="static member FeaturizeText : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * seq&lt;string&gt; * string * Action&lt;Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Settings&gt; -&gt; Microsoft.ML.Transforms.Text.TextFeaturizingEstimator" Usage="Microsoft.ML.TextCatalog.FeaturizeText (catalog, inputColumns, outputColumn, advancedSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.TextFeaturizingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumns" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="advancedSettings" Type="System.Action&lt;Microsoft.ML.Transforms.Text.TextFeaturizingEstimator+Settings&gt;" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumns">The input columns</param>
        <param name="outputColumn">The output column</param>
        <param name="advancedSettings">Advanced transform settings</param>
        <summary>
            Transform several text columns into featurized float array that represents counts of ngrams and char-grams.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FeaturizeText">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.TextFeaturizingEstimator FeaturizeText (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string inputColumn, string outputColumn = null, Action&lt;Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Settings&gt; advancedSettings = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.TextFeaturizingEstimator FeaturizeText(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string inputColumn, string outputColumn, class System.Action`1&lt;class Microsoft.ML.Transforms.Text.TextFeaturizingEstimator/Settings&gt; advancedSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.FeaturizeText(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Action{Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Settings})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FeaturizeText (catalog As TransformsCatalog.TextTransforms, inputColumn As String, Optional outputColumn As String = null, Optional advancedSettings As Action(Of TextFeaturizingEstimator.Settings) = null) As TextFeaturizingEstimator" />
      <MemberSignature Language="F#" Value="static member FeaturizeText : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string * string * Action&lt;Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Settings&gt; -&gt; Microsoft.ML.Transforms.Text.TextFeaturizingEstimator" Usage="Microsoft.ML.TextCatalog.FeaturizeText (catalog, inputColumn, outputColumn, advancedSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.TextFeaturizingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="advancedSettings" Type="System.Action&lt;Microsoft.ML.Transforms.Text.TextFeaturizingEstimator+Settings&gt;" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumn">The input column</param>
        <param name="outputColumn">The output column</param>
        <param name="advancedSettings">Advanced transform settings</param>
        <summary>
            Transform a text column into featurized float array that represents counts of ngrams and char-grams.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[FeaturizeText] (](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/TextTransform.cs?line=37 )]
            ]]></format>
        </example>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[FeaturizeText](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/TextTransform.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="LatentDirichletAllocation">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator LatentDirichletAllocation (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, params Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.ColumnInfo[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator LatentDirichletAllocation(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, class Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer/ColumnInfo[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.LatentDirichletAllocation(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.ColumnInfo[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LatentDirichletAllocation (catalog As TransformsCatalog.TextTransforms, ParamArray columns As LatentDirichletAllocationTransformer.ColumnInfo()) As LatentDirichletAllocationEstimator" />
      <MemberSignature Language="F#" Value="static member LatentDirichletAllocation : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.ColumnInfo[] -&gt; Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator" Usage="Microsoft.ML.TextCatalog.LatentDirichletAllocation (catalog, columns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="columns" Type="Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer+ColumnInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="columns"> Describes the parameters of LDA for each column pair.</param>
        <summary>
            Uses <a href="https://arxiv.org/abs/1412.1576">LightLDA</a> to transform a document (represented as a vector of floats)
            into a vector of floats over a set of topics.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LatentDirichletAllocation">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator LatentDirichletAllocation (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string inputColumn, string outputColumn = null, int numTopic = 100, float alphaSum = 100, float beta = 0.01, int mhstep = 4, int numIterations = 200, int likelihoodInterval = 5, int numThreads = 0, int numMaxDocToken = 512, int numSummaryTermPerTopic = 10, int numBurninIterations = 10, bool resetRandomGenerator = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator LatentDirichletAllocation(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string inputColumn, string outputColumn, int32 numTopic, float32 alphaSum, float32 beta, int32 mhstep, int32 numIterations, int32 likelihoodInterval, int32 numThreads, int32 numMaxDocToken, int32 numSummaryTermPerTopic, int32 numBurninIterations, bool resetRandomGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.LatentDirichletAllocation(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LatentDirichletAllocation (catalog As TransformsCatalog.TextTransforms, inputColumn As String, Optional outputColumn As String = null, Optional numTopic As Integer = 100, Optional alphaSum As Single = 100, Optional beta As Single = 0.01, Optional mhstep As Integer = 4, Optional numIterations As Integer = 200, Optional likelihoodInterval As Integer = 5, Optional numThreads As Integer = 0, Optional numMaxDocToken As Integer = 512, Optional numSummaryTermPerTopic As Integer = 10, Optional numBurninIterations As Integer = 10, Optional resetRandomGenerator As Boolean = false) As LatentDirichletAllocationEstimator" />
      <MemberSignature Language="F#" Value="static member LatentDirichletAllocation : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string * string * int * single * single * int * int * int * int * int * int * int * bool -&gt; Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator" Usage="Microsoft.ML.TextCatalog.LatentDirichletAllocation (catalog, inputColumn, outputColumn, numTopic, alphaSum, beta, mhstep, numIterations, likelihoodInterval, numThreads, numMaxDocToken, numSummaryTermPerTopic, numBurninIterations, resetRandomGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="numTopic" Type="System.Int32" />
        <Parameter Name="alphaSum" Type="System.Single" />
        <Parameter Name="beta" Type="System.Single" />
        <Parameter Name="mhstep" Type="System.Int32" />
        <Parameter Name="numIterations" Type="System.Int32" />
        <Parameter Name="likelihoodInterval" Type="System.Int32" />
        <Parameter Name="numThreads" Type="System.Int32" />
        <Parameter Name="numMaxDocToken" Type="System.Int32" />
        <Parameter Name="numSummaryTermPerTopic" Type="System.Int32" />
        <Parameter Name="numBurninIterations" Type="System.Int32" />
        <Parameter Name="resetRandomGenerator" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="inputColumn">The column representing the document as a vector of floats.</param>
        <param name="outputColumn">The column containing the output scores over a set of topics, represented as a vector of floats. A null value for the column means <paramref name="inputColumn" /> is replaced.</param>
        <param name="numTopic">The number of topics.</param>
        <param name="alphaSum">Dirichlet prior on document-topic vectors.</param>
        <param name="beta">Dirichlet prior on vocab-topic vectors.</param>
        <param name="mhstep">Number of Metropolis Hasting step.</param>
        <param name="numIterations">Number of iterations.</param>
        <param name="likelihoodInterval">Compute log likelihood over local dataset on this iteration interval.</param>
        <param name="numThreads">The number of training threads. Default value depends on number of logical processors.</param>
        <param name="numMaxDocToken">The threshold of maximum count of tokens per doc.</param>
        <param name="numSummaryTermPerTopic">The number of words to summarize the topic.</param>
        <param name="numBurninIterations">The number of burn-in iterations.</param>
        <param name="resetRandomGenerator">Reset the random number generator for each document.</param>
        <summary>
            Uses <a href="https://arxiv.org/abs/1412.1576">LightLDA</a> to transform a document (represented as a vector of floats)
            into a vector of floats over a set of topics.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[LatentDirichletAllocation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/LdaTransform.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="NormalizeText">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.TextNormalizingEstimator NormalizeText (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string inputColumn, string outputColumn = null, Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseNormalizationMode textCase = Microsoft.ML.Transforms.Text.TextNormalizingEstimator+CaseNormalizationMode.Lower, bool keepDiacritics = false, bool keepPunctuations = true, bool keepNumbers = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.TextNormalizingEstimator NormalizeText(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string inputColumn, string outputColumn, valuetype Microsoft.ML.Transforms.Text.TextNormalizingEstimator/CaseNormalizationMode textCase, bool keepDiacritics, bool keepPunctuations, bool keepNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.NormalizeText(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseNormalizationMode,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function NormalizeText (catalog As TransformsCatalog.TextTransforms, inputColumn As String, Optional outputColumn As String = null, Optional textCase As TextNormalizingEstimator.CaseNormalizationMode = Microsoft.ML.Transforms.Text.TextNormalizingEstimator+CaseNormalizationMode.Lower, Optional keepDiacritics As Boolean = false, Optional keepPunctuations As Boolean = true, Optional keepNumbers As Boolean = true) As TextNormalizingEstimator" />
      <MemberSignature Language="F#" Value="static member NormalizeText : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string * string * Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseNormalizationMode * bool * bool * bool -&gt; Microsoft.ML.Transforms.Text.TextNormalizingEstimator" Usage="Microsoft.ML.TextCatalog.NormalizeText (catalog, inputColumn, outputColumn, textCase, keepDiacritics, keepPunctuations, keepNumbers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.TextNormalizingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="textCase" Type="Microsoft.ML.Transforms.Text.TextNormalizingEstimator+CaseNormalizationMode" />
        <Parameter Name="keepDiacritics" Type="System.Boolean" />
        <Parameter Name="keepPunctuations" Type="System.Boolean" />
        <Parameter Name="keepNumbers" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumn">The column containing text to normalize.</param>
        <param name="outputColumn">The column containing output tokens. Null means <paramref name="inputColumn" /> is replaced.</param>
        <param name="textCase">Casing text using the rules of the invariant culture.</param>
        <param name="keepDiacritics">Whether to keep diacritical marks or remove them.</param>
        <param name="keepPunctuations">Whether to keep punctuation marks or remove them.</param>
        <param name="keepNumbers">Whether to keep numbers or remove them.</param>
        <summary>
            Normalizes incoming text in <paramref name="inputColumn" /> by changing case, removing diacritical marks, punctuation marks and/or numbers
            and outputs new text as <paramref name="outputColumn" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceHashedNgrams">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.NgramHashEstimator ProduceHashedNgrams (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, ValueTuple&lt;string[],string&gt;[] columns, int hashBits = 16, int ngramLength = 2, int skipLength = 0, bool allLengths = true, uint seed = 314489979, bool ordered = true, int invertHash = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.NgramHashEstimator ProduceHashedNgrams(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, valuetype System.ValueTuple`2&lt;string[], string&gt;[] columns, int32 hashBits, int32 ngramLength, int32 skipLength, bool allLengths, unsigned int32 seed, bool ordered, int32 invertHash) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceHashedNgrams(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.ValueTuple{System.String[],System.String}[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceHashedNgrams (catalog As TransformsCatalog.TextTransforms, columns As ValueTuple(Of String(), String)(), Optional hashBits As Integer = 16, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional ordered As Boolean = true, Optional invertHash As Integer = 0) As NgramHashEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceHashedNgrams : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * ValueTuple&lt;string[], string&gt;[] * int * int * int * bool * uint32 * bool * int -&gt; Microsoft.ML.Transforms.Text.NgramHashEstimator" Usage="Microsoft.ML.TextCatalog.ProduceHashedNgrams (catalog, columns, hashBits, ngramLength, skipLength, allLengths, seed, ordered, invertHash)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.NgramHashEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String[],System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "inputs", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="hashBits" Type="System.Int32" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.UInt32" />
        <Parameter Name="ordered" Type="System.Boolean" />
        <Parameter Name="invertHash" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="columns">Pairs of columns to compute bag of word vector.</param>
        <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="columns.inputs.inputs" />
             and outputs ngram vector for each output in <paramref name="columns.output.output" /><see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator" /> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator" />
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> tokenizes text internally.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceHashedNgrams">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.NgramHashEstimator ProduceHashedNgrams (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string inputColumn, string outputColumn = null, int hashBits = 16, int ngramLength = 2, int skipLength = 0, bool allLengths = true, uint seed = 314489979, bool ordered = true, int invertHash = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.NgramHashEstimator ProduceHashedNgrams(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string inputColumn, string outputColumn, int32 hashBits, int32 ngramLength, int32 skipLength, bool allLengths, unsigned int32 seed, bool ordered, int32 invertHash) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceHashedNgrams(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceHashedNgrams (catalog As TransformsCatalog.TextTransforms, inputColumn As String, Optional outputColumn As String = null, Optional hashBits As Integer = 16, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional ordered As Boolean = true, Optional invertHash As Integer = 0) As NgramHashEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceHashedNgrams : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string * string * int * int * int * bool * uint32 * bool * int -&gt; Microsoft.ML.Transforms.Text.NgramHashEstimator" Usage="Microsoft.ML.TextCatalog.ProduceHashedNgrams (catalog, inputColumn, outputColumn, hashBits, ngramLength, skipLength, allLengths, seed, ordered, invertHash)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.NgramHashEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="hashBits" Type="System.Int32" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.UInt32" />
        <Parameter Name="ordered" Type="System.Boolean" />
        <Parameter Name="invertHash" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumn">The column containing text to compute bag of word vector.</param>
        <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn" /> is replaced.</param>
        <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumn" />
             and outputs ngram vector as <paramref name="outputColumn" /><see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator" /> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator" />
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> tokenizes text internally.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceHashedNgrams">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.NgramHashEstimator ProduceHashedNgrams (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string[] inputColumns, string outputColumn, int hashBits = 16, int ngramLength = 2, int skipLength = 0, bool allLengths = true, uint seed = 314489979, bool ordered = true, int invertHash = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.NgramHashEstimator ProduceHashedNgrams(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string[] inputColumns, string outputColumn, int32 hashBits, int32 ngramLength, int32 skipLength, bool allLengths, unsigned int32 seed, bool ordered, int32 invertHash) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceHashedNgrams(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String[],System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceHashedNgrams (catalog As TransformsCatalog.TextTransforms, inputColumns As String(), outputColumn As String, Optional hashBits As Integer = 16, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional ordered As Boolean = true, Optional invertHash As Integer = 0) As NgramHashEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceHashedNgrams : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string[] * string * int * int * int * bool * uint32 * bool * int -&gt; Microsoft.ML.Transforms.Text.NgramHashEstimator" Usage="Microsoft.ML.TextCatalog.ProduceHashedNgrams (catalog, inputColumns, outputColumn, hashBits, ngramLength, skipLength, allLengths, seed, ordered, invertHash)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.NgramHashEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumns" Type="System.String[]" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="hashBits" Type="System.Int32" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.UInt32" />
        <Parameter Name="ordered" Type="System.Boolean" />
        <Parameter Name="invertHash" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumns">The columns containing text to compute bag of word vector.</param>
        <param name="outputColumn">The column containing output tokens.</param>
        <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumns" />
             and outputs ngram vector as <paramref name="outputColumn" /><see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator" /> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator" />
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator" /> tokenizes text internally.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceHashedWordBags">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordHashBagEstimator ProduceHashedWordBags (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, ValueTuple&lt;string[],string&gt;[] columns, int hashBits = 16, int ngramLength = 1, int skipLength = 0, bool allLengths = true, uint seed = 314489979, bool ordered = true, int invertHash = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordHashBagEstimator ProduceHashedWordBags(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, valuetype System.ValueTuple`2&lt;string[], string&gt;[] columns, int32 hashBits, int32 ngramLength, int32 skipLength, bool allLengths, unsigned int32 seed, bool ordered, int32 invertHash) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceHashedWordBags(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.ValueTuple{System.String[],System.String}[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceHashedWordBags (catalog As TransformsCatalog.TextTransforms, columns As ValueTuple(Of String(), String)(), Optional hashBits As Integer = 16, Optional ngramLength As Integer = 1, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional ordered As Boolean = true, Optional invertHash As Integer = 0) As WordHashBagEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceHashedWordBags : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * ValueTuple&lt;string[], string&gt;[] * int * int * int * bool * uint32 * bool * int -&gt; Microsoft.ML.Transforms.Text.WordHashBagEstimator" Usage="Microsoft.ML.TextCatalog.ProduceHashedWordBags (catalog, columns, hashBits, ngramLength, skipLength, allLengths, seed, ordered, invertHash)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordHashBagEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String[],System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "inputs", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="hashBits" Type="System.Int32" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.UInt32" />
        <Parameter Name="ordered" Type="System.Boolean" />
        <Parameter Name="invertHash" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="columns">Pairs of columns to compute bag of word vector.</param>
        <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="columns.inputs.inputs" />
            and outputs bag of word vector for each output in <paramref name="columns.output.output" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceHashedWordBags">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordHashBagEstimator ProduceHashedWordBags (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string inputColumn, string outputColumn = null, int hashBits = 16, int ngramLength = 1, int skipLength = 0, bool allLengths = true, uint seed = 314489979, bool ordered = true, int invertHash = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordHashBagEstimator ProduceHashedWordBags(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string inputColumn, string outputColumn, int32 hashBits, int32 ngramLength, int32 skipLength, bool allLengths, unsigned int32 seed, bool ordered, int32 invertHash) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceHashedWordBags(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceHashedWordBags (catalog As TransformsCatalog.TextTransforms, inputColumn As String, Optional outputColumn As String = null, Optional hashBits As Integer = 16, Optional ngramLength As Integer = 1, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional ordered As Boolean = true, Optional invertHash As Integer = 0) As WordHashBagEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceHashedWordBags : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string * string * int * int * int * bool * uint32 * bool * int -&gt; Microsoft.ML.Transforms.Text.WordHashBagEstimator" Usage="Microsoft.ML.TextCatalog.ProduceHashedWordBags (catalog, inputColumn, outputColumn, hashBits, ngramLength, skipLength, allLengths, seed, ordered, invertHash)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordHashBagEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="hashBits" Type="System.Int32" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.UInt32" />
        <Parameter Name="ordered" Type="System.Boolean" />
        <Parameter Name="invertHash" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumn">The column containing text to compute bag of word vector.</param>
        <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn" /> is replaced.</param>
        <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="inputColumn" />
            and outputs bag of word vector as <paramref name="outputColumn" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceHashedWordBags">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordHashBagEstimator ProduceHashedWordBags (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string[] inputColumns, string outputColumn, int hashBits = 16, int ngramLength = 1, int skipLength = 0, bool allLengths = true, uint seed = 314489979, bool ordered = true, int invertHash = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordHashBagEstimator ProduceHashedWordBags(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string[] inputColumns, string outputColumn, int32 hashBits, int32 ngramLength, int32 skipLength, bool allLengths, unsigned int32 seed, bool ordered, int32 invertHash) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceHashedWordBags(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String[],System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceHashedWordBags (catalog As TransformsCatalog.TextTransforms, inputColumns As String(), outputColumn As String, Optional hashBits As Integer = 16, Optional ngramLength As Integer = 1, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional seed As UInteger = 314489979, Optional ordered As Boolean = true, Optional invertHash As Integer = 0) As WordHashBagEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceHashedWordBags : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string[] * string * int * int * int * bool * uint32 * bool * int -&gt; Microsoft.ML.Transforms.Text.WordHashBagEstimator" Usage="Microsoft.ML.TextCatalog.ProduceHashedWordBags (catalog, inputColumns, outputColumn, hashBits, ngramLength, skipLength, allLengths, seed, ordered, invertHash)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordHashBagEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumns" Type="System.String[]" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="hashBits" Type="System.Int32" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.UInt32" />
        <Parameter Name="ordered" Type="System.Boolean" />
        <Parameter Name="invertHash" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumns">The columns containing text to compute bag of word vector.</param>
        <param name="outputColumn">The column containing output tokens.</param>
        <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="seed">Hashing seed.</param>
        <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
        <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="inputColumns" />
            and outputs bag of word vector as <paramref name="outputColumn" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceNgrams">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.NgramExtractingEstimator ProduceNgrams (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, params Microsoft.ML.Transforms.Text.NgramExtractingTransformer.ColumnInfo[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.NgramExtractingEstimator ProduceNgrams(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, class Microsoft.ML.Transforms.Text.NgramExtractingTransformer/ColumnInfo[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceNgrams(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.NgramExtractingTransformer.ColumnInfo[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceNgrams (catalog As TransformsCatalog.TextTransforms, ParamArray columns As NgramExtractingTransformer.ColumnInfo()) As NgramExtractingEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceNgrams : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * Microsoft.ML.Transforms.Text.NgramExtractingTransformer.ColumnInfo[] -&gt; Microsoft.ML.Transforms.Text.NgramExtractingEstimator" Usage="Microsoft.ML.TextCatalog.ProduceNgrams (catalog, columns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.NgramExtractingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="columns" Type="Microsoft.ML.Transforms.Text.NgramExtractingTransformer+ColumnInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="columns">Pairs of columns to run the ngram process on.</param>
        <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs" />
            and outputs bag of word vector for each output in <paramref name="columns.output.output" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceNgrams">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.NgramExtractingEstimator ProduceNgrams (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, ValueTuple&lt;string,string&gt;[] columns, int ngramLength = 2, int skipLength = 0, bool allLengths = true, int maxNumTerms = 10000000, Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria weighting = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.NgramExtractingEstimator ProduceNgrams(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns, int32 ngramLength, int32 skipLength, bool allLengths, int32 maxNumTerms, valuetype Microsoft.ML.Transforms.Text.NgramExtractingEstimator/WeightingCriteria weighting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceNgrams(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.ValueTuple{System.String,System.String}[],System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceNgrams (catalog As TransformsCatalog.TextTransforms, columns As ValueTuple(Of String, String)(), Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional maxNumTerms As Integer = 10000000, Optional weighting As NgramExtractingEstimator.WeightingCriteria = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf) As NgramExtractingEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceNgrams : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * ValueTuple&lt;string, string&gt;[] * int * int * bool * int * Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria -&gt; Microsoft.ML.Transforms.Text.NgramExtractingEstimator" Usage="Microsoft.ML.TextCatalog.ProduceNgrams (catalog, columns, ngramLength, skipLength, allLengths, maxNumTerms, weighting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.NgramExtractingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "input", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="maxNumTerms" Type="System.Int32" />
        <Parameter Name="weighting" Type="Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="columns">Pairs of columns to compute bag of word vector.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
        <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs" />
            and outputs bag of word vector for each output in <paramref name="columns.output.output" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceNgrams">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.NgramExtractingEstimator ProduceNgrams (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string inputColumn, string outputColumn = null, int ngramLength = 2, int skipLength = 0, bool allLengths = true, int maxNumTerms = 10000000, Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria weighting = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.NgramExtractingEstimator ProduceNgrams(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string inputColumn, string outputColumn, int32 ngramLength, int32 skipLength, bool allLengths, int32 maxNumTerms, valuetype Microsoft.ML.Transforms.Text.NgramExtractingEstimator/WeightingCriteria weighting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceNgrams(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceNgrams (catalog As TransformsCatalog.TextTransforms, inputColumn As String, Optional outputColumn As String = null, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional maxNumTerms As Integer = 10000000, Optional weighting As NgramExtractingEstimator.WeightingCriteria = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf) As NgramExtractingEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceNgrams : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string * string * int * int * bool * int * Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria -&gt; Microsoft.ML.Transforms.Text.NgramExtractingEstimator" Usage="Microsoft.ML.TextCatalog.ProduceNgrams (catalog, inputColumn, outputColumn, ngramLength, skipLength, allLengths, maxNumTerms, weighting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.NgramExtractingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="maxNumTerms" Type="System.Int32" />
        <Parameter Name="weighting" Type="Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumn">The column containing text to compute bag of word vector.</param>
        <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn" /> is replaced.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
        <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumn" />
            and outputs bag of word vector as <paramref name="outputColumn" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[LpNormalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/NgramExtraction.cs?range=1-5,11-74)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ProduceWordBags">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordBagEstimator ProduceWordBags (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, ValueTuple&lt;string[],string&gt;[] columns, int ngramLength = 2, int skipLength = 0, bool allLengths = true, int maxNumTerms = 10000000, Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria weighting = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordBagEstimator ProduceWordBags(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, valuetype System.ValueTuple`2&lt;string[], string&gt;[] columns, int32 ngramLength, int32 skipLength, bool allLengths, int32 maxNumTerms, valuetype Microsoft.ML.Transforms.Text.NgramExtractingEstimator/WeightingCriteria weighting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceWordBags(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.ValueTuple{System.String[],System.String}[],System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceWordBags (catalog As TransformsCatalog.TextTransforms, columns As ValueTuple(Of String(), String)(), Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional maxNumTerms As Integer = 10000000, Optional weighting As NgramExtractingEstimator.WeightingCriteria = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf) As WordBagEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceWordBags : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * ValueTuple&lt;string[], string&gt;[] * int * int * bool * int * Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria -&gt; Microsoft.ML.Transforms.Text.WordBagEstimator" Usage="Microsoft.ML.TextCatalog.ProduceWordBags (catalog, columns, ngramLength, skipLength, allLengths, maxNumTerms, weighting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordBagEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String[],System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "inputs", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="maxNumTerms" Type="System.Int32" />
        <Parameter Name="weighting" Type="Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="columns">Pairs of columns to compute bag of word vector.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
        <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs" />
            and outputs bag of word vector for each output in <paramref name="columns.output.output" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceWordBags">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordBagEstimator ProduceWordBags (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string inputColumn, string outputColumn = null, int ngramLength = 2, int skipLength = 0, bool allLengths = true, int maxNumTerms = 10000000, Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria weighting = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordBagEstimator ProduceWordBags(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string inputColumn, string outputColumn, int32 ngramLength, int32 skipLength, bool allLengths, int32 maxNumTerms, valuetype Microsoft.ML.Transforms.Text.NgramExtractingEstimator/WeightingCriteria weighting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceWordBags(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceWordBags (catalog As TransformsCatalog.TextTransforms, inputColumn As String, Optional outputColumn As String = null, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional maxNumTerms As Integer = 10000000, Optional weighting As NgramExtractingEstimator.WeightingCriteria = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf) As WordBagEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceWordBags : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string * string * int * int * bool * int * Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria -&gt; Microsoft.ML.Transforms.Text.WordBagEstimator" Usage="Microsoft.ML.TextCatalog.ProduceWordBags (catalog, inputColumn, outputColumn, ngramLength, skipLength, allLengths, maxNumTerms, weighting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordBagEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="maxNumTerms" Type="System.Int32" />
        <Parameter Name="weighting" Type="Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumn">The column containing text to compute bag of word vector.</param>
        <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn" /> is replaced.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
        <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumn" />
            and outputs bag of word vector as <paramref name="outputColumn" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProduceWordBags">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordBagEstimator ProduceWordBags (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string[] inputColumns, string outputColumn, int ngramLength = 2, int skipLength = 0, bool allLengths = true, int maxNumTerms = 10000000, Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria weighting = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordBagEstimator ProduceWordBags(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string[] inputColumns, string outputColumn, int32 ngramLength, int32 skipLength, bool allLengths, int32 maxNumTerms, valuetype Microsoft.ML.Transforms.Text.NgramExtractingEstimator/WeightingCriteria weighting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.ProduceWordBags(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String[],System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ProduceWordBags (catalog As TransformsCatalog.TextTransforms, inputColumns As String(), outputColumn As String, Optional ngramLength As Integer = 2, Optional skipLength As Integer = 0, Optional allLengths As Boolean = true, Optional maxNumTerms As Integer = 10000000, Optional weighting As NgramExtractingEstimator.WeightingCriteria = Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria.Tf) As WordBagEstimator" />
      <MemberSignature Language="F#" Value="static member ProduceWordBags : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string[] * string * int * int * bool * int * Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria -&gt; Microsoft.ML.Transforms.Text.WordBagEstimator" Usage="Microsoft.ML.TextCatalog.ProduceWordBags (catalog, inputColumns, outputColumn, ngramLength, skipLength, allLengths, maxNumTerms, weighting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordBagEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumns" Type="System.String[]" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="ngramLength" Type="System.Int32" />
        <Parameter Name="skipLength" Type="System.Int32" />
        <Parameter Name="allLengths" Type="System.Boolean" />
        <Parameter Name="maxNumTerms" Type="System.Int32" />
        <Parameter Name="weighting" Type="Microsoft.ML.Transforms.Text.NgramExtractingEstimator+WeightingCriteria" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumns">The columns containing text to compute bag of word vector.</param>
        <param name="outputColumn">The column containing output tokens.</param>
        <param name="ngramLength">Ngram length.</param>
        <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
        <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength" /> or only <paramref name="ngramLength" />.</param>
        <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
        <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumns" />
            and outputs bag of word vector as <paramref name="outputColumn" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveStopWords">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator RemoveStopWords (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, ValueTuple&lt;string,string&gt;[] columns, Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language language = Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator+Language.English);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator RemoveStopWords(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns, valuetype Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator/Language language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.RemoveStopWords(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.ValueTuple{System.String,System.String}[],Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language)" />
      <MemberSignature Language="F#" Value="static member RemoveStopWords : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * ValueTuple&lt;string, string&gt;[] * Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language -&gt; Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator" Usage="Microsoft.ML.TextCatalog.RemoveStopWords (catalog, columns, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "input", "output" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="language" Type="Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator+Language" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="columns">Pairs of columns to remove stop words on.</param>
        <param name="language">Langauge of the input text columns <paramref name="columns" />.</param>
        <summary>
            Removes stop words from incoming token streams in input columns
            and outputs the token streams without stop words as output columns.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveStopWords">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator RemoveStopWords (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string inputColumn, string outputColumn = null, Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language language = Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator+Language.English);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator RemoveStopWords(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string inputColumn, string outputColumn, valuetype Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator/Language language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.RemoveStopWords(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language)" />
      <MemberSignature Language="F#" Value="static member RemoveStopWords : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string * string * Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language -&gt; Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator" Usage="Microsoft.ML.TextCatalog.RemoveStopWords (catalog, inputColumn, outputColumn, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="language" Type="Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator+Language" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumn">The column containing text to remove stop words on.</param>
        <param name="outputColumn">The column containing output text. Null means <paramref name="inputColumn" /> is replaced.</param>
        <param name="language">Langauge of the input text column <paramref name="inputColumn" />.</param>
        <summary>
            Removes stop words from incoming token streams in <paramref name="inputColumn" />
            and outputs the token streams without stopwords as <paramref name="outputColumn" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenizeCharacters">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator TokenizeCharacters (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, bool useMarkerCharacters = true, params ValueTuple&lt;string,string&gt;[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator TokenizeCharacters(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, bool useMarkerCharacters, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.TokenizeCharacters(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.Boolean,System.ValueTuple{System.String,System.String}[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TokenizeCharacters (catalog As TransformsCatalog.TextTransforms, Optional useMarkerCharacters As Boolean = true, ParamArray columns As ValueTuple(Of String, String)()) As TokenizingByCharactersEstimator" />
      <MemberSignature Language="F#" Value="static member TokenizeCharacters : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * bool * ValueTuple&lt;string, string&gt;[] -&gt; Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator" Usage="Microsoft.ML.TextCatalog.TokenizeCharacters (catalog, useMarkerCharacters, columns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="useMarkerCharacters" Type="System.Boolean" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "inputColumn", "outputColumn" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="useMarkerCharacters">Whether to use marker characters to separate words.</param>
        <param name="columns">Pairs of columns to run the tokenization on.</param>
        <summary>
            Tokenize incoming text in input columns and output the tokens as output columns.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenizeCharacters">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator TokenizeCharacters (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string inputColumn, string outputColumn = null, bool useMarkerCharacters = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator TokenizeCharacters(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string inputColumn, string outputColumn, bool useMarkerCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.TokenizeCharacters(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TokenizeCharacters (catalog As TransformsCatalog.TextTransforms, inputColumn As String, Optional outputColumn As String = null, Optional useMarkerCharacters As Boolean = true) As TokenizingByCharactersEstimator" />
      <MemberSignature Language="F#" Value="static member TokenizeCharacters : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string * string * bool -&gt; Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator" Usage="Microsoft.ML.TextCatalog.TokenizeCharacters (catalog, inputColumn, outputColumn, useMarkerCharacters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="useMarkerCharacters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumn">The column containing text to tokenize.</param>
        <param name="outputColumn">The column containing output tokens. Null means <paramref name="inputColumn" /> is replaced.</param>
        <param name="useMarkerCharacters">Whether to use marker characters to separate words.</param>
        <summary>
            Tokenize incoming text in <paramref name="inputColumn" /> and output the tokens as <paramref name="outputColumn" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenizeWords">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordTokenizingEstimator TokenizeWords (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, params Microsoft.ML.Transforms.Text.WordTokenizingTransformer.ColumnInfo[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordTokenizingEstimator TokenizeWords(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, class Microsoft.ML.Transforms.Text.WordTokenizingTransformer/ColumnInfo[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.TokenizeWords(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.WordTokenizingTransformer.ColumnInfo[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TokenizeWords (catalog As TransformsCatalog.TextTransforms, ParamArray columns As WordTokenizingTransformer.ColumnInfo()) As WordTokenizingEstimator" />
      <MemberSignature Language="F#" Value="static member TokenizeWords : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * Microsoft.ML.Transforms.Text.WordTokenizingTransformer.ColumnInfo[] -&gt; Microsoft.ML.Transforms.Text.WordTokenizingEstimator" Usage="Microsoft.ML.TextCatalog.TokenizeWords (catalog, columns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordTokenizingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="columns" Type="Microsoft.ML.Transforms.Text.WordTokenizingTransformer+ColumnInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="columns">Pairs of columns to run the tokenization on.</param>
        <summary>
             Tokenizes incoming text in input columns, using per-column configurations, and outputs the tokens.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenizeWords">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordTokenizingEstimator TokenizeWords (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, ValueTuple&lt;string,string&gt;[] columns, char[] separators = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordTokenizingEstimator TokenizeWords(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, valuetype System.ValueTuple`2&lt;string, string&gt;[] columns, char[] separators) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.TokenizeWords(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.ValueTuple{System.String,System.String}[],System.Char[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TokenizeWords (catalog As TransformsCatalog.TextTransforms, columns As ValueTuple(Of String, String)(), Optional separators As Char() = null) As WordTokenizingEstimator" />
      <MemberSignature Language="F#" Value="static member TokenizeWords : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * ValueTuple&lt;string, string&gt;[] * char[] -&gt; Microsoft.ML.Transforms.Text.WordTokenizingEstimator" Usage="Microsoft.ML.TextCatalog.TokenizeWords (catalog, columns, separators)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordTokenizingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="columns" Type="System.ValueTuple&lt;System.String,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "inputColumn", "outputColumn" })</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="separators" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="columns">Pairs of columns to run the tokenization on.</param>
        <param name="separators">The separators to use (uses space character by default).</param>
        <summary>
            Tokenizes incoming text in input columns and outputs the tokens using <paramref name="separators" /> as separators.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenizeWords">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.Text.WordTokenizingEstimator TokenizeWords (this Microsoft.ML.Runtime.TransformsCatalog.TextTransforms catalog, string inputColumn, string outputColumn = null, char[] separators = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.Text.WordTokenizingEstimator TokenizeWords(class Microsoft.ML.Runtime.TransformsCatalog/TextTransforms catalog, string inputColumn, string outputColumn, char[] separators) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextCatalog.TokenizeWords(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Char[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TokenizeWords (catalog As TransformsCatalog.TextTransforms, inputColumn As String, Optional outputColumn As String = null, Optional separators As Char() = null) As WordTokenizingEstimator" />
      <MemberSignature Language="F#" Value="static member TokenizeWords : Microsoft.ML.Runtime.TransformsCatalog.TextTransforms * string * string * char[] -&gt; Microsoft.ML.Transforms.Text.WordTokenizingEstimator" Usage="Microsoft.ML.TextCatalog.TokenizeWords (catalog, inputColumn, outputColumn, separators)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Text.WordTokenizingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.Runtime.TransformsCatalog+TextTransforms" RefType="this" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="separators" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="catalog">The text-related transform's catalog.</param>
        <param name="inputColumn">The column containing text to tokenize.</param>
        <param name="outputColumn">The column containing output tokens. Null means <paramref name="inputColumn" /> is replaced.</param>
        <param name="separators">The separators to use (uses space character by default).</param>
        <summary>
            Tokenizes incoming text in <paramref name="inputColumn" />, using <paramref name="separators" /> as separators,
            and outputs the tokens as <paramref name="outputColumn" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>