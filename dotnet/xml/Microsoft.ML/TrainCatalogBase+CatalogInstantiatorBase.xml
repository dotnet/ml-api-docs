<Type Name="TrainCatalogBase+CatalogInstantiatorBase" FullName="Microsoft.ML.TrainCatalogBase+CatalogInstantiatorBase">
  <TypeSignature Language="C#" Value="public abstract class TrainCatalogBase.CatalogInstantiatorBase" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract beforefieldinit TrainCatalogBase/CatalogInstantiatorBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.TrainCatalogBase.CatalogInstantiatorBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TrainCatalogBase.CatalogInstantiatorBase" />
  <TypeSignature Language="F#" Value="type TrainCatalogBase.CatalogInstantiatorBase = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Subclasses of <see cref="T:Microsoft.ML.TrainContext" /> will provide little "extension method" hookable objects
            (for example, something like <see cref="P:Microsoft.ML.BinaryClassificationCatalog.Trainers" />). User code will only
            interact with these objects by invoking the extension methods. The actual component code can work
            through <see cref="T:Microsoft.ML.Data.CatalogUtils" /> to get more "hidden" information from this object,
            for example, the environment.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members />
</Type>