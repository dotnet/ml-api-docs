<Type Name="TextLoader&lt;TInput&gt;" FullName="Microsoft.ML.TextLoader&lt;TInput&gt;">
  <TypeSignature Language="C#" Value="public class TextLoader&lt;TInput&gt; : Microsoft.ML.ILearningPipelineLoader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextLoader`1&lt;TInput&gt; extends System.Object implements class Microsoft.ML.ILearningPipelineItem, class Microsoft.ML.ILearningPipelineLoader" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.TextLoader`1" />
  <TypeSignature Language="VB.NET" Value="Public Class TextLoader(Of TInput)&#xA;Implements ILearningPipelineLoader" />
  <TypeSignature Language="F#" Value="type TextLoader&lt;'Input&gt; = class&#xA;    interface ILearningPipelineLoader&#xA;    interface ILearningPipelineItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.ILearningPipelineLoader</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TInput">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextLoader (string inputFilePath, bool useHeader = false, string separator = null, bool allowQuotedStrings = true, bool supportSparse = true, bool trimWhitespace = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string inputFilePath, bool useHeader, string separator, bool allowQuotedStrings, bool supportSparse, bool trimWhitespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextLoader`1.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (inputFilePath As String, Optional useHeader As Boolean = false, Optional separator As String = null, Optional allowQuotedStrings As Boolean = true, Optional supportSparse As Boolean = true, Optional trimWhitespace As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.TextLoader&lt;'Input&gt; : string * bool * string * bool * bool * bool -&gt; Microsoft.ML.TextLoader&lt;'Input&gt;" Usage="new Microsoft.ML.TextLoader&lt;'Input&gt; (inputFilePath, useHeader, separator, allowQuotedStrings, supportSparse, trimWhitespace)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="inputFilePath" Type="System.String" />
        <Parameter Name="useHeader" Type="System.Boolean" />
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="allowQuotedStrings" Type="System.Boolean" />
        <Parameter Name="supportSparse" Type="System.Boolean" />
        <Parameter Name="trimWhitespace" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inputFilePath">Data file path</param>
        <param name="useHeader">Does the file contains header?</param>
        <param name="separator">How the columns are seperated? 
            Options: separator="tab", separator="space", separator="comma" or separator=[single character]. 
            By default separator=null means "tab"</param>
        <param name="allowQuotedStrings">Whether the input may include quoted values, 
            which can contain separator characters, colons,
            and distinguish empty values from missing values. When true, consecutive separators 
            denote a missing value and an empty value is denoted by \"\". 
            When false, consecutive separators denote an empty value.</param>
        <param name="supportSparse">Whether the input may include sparse representations e.g. 
            if one of the row contains "5 2:6 4:3" that's mean there are 5 columns all zero 
            except for 3rd and 5th columns which have values 6 and 3</param>
        <param name="trimWhitespace">Remove trailing whitespace from lines</param>
        <summary>
            Construct a TextLoader object
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyStep">
      <MemberSignature Language="C#" Value="public Microsoft.ML.ILearningPipelineStep ApplyStep (Microsoft.ML.ILearningPipelineStep previousStep, Microsoft.ML.Runtime.Experiment experiment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.ILearningPipelineStep ApplyStep(class Microsoft.ML.ILearningPipelineStep previousStep, class Microsoft.ML.Runtime.Experiment experiment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextLoader`1.ApplyStep(Microsoft.ML.ILearningPipelineStep,Microsoft.ML.Runtime.Experiment)" />
      <MemberSignature Language="F#" Value="abstract member ApplyStep : Microsoft.ML.ILearningPipelineStep * Microsoft.ML.Runtime.Experiment -&gt; Microsoft.ML.ILearningPipelineStep&#xA;override this.ApplyStep : Microsoft.ML.ILearningPipelineStep * Microsoft.ML.Runtime.Experiment -&gt; Microsoft.ML.ILearningPipelineStep" Usage="textLoader.ApplyStep (previousStep, experiment)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ILearningPipelineItem.ApplyStep(Microsoft.ML.ILearningPipelineStep,Microsoft.ML.Runtime.Experiment)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.ILearningPipelineStep</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousStep" Type="Microsoft.ML.ILearningPipelineStep" />
        <Parameter Name="experiment" Type="Microsoft.ML.Runtime.Experiment" />
      </Parameters>
      <Docs>
        <param name="previousStep">To be added.</param>
        <param name="experiment">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInput">
      <MemberSignature Language="C#" Value="public void SetInput (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Runtime.Experiment experiment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetInput(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Runtime.Experiment experiment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TextLoader`1.SetInput(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Experiment)" />
      <MemberSignature Language="F#" Value="abstract member SetInput : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Experiment -&gt; unit&#xA;override this.SetInput : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Runtime.Experiment -&gt; unit" Usage="textLoader.SetInput (env, experiment)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ILearningPipelineLoader.SetInput(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Experiment)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="experiment" Type="Microsoft.ML.Runtime.Experiment" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="experiment">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>