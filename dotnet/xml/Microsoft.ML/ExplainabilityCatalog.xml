<Type Name="ExplainabilityCatalog" FullName="Microsoft.ML.ExplainabilityCatalog">
  <TypeSignature Language="C#" Value="public static class ExplainabilityCatalog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ExplainabilityCatalog extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.ExplainabilityCatalog" />
  <TypeSignature Language="VB.NET" Value="Public Module ExplainabilityCatalog" />
  <TypeSignature Language="F#" Value="type ExplainabilityCatalog = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CalculateFeatureContribution">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator CalculateFeatureContribution (this Microsoft.ML.TransformsCatalog catalog, Microsoft.ML.ISingleFeaturePredictionTransformer&lt;Microsoft.ML.Trainers.ICalculateFeatureContribution&gt; predictionTransformer, int numberOfPositiveContributions = 10, int numberOfNegativeContributions = 10, bool normalize = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator CalculateFeatureContribution(class Microsoft.ML.TransformsCatalog catalog, class Microsoft.ML.ISingleFeaturePredictionTransformer`1&lt;class Microsoft.ML.Trainers.ICalculateFeatureContribution&gt; predictionTransformer, int32 numberOfPositiveContributions, int32 numberOfNegativeContributions, bool normalize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ExplainabilityCatalog.CalculateFeatureContribution(Microsoft.ML.TransformsCatalog,Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Trainers.ICalculateFeatureContribution},System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CalculateFeatureContribution (catalog As TransformsCatalog, predictionTransformer As ISingleFeaturePredictionTransformer(Of ICalculateFeatureContribution), Optional numberOfPositiveContributions As Integer = 10, Optional numberOfNegativeContributions As Integer = 10, Optional normalize As Boolean = true) As FeatureContributionCalculatingEstimator" />
      <MemberSignature Language="F#" Value="static member CalculateFeatureContribution : Microsoft.ML.TransformsCatalog * Microsoft.ML.ISingleFeaturePredictionTransformer&lt;Microsoft.ML.Trainers.ICalculateFeatureContribution&gt; * int * int * bool -&gt; Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator" Usage="Microsoft.ML.ExplainabilityCatalog.CalculateFeatureContribution (catalog, predictionTransformer, numberOfPositiveContributions, numberOfNegativeContributions, normalize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" />
        <Parameter Name="predictionTransformer" Type="Microsoft.ML.ISingleFeaturePredictionTransformer&lt;Microsoft.ML.Trainers.ICalculateFeatureContribution&gt;" />
        <Parameter Name="numberOfPositiveContributions" Type="System.Int32" />
        <Parameter Name="numberOfNegativeContributions" Type="System.Int32" />
        <Parameter Name="normalize" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">The model explainability operations catalog.</param>
        <param name="predictionTransformer">A <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1" /> that supports Feature Contribution Calculation,
            and which will also be used for scoring.</param>
        <param name="numberOfPositiveContributions">The number of positive contributions to report, sorted from highest magnitude to lowest magnitude.
            Note that if there are fewer features with positive contributions than <paramref name="numberOfPositiveContributions" />, the rest will be returned as zeros.</param>
        <param name="numberOfNegativeContributions">The number of negative contributions to report, sorted from highest magnitude to lowest magnitude.
            Note that if there are fewer features with negative contributions than <paramref name="numberOfNegativeContributions" />, the rest will be returned as zeros.</param>
        <param name="normalize">Whether the feature contributions should be normalized to the [-1, 1] interval.</param>
        <summary>
            Feature Contribution Calculation computes model-specific contribution scores for each feature.
            Note that this functionality is not supported by all the models. See <see cref="T:Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer" /> for a list of the suported models.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[FCT](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureContributionCalculationTransform.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CalculateFeatureContribution&lt;TModelParameters,TCalibrator&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator CalculateFeatureContribution&lt;TModelParameters,TCalibrator&gt; (this Microsoft.ML.TransformsCatalog catalog, Microsoft.ML.ISingleFeaturePredictionTransformer&lt;Microsoft.ML.Calibrators.CalibratedModelParametersBase&lt;TModelParameters,TCalibrator&gt;&gt; predictionTransformer, int numberOfPositiveContributions = 10, int numberOfNegativeContributions = 10, bool normalize = true) where TModelParameters : class, Microsoft.ML.Trainers.ICalculateFeatureContribution where TCalibrator : class, Microsoft.ML.Calibrators.ICalibrator;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator CalculateFeatureContribution&lt;class (class Microsoft.ML.Trainers.ICalculateFeatureContribution) TModelParameters, class (class Microsoft.ML.Calibrators.ICalibrator) TCalibrator&gt;(class Microsoft.ML.TransformsCatalog catalog, class Microsoft.ML.ISingleFeaturePredictionTransformer`1&lt;class Microsoft.ML.Calibrators.CalibratedModelParametersBase`2&lt;!!TModelParameters, !!TCalibrator&gt;&gt; predictionTransformer, int32 numberOfPositiveContributions, int32 numberOfNegativeContributions, bool normalize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ExplainabilityCatalog.CalculateFeatureContribution``2(Microsoft.ML.TransformsCatalog,Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Calibrators.CalibratedModelParametersBase{``0,``1}},System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CalculateFeatureContribution(Of TModelParameters As {Class, ICalculateFeatureContribution}, TCalibrator As {Class, ICalculateFeatureContribution}) (catalog As TransformsCatalog, predictionTransformer As ISingleFeaturePredictionTransformer(Of CalibratedModelParametersBase(Of TModelParameters, TCalibrator)), Optional numberOfPositiveContributions As Integer = 10, Optional numberOfNegativeContributions As Integer = 10, Optional normalize As Boolean = true) As FeatureContributionCalculatingEstimator" />
      <MemberSignature Language="F#" Value="static member CalculateFeatureContribution : Microsoft.ML.TransformsCatalog * Microsoft.ML.ISingleFeaturePredictionTransformer&lt;Microsoft.ML.Calibrators.CalibratedModelParametersBase&lt;'ModelParameters, 'Calibrator&gt;&gt; * int * int * bool -&gt; Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator (requires 'ModelParameters : null and 'ModelParameters :&gt; Microsoft.ML.Trainers.ICalculateFeatureContribution and 'Calibrator : null and 'Calibrator :&gt; Microsoft.ML.Calibrators.ICalibrator)" Usage="Microsoft.ML.ExplainabilityCatalog.CalculateFeatureContribution (catalog, predictionTransformer, numberOfPositiveContributions, numberOfNegativeContributions, normalize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TModelParameters">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.Trainers.ICalculateFeatureContribution</InterfaceName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TCalibrator">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.Calibrators.ICalibrator</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" />
        <Parameter Name="predictionTransformer" Type="Microsoft.ML.ISingleFeaturePredictionTransformer&lt;Microsoft.ML.Calibrators.CalibratedModelParametersBase&lt;TModelParameters,TCalibrator&gt;&gt;" />
        <Parameter Name="numberOfPositiveContributions" Type="System.Int32" />
        <Parameter Name="numberOfNegativeContributions" Type="System.Int32" />
        <Parameter Name="normalize" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TModelParameters">To be added.</typeparam>
        <typeparam name="TCalibrator">To be added.</typeparam>
        <param name="catalog">The model explainability operations catalog.</param>
        <param name="predictionTransformer">A <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1" /> that supports Feature Contribution Calculation,
            and which will also be used for scoring.</param>
        <param name="numberOfPositiveContributions">The number of positive contributions to report, sorted from highest magnitude to lowest magnitude.
            Note that if there are fewer features with positive contributions than <paramref name="numberOfPositiveContributions" />, the rest will be returned as zeros.</param>
        <param name="numberOfNegativeContributions">The number of negative contributions to report, sorted from highest magnitude to lowest magnitude.
            Note that if there are fewer features with negative contributions than <paramref name="numberOfNegativeContributions" />, the rest will be returned as zeros.</param>
        <param name="normalize">Whether the feature contributions should be normalized to the [-1, 1] interval.</param>
        <summary>
            Feature Contribution Calculation computes model-specific contribution scores for each feature.
            Note that this functionality is not supported by all the models. See <see cref="T:Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer" /> for a list of the suported models.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[FCT](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureContributionCalculationTransform.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>