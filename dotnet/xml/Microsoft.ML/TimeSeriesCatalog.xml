<Type Name="TimeSeriesCatalog" FullName="Microsoft.ML.TimeSeriesCatalog">
  <TypeSignature Language="C#" Value="public static class TimeSeriesCatalog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TimeSeriesCatalog extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.TimeSeriesCatalog" />
  <TypeSignature Language="VB.NET" Value="Public Module TimeSeriesCatalog" />
  <TypeSignature Language="F#" Value="type TimeSeriesCatalog = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DetectAnomalyBySrCnn">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyEstimator DetectAnomalyBySrCnn (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, int windowSize = 64, int backAddWindowSize = 5, int lookaheadWindowSize = 5, int averagingWindowSize = 3, int judgementWindowSize = 21, double threshold = 0.3);" FrameworkAlternate="ml-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyEstimator DetectAnomalyBySrCnn(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, int32 windowSize, int32 backAddWindowSize, int32 lookaheadWindowSize, int32 averagingWindowSize, int32 judgementWindowSize, float64 threshold) cil managed" FrameworkAlternate="ml-dotnet" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.DetectAnomalyBySrCnn(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectAnomalyBySrCnn (catalog As TransformsCatalog, outputColumnName As String, inputColumnName As String, Optional windowSize As Integer = 64, Optional backAddWindowSize As Integer = 5, Optional lookaheadWindowSize As Integer = 5, Optional averagingWindowSize As Integer = 3, Optional judgementWindowSize As Integer = 21, Optional threshold As Double = 0.3) As SrCnnAnomalyEstimator" FrameworkAlternate="ml-dotnet" />
      <MemberSignature Language="F#" Value="static member DetectAnomalyBySrCnn : Microsoft.ML.TransformsCatalog * string * string * int * int * int * int * int * double -&gt; Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyEstimator" Usage="Microsoft.ML.TimeSeriesCatalog.DetectAnomalyBySrCnn (catalog, outputColumnName, inputColumnName, windowSize, backAddWindowSize, lookaheadWindowSize, averagingWindowSize, judgementWindowSize, threshold)" FrameworkAlternate="ml-dotnet" />
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyEstimator DetectAnomalyBySrCnn (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, int windowSize = 64, int backAddWindowSize = 5, int lookaheadWindowSize = 5, int averageingWindowSize = 3, int judgementWindowSize = 21, double threshold = 0.3);" FrameworkAlternate="ml-dotnet-1.2.0;ml-dotnet-1.3.1;ml-dotnet-1.4.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyEstimator DetectAnomalyBySrCnn(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, int32 windowSize, int32 backAddWindowSize, int32 lookaheadWindowSize, int32 averageingWindowSize, int32 judgementWindowSize, float64 threshold) cil managed" FrameworkAlternate="ml-dotnet-1.2.0;ml-dotnet-1.3.1;ml-dotnet-1.4.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectAnomalyBySrCnn (catalog As TransformsCatalog, outputColumnName As String, inputColumnName As String, Optional windowSize As Integer = 64, Optional backAddWindowSize As Integer = 5, Optional lookaheadWindowSize As Integer = 5, Optional averageingWindowSize As Integer = 3, Optional judgementWindowSize As Integer = 21, Optional threshold As Double = 0.3) As SrCnnAnomalyEstimator" FrameworkAlternate="ml-dotnet-1.2.0;ml-dotnet-1.3.1;ml-dotnet-1.4.0" />
      <MemberSignature Language="F#" Value="static member DetectAnomalyBySrCnn : Microsoft.ML.TransformsCatalog * string * string * int * int * int * int * int * double -&gt; Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyEstimator" Usage="Microsoft.ML.TimeSeriesCatalog.DetectAnomalyBySrCnn (catalog, outputColumnName, inputColumnName, windowSize, backAddWindowSize, lookaheadWindowSize, averageingWindowSize, judgementWindowSize, threshold)" FrameworkAlternate="ml-dotnet-1.2.0;ml-dotnet-1.3.1;ml-dotnet-1.4.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" Index="0" />
        <Parameter Name="outputColumnName" Type="System.String" Index="1" />
        <Parameter Name="inputColumnName" Type="System.String" Index="2" />
        <Parameter Name="windowSize" Type="System.Int32" Index="3" />
        <Parameter Name="backAddWindowSize" Type="System.Int32" Index="4" />
        <Parameter Name="lookaheadWindowSize" Type="System.Int32" Index="5" />
        <Parameter Name="averagingWindowSize" Type="System.Int32" Index="6" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="averageingWindowSize" Type="System.Int32" Index="6" FrameworkAlternate="ml-dotnet-1.2.0;ml-dotnet-1.3.1;ml-dotnet-1.4.0" />
        <Parameter Name="judgementWindowSize" Type="System.Int32" Index="7" />
        <Parameter Name="threshold" Type="System.Double" Index="8" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.
            The column data is a vector of <see cref="T:System.Double" />. The vector contains 3 elements: alert (1 means anomaly while 0 means normal), raw score, and magnitude of spectual residual.</param>
        <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single" />.</param>
        <param name="windowSize">The size of the sliding window for computing spectral residual.</param>
        <param name="backAddWindowSize">The number of points to add back of training window. No more than <paramref name="windowSize" />, usually keep default value.</param>
        <param name="lookaheadWindowSize">The number of pervious points used in prediction. No more than <paramref name="windowSize" />, usually keep default value.</param>
        <param name="averagingWindowSize">The size of sliding window to generate a saliency map for the series. No more than <paramref name="windowSize" />, usually keep default value.</param>
        <param name="averageingWindowSize">The size of sliding window to generate a saliency map for the series. No more than <paramref name="windowSize" />, usually keep default value.</param>
        <param name="judgementWindowSize">The size of sliding window to calculate the anomaly score for each data point. No more than <paramref name="windowSize" />.</param>
        <param name="threshold">The threshold to determine anomaly, score larger than the threshold is considered as anomaly. Should be in (0,1)</param>
        <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyEstimator" />, which detects timeseries anomalies using SRCNN algorithm.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[DetectAnomalyBySrCnn](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectAnomalyBySrCnn.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DetectChangePointBySsa">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator DetectChangePointBySsa (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, double confidence, int changeHistoryLength, int trainingWindowSize, int seasonalityWindowSize, Microsoft.ML.Transforms.TimeSeries.ErrorFunction errorFunction = Microsoft.ML.Transforms.TimeSeries.ErrorFunction.SignedDifference, Microsoft.ML.Transforms.TimeSeries.MartingaleType martingale = Microsoft.ML.Transforms.TimeSeries.MartingaleType.Power, double eps = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator DetectChangePointBySsa(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, float64 confidence, int32 changeHistoryLength, int32 trainingWindowSize, int32 seasonalityWindowSize, valuetype Microsoft.ML.Transforms.TimeSeries.ErrorFunction errorFunction, valuetype Microsoft.ML.Transforms.TimeSeries.MartingaleType martingale, float64 eps) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.DetectChangePointBySsa(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.ErrorFunction,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectChangePointBySsa (catalog As TransformsCatalog, outputColumnName As String, inputColumnName As String, confidence As Double, changeHistoryLength As Integer, trainingWindowSize As Integer, seasonalityWindowSize As Integer, Optional errorFunction As ErrorFunction = Microsoft.ML.Transforms.TimeSeries.ErrorFunction.SignedDifference, Optional martingale As MartingaleType = Microsoft.ML.Transforms.TimeSeries.MartingaleType.Power, Optional eps As Double = 0.1) As SsaChangePointEstimator" />
      <MemberSignature Language="F#" Value="static member DetectChangePointBySsa : Microsoft.ML.TransformsCatalog * string * string * double * int * int * int * Microsoft.ML.Transforms.TimeSeries.ErrorFunction * Microsoft.ML.Transforms.TimeSeries.MartingaleType * double -&gt; Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator" Usage="Microsoft.ML.TimeSeriesCatalog.DetectChangePointBySsa (catalog, outputColumnName, inputColumnName, confidence, changeHistoryLength, trainingWindowSize, seasonalityWindowSize, errorFunction, martingale, eps)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" Index="0" FrameworkAlternate="ml-dotnet" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" Index="1" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="inputColumnName" Type="System.String" Index="2" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="confidence" Type="System.Double" Index="3" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="changeHistoryLength" Type="System.Int32" Index="4" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="trainingWindowSize" Type="System.Int32" Index="5" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="seasonalityWindowSize" Type="System.Int32" Index="6" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="errorFunction" Type="Microsoft.ML.Transforms.TimeSeries.ErrorFunction" Index="7" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="martingale" Type="Microsoft.ML.Transforms.TimeSeries.MartingaleType" Index="8" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="eps" Type="System.Double" Index="9" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.
            The column data is a vector of <see cref="T:System.Double" />. The vector contains 4 elements: alert (non-zero value means a change point), raw score, p-Value and martingale score.</param>
        <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single" />.
            If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="confidence">The confidence for change point detection in the range [0, 100].</param>
        <param name="trainingWindowSize">The number of points from the beginning of the sequence used for training.</param>
        <param name="changeHistoryLength">The size of the sliding window for computing the p-value.</param>
        <param name="seasonalityWindowSize">An upper bound on the largest relevant seasonality in the input time-series.</param>
        <param name="errorFunction">The function used to compute the error between the expected and the observed value.</param>
        <param name="martingale">The martingale used for scoring.</param>
        <param name="eps">The epsilon parameter for the Power martingale.</param>
        <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator" />, which predicts change points in time series
            using <a href="https://en.wikipedia.org/wiki/Singular_spectrum_analysis">Singular Spectrum Analysis (SSA)</a>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[DetectChangePointBySsa](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectChangePointBySsaBatchPrediction.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DetectChangePointBySsa">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator DetectChangePointBySsa (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, int confidence, int changeHistoryLength, int trainingWindowSize, int seasonalityWindowSize, Microsoft.ML.Transforms.TimeSeries.ErrorFunction errorFunction = Microsoft.ML.Transforms.TimeSeries.ErrorFunction.SignedDifference, Microsoft.ML.Transforms.TimeSeries.MartingaleType martingale = Microsoft.ML.Transforms.TimeSeries.MartingaleType.Power, double eps = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator DetectChangePointBySsa(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, int32 confidence, int32 changeHistoryLength, int32 trainingWindowSize, int32 seasonalityWindowSize, valuetype Microsoft.ML.Transforms.TimeSeries.ErrorFunction errorFunction, valuetype Microsoft.ML.Transforms.TimeSeries.MartingaleType martingale, float64 eps) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.DetectChangePointBySsa(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.ErrorFunction,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectChangePointBySsa (catalog As TransformsCatalog, outputColumnName As String, inputColumnName As String, confidence As Integer, changeHistoryLength As Integer, trainingWindowSize As Integer, seasonalityWindowSize As Integer, Optional errorFunction As ErrorFunction = Microsoft.ML.Transforms.TimeSeries.ErrorFunction.SignedDifference, Optional martingale As MartingaleType = Microsoft.ML.Transforms.TimeSeries.MartingaleType.Power, Optional eps As Double = 0.1) As SsaChangePointEstimator" />
      <MemberSignature Language="F#" Value="static member DetectChangePointBySsa : Microsoft.ML.TransformsCatalog * string * string * int * int * int * int * Microsoft.ML.Transforms.TimeSeries.ErrorFunction * Microsoft.ML.Transforms.TimeSeries.MartingaleType * double -&gt; Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator" Usage="Microsoft.ML.TimeSeriesCatalog.DetectChangePointBySsa (catalog, outputColumnName, inputColumnName, confidence, changeHistoryLength, trainingWindowSize, seasonalityWindowSize, errorFunction, martingale, eps)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="ml-dotnet">
          <AttributeName Language="C#">[System.Obsolete("This API method is deprecated, please use the overload with confidence parameter of type double.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API method is deprecated, please use the overload with confidence parameter of type double.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="confidence" Type="System.Int32" />
        <Parameter Name="changeHistoryLength" Type="System.Int32" />
        <Parameter Name="trainingWindowSize" Type="System.Int32" />
        <Parameter Name="seasonalityWindowSize" Type="System.Int32" />
        <Parameter Name="errorFunction" Type="Microsoft.ML.Transforms.TimeSeries.ErrorFunction" />
        <Parameter Name="martingale" Type="Microsoft.ML.Transforms.TimeSeries.MartingaleType" />
        <Parameter Name="eps" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.
            The column data is a vector of <see cref="T:System.Double" />. The vector contains 4 elements: alert (non-zero value means a change point), raw score, p-Value and martingale score.</param>
        <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single" />.
            If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="confidence">The confidence for change point detection in the range [0, 100].</param>
        <param name="changeHistoryLength">The size of the sliding window for computing the p-value.</param>
        <param name="trainingWindowSize">The number of points from the beginning of the sequence used for training.</param>
        <param name="seasonalityWindowSize">An upper bound on the largest relevant seasonality in the input time-series.</param>
        <param name="errorFunction">The function used to compute the error between the expected and the observed value.</param>
        <param name="martingale">The martingale used for scoring.</param>
        <param name="eps">The epsilon parameter for the Power martingale.</param>
        <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator" />, which predicts change points in time series
            using <a href="https://en.wikipedia.org/wiki/Singular_spectrum_analysis">Singular Spectrum Analysis (SSA)</a>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[DetectChangePointBySsa](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectChangePointBySsaBatchPrediction.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DetectEntireAnomalyBySrCnn">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.IDataView DetectEntireAnomalyBySrCnn (this Microsoft.ML.AnomalyDetectionCatalog catalog, Microsoft.ML.IDataView input, string outputColumnName, string inputColumnName, Microsoft.ML.TimeSeries.SrCnnEntireAnomalyDetectorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.IDataView DetectEntireAnomalyBySrCnn(class Microsoft.ML.AnomalyDetectionCatalog catalog, class Microsoft.ML.IDataView input, string outputColumnName, string inputColumnName, class Microsoft.ML.TimeSeries.SrCnnEntireAnomalyDetectorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.DetectEntireAnomalyBySrCnn(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.IDataView,System.String,System.String,Microsoft.ML.TimeSeries.SrCnnEntireAnomalyDetectorOptions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectEntireAnomalyBySrCnn (catalog As AnomalyDetectionCatalog, input As IDataView, outputColumnName As String, inputColumnName As String, options As SrCnnEntireAnomalyDetectorOptions) As IDataView" />
      <MemberSignature Language="F#" Value="static member DetectEntireAnomalyBySrCnn : Microsoft.ML.AnomalyDetectionCatalog * Microsoft.ML.IDataView * string * string * Microsoft.ML.TimeSeries.SrCnnEntireAnomalyDetectorOptions -&gt; Microsoft.ML.IDataView" Usage="Microsoft.ML.TimeSeriesCatalog.DetectEntireAnomalyBySrCnn (catalog, input, outputColumnName, inputColumnName, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.AnomalyDetectionCatalog" Index="0" FrameworkAlternate="ml-dotnet" RefType="this" />
        <Parameter Name="input" Type="Microsoft.ML.IDataView" Index="1" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="outputColumnName" Type="System.String" Index="2" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="inputColumnName" Type="System.String" Index="3" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="options" Type="Microsoft.ML.TimeSeries.SrCnnEntireAnomalyDetectorOptions" Index="4" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="catalog">The AnomalyDetectionCatalog.</param>
        <param name="input">Input DataView.</param>
        <param name="outputColumnName">Name of the column resulting from data processing of <paramref name="inputColumnName" />.
            The column data is a vector of <see cref="T:System.Double" />. The length of this vector varies depending on <paramref name="options.DetectMode.DetectMode" />.</param>
        <param name="inputColumnName">Name of column to process. The column data must be <see cref="T:System.Double" />.</param>
        <param name="options">Defines the settings of the load operation.</param>
        <summary>
            Create <see cref="T:Microsoft.ML.TimeSeries.SrCnnEntireAnomalyDetector" />, which detects timeseries anomalies for entire input using SRCNN algorithm.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[DetectEntireAnomalyBySrCnn](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectEntireAnomalyBySrCnn.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DetectEntireAnomalyBySrCnn">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.IDataView DetectEntireAnomalyBySrCnn (this Microsoft.ML.AnomalyDetectionCatalog catalog, Microsoft.ML.IDataView input, string outputColumnName, string inputColumnName, double threshold = 0.3, int batchSize = 1024, double sensitivity = 99, Microsoft.ML.TimeSeries.SrCnnDetectMode detectMode = Microsoft.ML.TimeSeries.SrCnnDetectMode.AnomalyOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.IDataView DetectEntireAnomalyBySrCnn(class Microsoft.ML.AnomalyDetectionCatalog catalog, class Microsoft.ML.IDataView input, string outputColumnName, string inputColumnName, float64 threshold, int32 batchSize, float64 sensitivity, valuetype Microsoft.ML.TimeSeries.SrCnnDetectMode detectMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.DetectEntireAnomalyBySrCnn(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.IDataView,System.String,System.String,System.Double,System.Int32,System.Double,Microsoft.ML.TimeSeries.SrCnnDetectMode)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectEntireAnomalyBySrCnn (catalog As AnomalyDetectionCatalog, input As IDataView, outputColumnName As String, inputColumnName As String, Optional threshold As Double = 0.3, Optional batchSize As Integer = 1024, Optional sensitivity As Double = 99, Optional detectMode As SrCnnDetectMode = Microsoft.ML.TimeSeries.SrCnnDetectMode.AnomalyOnly) As IDataView" />
      <MemberSignature Language="F#" Value="static member DetectEntireAnomalyBySrCnn : Microsoft.ML.AnomalyDetectionCatalog * Microsoft.ML.IDataView * string * string * double * int * double * Microsoft.ML.TimeSeries.SrCnnDetectMode -&gt; Microsoft.ML.IDataView" Usage="Microsoft.ML.TimeSeriesCatalog.DetectEntireAnomalyBySrCnn (catalog, input, outputColumnName, inputColumnName, threshold, batchSize, sensitivity, detectMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.AnomalyDetectionCatalog" Index="0" FrameworkAlternate="ml-dotnet" RefType="this" />
        <Parameter Name="input" Type="Microsoft.ML.IDataView" Index="1" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="outputColumnName" Type="System.String" Index="2" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="inputColumnName" Type="System.String" Index="3" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="threshold" Type="System.Double" Index="4" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="batchSize" Type="System.Int32" Index="5" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="sensitivity" Type="System.Double" Index="6" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="detectMode" Type="Microsoft.ML.TimeSeries.SrCnnDetectMode" Index="7" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="catalog">The AnomalyDetectionCatalog.</param>
        <param name="input">Input DataView.</param>
        <param name="outputColumnName">Name of the column resulting from data processing of <paramref name="inputColumnName" />.
            The column data is a vector of <see cref="T:System.Double" />. The length of this vector varies depending on <paramref name="detectMode" />.</param>
        <param name="inputColumnName">Name of column to process. The column data must be <see cref="T:System.Double" />.</param>
        <param name="threshold">The threshold to determine an anomaly. An anomaly is detected when the calculated SR raw score for a given point is more than the set threshold. This threshold must  fall between [0,1], and its default value is 0.3.</param>
        <param name="batchSize">Divide the input data into batches to fit srcnn model.
            When set to -1, use the whole input to fit model instead of batch by batch, when set to a positive integer, use this number as batch size.
            Must be -1 or a positive integer no less than 12. Default value is 1024.</param>
        <param name="sensitivity">Sensitivity of boundaries, only useful when srCnnDetectMode is AnomalyAndMargin. Must be in [0,100]. Default value is 99.</param>
        <param name="detectMode">An enum type of <see cref="T:Microsoft.ML.TimeSeries.SrCnnDetectMode" />.
            When set to AnomalyOnly, the output vector would be a 3-element Double vector of (IsAnomaly, RawScore, Mag).
            When set to AnomalyAndExpectedValue, the output vector would be a 4-element Double vector of (IsAnomaly, RawScore, Mag, ExpectedValue).
            When set to AnomalyAndMargin, the output vector would be a 7-element Double vector of (IsAnomaly, AnomalyScore, Mag, ExpectedValue, BoundaryUnit, UpperBoundary, LowerBoundary).
            The RawScore is output by SR to determine whether a point is an anomaly or not, under AnomalyAndMargin mode, when a point is an anomaly, an AnomalyScore will be calculated according to sensitivity setting.
            Default value is AnomalyOnly.</param>
        <summary>
            Create <see cref="T:Microsoft.ML.TimeSeries.SrCnnEntireAnomalyDetector" />, which detects timeseries anomalies for entire input using SRCNN algorithm.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[DetectEntireAnomalyBySrCnn](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectEntireAnomalyBySrCnn.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DetectIidChangePoint">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator DetectIidChangePoint (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, double confidence, int changeHistoryLength, Microsoft.ML.Transforms.TimeSeries.MartingaleType martingale = Microsoft.ML.Transforms.TimeSeries.MartingaleType.Power, double eps = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator DetectIidChangePoint(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, float64 confidence, int32 changeHistoryLength, valuetype Microsoft.ML.Transforms.TimeSeries.MartingaleType martingale, float64 eps) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.DetectIidChangePoint(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Double,System.Int32,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectIidChangePoint (catalog As TransformsCatalog, outputColumnName As String, inputColumnName As String, confidence As Double, changeHistoryLength As Integer, Optional martingale As MartingaleType = Microsoft.ML.Transforms.TimeSeries.MartingaleType.Power, Optional eps As Double = 0.1) As IidChangePointEstimator" />
      <MemberSignature Language="F#" Value="static member DetectIidChangePoint : Microsoft.ML.TransformsCatalog * string * string * double * int * Microsoft.ML.Transforms.TimeSeries.MartingaleType * double -&gt; Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator" Usage="Microsoft.ML.TimeSeriesCatalog.DetectIidChangePoint (catalog, outputColumnName, inputColumnName, confidence, changeHistoryLength, martingale, eps)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" Index="0" FrameworkAlternate="ml-dotnet" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" Index="1" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="inputColumnName" Type="System.String" Index="2" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="confidence" Type="System.Double" Index="3" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="changeHistoryLength" Type="System.Int32" Index="4" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="martingale" Type="Microsoft.ML.Transforms.TimeSeries.MartingaleType" Index="5" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="eps" Type="System.Double" Index="6" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.
            The column data is a vector of <see cref="T:System.Double" />. The vector contains 4 elements: alert (non-zero value means a change point), raw score, p-Value and martingale score.</param>
        <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single" />. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="confidence">The confidence for change point detection in the range [0, 100].</param>
        <param name="changeHistoryLength">The length of the sliding window on p-values for computing the martingale score.</param>
        <param name="martingale">The martingale used for scoring.</param>
        <param name="eps">The epsilon parameter for the Power martingale.</param>
        <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator" />, which predicts change points in an
            <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables">independent identically distributed (i.i.d.)</a>
            time series based on adaptive kernel density estimations and martingale scores.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[DetectIidChangePoint](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectIidChangePointBatchPrediction.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DetectIidChangePoint">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator DetectIidChangePoint (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, int confidence, int changeHistoryLength, Microsoft.ML.Transforms.TimeSeries.MartingaleType martingale = Microsoft.ML.Transforms.TimeSeries.MartingaleType.Power, double eps = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator DetectIidChangePoint(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, int32 confidence, int32 changeHistoryLength, valuetype Microsoft.ML.Transforms.TimeSeries.MartingaleType martingale, float64 eps) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.DetectIidChangePoint(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectIidChangePoint (catalog As TransformsCatalog, outputColumnName As String, inputColumnName As String, confidence As Integer, changeHistoryLength As Integer, Optional martingale As MartingaleType = Microsoft.ML.Transforms.TimeSeries.MartingaleType.Power, Optional eps As Double = 0.1) As IidChangePointEstimator" />
      <MemberSignature Language="F#" Value="static member DetectIidChangePoint : Microsoft.ML.TransformsCatalog * string * string * int * int * Microsoft.ML.Transforms.TimeSeries.MartingaleType * double -&gt; Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator" Usage="Microsoft.ML.TimeSeriesCatalog.DetectIidChangePoint (catalog, outputColumnName, inputColumnName, confidence, changeHistoryLength, martingale, eps)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="ml-dotnet">
          <AttributeName Language="C#">[System.Obsolete("This API method is deprecated, please use the overload with confidence parameter of type double.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API method is deprecated, please use the overload with confidence parameter of type double.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="confidence" Type="System.Int32" />
        <Parameter Name="changeHistoryLength" Type="System.Int32" />
        <Parameter Name="martingale" Type="Microsoft.ML.Transforms.TimeSeries.MartingaleType" />
        <Parameter Name="eps" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.
            The column data is a vector of <see cref="T:System.Double" />. The vector contains 4 elements: alert (non-zero value means a change point), raw score, p-Value and martingale score.</param>
        <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single" />. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="confidence">The confidence for change point detection in the range [0, 100].</param>
        <param name="changeHistoryLength">The length of the sliding window on p-values for computing the martingale score.</param>
        <param name="martingale">The martingale used for scoring.</param>
        <param name="eps">The epsilon parameter for the Power martingale.</param>
        <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator" />, which predicts change points in an
            <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables">independent identically distributed (i.i.d.)</a>
            time series based on adaptive kernel density estimations and martingale scores.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[DetectIidChangePoint](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectIidChangePointBatchPrediction.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DetectIidSpike">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator DetectIidSpike (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, double confidence, int pvalueHistoryLength, Microsoft.ML.Transforms.TimeSeries.AnomalySide side = Microsoft.ML.Transforms.TimeSeries.AnomalySide.TwoSided);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator DetectIidSpike(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, float64 confidence, int32 pvalueHistoryLength, valuetype Microsoft.ML.Transforms.TimeSeries.AnomalySide side) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.DetectIidSpike(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Double,System.Int32,Microsoft.ML.Transforms.TimeSeries.AnomalySide)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectIidSpike (catalog As TransformsCatalog, outputColumnName As String, inputColumnName As String, confidence As Double, pvalueHistoryLength As Integer, Optional side As AnomalySide = Microsoft.ML.Transforms.TimeSeries.AnomalySide.TwoSided) As IidSpikeEstimator" />
      <MemberSignature Language="F#" Value="static member DetectIidSpike : Microsoft.ML.TransformsCatalog * string * string * double * int * Microsoft.ML.Transforms.TimeSeries.AnomalySide -&gt; Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator" Usage="Microsoft.ML.TimeSeriesCatalog.DetectIidSpike (catalog, outputColumnName, inputColumnName, confidence, pvalueHistoryLength, side)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" Index="0" FrameworkAlternate="ml-dotnet" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" Index="1" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="inputColumnName" Type="System.String" Index="2" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="confidence" Type="System.Double" Index="3" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="pvalueHistoryLength" Type="System.Int32" Index="4" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="side" Type="Microsoft.ML.Transforms.TimeSeries.AnomalySide" Index="5" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.
            The column data is a vector of <see cref="T:System.Double" />. The vector contains 3 elements: alert (non-zero value means a spike), raw score, and p-value.</param>
        <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single" />.
            If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="confidence">The confidence for spike detection in the range [0, 100].</param>
        <param name="pvalueHistoryLength">The size of the sliding window for computing the p-value.</param>
        <param name="side">The argument that determines whether to detect positive or negative anomalies, or both.</param>
        <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator" />, which predicts spikes in
            <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables"> independent identically distributed (i.i.d.)</a>
            time series based on adaptive kernel density estimations and martingale scores.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[DetectIidSpike](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectIidSpikeBatchPrediction.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DetectIidSpike">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator DetectIidSpike (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, int confidence, int pvalueHistoryLength, Microsoft.ML.Transforms.TimeSeries.AnomalySide side = Microsoft.ML.Transforms.TimeSeries.AnomalySide.TwoSided);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator DetectIidSpike(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, int32 confidence, int32 pvalueHistoryLength, valuetype Microsoft.ML.Transforms.TimeSeries.AnomalySide side) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.DetectIidSpike(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.AnomalySide)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectIidSpike (catalog As TransformsCatalog, outputColumnName As String, inputColumnName As String, confidence As Integer, pvalueHistoryLength As Integer, Optional side As AnomalySide = Microsoft.ML.Transforms.TimeSeries.AnomalySide.TwoSided) As IidSpikeEstimator" />
      <MemberSignature Language="F#" Value="static member DetectIidSpike : Microsoft.ML.TransformsCatalog * string * string * int * int * Microsoft.ML.Transforms.TimeSeries.AnomalySide -&gt; Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator" Usage="Microsoft.ML.TimeSeriesCatalog.DetectIidSpike (catalog, outputColumnName, inputColumnName, confidence, pvalueHistoryLength, side)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="ml-dotnet">
          <AttributeName Language="C#">[System.Obsolete("This API method is deprecated, please use the overload with confidence parameter of type double.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API method is deprecated, please use the overload with confidence parameter of type double.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="confidence" Type="System.Int32" />
        <Parameter Name="pvalueHistoryLength" Type="System.Int32" />
        <Parameter Name="side" Type="Microsoft.ML.Transforms.TimeSeries.AnomalySide" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.
            The column data is a vector of <see cref="T:System.Double" />. The vector contains 3 elements: alert (non-zero value means a spike), raw score, and p-value.</param>
        <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single" />.
            If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="confidence">The confidence for spike detection in the range [0, 100].</param>
        <param name="pvalueHistoryLength">The size of the sliding window for computing the p-value.</param>
        <param name="side">The argument that determines whether to detect positive or negative anomalies, or both.</param>
        <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator" />, which predicts spikes in
            <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables"> independent identically distributed (i.i.d.)</a>
            time series based on adaptive kernel density estimations and martingale scores.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[DetectIidSpike](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectIidSpikeBatchPrediction.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DetectSeasonality">
      <MemberSignature Language="C#" Value="public static int DetectSeasonality (this Microsoft.ML.AnomalyDetectionCatalog catalog, Microsoft.ML.IDataView input, string inputColumnName, int seasonalityWindowSize = -1, double randomnessThreshold = 0.95);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DetectSeasonality(class Microsoft.ML.AnomalyDetectionCatalog catalog, class Microsoft.ML.IDataView input, string inputColumnName, int32 seasonalityWindowSize, float64 randomnessThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.DetectSeasonality(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.IDataView,System.String,System.Int32,System.Double)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectSeasonality (catalog As AnomalyDetectionCatalog, input As IDataView, inputColumnName As String, Optional seasonalityWindowSize As Integer = -1, Optional randomnessThreshold As Double = 0.95) As Integer" />
      <MemberSignature Language="F#" Value="static member DetectSeasonality : Microsoft.ML.AnomalyDetectionCatalog * Microsoft.ML.IDataView * string * int * double -&gt; int" Usage="Microsoft.ML.TimeSeriesCatalog.DetectSeasonality (catalog, input, inputColumnName, seasonalityWindowSize, randomnessThreshold)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.AnomalyDetectionCatalog" Index="0" FrameworkAlternate="ml-dotnet" RefType="this" />
        <Parameter Name="input" Type="Microsoft.ML.IDataView" Index="1" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="inputColumnName" Type="System.String" Index="2" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="seasonalityWindowSize" Type="System.Int32" Index="3" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="randomnessThreshold" Type="System.Double" Index="4" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="catalog">The detect seasonality catalog.</param>
        <param name="input">Input DataView.The data is an instance of <see cref="T:Microsoft.ML.IDataView" />.</param>
        <param name="inputColumnName">Name of column to process. The column data must be <see cref="T:System.Double" />.</param>
        <param name="seasonalityWindowSize">An upper bound on the number of values to be considered in the input values.
            When set to -1, use the whole input to fit model; when set to a positive integer, only the first windowSize number
            of values will be considered. Default value is -1.</param>
        <param name="randomnessThreshold">
          <a href="https://en.wikipedia.org/wiki/Correlogram">Randomness threshold</a>
            that specifies how confidently the input values follow a predictable pattern recurring as seasonal data.
            The range is between [0, 1]. By default, it is set as 0.95.
            </param>
        <summary>
          <para>
            In time series data, seasonality (or periodicity) is the presence of variations that occur at specific regular intervals,
            such as weekly, monthly, or quarterly.
            </para>
          <para>
            This method detects this predictable interval (or period) by adopting techniques of fourier analysis.
            Assuming the input values have the same time interval (e.g., sensor data collected at every second ordered by timestamps),
            this method takes a list of time-series data, and returns the regular period for the input seasonal data,
            if a predictable fluctuation or pattern can be found that recurs or repeats over this period throughout the input values.
            </para>
          <para>
            Returns -1 if no such pattern is found, that is, the input values do not follow a seasonal fluctuation.
            </para>
        </summary>
        <returns>The regular interval for the input as seasonal data, otherwise return -1.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[LocalizeRootCause](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectSeasonality.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DetectSpikeBySsa">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator DetectSpikeBySsa (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, double confidence, int pvalueHistoryLength, int trainingWindowSize, int seasonalityWindowSize, Microsoft.ML.Transforms.TimeSeries.AnomalySide side = Microsoft.ML.Transforms.TimeSeries.AnomalySide.TwoSided, Microsoft.ML.Transforms.TimeSeries.ErrorFunction errorFunction = Microsoft.ML.Transforms.TimeSeries.ErrorFunction.SignedDifference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator DetectSpikeBySsa(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, float64 confidence, int32 pvalueHistoryLength, int32 trainingWindowSize, int32 seasonalityWindowSize, valuetype Microsoft.ML.Transforms.TimeSeries.AnomalySide side, valuetype Microsoft.ML.Transforms.TimeSeries.ErrorFunction errorFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.DetectSpikeBySsa(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.AnomalySide,Microsoft.ML.Transforms.TimeSeries.ErrorFunction)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectSpikeBySsa (catalog As TransformsCatalog, outputColumnName As String, inputColumnName As String, confidence As Double, pvalueHistoryLength As Integer, trainingWindowSize As Integer, seasonalityWindowSize As Integer, Optional side As AnomalySide = Microsoft.ML.Transforms.TimeSeries.AnomalySide.TwoSided, Optional errorFunction As ErrorFunction = Microsoft.ML.Transforms.TimeSeries.ErrorFunction.SignedDifference) As SsaSpikeEstimator" />
      <MemberSignature Language="F#" Value="static member DetectSpikeBySsa : Microsoft.ML.TransformsCatalog * string * string * double * int * int * int * Microsoft.ML.Transforms.TimeSeries.AnomalySide * Microsoft.ML.Transforms.TimeSeries.ErrorFunction -&gt; Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator" Usage="Microsoft.ML.TimeSeriesCatalog.DetectSpikeBySsa (catalog, outputColumnName, inputColumnName, confidence, pvalueHistoryLength, trainingWindowSize, seasonalityWindowSize, side, errorFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" Index="0" FrameworkAlternate="ml-dotnet" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" Index="1" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="inputColumnName" Type="System.String" Index="2" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="confidence" Type="System.Double" Index="3" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="pvalueHistoryLength" Type="System.Int32" Index="4" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="trainingWindowSize" Type="System.Int32" Index="5" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="seasonalityWindowSize" Type="System.Int32" Index="6" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="side" Type="Microsoft.ML.Transforms.TimeSeries.AnomalySide" Index="7" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="errorFunction" Type="Microsoft.ML.Transforms.TimeSeries.ErrorFunction" Index="8" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.
            The column data is a vector of <see cref="T:System.Double" />. The vector contains 3 elements: alert (non-zero value means a spike), raw score, and p-value.</param>
        <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single" />.
            If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="confidence">The confidence for spike detection in the range [0, 100].</param>
        <param name="pvalueHistoryLength">The size of the sliding window for computing the p-value.</param>
        <param name="trainingWindowSize">The number of points from the beginning of the sequence used for training.</param>
        <param name="seasonalityWindowSize">An upper bound on the largest relevant seasonality in the input time-series.</param>
        <param name="side">The argument that determines whether to detect positive or negative anomalies, or both.</param>
        <param name="errorFunction">The function used to compute the error between the expected and the observed value.</param>
        <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator" />, which predicts spikes in time series
            using <a href="https://en.wikipedia.org/wiki/Singular_spectrum_analysis">Singular Spectrum Analysis (SSA)</a>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[DetectSpikeBySsa](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectSpikeBySsaBatchPrediction.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DetectSpikeBySsa">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator DetectSpikeBySsa (this Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, int confidence, int pvalueHistoryLength, int trainingWindowSize, int seasonalityWindowSize, Microsoft.ML.Transforms.TimeSeries.AnomalySide side = Microsoft.ML.Transforms.TimeSeries.AnomalySide.TwoSided, Microsoft.ML.Transforms.TimeSeries.ErrorFunction errorFunction = Microsoft.ML.Transforms.TimeSeries.ErrorFunction.SignedDifference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator DetectSpikeBySsa(class Microsoft.ML.TransformsCatalog catalog, string outputColumnName, string inputColumnName, int32 confidence, int32 pvalueHistoryLength, int32 trainingWindowSize, int32 seasonalityWindowSize, valuetype Microsoft.ML.Transforms.TimeSeries.AnomalySide side, valuetype Microsoft.ML.Transforms.TimeSeries.ErrorFunction errorFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.DetectSpikeBySsa(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.AnomalySide,Microsoft.ML.Transforms.TimeSeries.ErrorFunction)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DetectSpikeBySsa (catalog As TransformsCatalog, outputColumnName As String, inputColumnName As String, confidence As Integer, pvalueHistoryLength As Integer, trainingWindowSize As Integer, seasonalityWindowSize As Integer, Optional side As AnomalySide = Microsoft.ML.Transforms.TimeSeries.AnomalySide.TwoSided, Optional errorFunction As ErrorFunction = Microsoft.ML.Transforms.TimeSeries.ErrorFunction.SignedDifference) As SsaSpikeEstimator" />
      <MemberSignature Language="F#" Value="static member DetectSpikeBySsa : Microsoft.ML.TransformsCatalog * string * string * int * int * int * int * Microsoft.ML.Transforms.TimeSeries.AnomalySide * Microsoft.ML.Transforms.TimeSeries.ErrorFunction -&gt; Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator" Usage="Microsoft.ML.TimeSeriesCatalog.DetectSpikeBySsa (catalog, outputColumnName, inputColumnName, confidence, pvalueHistoryLength, trainingWindowSize, seasonalityWindowSize, side, errorFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="ml-dotnet">
          <AttributeName Language="C#">[System.Obsolete("This API method is deprecated, please use the overload with confidence parameter of type double.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API method is deprecated, please use the overload with confidence parameter of type double.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.TransformsCatalog" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="confidence" Type="System.Int32" />
        <Parameter Name="pvalueHistoryLength" Type="System.Int32" />
        <Parameter Name="trainingWindowSize" Type="System.Int32" />
        <Parameter Name="seasonalityWindowSize" Type="System.Int32" />
        <Parameter Name="side" Type="Microsoft.ML.Transforms.TimeSeries.AnomalySide" />
        <Parameter Name="errorFunction" Type="Microsoft.ML.Transforms.TimeSeries.ErrorFunction" />
      </Parameters>
      <Docs>
        <param name="catalog">The transform's catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.
            The column data is a vector of <see cref="T:System.Double" />. The vector contains 3 elements: alert (non-zero value means a spike), raw score, and p-value.</param>
        <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single" />.
            If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
        <param name="confidence">The confidence for spike detection in the range [0, 100].</param>
        <param name="pvalueHistoryLength">The size of the sliding window for computing the p-value.</param>
        <param name="trainingWindowSize">The number of points from the beginning of the sequence used for training.</param>
        <param name="seasonalityWindowSize">An upper bound on the largest relevant seasonality in the input time-series.</param>
        <param name="side">The argument that determines whether to detect positive or negative anomalies, or both.</param>
        <param name="errorFunction">The function used to compute the error between the expected and the observed value.</param>
        <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator" />, which predicts spikes in time series
            using <a href="https://en.wikipedia.org/wiki/Singular_spectrum_analysis">Singular Spectrum Analysis (SSA)</a>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[DetectSpikeBySsa](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectSpikeBySsaBatchPrediction.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ForecastBySsa">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Transforms.TimeSeries.SsaForecastingEstimator ForecastBySsa (this Microsoft.ML.ForecastingCatalog catalog, string outputColumnName, string inputColumnName, int windowSize, int seriesLength, int trainSize, int horizon, bool isAdaptive = false, float discountFactor = 1, Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod rankSelectionMethod = Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod.Exact, int? rank = default, int? maxRank = default, bool shouldStabilize = true, bool shouldMaintainInfo = false, Microsoft.ML.Transforms.TimeSeries.GrowthRatio? maxGrowth = default, string confidenceLowerBoundColumn = default, string confidenceUpperBoundColumn = default, float confidenceLevel = 0.95, bool variableHorizon = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Transforms.TimeSeries.SsaForecastingEstimator ForecastBySsa(class Microsoft.ML.ForecastingCatalog catalog, string outputColumnName, string inputColumnName, int32 windowSize, int32 seriesLength, int32 trainSize, int32 horizon, bool isAdaptive, float32 discountFactor, valuetype Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod rankSelectionMethod, valuetype System.Nullable`1&lt;int32&gt; rank, valuetype System.Nullable`1&lt;int32&gt; maxRank, bool shouldStabilize, bool shouldMaintainInfo, valuetype System.Nullable`1&lt;valuetype Microsoft.ML.Transforms.TimeSeries.GrowthRatio&gt; maxGrowth, string confidenceLowerBoundColumn, string confidenceUpperBoundColumn, float32 confidenceLevel, bool variableHorizon) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.ForecastBySsa(Microsoft.ML.ForecastingCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Single,Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{Microsoft.ML.Transforms.TimeSeries.GrowthRatio},System.String,System.String,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForecastBySsa (catalog As ForecastingCatalog, outputColumnName As String, inputColumnName As String, windowSize As Integer, seriesLength As Integer, trainSize As Integer, horizon As Integer, Optional isAdaptive As Boolean = false, Optional discountFactor As Single = 1, Optional rankSelectionMethod As RankSelectionMethod = Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod.Exact, Optional rank As Nullable(Of Integer) = Nothing, Optional maxRank As Nullable(Of Integer) = Nothing, Optional shouldStabilize As Boolean = true, Optional shouldMaintainInfo As Boolean = false, Optional maxGrowth As Nullable(Of GrowthRatio) = Nothing, Optional confidenceLowerBoundColumn As String = Nothing, Optional confidenceUpperBoundColumn As String = Nothing, Optional confidenceLevel As Single = 0.95, Optional variableHorizon As Boolean = false) As SsaForecastingEstimator" />
      <MemberSignature Language="F#" Value="static member ForecastBySsa : Microsoft.ML.ForecastingCatalog * string * string * int * int * int * int * bool * single * Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod * Nullable&lt;int&gt; * Nullable&lt;int&gt; * bool * bool * Nullable&lt;Microsoft.ML.Transforms.TimeSeries.GrowthRatio&gt; * string * string * single * bool -&gt; Microsoft.ML.Transforms.TimeSeries.SsaForecastingEstimator" Usage="Microsoft.ML.TimeSeriesCatalog.ForecastBySsa (catalog, outputColumnName, inputColumnName, windowSize, seriesLength, trainSize, horizon, isAdaptive, discountFactor, rankSelectionMethod, rank, maxRank, shouldStabilize, shouldMaintainInfo, maxGrowth, confidenceLowerBoundColumn, confidenceUpperBoundColumn, confidenceLevel, variableHorizon)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.TimeSeries.SsaForecastingEstimator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.ForecastingCatalog" RefType="this" />
        <Parameter Name="outputColumnName" Type="System.String" />
        <Parameter Name="inputColumnName" Type="System.String" />
        <Parameter Name="windowSize" Type="System.Int32" />
        <Parameter Name="seriesLength" Type="System.Int32" />
        <Parameter Name="trainSize" Type="System.Int32" />
        <Parameter Name="horizon" Type="System.Int32" />
        <Parameter Name="isAdaptive" Type="System.Boolean" />
        <Parameter Name="discountFactor" Type="System.Single" />
        <Parameter Name="rankSelectionMethod" Type="Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod" />
        <Parameter Name="rank" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxRank" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="shouldStabilize" Type="System.Boolean" />
        <Parameter Name="shouldMaintainInfo" Type="System.Boolean" />
        <Parameter Name="maxGrowth" Type="System.Nullable&lt;Microsoft.ML.Transforms.TimeSeries.GrowthRatio&gt;" />
        <Parameter Name="confidenceLowerBoundColumn" Type="System.String" />
        <Parameter Name="confidenceUpperBoundColumn" Type="System.String" />
        <Parameter Name="confidenceLevel" Type="System.Single" />
        <Parameter Name="variableHorizon" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catalog">Catalog.</param>
        <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
        <param name="inputColumnName">Name of column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.
            The vector contains Alert, Raw Score, P-Value as first three values.</param>
        <param name="windowSize">The length of the window on the series for building the trajectory matrix (parameter L).</param>
        <param name="seriesLength">The length of series that is kept in buffer for modeling (parameter N).</param>
        <param name="trainSize">The length of series from the beginning used for training.</param>
        <param name="horizon">The number of values to forecast.</param>
        <param name="isAdaptive">The flag determing whether the model is adaptive.</param>
        <param name="discountFactor">The discount factor in [0,1] used for online updates.</param>
        <param name="rankSelectionMethod">The rank selection method.</param>
        <param name="rank">The desired rank of the subspace used for SSA projection (parameter r). This parameter should be in the range in [1, windowSize].
            If set to null, the rank is automatically determined based on prediction error minimization.</param>
        <param name="maxRank">The maximum rank considered during the rank selection process. If not provided (i.e. set to null), it is set to windowSize - 1.</param>
        <param name="shouldStabilize">The flag determining whether the model should be stabilized.</param>
        <param name="shouldMaintainInfo">The flag determining whether the meta information for the model needs to be maintained.</param>
        <param name="maxGrowth">The maximum growth on the exponential trend.</param>
        <param name="confidenceLowerBoundColumn">The name of the confidence interval lower bound column. If not specified then confidence intervals will not be calculated.</param>
        <param name="confidenceUpperBoundColumn">The name of the confidence interval upper bound column. If not specified then confidence intervals will not be calculated.</param>
        <param name="confidenceLevel">The confidence level for forecasting.</param>
        <param name="variableHorizon">Set this to true if horizon will change after training(at prediction time).</param>
        <summary>
            Singular Spectrum Analysis (SSA) model for univariate time-series forecasting.
            For the details of the model, refer to http://arxiv.org/pdf/1206.6910.pdf.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[Forecasting](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/Forecasting.cs)]
            [!code-csharp[ForecastingWithConfidenceInterval](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/ForecastingWithConfidenceInterval.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="LocalizeRootCause">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.TimeSeries.RootCause LocalizeRootCause (this Microsoft.ML.AnomalyDetectionCatalog catalog, Microsoft.ML.TimeSeries.RootCauseLocalizationInput src, double beta = 0.3, double rootCauseThreshold = 0.95);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.TimeSeries.RootCause LocalizeRootCause(class Microsoft.ML.AnomalyDetectionCatalog catalog, class Microsoft.ML.TimeSeries.RootCauseLocalizationInput src, float64 beta, float64 rootCauseThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.LocalizeRootCause(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.TimeSeries.RootCauseLocalizationInput,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LocalizeRootCause (catalog As AnomalyDetectionCatalog, src As RootCauseLocalizationInput, Optional beta As Double = 0.3, Optional rootCauseThreshold As Double = 0.95) As RootCause" />
      <MemberSignature Language="F#" Value="static member LocalizeRootCause : Microsoft.ML.AnomalyDetectionCatalog * Microsoft.ML.TimeSeries.RootCauseLocalizationInput * double * double -&gt; Microsoft.ML.TimeSeries.RootCause" Usage="Microsoft.ML.TimeSeriesCatalog.LocalizeRootCause (catalog, src, beta, rootCauseThreshold)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.TimeSeries.RootCause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.AnomalyDetectionCatalog" Index="0" FrameworkAlternate="ml-dotnet" RefType="this" />
        <Parameter Name="src" Type="Microsoft.ML.TimeSeries.RootCauseLocalizationInput" Index="1" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="beta" Type="System.Double" Index="2" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="rootCauseThreshold" Type="System.Double" Index="3" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="catalog">The anomaly detection catalog.</param>
        <param name="src">Root cause's input. The data is an instance of <see cref="T:Microsoft.ML.TimeSeries.RootCauseLocalizationInput" />.</param>
        <param name="beta">Beta is a weight parameter for user to choose.
            It is used when score is calculated for each root cause item. The range of beta should be in [0,1].
            For a larger beta, root cause items which have a large difference between value and expected value will get a high score.
            For a small beta, root cause items which have a high relative change will get a low score.</param>
        <param name="rootCauseThreshold">A threshold to determine whether the point should be root cause. The range of this threshold should be in [0,1].
            If the point's delta is equal to or larger than rootCauseThreshold multiplied by anomaly dimension point's delta, this point is treated as a root cause. Different threshold will turn out different results. Users can choose the delta according to their data and requirments.</param>
        <summary>
            Create <see cref="T:Microsoft.ML.TimeSeries.RootCause" />, which localizes root causes using decision tree algorithm.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[LocalizeRootCause](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/LocalizeRootCause.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
    <Member MemberName="LocalizeRootCauses">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;Microsoft.ML.TimeSeries.RootCause&gt; LocalizeRootCauses (this Microsoft.ML.AnomalyDetectionCatalog catalog, Microsoft.ML.TimeSeries.RootCauseLocalizationInput src, double beta = 0.5, double rootCauseThreshold = 0.95);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;class Microsoft.ML.TimeSeries.RootCause&gt; LocalizeRootCauses(class Microsoft.ML.AnomalyDetectionCatalog catalog, class Microsoft.ML.TimeSeries.RootCauseLocalizationInput src, float64 beta, float64 rootCauseThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TimeSeriesCatalog.LocalizeRootCauses(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.TimeSeries.RootCauseLocalizationInput,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LocalizeRootCauses (catalog As AnomalyDetectionCatalog, src As RootCauseLocalizationInput, Optional beta As Double = 0.5, Optional rootCauseThreshold As Double = 0.95) As List(Of RootCause)" />
      <MemberSignature Language="F#" Value="static member LocalizeRootCauses : Microsoft.ML.AnomalyDetectionCatalog * Microsoft.ML.TimeSeries.RootCauseLocalizationInput * double * double -&gt; System.Collections.Generic.List&lt;Microsoft.ML.TimeSeries.RootCause&gt;" Usage="Microsoft.ML.TimeSeriesCatalog.LocalizeRootCauses (catalog, src, beta, rootCauseThreshold)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;Microsoft.ML.TimeSeries.RootCause&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.AnomalyDetectionCatalog" Index="0" FrameworkAlternate="ml-dotnet" RefType="this" />
        <Parameter Name="src" Type="Microsoft.ML.TimeSeries.RootCauseLocalizationInput" Index="1" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="beta" Type="System.Double" Index="2" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="rootCauseThreshold" Type="System.Double" Index="3" FrameworkAlternate="ml-dotnet" />
      </Parameters>
      <Docs>
        <param name="catalog">The anomaly detection catalog.</param>
        <param name="src">Root cause's input. The data is an instance of <see cref="T:Microsoft.ML.TimeSeries.RootCauseLocalizationInput" />.</param>
        <param name="beta">Beta is a weight parameter for user to choose. It is used when score is calculated for each root cause item. The range of beta should be in [0,1]. For a larger beta, root cause point which has a large difference between value and expected value will get a high score. On the contrary, for a small beta, root cause items which has a high relative change will get a high score.</param>
        <param name="rootCauseThreshold">A threshold to determine whether the point should be root cause. The range of this threshold should be in [0,1].
            If the point's delta is equal to or larger than rootCauseThreshold multiplied by anomaly dimension point's delta, this point is treated as a root cause. Different threshold will turn out different results. Users can choose the delta according to their data and requirments.</param>
        <summary>
            Outputs an ordered list of <see cref="T:Microsoft.ML.TimeSeries.RootCause" />s. The order corresponds to which prepared cause is most likely to be the root cause.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
          <format type="text/markdown"><![CDATA[
            [!code-csharp[LocalizeRootCauseMultipleDimensions](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/LocalizeRootCauseMultipleDimensions.cs)]
            ]]></format>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>
