<Type Name="ModelOperationsCatalog" FullName="Microsoft.ML.ModelOperationsCatalog">
  <TypeSignature Language="C#" Value="public sealed class ModelOperationsCatalog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ModelOperationsCatalog extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.ModelOperationsCatalog" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ModelOperationsCatalog" />
  <TypeSignature Language="F#" Value="type ModelOperationsCatalog = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            An object serving as a 'catalog' of available model operations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreatePredictionEngine&lt;TSrc,TDst&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.ML.PredictionEngine&lt;TSrc,TDst&gt; CreatePredictionEngine&lt;TSrc,TDst&gt; (Microsoft.ML.ITransformer transformer, Microsoft.ML.DataViewSchema inputSchema) where TSrc : class where TDst : class, new();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.PredictionEngine`2&lt;!!TSrc, !!TDst&gt; CreatePredictionEngine&lt;class TSrc, class .ctor TDst&gt;(class Microsoft.ML.ITransformer transformer, class Microsoft.ML.DataViewSchema inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ModelOperationsCatalog.CreatePredictionEngine``2(Microsoft.ML.ITransformer,Microsoft.ML.DataViewSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePredictionEngine(Of TSrc As Class, TDst As Class) (transformer As ITransformer, inputSchema As DataViewSchema) As PredictionEngine(Of TSrc, TDst)" />
      <MemberSignature Language="F#" Value="member this.CreatePredictionEngine : Microsoft.ML.ITransformer * Microsoft.ML.DataViewSchema -&gt; Microsoft.ML.PredictionEngine&lt;'Src, 'Dst (requires 'Src : null and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst))&gt; (requires 'Src : null and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst))" Usage="modelOperationsCatalog.CreatePredictionEngine (transformer, inputSchema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.PredictionEngine&lt;TSrc,TDst&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSrc">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDst">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="transformer" Type="Microsoft.ML.ITransformer" />
        <Parameter Name="inputSchema" Type="Microsoft.ML.DataViewSchema" />
      </Parameters>
      <Docs>
        <typeparam name="TSrc">To be added.</typeparam>
        <typeparam name="TDst">To be added.</typeparam>
        <param name="transformer">To be added.</param>
        <param name="inputSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePredictionEngine&lt;TSrc,TDst&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.ML.PredictionEngine&lt;TSrc,TDst&gt; CreatePredictionEngine&lt;TSrc,TDst&gt; (Microsoft.ML.ITransformer transformer, bool ignoreMissingColumns = true, Microsoft.ML.Data.SchemaDefinition inputSchemaDefinition = null, Microsoft.ML.Data.SchemaDefinition outputSchemaDefinition = null) where TSrc : class where TDst : class, new();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.PredictionEngine`2&lt;!!TSrc, !!TDst&gt; CreatePredictionEngine&lt;class TSrc, class .ctor TDst&gt;(class Microsoft.ML.ITransformer transformer, bool ignoreMissingColumns, class Microsoft.ML.Data.SchemaDefinition inputSchemaDefinition, class Microsoft.ML.Data.SchemaDefinition outputSchemaDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ModelOperationsCatalog.CreatePredictionEngine``2(Microsoft.ML.ITransformer,System.Boolean,Microsoft.ML.Data.SchemaDefinition,Microsoft.ML.Data.SchemaDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePredictionEngine(Of TSrc As Class, TDst As Class) (transformer As ITransformer, Optional ignoreMissingColumns As Boolean = true, Optional inputSchemaDefinition As SchemaDefinition = null, Optional outputSchemaDefinition As SchemaDefinition = null) As PredictionEngine(Of TSrc, TDst)" />
      <MemberSignature Language="F#" Value="member this.CreatePredictionEngine : Microsoft.ML.ITransformer * bool * Microsoft.ML.Data.SchemaDefinition * Microsoft.ML.Data.SchemaDefinition -&gt; Microsoft.ML.PredictionEngine&lt;'Src, 'Dst (requires 'Src : null and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst))&gt; (requires 'Src : null and 'Dst : null and 'Dst : (new : unit -&gt; 'Dst))" Usage="modelOperationsCatalog.CreatePredictionEngine (transformer, ignoreMissingColumns, inputSchemaDefinition, outputSchemaDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.PredictionEngine&lt;TSrc,TDst&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSrc">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDst">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="transformer" Type="Microsoft.ML.ITransformer" />
        <Parameter Name="ignoreMissingColumns" Type="System.Boolean" />
        <Parameter Name="inputSchemaDefinition" Type="Microsoft.ML.Data.SchemaDefinition" />
        <Parameter Name="outputSchemaDefinition" Type="Microsoft.ML.Data.SchemaDefinition" />
      </Parameters>
      <Docs>
        <typeparam name="TSrc">The class that defines the input data.</typeparam>
        <typeparam name="TDst">The class that defines the output data.</typeparam>
        <param name="transformer">The transformer to use for prediction.</param>
        <param name="ignoreMissingColumns">Whether to throw an exception if a column exists in
            <paramref name="outputSchemaDefinition" /> but the corresponding member doesn't exist in
            <typeparamref name="TDst" />.</param>
        <param name="inputSchemaDefinition">Additional settings of the input schema.</param>
        <param name="outputSchemaDefinition">Additional settings of the output schema.</param>
        <summary>
            Create a prediction engine for one-time prediction.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public Microsoft.ML.ITransformer Load (System.IO.Stream stream, out Microsoft.ML.DataViewSchema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.ITransformer Load(class System.IO.Stream stream, [out] class Microsoft.ML.DataViewSchema&amp; inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ModelOperationsCatalog.Load(System.IO.Stream,Microsoft.ML.DataViewSchema@)" />
      <MemberSignature Language="F#" Value="member this.Load : System.IO.Stream *  -&gt; Microsoft.ML.ITransformer" Usage="modelOperationsCatalog.Load (stream, inputSchema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.ITransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="inputSchema" Type="Microsoft.ML.DataViewSchema" RefType="out" />
      </Parameters>
      <Docs>
        <param name="stream">A readable, seekable stream to load from.</param>
        <param name="inputSchema">Will contain the input schema for the model. If the model was saved without
            any description of the input, there will be no input schema. In this case this can be <see langword="null" />.</param>
        <summary>
            Load the model and its input schema from a stream.
            </summary>
        <returns>The loaded model.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public Microsoft.ML.ITransformer Load (string filePath, out Microsoft.ML.DataViewSchema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.ITransformer Load(string filePath, [out] class Microsoft.ML.DataViewSchema&amp; inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ModelOperationsCatalog.Load(System.String,Microsoft.ML.DataViewSchema@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (filePath As String, ByRef inputSchema As DataViewSchema) As ITransformer" />
      <MemberSignature Language="F#" Value="member this.Load : string *  -&gt; Microsoft.ML.ITransformer" Usage="modelOperationsCatalog.Load (filePath, inputSchema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.ITransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="inputSchema" Type="Microsoft.ML.DataViewSchema" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filePath">Path to a file where the model should be read from.</param>
        <param name="inputSchema">Will contain the input schema for the model. If the model was saved without
            any description of the input, there will be no input schema. In this case this can be <see langword="null" />.</param>
        <summary>
            Load the model and its input schema from a file.
            </summary>
        <returns>The loaded model.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWithDataLoader">
      <MemberSignature Language="C#" Value="public Microsoft.ML.ITransformer LoadWithDataLoader (System.IO.Stream stream, out Microsoft.ML.IDataLoader&lt;Microsoft.ML.Data.IMultiStreamSource&gt; loader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.ITransformer LoadWithDataLoader(class System.IO.Stream stream, [out] class Microsoft.ML.IDataLoader`1&lt;class Microsoft.ML.Data.IMultiStreamSource&gt;&amp; loader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ModelOperationsCatalog.LoadWithDataLoader(System.IO.Stream,Microsoft.ML.IDataLoader{Microsoft.ML.Data.IMultiStreamSource}@)" />
      <MemberSignature Language="F#" Value="member this.LoadWithDataLoader : System.IO.Stream *  -&gt; Microsoft.ML.ITransformer" Usage="modelOperationsCatalog.LoadWithDataLoader (stream, loader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.ITransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="loader" Type="Microsoft.ML.IDataLoader&lt;Microsoft.ML.Data.IMultiStreamSource&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="stream">A readable, seekable stream to load from.</param>
        <param name="loader">The data loader from the model stream. Note that if there is no data loader,
            this method will throw an exception. The scenario where no loader is stored in the stream should
            be handled instead using the <see cref="M:Microsoft.ML.ModelOperationsCatalog.Load(System.IO.Stream,Microsoft.ML.DataViewSchema@)" /> method.</param>
        <summary>
            Load a transformer model and a data loader model from a stream.
            </summary>
        <returns>The transformer model from the model stream.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWithDataLoader">
      <MemberSignature Language="C#" Value="public Microsoft.ML.ITransformer LoadWithDataLoader (string filePath, out Microsoft.ML.IDataLoader&lt;Microsoft.ML.Data.IMultiStreamSource&gt; loader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.ITransformer LoadWithDataLoader(string filePath, [out] class Microsoft.ML.IDataLoader`1&lt;class Microsoft.ML.Data.IMultiStreamSource&gt;&amp; loader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ModelOperationsCatalog.LoadWithDataLoader(System.String,Microsoft.ML.IDataLoader{Microsoft.ML.Data.IMultiStreamSource}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadWithDataLoader (filePath As String, ByRef loader As IDataLoader(Of IMultiStreamSource)) As ITransformer" />
      <MemberSignature Language="F#" Value="member this.LoadWithDataLoader : string *  -&gt; Microsoft.ML.ITransformer" Usage="modelOperationsCatalog.LoadWithDataLoader (filePath, loader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.ITransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="loader" Type="Microsoft.ML.IDataLoader&lt;Microsoft.ML.Data.IMultiStreamSource&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filePath">Path to a file where the model should be read from.</param>
        <param name="loader">The data loader from the model stream. Note that if there is no data loader,
            this method will throw an exception. The scenario where no loader is stored in the stream should
            be handled instead using the <see cref="M:Microsoft.ML.ModelOperationsCatalog.Load(System.IO.Stream,Microsoft.ML.DataViewSchema@)" /> method.</param>
        <summary>
            Load a transformer model and a data loader model from a file.
            </summary>
        <returns>The transformer model from the model file.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (Microsoft.ML.ITransformer model, Microsoft.ML.DataViewSchema inputSchema, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class Microsoft.ML.ITransformer model, class Microsoft.ML.DataViewSchema inputSchema, class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ModelOperationsCatalog.Save(Microsoft.ML.ITransformer,Microsoft.ML.DataViewSchema,System.IO.Stream)" />
      <MemberSignature Language="F#" Value="member this.Save : Microsoft.ML.ITransformer * Microsoft.ML.DataViewSchema * System.IO.Stream -&gt; unit" Usage="modelOperationsCatalog.Save (model, inputSchema, stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.ML.ITransformer" />
        <Parameter Name="inputSchema" Type="Microsoft.ML.DataViewSchema" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="model">The trained model to be saved. Note that this can be <see langword="null" />, as a shorthand
            for an empty transformer chain. Upon loading with <see cref="M:Microsoft.ML.ModelOperationsCatalog.Load(System.IO.Stream,Microsoft.ML.DataViewSchema@)" /> the returned value will
            be an empty <see cref="T:Microsoft.ML.Data.TransformerChain`1" />.</param>
        <param name="inputSchema">The schema of the input to the transformer. This can be <see langword="null" />.</param>
        <param name="stream">A writeable, seekable stream to save to.</param>
        <summary>
            Save a transformer model and the schema of the data that was used to train it to the stream.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (Microsoft.ML.ITransformer model, Microsoft.ML.DataViewSchema inputSchema, string filePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class Microsoft.ML.ITransformer model, class Microsoft.ML.DataViewSchema inputSchema, string filePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ModelOperationsCatalog.Save(Microsoft.ML.ITransformer,Microsoft.ML.DataViewSchema,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (model As ITransformer, inputSchema As DataViewSchema, filePath As String)" />
      <MemberSignature Language="F#" Value="member this.Save : Microsoft.ML.ITransformer * Microsoft.ML.DataViewSchema * string -&gt; unit" Usage="modelOperationsCatalog.Save (model, inputSchema, filePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.ML.ITransformer" />
        <Parameter Name="inputSchema" Type="Microsoft.ML.DataViewSchema" />
        <Parameter Name="filePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="model">The trained model to be saved. Note that this can be <see langword="null" />, as a shorthand
            for an empty transformer chain. Upon loading with <see cref="M:Microsoft.ML.ModelOperationsCatalog.Load(System.IO.Stream,Microsoft.ML.DataViewSchema@)" /> the returned value will
            be an empty <see cref="T:Microsoft.ML.Data.TransformerChain`1" />.</param>
        <param name="inputSchema">The schema of the input to the transformer. This can be <see langword="null" />.</param>
        <param name="filePath">Path where model should be saved.</param>
        <summary>
            Save a transformer model and the schema of the data that was used to train it to the file.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public void Save&lt;TSource&gt; (Microsoft.ML.ITransformer model, Microsoft.ML.IDataLoader&lt;TSource&gt; loader, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save&lt;TSource&gt;(class Microsoft.ML.ITransformer model, class Microsoft.ML.IDataLoader`1&lt;!!TSource&gt; loader, class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ModelOperationsCatalog.Save``1(Microsoft.ML.ITransformer,Microsoft.ML.IDataLoader{``0},System.IO.Stream)" />
      <MemberSignature Language="F#" Value="member this.Save : Microsoft.ML.ITransformer * Microsoft.ML.IDataLoader&lt;'Source&gt; * System.IO.Stream -&gt; unit" Usage="modelOperationsCatalog.Save (model, loader, stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.ML.ITransformer" />
        <Parameter Name="loader" Type="Microsoft.ML.IDataLoader&lt;TSource&gt;" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="model">The trained model to be saved. Note that this can be <see langword="null" />, as a shorthand
            for an empty transformer chain. Upon loading with <see cref="M:Microsoft.ML.ModelOperationsCatalog.LoadWithDataLoader(System.IO.Stream,Microsoft.ML.IDataLoader{Microsoft.ML.Data.IMultiStreamSource}@)" />
            the returned value will be an empty <see cref="T:Microsoft.ML.Data.TransformerChain`1" />.</param>
        <param name="loader">The loader that was used to create data to train the model.</param>
        <param name="stream">A writeable, seekable stream to save to.</param>
        <summary>
            Save a transformer model and the loader used to create its input data to the stream.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public void Save&lt;TSource&gt; (Microsoft.ML.ITransformer model, Microsoft.ML.IDataLoader&lt;TSource&gt; loader, string filePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save&lt;TSource&gt;(class Microsoft.ML.ITransformer model, class Microsoft.ML.IDataLoader`1&lt;!!TSource&gt; loader, string filePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.ModelOperationsCatalog.Save``1(Microsoft.ML.ITransformer,Microsoft.ML.IDataLoader{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save(Of TSource) (model As ITransformer, loader As IDataLoader(Of TSource), filePath As String)" />
      <MemberSignature Language="F#" Value="member this.Save : Microsoft.ML.ITransformer * Microsoft.ML.IDataLoader&lt;'Source&gt; * string -&gt; unit" Usage="modelOperationsCatalog.Save (model, loader, filePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.ML.ITransformer" />
        <Parameter Name="loader" Type="Microsoft.ML.IDataLoader&lt;TSource&gt;" />
        <Parameter Name="filePath" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="model">The trained model to be saved. Note that this can be <see langword="null" />, as a shorthand
            for an empty transformer chain. Upon loading with <see cref="M:Microsoft.ML.ModelOperationsCatalog.LoadWithDataLoader(System.IO.Stream,Microsoft.ML.IDataLoader{Microsoft.ML.Data.IMultiStreamSource}@)" />
            the returned value will be an empty <see cref="T:Microsoft.ML.Data.TransformerChain`1" />.</param>
        <param name="loader">The loader that was used to create data to train the model.</param>
        <param name="filePath">Path where model should be saved.</param>
        <summary>
            Save a transformer model and the loader used to create its input data to the file.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>