<Type Name="BlockingThreadPool" FullName="Microsoft.ML.Runtime.FastTree.Internal.BlockingThreadPool">
  <TypeSignature Language="C#" Value="public static class BlockingThreadPool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit BlockingThreadPool extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.FastTree.Internal.BlockingThreadPool" />
  <TypeSignature Language="VB.NET" Value="Public Class BlockingThreadPool" />
  <TypeSignature Language="F#" Value="type BlockingThreadPool = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This class wraps the standard .NET ThreadPool and adds the following functionality:
            1) the user explicitly defines a maximum of concurrently running threads
            2) if the maximum is k, and k work items are already running, a call to RunOrBlock will block until a
               thread is available
            3) a work item can be any function with 6 or less arguments
            4) a work item knows the index of the thread it is running on - this can be used if the threads share \
               common resources
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize (int numThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Initialize(int32 numThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.FastTree.Internal.BlockingThreadPool.Initialize(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Initialize (numThreads As Integer)" />
      <MemberSignature Language="F#" Value="static member Initialize : int -&gt; unit" Usage="Microsoft.ML.Runtime.FastTree.Internal.BlockingThreadPool.Initialize numThreads" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numThreads">the maximal number of concurrent threads</param>
        <summary>
            constructor
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumThreads">
      <MemberSignature Language="C#" Value="public static int NumThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 NumThreads" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.FastTree.Internal.BlockingThreadPool.NumThreads" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NumThreads As Integer" />
      <MemberSignature Language="F#" Value="member this.NumThreads : int" Usage="Microsoft.ML.Runtime.FastTree.Internal.BlockingThreadPool.NumThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>