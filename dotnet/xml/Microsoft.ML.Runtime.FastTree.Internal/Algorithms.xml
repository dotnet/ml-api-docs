<Type Name="Algorithms" FullName="Microsoft.ML.Runtime.FastTree.Internal.Algorithms">
  <TypeSignature Language="C#" Value="public static class Algorithms" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Algorithms extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.FastTree.Internal.Algorithms" />
  <TypeSignature Language="VB.NET" Value="Public Class Algorithms" />
  <TypeSignature Language="F#" Value="type Algorithms = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class Algorithms abstract sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class Algorithms abstract sealed" />
  <TypeSignature Language="C++ WINRT" Value="class Algorithms abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="FindFirstGE&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindFirstGE&lt;T&gt; (T[] array, T val) where T : IComparable;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindFirstGE&lt;(class System.IComparable) T&gt;(!!T[] array, !!T val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.FastTree.Internal.Algorithms.FindFirstGE``1(``0[],``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindFirstGE(Of T As IComparable) (array As T(), val As T) As Integer" />
      <MemberSignature Language="F#" Value="static member FindFirstGE : 'T[] * 'T -&gt; int (requires 'T :&gt; IComparable)" Usage="Microsoft.ML.Runtime.FastTree.Internal.Algorithms.FindFirstGE (array, val)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable static int FindFirstGE(cli::array &lt;T&gt; ^ array, T val);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable static int FindFirstGE(Platform::Array &lt;T&gt; ^ array, T val);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename T&gt;&#xA; where T : IComparable static int FindFirstGE(std::Array &lt;T&gt; const &amp; array, T val);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="val" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">an IComparable type</typeparam>
        <param name="array">a sorted array of values</param>
        <param name="val">the value to search for</param>
        <summary>
            Returns the index of the first array position that is larger than or equal to val
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindLastLE&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindLastLE&lt;T&gt; (T[] array, T val) where T : IComparable;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindLastLE&lt;(class System.IComparable) T&gt;(!!T[] array, !!T val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.FastTree.Internal.Algorithms.FindLastLE``1(``0[],``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLastLE(Of T As IComparable) (array As T(), val As T) As Integer" />
      <MemberSignature Language="F#" Value="static member FindLastLE : 'T[] * 'T -&gt; int (requires 'T :&gt; IComparable)" Usage="Microsoft.ML.Runtime.FastTree.Internal.Algorithms.FindLastLE (array, val)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable static int FindLastLE(cli::array &lt;T&gt; ^ array, T val);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable static int FindLastLE(Platform::Array &lt;T&gt; ^ array, T val);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename T&gt;&#xA; where T : IComparable static int FindLastLE(std::Array &lt;T&gt; const &amp; array, T val);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="val" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">an IComparable type</typeparam>
        <param name="array">a sorted array of values</param>
        <param name="val">the value to search for</param>
        <summary>
            Returns the index of the last array position that is less than or equal to val
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeSortedUniqued&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] MergeSortedUniqued&lt;T&gt; (T[][] arrays) where T : IComparable;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] MergeSortedUniqued&lt;(class System.IComparable) T&gt;(!!T[][] arrays) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.FastTree.Internal.Algorithms.MergeSortedUniqued``1(``0[][])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MergeSortedUniqued(Of T As IComparable) (arrays As T()()) As T()" />
      <MemberSignature Language="F#" Value="static member MergeSortedUniqued : 'T[][] -&gt; 'T[] (requires 'T :&gt; IComparable)" Usage="Microsoft.ML.Runtime.FastTree.Internal.Algorithms.MergeSortedUniqued arrays" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable static cli::array &lt;T&gt; ^ MergeSortedUniqued(cli::array &lt;cli::array &lt;T&gt; ^&gt; ^ arrays);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename T&gt;&#xA; where T : IComparable static std::Array &lt;T&gt; MergeSortedUniqued(std::Array &lt;std::Array &lt;T&gt; const &amp;&gt; const &amp; arrays);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="arrays" Type="T[][]" />
      </Parameters>
      <Docs>
        <typeparam name="T">An IComparable </typeparam>
        <param name="arrays">An array of sorted uniqued arrays</param>
        <summary>
            Takes an arbitrary array of sorted uniqued IComparables and returns a sorted uniqued merge
            </summary>
        <returns>A sorted and uniqued merge</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeSortedUniqued&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int MergeSortedUniqued&lt;T&gt; (T[] input1, int begin1, int end1, T[] input2, int begin2, int end2, T[] output, int beginOutput) where T : IComparable;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 MergeSortedUniqued&lt;(class System.IComparable) T&gt;(!!T[] input1, int32 begin1, int32 end1, !!T[] input2, int32 begin2, int32 end2, !!T[] output, int32 beginOutput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.FastTree.Internal.Algorithms.MergeSortedUniqued``1(``0[],System.Int32,System.Int32,``0[],System.Int32,System.Int32,``0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MergeSortedUniqued(Of T As IComparable) (input1 As T(), begin1 As Integer, end1 As Integer, input2 As T(), begin2 As Integer, end2 As Integer, output As T(), beginOutput As Integer) As Integer" />
      <MemberSignature Language="F#" Value="static member MergeSortedUniqued : 'T[] * int * int * 'T[] * int * int * 'T[] * int -&gt; int (requires 'T :&gt; IComparable)" Usage="Microsoft.ML.Runtime.FastTree.Internal.Algorithms.MergeSortedUniqued (input1, begin1, end1, input2, begin2, end2, output, beginOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable static int MergeSortedUniqued(cli::array &lt;T&gt; ^ input1, int begin1, int end1, cli::array &lt;T&gt; ^ input2, int begin2, int end2, cli::array &lt;T&gt; ^ output, int beginOutput);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable static int MergeSortedUniqued(Platform::Array &lt;T&gt; ^ input1, int begin1, int end1, Platform::Array &lt;T&gt; ^ input2, int begin2, int end2, Platform::Array &lt;T&gt; ^ output, int beginOutput);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename T&gt;&#xA; where T : IComparable static int MergeSortedUniqued(std::Array &lt;T&gt; const &amp; input1, int begin1, int end1, std::Array &lt;T&gt; const &amp; input2, int begin2, int end2, std::Array &lt;T&gt; const &amp; output, int beginOutput);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="input1" Type="T[]" />
        <Parameter Name="begin1" Type="System.Int32" />
        <Parameter Name="end1" Type="System.Int32" />
        <Parameter Name="input2" Type="T[]" />
        <Parameter Name="begin2" Type="System.Int32" />
        <Parameter Name="end2" Type="System.Int32" />
        <Parameter Name="output" Type="T[]" />
        <Parameter Name="beginOutput" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="input1">To be added.</param>
        <param name="begin1">To be added.</param>
        <param name="end1">To be added.</param>
        <param name="input2">To be added.</param>
        <param name="begin2">To be added.</param>
        <param name="end2">To be added.</param>
        <param name="output">To be added.</param>
        <param name="beginOutput">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Min&lt;T&gt; (T[] array, out int argmin) where T : IComparable;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Min&lt;(class System.IComparable) T&gt;(!!T[] array, [out] int32&amp; argmin) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.FastTree.Internal.Algorithms.Min``1(``0[],System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min(Of T As IComparable) (array As T(), ByRef argmin As Integer) As T" />
      <MemberSignature Language="F#" Value="static member Min : 'T[] *  -&gt; 'T (requires 'T :&gt; IComparable)" Usage="Microsoft.ML.Runtime.FastTree.Internal.Algorithms.Min (array, argmin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable static T Min(cli::array &lt;T&gt; ^ array, [Runtime::InteropServices::Out] int % argmin);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename T&gt;&#xA; where T : IComparable static T Min(std::Array &lt;T&gt; const &amp; array, [Runtime::InteropServices::Out] int &amp; argmin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="argmin" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="array">To be added.</param>
        <param name="argmin">To be added.</param>
        <summary>
            Fidns the minimum and the argmin in an array of values
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopK&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int TopK&lt;T&gt; (T[] array, int offset, int length, T[] topK, int[] topKPositions) where T : IComparable;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 TopK&lt;(class System.IComparable) T&gt;(!!T[] array, int32 offset, int32 length, !!T[] topK, int32[] topKPositions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.FastTree.Internal.Algorithms.TopK``1(``0[],System.Int32,System.Int32,``0[],System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TopK(Of T As IComparable) (array As T(), offset As Integer, length As Integer, topK As T(), topKPositions As Integer()) As Integer" />
      <MemberSignature Language="F#" Value="static member TopK : 'T[] * int * int * 'T[] * int[] -&gt; int (requires 'T :&gt; IComparable)" Usage="Microsoft.ML.Runtime.FastTree.Internal.Algorithms.TopK (array, offset, length, topK, topKPositions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable static int TopK(cli::array &lt;T&gt; ^ array, int offset, int length, cli::array &lt;T&gt; ^ topK, cli::array &lt;int&gt; ^ topKPositions);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable static int TopK(Platform::Array &lt;T&gt; ^ array, int offset, int length, Platform::Array &lt;T&gt; ^ topK, Platform::Array &lt;int&gt; ^ topKPositions);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename T&gt;&#xA; where T : IComparable static int TopK(std::Array &lt;T&gt; const &amp; array, int offset, int length, std::Array &lt;T&gt; const &amp; topK, std::Array &lt;int&gt; const &amp; topKPositions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.FastTree</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="topK" Type="T[]" />
        <Parameter Name="topKPositions" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <typeparam name="T">An IComparible type</typeparam>
        <param name="array">The array being searched</param>
        <param name="offset">An offset into the array</param>
        <param name="length">The length of the search</param>
        <param name="topK">The values of the top K</param>
        <param name="topKPositions">The positions of the top K</param>
        <summary>
            Finds the largest k entries in an array (with offset and length)
            </summary>
        <returns>The number of entries set in topK and topKPositions (length could be less than K)</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>