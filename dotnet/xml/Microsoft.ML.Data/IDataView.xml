<Type Name="IDataView" FullName="Microsoft.ML.Data.IDataView">
  <TypeSignature Language="C#" Value="public interface IDataView" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataView" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Data.IDataView" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataView" />
  <TypeSignature Language="F#" Value="type IDataView = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            The input and output of Query Operators (Transforms). This is the fundamental data pipeline
            type, comparable to <see cref="T:System.Collections.Generic.IEnumerable`1" /> for LINQ.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CanShuffle">
      <MemberSignature Language="C#" Value="public bool CanShuffle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShuffle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Data.IDataView.CanShuffle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanShuffle As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanShuffle : bool" Usage="Microsoft.ML.Data.IDataView.CanShuffle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether this IDataView supports shuffling of rows, to any degree.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRowCount">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; GetRowCount ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;int64&gt; GetRowCount() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.IDataView.GetRowCount" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRowCount () As Nullable(Of Long)" />
      <MemberSignature Language="F#" Value="abstract member GetRowCount : unit -&gt; Nullable&lt;int64&gt;" Usage="iDataView.GetRowCount " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Returns the number of rows if known. Returning null means that the row count is unknown but
             it might return a non-null value on a subsequent call. This indicates, that the transform does
             not YET know the number of rows, but may in the future. Its implementation's computation
             complexity should be O(1).
            
             Most implementation will return the same answer every time. Some, like a cache, might
             return null until the cache is fully populated.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRowCursor">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.RowCursor GetRowCursor (Func&lt;int,bool&gt; needCol, Random rand = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.RowCursor GetRowCursor(class System.Func`2&lt;int32, bool&gt; needCol, class System.Random rand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.IDataView.GetRowCursor(System.Func{System.Int32,System.Boolean},System.Random)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRowCursor (needCol As Func(Of Integer, Boolean), Optional rand As Random = null) As RowCursor" />
      <MemberSignature Language="F#" Value="abstract member GetRowCursor : Func&lt;int, bool&gt; * Random -&gt; Microsoft.ML.Data.RowCursor" Usage="iDataView.GetRowCursor (needCol, rand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.RowCursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="needCol" Type="System.Func&lt;System.Int32,System.Boolean&gt;" />
        <Parameter Name="rand" Type="System.Random" />
      </Parameters>
      <Docs>
        <param name="needCol">To be added.</param>
        <param name="rand">To be added.</param>
        <summary>
            Get a row cursor. The active column indices are those for which needCol(col) returns true.
            The schema of the returned cursor will be the same as the schema of the IDataView, but getting
            a getter for an inactive columns will throw. The <paramref name="needCol" /> predicate must be
            non-null. To activate all columns, pass "col =&gt; true".
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRowCursorSet">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.RowCursor[] GetRowCursorSet (Func&lt;int,bool&gt; needCol, int n, Random rand = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.RowCursor[] GetRowCursorSet(class System.Func`2&lt;int32, bool&gt; needCol, int32 n, class System.Random rand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.IDataView.GetRowCursorSet(System.Func{System.Int32,System.Boolean},System.Int32,System.Random)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRowCursorSet (needCol As Func(Of Integer, Boolean), n As Integer, Optional rand As Random = null) As RowCursor()" />
      <MemberSignature Language="F#" Value="abstract member GetRowCursorSet : Func&lt;int, bool&gt; * int * Random -&gt; Microsoft.ML.Data.RowCursor[]" Usage="iDataView.GetRowCursorSet (needCol, n, rand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.RowCursor[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="needCol" Type="System.Func&lt;System.Int32,System.Boolean&gt;" />
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="rand" Type="System.Random" />
      </Parameters>
      <Docs>
        <param name="needCol">The predicate, where a column is active if this returns true.</param>
        <param name="n">The suggested degree of parallelism.</param>
        <param name="rand">An instance </param>
        <summary>
             This constructs a set of parallel batch cursors. The value <paramref name="n" /> is a recommended limit on
             cardinality. If <paramref name="n" /> is non-positive, this indicates that the caller has no recommendation,
             and the implementation should have some default behavior to cover this case. Note that this is strictly a
             recommendation: it is entirely possible that an implementation can return a different number of cursors.
            
             The cursors should return the same data as returned through
             <see cref="M:Microsoft.ML.Data.IDataView.GetRowCursor(System.Func{System.Int32,System.Boolean},System.Random)" />, except partitioned: no two cursors should return the
             "same" row as would have been returned through the regular serial cursor, but all rows should be returned by
             exactly one of the cursors returned from this cursor. The cursors can have their values reconciled
             downstream through the use of the <see cref="P:Microsoft.ML.Data.Row.Batch" /> property.
            
             The typical usage pattern is that a set of cursors is requested, each of them is then given to a set of
             working threads that consume from them independently while, ultimately, the results are finally collated in
             the end by exploiting the ordering of the <see cref="P:Microsoft.ML.Data.Row.Batch" /> property described above. More typical
             scenarios will be content with pulling from the single serial cursor of
             <see cref="M:Microsoft.ML.Data.IDataView.GetRowCursor(System.Func{System.Int32,System.Boolean},System.Random)" />.
             </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.Schema Schema { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Data.Schema Schema" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Data.IDataView.Schema" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Schema As Schema" />
      <MemberSignature Language="F#" Value="member this.Schema : Microsoft.ML.Data.Schema" Usage="Microsoft.ML.Data.IDataView.Schema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.Schema</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets an instance of Schema.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>