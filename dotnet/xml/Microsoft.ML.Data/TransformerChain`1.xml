<Type Name="TransformerChain&lt;TLastTransformer&gt;" FullName="Microsoft.ML.Data.TransformerChain&lt;TLastTransformer&gt;">
  <TypeSignature Language="C#" Value="public sealed class TransformerChain&lt;TLastTransformer&gt; : Microsoft.ML.ITransformer, System.Collections.Generic.IEnumerable&lt;Microsoft.ML.ITransformer&gt; where TLastTransformer : class, ITransformer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TransformerChain`1&lt;class (class Microsoft.ML.ITransformer) TLastTransformer&gt; extends System.Object implements class Microsoft.ML.ICanSaveModel, class Microsoft.ML.ITransformer, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ML.ITransformer&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Data.TransformerChain`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TransformerChain(Of TLastTransformer)&#xA;Implements IEnumerable(Of ITransformer), ITransformer" />
  <TypeSignature Language="F#" Value="type TransformerChain&lt;'LastTransformer (requires 'LastTransformer : null and 'LastTransformer :&gt; ITransformer)&gt; = class&#xA;    interface ITransformer&#xA;    interface ICanSaveModel&#xA;    interface seq&lt;ITransformer&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TLastTransformer">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.ICanSaveModel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;Microsoft.ML.ITransformer&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TLastTransformer">To be added.</typeparam>
    <summary>
            A chain of transformers (possibly empty) that end with a <typeparamref name="TLastTransformer" />.
            For an empty chain, <typeparamref name="TLastTransformer" /> is always <see cref="T:Microsoft.ML.ITransformer" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformerChain (params Microsoft.ML.ITransformer[] transformers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.ITransformer[] transformers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.TransformerChain`1.#ctor(Microsoft.ML.ITransformer[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray transformers As ITransformer())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Data.TransformerChain&lt;'LastTransformer (requires 'LastTransformer : null and 'LastTransformer :&gt; Microsoft.ML.ITransformer)&gt; : Microsoft.ML.ITransformer[] -&gt; Microsoft.ML.Data.TransformerChain&lt;'LastTransformer (requires 'LastTransformer : null and 'LastTransformer :&gt; Microsoft.ML.ITransformer)&gt;" Usage="new Microsoft.ML.Data.TransformerChain&lt;'LastTransformer (requires 'LastTransformer : null and 'LastTransformer :&gt; Microsoft.ML.ITransformer)&gt; transformers" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transformers" Type="Microsoft.ML.ITransformer[]">
          <Attributes>
            <Attribute FrameworkAlternate="ml-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transformers"></param>
        <summary>
            Create a transformer chain by specifying all the transformers. The scopes are assumed to be
            <see cref="F:Microsoft.ML.Data.TransformerScope.Everything" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformerChain (System.Collections.Generic.IEnumerable&lt;Microsoft.ML.ITransformer&gt; transformers, System.Collections.Generic.IEnumerable&lt;Microsoft.ML.Data.TransformerScope&gt; scopes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ML.ITransformer&gt; transformers, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.ML.Data.TransformerScope&gt; scopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.TransformerChain`1.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ML.ITransformer},System.Collections.Generic.IEnumerable{Microsoft.ML.Data.TransformerScope})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transformers As IEnumerable(Of ITransformer), scopes As IEnumerable(Of TransformerScope))" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Data.TransformerChain&lt;'LastTransformer (requires 'LastTransformer : null and 'LastTransformer :&gt; Microsoft.ML.ITransformer)&gt; : seq&lt;Microsoft.ML.ITransformer&gt; * seq&lt;Microsoft.ML.Data.TransformerScope&gt; -&gt; Microsoft.ML.Data.TransformerChain&lt;'LastTransformer (requires 'LastTransformer : null and 'LastTransformer :&gt; Microsoft.ML.ITransformer)&gt;" Usage="new Microsoft.ML.Data.TransformerChain&lt;'LastTransformer (requires 'LastTransformer : null and 'LastTransformer :&gt; Microsoft.ML.ITransformer)&gt; (transformers, scopes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transformers" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.ML.ITransformer&gt;" />
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.ML.Data.TransformerScope&gt;" />
      </Parameters>
      <Docs>
        <param name="transformers">Transformers to be chained.</param>
        <param name="scopes">Transformer scopes, parallel to <paramref name="transformers" />.</param>
        <summary>
            Create a transformer chain by specifying transformers and their scopes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TNewLast&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.TransformerChain&lt;TNewLast&gt; Append&lt;TNewLast&gt; (TNewLast transformer, Microsoft.ML.Data.TransformerScope scope = Microsoft.ML.Data.TransformerScope.Everything) where TNewLast : class, Microsoft.ML.ITransformer;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.Data.TransformerChain`1&lt;!!TNewLast&gt; Append&lt;class (class Microsoft.ML.ITransformer) TNewLast&gt;(!!TNewLast transformer, valuetype Microsoft.ML.Data.TransformerScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.TransformerChain`1.Append``1(``0,Microsoft.ML.Data.TransformerScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append(Of TNewLast As {Class, ITransformer}) (transformer As TNewLast, Optional scope As TransformerScope = Microsoft.ML.Data.TransformerScope.Everything) As TransformerChain(Of TNewLast)" />
      <MemberSignature Language="F#" Value="member this.Append : 'NewLast * Microsoft.ML.Data.TransformerScope -&gt; Microsoft.ML.Data.TransformerChain&lt;'NewLast (requires 'NewLast : null and 'NewLast :&gt; Microsoft.ML.ITransformer)&gt; (requires 'NewLast : null and 'NewLast :&gt; Microsoft.ML.ITransformer)" Usage="transformerChain.Append (transformer, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.TransformerChain&lt;TNewLast&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNewLast">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="transformer" Type="TNewLast" />
        <Parameter Name="scope" Type="Microsoft.ML.Data.TransformerScope" />
      </Parameters>
      <Docs>
        <typeparam name="TNewLast">To be added.</typeparam>
        <param name="transformer">To be added.</param>
        <param name="scope">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;Microsoft.ML.ITransformer&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class Microsoft.ML.ITransformer&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.TransformerChain`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of ITransformer)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Microsoft.ML.ITransformer&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Microsoft.ML.ITransformer&gt;" Usage="transformerChain.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;Microsoft.ML.ITransformer&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModelFor">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.TransformerChain&lt;Microsoft.ML.ITransformer&gt; GetModelFor (Microsoft.ML.Data.TransformerScope scopeFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.Data.TransformerChain`1&lt;class Microsoft.ML.ITransformer&gt; GetModelFor(valuetype Microsoft.ML.Data.TransformerScope scopeFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.TransformerChain`1.GetModelFor(Microsoft.ML.Data.TransformerScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModelFor (scopeFilter As TransformerScope) As TransformerChain(Of ITransformer)" />
      <MemberSignature Language="F#" Value="member this.GetModelFor : Microsoft.ML.Data.TransformerScope -&gt; Microsoft.ML.Data.TransformerChain&lt;Microsoft.ML.ITransformer&gt;" Usage="transformerChain.GetModelFor scopeFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.TransformerChain&lt;Microsoft.ML.ITransformer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeFilter" Type="Microsoft.ML.Data.TransformerScope" />
      </Parameters>
      <Docs>
        <param name="scopeFilter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.DataViewSchema GetOutputSchema (Microsoft.ML.DataViewSchema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.DataViewSchema GetOutputSchema(class Microsoft.ML.DataViewSchema inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.TransformerChain`1.GetOutputSchema(Microsoft.ML.DataViewSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As DataViewSchema) As DataViewSchema" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.DataViewSchema -&gt; Microsoft.ML.DataViewSchema&#xA;override this.GetOutputSchema : Microsoft.ML.DataViewSchema -&gt; Microsoft.ML.DataViewSchema" Usage="transformerChain.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ITransformer.GetOutputSchema(Microsoft.ML.DataViewSchema)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.DataViewSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.DataViewSchema" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastTransformer">
      <MemberSignature Language="C#" Value="public readonly TLastTransformer LastTransformer;" />
      <MemberSignature Language="ILAsm" Value=".field public initonly !TLastTransformer LastTransformer" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Data.TransformerChain`1.LastTransformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly LastTransformer As TLastTransformer " />
      <MemberSignature Language="F#" Value="val mutable LastTransformer : 'LastTransformer" Usage="Microsoft.ML.Data.TransformerChain&lt;'LastTransformer (requires 'LastTransformer : null and 'LastTransformer :&gt; Microsoft.ML.ITransformer)&gt;.LastTransformer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TLastTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.ML.ICanSaveModel.Save">
      <MemberSignature Language="C#" Value="void ICanSaveModel.Save (Microsoft.ML.ModelSaveContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.ML.ICanSaveModel.Save(class Microsoft.ML.ModelSaveContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.TransformerChain`1.Microsoft#ML#ICanSaveModel#Save(Microsoft.ML.ModelSaveContext)" />
      <MemberSignature Language="VB.NET" Value="Sub Save (ctx As ModelSaveContext) Implements ICanSaveModel.Save" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ICanSaveModel.Save(Microsoft.ML.ModelSaveContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.ModelSaveContext" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.ML.ITransformer.GetRowToRowMapper">
      <MemberSignature Language="C#" Value="Microsoft.ML.Data.IRowToRowMapper ITransformer.GetRowToRowMapper (Microsoft.ML.DataViewSchema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.ML.Data.IRowToRowMapper Microsoft.ML.ITransformer.GetRowToRowMapper(class Microsoft.ML.DataViewSchema inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.TransformerChain`1.Microsoft#ML#ITransformer#GetRowToRowMapper(Microsoft.ML.DataViewSchema)" />
      <MemberSignature Language="VB.NET" Value="Function GetRowToRowMapper (inputSchema As DataViewSchema) As IRowToRowMapper Implements ITransformer.GetRowToRowMapper" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.IRowToRowMapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.DataViewSchema" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.ML.ITransformer.IsRowToRowMapper">
      <MemberSignature Language="C#" Value="bool Microsoft.ML.ITransformer.IsRowToRowMapper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Microsoft.ML.ITransformer.IsRowToRowMapper" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Data.TransformerChain`1.Microsoft#ML#ITransformer#IsRowToRowMapper" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsRowToRowMapper As Boolean Implements ITransformer.IsRowToRowMapper" />
      <MemberSignature Language="F#" Usage="Microsoft.ML.ITransformer.IsRowToRowMapper" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.ITransformer.IsRowToRowMapper</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.TransformerChain`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public Microsoft.ML.IDataView Transform (Microsoft.ML.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.IDataView Transform(class Microsoft.ML.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.TransformerChain`1.Transform(Microsoft.ML.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IDataView) As IDataView" />
      <MemberSignature Language="F#" Value="abstract member Transform : Microsoft.ML.IDataView -&gt; Microsoft.ML.IDataView&#xA;override this.Transform : Microsoft.ML.IDataView -&gt; Microsoft.ML.IDataView" Usage="transformerChain.Transform input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ITransformer.Transform(Microsoft.ML.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>