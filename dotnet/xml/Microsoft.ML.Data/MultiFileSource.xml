<Type Name="MultiFileSource" FullName="Microsoft.ML.Data.MultiFileSource">
  <TypeSignature Language="C#" Value="public sealed class MultiFileSource : Microsoft.ML.Data.IMultiStreamSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MultiFileSource extends System.Object implements class Microsoft.ML.Data.IMultiStreamSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Data.MultiFileSource" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MultiFileSource&#xA;Implements IMultiStreamSource" />
  <TypeSignature Language="F#" Value="type MultiFileSource = class&#xA;    interface IMultiStreamSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Data.IMultiStreamSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Wraps a potentially compound path as an IMultiStreamSource.
            </summary>
    <remarks>Expands wild cards and supports multiple paths separated by +, or loads all the files of a subfolder,
            if the syntax for the path is 'FolderPath/...' (separator would be OS relevant).
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MultiFileSource (params string[] paths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] paths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.MultiFileSource.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray paths As String())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Data.MultiFileSource : string[] -&gt; Microsoft.ML.Data.MultiFileSource" Usage="new Microsoft.ML.Data.MultiFileSource paths" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paths" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="ml-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="paths">The paths of the files to load.</param>
        <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Data.MultiFileSource" />.
            In case of usage from Maml, the paths would be wildcard concatenated in the first string of <paramref name="paths" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Data.MultiFileSource.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.ML.Data.MultiFileSource.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.Data.IMultiStreamSource.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathOrNull">
      <MemberSignature Language="C#" Value="public string GetPathOrNull (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetPathOrNull(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.MultiFileSource.GetPathOrNull(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPathOrNull (index As Integer) As String" />
      <MemberSignature Language="F#" Value="abstract member GetPathOrNull : int -&gt; string&#xA;override this.GetPathOrNull : int -&gt; string" Usage="multiFileSource.GetPathOrNull index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Data.IMultiStreamSource.GetPathOrNull(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.IO.Stream Open (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream Open(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.MultiFileSource.Open(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (index As Integer) As Stream" />
      <MemberSignature Language="F#" Value="abstract member Open : int -&gt; System.IO.Stream&#xA;override this.Open : int -&gt; System.IO.Stream" Usage="multiFileSource.Open index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Data.IMultiStreamSource.Open(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenTextReader">
      <MemberSignature Language="C#" Value="public System.IO.TextReader OpenTextReader (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.TextReader OpenTextReader(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.MultiFileSource.OpenTextReader(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextReader (index As Integer) As TextReader" />
      <MemberSignature Language="F#" Value="abstract member OpenTextReader : int -&gt; System.IO.TextReader&#xA;override this.OpenTextReader : int -&gt; System.IO.TextReader" Usage="multiFileSource.OpenTextReader index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Data.IMultiStreamSource.OpenTextReader(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>