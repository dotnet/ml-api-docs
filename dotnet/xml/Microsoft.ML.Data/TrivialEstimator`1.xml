<Type Name="TrivialEstimator&lt;TTransformer&gt;" FullName="Microsoft.ML.Data.TrivialEstimator&lt;TTransformer&gt;">
  <TypeSignature Language="C#" Value="public abstract class TrivialEstimator&lt;TTransformer&gt; : Microsoft.ML.IEstimator&lt;TTransformer&gt; where TTransformer : class, ITransformer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TrivialEstimator`1&lt;class (class Microsoft.ML.ITransformer) TTransformer&gt; extends System.Object implements class Microsoft.ML.IEstimator`1&lt;!TTransformer&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Data.TrivialEstimator`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TrivialEstimator(Of TTransformer)&#xA;Implements IEstimator(Of TTransformer)" />
  <TypeSignature Language="F#" Value="type TrivialEstimator&lt;'ransformer (requires 'ransformer : null and 'ransformer :&gt; ITransformer)&gt; = class&#xA;    interface IEstimator&lt;'ransformer (requires 'ransformer : null and 'ransformer :&gt; ITransformer)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TTransformer">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.IEstimator&lt;TTransformer&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TTransformer">To be added.</typeparam>
    <summary>
             The trivial implementation of <see cref="T:Microsoft.ML.IEstimator`1" /> that already has
             the transformer and returns it on every call to <see cref="M:Microsoft.ML.Data.TrivialEstimator`1.Fit(Microsoft.ML.IDataView)" />.
            
             Concrete implementations still have to provide the schema propagation mechanism, since
             there is no easy way to infer it from the transformer.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public TTransformer Fit (Microsoft.ML.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TTransformer Fit(class Microsoft.ML.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.TrivialEstimator`1.Fit(Microsoft.ML.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As TTransformer" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.ML.IDataView -&gt; 'ransformer&#xA;override this.Fit : Microsoft.ML.IDataView -&gt; 'ransformer" Usage="trivialEstimator.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TTransformer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public abstract Microsoft.ML.SchemaShape GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.SchemaShape GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.TrivialEstimator`1.GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape" Usage="trivialEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IEstimator`1.GetOutputSchema(Microsoft.ML.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>