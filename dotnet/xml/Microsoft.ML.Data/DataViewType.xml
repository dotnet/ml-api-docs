<Type Name="DataViewType" FullName="Microsoft.ML.Data.DataViewType">
  <TypeSignature Language="C#" Value="public abstract class DataViewType : IEquatable&lt;Microsoft.ML.Data.DataViewType&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DataViewType extends System.Object implements class System.IEquatable`1&lt;class Microsoft.ML.Data.DataViewType&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Data.DataViewType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DataViewType&#xA;Implements IEquatable(Of DataViewType)" />
  <TypeSignature Language="F#" Value="type DataViewType = class&#xA;    interface IEquatable&lt;DataViewType&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.DataView</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.ML.Data.DataViewType&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            This is the abstract base class for all types in the <see cref="T:Microsoft.ML.IDataView" /> type system.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (Microsoft.ML.Data.DataViewType other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class Microsoft.ML.Data.DataViewType other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewType.Equals(Microsoft.ML.Data.DataViewType)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (other As DataViewType) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.ML.Data.DataViewType -&gt; bool" Usage="dataViewType.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.DataView</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.ML.Data.DataViewType" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RawType">
      <MemberSignature Language="C#" Value="public Type RawType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type RawType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Data.DataViewType.RawType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RawType As Type" />
      <MemberSignature Language="F#" Value="member this.RawType : Type" Usage="Microsoft.ML.Data.DataViewType.RawType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.DataView</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The raw <see cref="T:System.Type" /> for this <see cref="T:Microsoft.ML.Data.DataViewType" />. Note that this is the raw representation type
            and not the complete information content of the <see cref="T:Microsoft.ML.Data.DataViewType" />.
            </summary>
        <value>To be added.</value>
        <remarks>
            Code should not assume that a <see cref="P:Microsoft.ML.Data.DataViewType.RawType" /> uniquely identifiers a <see cref="T:Microsoft.ML.Data.DataViewType" />.
            For example, most practical instances of ML.NET's KeyType and <see cref="P:Microsoft.ML.Data.NumberDataViewType.UInt32" /> will have a
            <see cref="P:Microsoft.ML.Data.DataViewType.RawType" /> of <see cref="T:System.UInt32" />, but both are very different in the types of information conveyed in that number.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>