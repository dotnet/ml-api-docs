<Type Name="ColumnConcatenatingTransformer" FullName="Microsoft.ML.Data.ColumnConcatenatingTransformer">
  <TypeSignature Language="C#" Value="public sealed class ColumnConcatenatingTransformer : Microsoft.ML.Data.RowToRowTransformerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ColumnConcatenatingTransformer extends Microsoft.ML.Data.RowToRowTransformerBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Data.ColumnConcatenatingTransformer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ColumnConcatenatingTransformer&#xA;Inherits RowToRowTransformerBase" />
  <TypeSignature Language="F#" Value="type ColumnConcatenatingTransformer = class&#xA;    inherit RowToRowTransformerBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Data.RowToRowTransformerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ColumnConcatenatingTransformer (Microsoft.ML.IHostEnvironment env, params Microsoft.ML.Data.ColumnConcatenatingTransformer.ColumnInfo[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, class Microsoft.ML.Data.ColumnConcatenatingTransformer/ColumnInfo[] columns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.ColumnConcatenatingTransformer.#ctor(Microsoft.ML.IHostEnvironment,Microsoft.ML.Data.ColumnConcatenatingTransformer.ColumnInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, ParamArray columns As ColumnConcatenatingTransformer.ColumnInfo())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Data.ColumnConcatenatingTransformer : Microsoft.ML.IHostEnvironment * Microsoft.ML.Data.ColumnConcatenatingTransformer.ColumnInfo[] -&gt; Microsoft.ML.Data.ColumnConcatenatingTransformer" Usage="new Microsoft.ML.Data.ColumnConcatenatingTransformer (env, columns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" />
        <Parameter Name="columns" Type="Microsoft.ML.Data.ColumnConcatenatingTransformer+ColumnInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="columns">To be added.</param>
        <summary>
            Concatenates multiple groups of columns, each group is denoted by one of <paramref name="columns" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ColumnConcatenatingTransformer (Microsoft.ML.IHostEnvironment env, string outputColumnName, params string[] inputColumnNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.IHostEnvironment env, string outputColumnName, string[] inputColumnNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.ColumnConcatenatingTransformer.#ctor(Microsoft.ML.IHostEnvironment,System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, outputColumnName As String, ParamArray inputColumnNames As String())" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Data.ColumnConcatenatingTransformer : Microsoft.ML.IHostEnvironment * string * string[] -&gt; Microsoft.ML.Data.ColumnConcatenatingTransformer" Usage="new Microsoft.ML.Data.ColumnConcatenatingTransformer (env, outputColumnName, inputColumnNames)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" Index="0" />
        <Parameter Name="outputColumnName" Type="System.String" Index="1" FrameworkAlternate="ml-dotnet" />
        <Parameter Name="inputColumnNames" Type="System.String[]" Index="2" FrameworkAlternate="ml-dotnet">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="outputColumnName">To be added.</param>
        <param name="inputColumnNames">To be added.</param>
        <summary>
            Concatename columns in <paramref name="inputColumnNames" /> into one column <paramref name="outputColumnName" />.
            Original columns are also preserved.
            The column types must match, and the output column type is always a vector.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.ML.Data.ColumnConcatenatingTransformer.ColumnInfo&gt; Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.ML.Data.ColumnConcatenatingTransformer/ColumnInfo&gt; Columns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Data.ColumnConcatenatingTransformer.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As IReadOnlyCollection(Of ColumnConcatenatingTransformer.ColumnInfo)" />
      <MemberSignature Language="F#" Value="member this.Columns : System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.ML.Data.ColumnConcatenatingTransformer.ColumnInfo&gt;" Usage="Microsoft.ML.Data.ColumnConcatenatingTransformer.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.ML.Data.ColumnConcatenatingTransformer+ColumnInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public override void Save (Microsoft.ML.Model.ModelSaveContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Save(class Microsoft.ML.Model.ModelSaveContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.ColumnConcatenatingTransformer.Save(Microsoft.ML.Model.ModelSaveContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Save (ctx As ModelSaveContext)" />
      <MemberSignature Language="F#" Value="override this.Save : Microsoft.ML.Model.ModelSaveContext -&gt; unit" Usage="columnConcatenatingTransformer.Save ctx" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.Model.ModelSaveContext" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>