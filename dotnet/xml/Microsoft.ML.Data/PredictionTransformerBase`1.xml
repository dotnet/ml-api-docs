<Type Name="PredictionTransformerBase&lt;TModel&gt;" FullName="Microsoft.ML.Data.PredictionTransformerBase&lt;TModel&gt;">
  <TypeSignature Language="C#" Value="public abstract class PredictionTransformerBase&lt;TModel&gt; : Microsoft.ML.IPredictionTransformer&lt;TModel&gt;, Microsoft.ML.ITransformer where TModel : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PredictionTransformerBase`1&lt;class TModel&gt; extends System.Object implements class Microsoft.ML.ICanSaveModel, class Microsoft.ML.IPredictionTransformer`1&lt;!TModel&gt;, class Microsoft.ML.ITransformer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Data.PredictionTransformerBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PredictionTransformerBase(Of TModel)&#xA;Implements IPredictionTransformer(Of TModel), ITransformer" />
  <TypeSignature Language="F#" Value="type PredictionTransformerBase&lt;'Model (requires 'Model : null)&gt; = class&#xA;    interface IPredictionTransformer&lt;'Model (requires 'Model : null)&gt;&#xA;    interface ITransformer&#xA;    interface ICanSaveModel" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TModel">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.ICanSaveModel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.IPredictionTransformer&lt;TModel&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TModel">The type of the model parameters used by this prediction transformer.</typeparam>
    <summary>
            Base class for transformers with no feature column, or more than one feature columns.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Data.DataView.DataViewSchema GetOutputSchema (Microsoft.Data.DataView.DataViewSchema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Data.DataView.DataViewSchema GetOutputSchema(class Microsoft.Data.DataView.DataViewSchema inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.PredictionTransformerBase`1.GetOutputSchema(Microsoft.Data.DataView.DataViewSchema)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetOutputSchema (inputSchema As DataViewSchema) As DataViewSchema" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.Data.DataView.DataViewSchema -&gt; Microsoft.Data.DataView.DataViewSchema" Usage="predictionTransformerBase.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ITransformer.GetOutputSchema(Microsoft.Data.DataView.DataViewSchema)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Data.DataView.DataViewSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.Data.DataView.DataViewSchema" />
      </Parameters>
      <Docs>
        <param name="inputSchema">The <see cref="T:Microsoft.Data.DataView.DataViewSchema" /> of the input data.</param>
        <summary>
            Gets the output schema resulting from the <see cref="M:Microsoft.ML.Data.PredictionTransformerBase`1.Transform(Microsoft.Data.DataView.IDataView)" /></summary>
        <returns>The resulting <see cref="T:Microsoft.Data.DataView.DataViewSchema" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.ML.ICanSaveModel.Save">
      <MemberSignature Language="C#" Value="void ICanSaveModel.Save (Microsoft.ML.ModelSaveContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.ML.ICanSaveModel.Save(class Microsoft.ML.ModelSaveContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.PredictionTransformerBase`1.Microsoft#ML#ICanSaveModel#Save(Microsoft.ML.ModelSaveContext)" />
      <MemberSignature Language="VB.NET" Value="Sub Save (ctx As ModelSaveContext) Implements ICanSaveModel.Save" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ICanSaveModel.Save(Microsoft.ML.ModelSaveContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.ModelSaveContext" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.ML.ITransformer.GetRowToRowMapper">
      <MemberSignature Language="C#" Value="Microsoft.ML.Data.IRowToRowMapper ITransformer.GetRowToRowMapper (Microsoft.Data.DataView.DataViewSchema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.ML.Data.IRowToRowMapper Microsoft.ML.ITransformer.GetRowToRowMapper(class Microsoft.Data.DataView.DataViewSchema inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.PredictionTransformerBase`1.Microsoft#ML#ITransformer#GetRowToRowMapper(Microsoft.Data.DataView.DataViewSchema)" />
      <MemberSignature Language="VB.NET" Value="Function GetRowToRowMapper (inputSchema As DataViewSchema) As IRowToRowMapper Implements ITransformer.GetRowToRowMapper" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.Data.DataView.DataViewSchema)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.IRowToRowMapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.Data.DataView.DataViewSchema" />
      </Parameters>
      <Docs>
        <param name="inputSchema"></param>
        <summary>
            Gets a IRowToRowMapper instance.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.ML.ITransformer.IsRowToRowMapper">
      <MemberSignature Language="C#" Value="bool Microsoft.ML.ITransformer.IsRowToRowMapper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Microsoft.ML.ITransformer.IsRowToRowMapper" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Data.PredictionTransformerBase`1.Microsoft#ML#ITransformer#IsRowToRowMapper" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsRowToRowMapper As Boolean Implements ITransformer.IsRowToRowMapper" />
      <MemberSignature Language="F#" Usage="Microsoft.ML.ITransformer.IsRowToRowMapper" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.ITransformer.IsRowToRowMapper</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether a call to <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.Data.DataView.DataViewSchema)" /> should succeed, on an
            appropriate schema.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="public TModel Model { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TModel Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Data.PredictionTransformerBase`1.Model" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Model As TModel" />
      <MemberSignature Language="F#" Value="member this.Model : 'Model" Usage="Microsoft.ML.Data.PredictionTransformerBase&lt;'Model (requires 'Model : null)&gt;.Model" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.IPredictionTransformer`1.Model</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveModelCore">
      <MemberSignature Language="C#" Value="protected void SaveModelCore (Microsoft.ML.ModelSaveContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SaveModelCore(class Microsoft.ML.ModelSaveContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.PredictionTransformerBase`1.SaveModelCore(Microsoft.ML.ModelSaveContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SaveModelCore (ctx As ModelSaveContext)" />
      <MemberSignature Language="F#" Value="member this.SaveModelCore : Microsoft.ML.ModelSaveContext -&gt; unit" Usage="predictionTransformerBase.SaveModelCore ctx" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.ModelSaveContext" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrainSchema">
      <MemberSignature Language="C#" Value="protected Microsoft.Data.DataView.DataViewSchema TrainSchema;" />
      <MemberSignature Language="ILAsm" Value=".field family class Microsoft.Data.DataView.DataViewSchema TrainSchema" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Data.PredictionTransformerBase`1.TrainSchema" />
      <MemberSignature Language="VB.NET" Value="Protected TrainSchema As DataViewSchema " />
      <MemberSignature Language="F#" Value="val mutable TrainSchema : Microsoft.Data.DataView.DataViewSchema" Usage="Microsoft.ML.Data.PredictionTransformerBase&lt;'Model (requires 'Model : null)&gt;.TrainSchema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Data.DataView.DataViewSchema</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public Microsoft.Data.DataView.IDataView Transform (Microsoft.Data.DataView.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Data.DataView.IDataView Transform(class Microsoft.Data.DataView.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.PredictionTransformerBase`1.Transform(Microsoft.Data.DataView.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IDataView) As IDataView" />
      <MemberSignature Language="F#" Value="abstract member Transform : Microsoft.Data.DataView.IDataView -&gt; Microsoft.Data.DataView.IDataView&#xA;override this.Transform : Microsoft.Data.DataView.IDataView -&gt; Microsoft.Data.DataView.IDataView" Usage="predictionTransformerBase.Transform input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ITransformer.Transform(Microsoft.Data.DataView.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Data.DataView.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.Data.DataView.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">The input data.</param>
        <summary>
            Transforms the input data.
            </summary>
        <returns>The transformed <see cref="T:Microsoft.Data.DataView.IDataView" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>