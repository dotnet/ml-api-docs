<Type Name="DataViewUtils" FullName="Microsoft.ML.Data.DataViewUtils">
  <TypeSignature Language="C#" Value="public static class DataViewUtils" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataViewUtils extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Data.DataViewUtils" />
  <TypeSignature Language="VB.NET" Value="Public Module DataViewUtils" />
  <TypeSignature Language="F#" Value="type DataViewUtils = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllCachable">
      <MemberSignature Language="C#" Value="public static bool AllCachable (Microsoft.ML.Data.Schema schema, Func&lt;int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AllCachable(class Microsoft.ML.Data.Schema schema, class System.Func`2&lt;int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.AllCachable(Microsoft.ML.Data.Schema,System.Func{System.Int32,System.Boolean})" />
      <MemberSignature Language="F#" Value="static member AllCachable : Microsoft.ML.Data.Schema * Func&lt;int, bool&gt; -&gt; bool" Usage="Microsoft.ML.Data.DataViewUtils.AllCachable (schema, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="Microsoft.ML.Data.Schema" />
        <Parameter Name="predicate" Type="System.Func&lt;System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="schema">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>
            Return whether all the active columns, as determined by the predicate, are
            cachable - either primitive types or vector types.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeRowCount">
      <MemberSignature Language="C#" Value="public static long ComputeRowCount (Microsoft.ML.Data.IDataView view);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ComputeRowCount(class Microsoft.ML.Data.IDataView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.ComputeRowCount(Microsoft.ML.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeRowCount (view As IDataView) As Long" />
      <MemberSignature Language="F#" Value="static member ComputeRowCount : Microsoft.ML.Data.IDataView -&gt; int64" Usage="Microsoft.ML.Data.DataViewUtils.ComputeRowCount view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Microsoft.ML.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <summary>
            Get the row count from the input view by any means necessary, even explicit enumeration
            and counting if <see cref="M:Microsoft.ML.Data.IDataView.GetRowCount" /> insists on returning <c>null</c>.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConsolidateGeneric">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.RowCursor ConsolidateGeneric (Microsoft.ML.IChannelProvider provider, Microsoft.ML.Data.RowCursor[] inputs, int batchSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.RowCursor ConsolidateGeneric(class Microsoft.ML.IChannelProvider provider, class Microsoft.ML.Data.RowCursor[] inputs, int32 batchSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.ConsolidateGeneric(Microsoft.ML.IChannelProvider,Microsoft.ML.Data.RowCursor[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConsolidateGeneric (provider As IChannelProvider, inputs As RowCursor(), batchSize As Integer) As RowCursor" />
      <MemberSignature Language="F#" Value="static member ConsolidateGeneric : Microsoft.ML.IChannelProvider * Microsoft.ML.Data.RowCursor[] * int -&gt; Microsoft.ML.Data.RowCursor" Usage="Microsoft.ML.Data.DataViewUtils.ConsolidateGeneric (provider, inputs, batchSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.RowCursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="Microsoft.ML.IChannelProvider" />
        <Parameter Name="inputs" Type="Microsoft.ML.Data.RowCursor[]" />
        <Parameter Name="batchSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <param name="inputs">To be added.</param>
        <param name="batchSize">To be added.</param>
        <summary>
            Given a parallel cursor set, this consolidates them into a single cursor. The batchSize
            is a hint used for efficiency.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSplitCursors">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.RowCursor[] CreateSplitCursors (Microsoft.ML.IChannelProvider provider, Microsoft.ML.Data.RowCursor input, int num);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.RowCursor[] CreateSplitCursors(class Microsoft.ML.IChannelProvider provider, class Microsoft.ML.Data.RowCursor input, int32 num) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.CreateSplitCursors(Microsoft.ML.IChannelProvider,Microsoft.ML.Data.RowCursor,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSplitCursors (provider As IChannelProvider, input As RowCursor, num As Integer) As RowCursor()" />
      <MemberSignature Language="F#" Value="static member CreateSplitCursors : Microsoft.ML.IChannelProvider * Microsoft.ML.Data.RowCursor * int -&gt; Microsoft.ML.Data.RowCursor[]" Usage="Microsoft.ML.Data.DataViewUtils.CreateSplitCursors (provider, input, num)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.RowCursor[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="Microsoft.ML.IChannelProvider" />
        <Parameter Name="input" Type="Microsoft.ML.Data.RowCursor" />
        <Parameter Name="num" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <param name="input">To be added.</param>
        <param name="num">To be added.</param>
        <summary>
            From the given input cursor, split it into a cursor set with the given
            cardinality. If not all the active columns are cachable, this will only
            produce the given input cursor.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSingleValueGetter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.ValueGetter&lt;ReadOnlyMemory&lt;char&gt;&gt; GetSingleValueGetter&lt;T&gt; (Microsoft.ML.Data.Row cursor, int i, Microsoft.ML.Data.ColumnType colType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.ValueGetter`1&lt;valuetype System.ReadOnlyMemory`1&lt;char&gt;&gt; GetSingleValueGetter&lt;T&gt;(class Microsoft.ML.Data.Row cursor, int32 i, class Microsoft.ML.Data.ColumnType colType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.GetSingleValueGetter``1(Microsoft.ML.Data.Row,System.Int32,Microsoft.ML.Data.ColumnType)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSingleValueGetter(Of T) (cursor As Row, i As Integer, colType As ColumnType) As ValueGetter(Of ReadOnlyMemory(Of Char))" />
      <MemberSignature Language="F#" Value="static member GetSingleValueGetter : Microsoft.ML.Data.Row * int * Microsoft.ML.Data.ColumnType -&gt; Microsoft.ML.Data.ValueGetter&lt;ReadOnlyMemory&lt;char&gt;&gt;" Usage="Microsoft.ML.Data.DataViewUtils.GetSingleValueGetter (cursor, i, colType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.ValueGetter&lt;System.ReadOnlyMemory&lt;System.Char&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="cursor" Type="Microsoft.ML.Data.Row" />
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="colType" Type="Microsoft.ML.Data.ColumnType" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="cursor">To be added.</param>
        <param name="i">To be added.</param>
        <param name="colType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTempColumnName">
      <MemberSignature Language="C#" Value="public static string GetTempColumnName (this Microsoft.ML.Data.Schema schema, string tag = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempColumnName(class Microsoft.ML.Data.Schema schema, string tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.GetTempColumnName(Microsoft.ML.Data.Schema,System.String)" />
      <MemberSignature Language="F#" Value="static member GetTempColumnName : Microsoft.ML.Data.Schema * string -&gt; string" Usage="Microsoft.ML.Data.DataViewUtils.GetTempColumnName (schema, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="Microsoft.ML.Data.Schema" RefType="this" />
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="schema">To be added.</param>
        <param name="tag">To be added.</param>
        <summary>
            Generate a unique temporary column name for the given schema.
            Use tag to independently create multiple temporary, unique column
            names for a single transform.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTempColumnNames">
      <MemberSignature Language="C#" Value="public static string[] GetTempColumnNames (this Microsoft.ML.Data.Schema schema, int n, string tag = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetTempColumnNames(class Microsoft.ML.Data.Schema schema, int32 n, string tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.GetTempColumnNames(Microsoft.ML.Data.Schema,System.Int32,System.String)" />
      <MemberSignature Language="F#" Value="static member GetTempColumnNames : Microsoft.ML.Data.Schema * int * string -&gt; string[]" Usage="Microsoft.ML.Data.DataViewUtils.GetTempColumnNames (schema, n, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="Microsoft.ML.Data.Schema" RefType="this" />
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="schema">To be added.</param>
        <param name="n">To be added.</param>
        <param name="tag">To be added.</param>
        <summary>
            Generate n unique temporary column names for the given schema.
            Use tag to independently create multiple temporary, unique column
            names for a single transform.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetThreadCount">
      <MemberSignature Language="C#" Value="public static int GetThreadCount (Microsoft.ML.IHost host, int num = 0, bool preferOne = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetThreadCount(class Microsoft.ML.IHost host, int32 num, bool preferOne) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.GetThreadCount(Microsoft.ML.IHost,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetThreadCount (host As IHost, Optional num As Integer = 0, Optional preferOne As Boolean = false) As Integer" />
      <MemberSignature Language="F#" Value="static member GetThreadCount : Microsoft.ML.IHost * int * bool -&gt; int" Usage="Microsoft.ML.Data.DataViewUtils.GetThreadCount (host, num, preferOne)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="Microsoft.ML.IHost" />
        <Parameter Name="num" Type="System.Int32" />
        <Parameter Name="preferOne" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="host">To be added.</param>
        <param name="num">To be added.</param>
        <param name="preferOne">To be added.</param>
        <summary>
            Get the target number of threads to use, given a host and another indicator of thread count.
            When num &gt; 0, this uses num limited to twice what the host says. Otherwise, if preferOne
            is true, it returns 1. Otherwise, it returns what the host says.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVectorFlatteningGetter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.ValueGetter&lt;ReadOnlyMemory&lt;char&gt;&gt; GetVectorFlatteningGetter&lt;T&gt; (Microsoft.ML.Data.Row cursor, int colIndex, Microsoft.ML.Data.ColumnType colType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.ValueGetter`1&lt;valuetype System.ReadOnlyMemory`1&lt;char&gt;&gt; GetVectorFlatteningGetter&lt;T&gt;(class Microsoft.ML.Data.Row cursor, int32 colIndex, class Microsoft.ML.Data.ColumnType colType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.GetVectorFlatteningGetter``1(Microsoft.ML.Data.Row,System.Int32,Microsoft.ML.Data.ColumnType)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetVectorFlatteningGetter(Of T) (cursor As Row, colIndex As Integer, colType As ColumnType) As ValueGetter(Of ReadOnlyMemory(Of Char))" />
      <MemberSignature Language="F#" Value="static member GetVectorFlatteningGetter : Microsoft.ML.Data.Row * int * Microsoft.ML.Data.ColumnType -&gt; Microsoft.ML.Data.ValueGetter&lt;ReadOnlyMemory&lt;char&gt;&gt;" Usage="Microsoft.ML.Data.DataViewUtils.GetVectorFlatteningGetter (cursor, colIndex, colType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.ValueGetter&lt;System.ReadOnlyMemory&lt;System.Char&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="cursor" Type="Microsoft.ML.Data.Row" />
        <Parameter Name="colIndex" Type="System.Int32" />
        <Parameter Name="colType" Type="Microsoft.ML.Data.ColumnType" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="cursor">To be added.</param>
        <param name="colIndex">To be added.</param>
        <param name="colType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCachable">
      <MemberSignature Language="C#" Value="public static bool IsCachable (this Microsoft.ML.Data.ColumnType type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsCachable(class Microsoft.ML.Data.ColumnType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.IsCachable(Microsoft.ML.Data.ColumnType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsCachable (type As ColumnType) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsCachable : Microsoft.ML.Data.ColumnType -&gt; bool" Usage="Microsoft.ML.Data.DataViewUtils.IsCachable type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.ML.Data.ColumnType" RefType="this" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
            Determine whether the given type is cachable - either a primitive type or a vector type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateGetterArray">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.Data.ValueGetter&lt;ReadOnlyMemory&lt;char&gt;&gt;[] PopulateGetterArray (Microsoft.ML.Data.RowCursor cursor, System.Collections.Generic.List&lt;int&gt; colIndices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.Data.ValueGetter`1&lt;valuetype System.ReadOnlyMemory`1&lt;char&gt;&gt;[] PopulateGetterArray(class Microsoft.ML.Data.RowCursor cursor, class System.Collections.Generic.List`1&lt;int32&gt; colIndices) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.PopulateGetterArray(Microsoft.ML.Data.RowCursor,System.Collections.Generic.List{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function PopulateGetterArray (cursor As RowCursor, colIndices As List(Of Integer)) As ValueGetter(Of ReadOnlyMemory(Of Char))()" />
      <MemberSignature Language="F#" Value="static member PopulateGetterArray : Microsoft.ML.Data.RowCursor * System.Collections.Generic.List&lt;int&gt; -&gt; Microsoft.ML.Data.ValueGetter&lt;ReadOnlyMemory&lt;char&gt;&gt;[]" Usage="Microsoft.ML.Data.DataViewUtils.PopulateGetterArray (cursor, colIndices)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.ValueGetter&lt;System.ReadOnlyMemory&lt;System.Char&gt;&gt;[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursor" Type="Microsoft.ML.Data.RowCursor" />
        <Parameter Name="colIndices" Type="System.Collections.Generic.List&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="cursor">To be added.</param>
        <param name="colIndices">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SameSchemaAndActivity">
      <MemberSignature Language="C#" Value="public static bool SameSchemaAndActivity (Microsoft.ML.Data.RowCursor[] cursors);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SameSchemaAndActivity(class Microsoft.ML.Data.RowCursor[] cursors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.SameSchemaAndActivity(Microsoft.ML.Data.RowCursor[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SameSchemaAndActivity (cursors As RowCursor()) As Boolean" />
      <MemberSignature Language="F#" Value="static member SameSchemaAndActivity : Microsoft.ML.Data.RowCursor[] -&gt; bool" Usage="Microsoft.ML.Data.DataViewUtils.SameSchemaAndActivity cursors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursors" Type="Microsoft.ML.Data.RowCursor[]" />
      </Parameters>
      <Docs>
        <param name="cursors">To be added.</param>
        <summary>
            Tests whether the cursors are mutually compatible for consolidation,
            that is, they all are non-null, have the same schemas, and the same
            set of columns are active.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateConsolidatingCursor">
      <MemberSignature Language="C#" Value="public static bool TryCreateConsolidatingCursor (out Microsoft.ML.Data.RowCursor curs, Microsoft.ML.Data.IDataView view, Func&lt;int,bool&gt; predicate, Microsoft.ML.IHost host, Random rand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreateConsolidatingCursor([out] class Microsoft.ML.Data.RowCursor&amp; curs, class Microsoft.ML.Data.IDataView view, class System.Func`2&lt;int32, bool&gt; predicate, class Microsoft.ML.IHost host, class System.Random rand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.DataViewUtils.TryCreateConsolidatingCursor(Microsoft.ML.Data.RowCursor@,Microsoft.ML.Data.IDataView,System.Func{System.Int32,System.Boolean},Microsoft.ML.IHost,System.Random)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCreateConsolidatingCursor (ByRef curs As RowCursor, view As IDataView, predicate As Func(Of Integer, Boolean), host As IHost, rand As Random) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryCreateConsolidatingCursor :  * Microsoft.ML.Data.IDataView * Func&lt;int, bool&gt; * Microsoft.ML.IHost * Random -&gt; bool" Usage="Microsoft.ML.Data.DataViewUtils.TryCreateConsolidatingCursor (curs, view, predicate, host, rand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curs" Type="Microsoft.ML.Data.RowCursor" RefType="out" />
        <Parameter Name="view" Type="Microsoft.ML.Data.IDataView" />
        <Parameter Name="predicate" Type="System.Func&lt;System.Int32,System.Boolean&gt;" />
        <Parameter Name="host" Type="Microsoft.ML.IHost" />
        <Parameter Name="rand" Type="System.Random" />
      </Parameters>
      <Docs>
        <param name="curs">To be added.</param>
        <param name="view">To be added.</param>
        <param name="predicate">To be added.</param>
        <param name="host">To be added.</param>
        <param name="rand">To be added.</param>
        <summary>
            Try to create a cursor set from upstream and consolidate it here. The host determines
            the target cardinality of the cursor set.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>