<Type Name="SvmLightLoader" FullName="Microsoft.ML.Data.SvmLightLoader">
  <TypeSignature Language="C#" Value="public sealed class SvmLightLoader : Microsoft.ML.IDataLoader&lt;Microsoft.ML.Data.IMultiStreamSource&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SvmLightLoader extends System.Object implements class Microsoft.ML.ICanSaveModel, class Microsoft.ML.IDataLoader`1&lt;class Microsoft.ML.Data.IMultiStreamSource&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Data.SvmLightLoader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SvmLightLoader&#xA;Implements IDataLoader(Of IMultiStreamSource)" />
  <TypeSignature Language="F#" Value="type SvmLightLoader = class&#xA;    interface IDataLoader&lt;IMultiStreamSource&gt;&#xA;    interface ICanSaveModel" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.ICanSaveModel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.IDataLoader&lt;Microsoft.ML.Data.IMultiStreamSource&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             This attempts to reads data in a format close to the SVM-light format, the goal being
             that the majority of SVM-light formatted data should be interpretable by this loader.
             The loader may also be different than SVM-light's parsing behavior, in the following
             general ways:
            
             1. As an <see cref="T:Microsoft.ML.IDataView" />, vectors are required to have a logical length,
                and for practical reasons it's helpful if the output of this loader has a fixed
                length vector type, since few transforms and no basic learners accept features
                of a variable length vector types. SVM-light had no such concept.
             2. The <see cref="T:Microsoft.ML.IDataView" /> idiom has different behavior w.r.t. parse errors.
             3. The SVM-light has some restrictions in its format that are unnatural to attempt
                to restrict in the concept of this loader.
             4. Some common "extensions" of this format that have happened over the years are
                accomodated where sensible, often supported by specifying some options.
            
             The SVM-light format can be summarized here. An SVM-light file can lead with any number
             of lines starting with '#'. These are discarded.
             {label} {key}:{value} {key}:{value} ... {key}:{value}[#{comment}]
            
             Lines are not whitespace trimmed, though whitespace within the line, prior to the #
             comment character (if any) are ignored. SVM-light itself uses the standard C "isspace"
             function, while we respect only space and tab as whitespace. So, the spaces in the
             line above could be, say, tabs, and there could even be multiple of them in sequence.
             Unlike the text loader's format, for instance, there is no concept of a "blank" field
             having any status.
            
             Labels are floating point values for regression, and for binary classification being one
             of {-1, 0, 1/+1}. Negative class examples are -1, positive class examples are +1, and 0
             indicates that the label is unknown and should be classified using semi-supervised
             techniques.
            
             The "0 label" semi-supervised capability was rarely used and none of our learners
             currently do anything like this, though it is possible we may introduce semi-supervised
             learners in the future. For now this loader just parses this as a single floating point
             value, period. (Which means, for our binary classifier learners, that 0 and -1 will both
             be treated identically.) If we were to support this, the natural thing would be to have
             an option to map 0 to NA, somehow. But practically, variants of the SVM-light format have
             promulgated to the point where nearly every time 0 is used, it actually refers to a
             negative example, so we may continue to accept this corruption as "correct" by default.
            
             The actual feature vector is specified through a series of key/value pairs. SVM-light
             requires that the keys be positive, increasing integers, except for three special keys:
             cost (we interpret as Weight), qid (we interpret as GroupId) and sid (we ignore these,
             but might present them as a column in the future if any of our learners implement anything
             resembling slack id). The value for 'cost' is float, 'qid' is a long, and 'sid' is a long
             that must be positive. If these keys are specified multiple times, the last one wins.
            
             SVM-light, if the tail of the value is not interpretable as a number, will ignore the tail.
             E.g., "5:3.14hello" will be interpreted the same as "5:3.14". I am aware of one real dataset
             that took advantage of this, and for now I do not support this type of thing.
            
             We do not retain the restriction on keys needing to be increasing values in our loader,
             due to the way we compose our feature vectors, but it will be most efficient if this policy
             is still followed. If it is followed a sort will not be required.
            
             This loader has the special option through the <c>xf</c> option to specify a transform,
             possibly trainable, to convert the raw text of the key values into the key value. The
             transform, whatever it is, must in addition to user specified options accept an argument
             of the form "column=Name" to identify a column to convert. Ideally there would be some
             other way to specify this other than hacking arguments. The intent of this is to allow
             things like string keys, a common variant of the format, but one emphatically not allowed
             by the original format.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.DataViewSchema GetOutputSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.DataViewSchema GetOutputSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.SvmLightLoader.GetOutputSchema" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema () As DataViewSchema" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : unit -&gt; Microsoft.ML.DataViewSchema&#xA;override this.GetOutputSchema : unit -&gt; Microsoft.ML.DataViewSchema" Usage="svmLightLoader.GetOutputSchema " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IDataLoader`1.GetOutputSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.DataViewSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public Microsoft.ML.IDataView Load (Microsoft.ML.Data.IMultiStreamSource input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.IDataView Load(class Microsoft.ML.Data.IMultiStreamSource input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.SvmLightLoader.Load(Microsoft.ML.Data.IMultiStreamSource)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (input As IMultiStreamSource) As IDataView" />
      <MemberSignature Language="F#" Value="abstract member Load : Microsoft.ML.Data.IMultiStreamSource -&gt; Microsoft.ML.IDataView&#xA;override this.Load : Microsoft.ML.Data.IMultiStreamSource -&gt; Microsoft.ML.IDataView" Usage="svmLightLoader.Load input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.IDataLoader`1.Load(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.Data.IMultiStreamSource" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.ML.ICanSaveModel.Save">
      <MemberSignature Language="C#" Value="void ICanSaveModel.Save (Microsoft.ML.ModelSaveContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.ML.ICanSaveModel.Save(class Microsoft.ML.ModelSaveContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.SvmLightLoader.Microsoft#ML#ICanSaveModel#Save(Microsoft.ML.ModelSaveContext)" />
      <MemberSignature Language="VB.NET" Value="Sub Save (ctx As ModelSaveContext) Implements ICanSaveModel.Save" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ICanSaveModel.Save(Microsoft.ML.ModelSaveContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.ModelSaveContext" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
