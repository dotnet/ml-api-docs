<Type Name="ImageLoadingEstimator" FullName="Microsoft.ML.Data.ImageLoadingEstimator">
  <TypeSignature Language="C#" Value="public sealed class ImageLoadingEstimator : Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.Data.ImageLoadingTransformer&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImageLoadingEstimator extends Microsoft.ML.Data.TrivialEstimator`1&lt;class Microsoft.ML.Data.ImageLoadingTransformer&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Data.ImageLoadingEstimator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImageLoadingEstimator&#xA;Inherits TrivialEstimator(Of ImageLoadingTransformer)" />
  <TypeSignature Language="F#" Value="type ImageLoadingEstimator = class&#xA;    inherit TrivialEstimator&lt;ImageLoadingTransformer&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.ImageAnalytics</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Data.TrivialEstimator&lt;Microsoft.ML.Data.ImageLoadingTransformer&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Microsoft.ML.Data.ImageLoadingTransformer</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:Microsoft.ML.IEstimator`1" /> for the <see cref="T:Microsoft.ML.Data.ImageLoadingTransformer" />.
             </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | [Text](<xref:Microsoft.ML.Data.TextDataViewType>) |
             | Output column data type | <xref:System.Drawing.Bitmap> |
             | Required NuGet in addition to Microsoft.ML | Microsoft.ML.ImageAnalytics |
            
             The resulting <xref:Microsoft.ML.Data.ImageLoadingTransformer> creates a new column, named as specified in the output column name parameters, and
             loads in it images specified in the input column.
             Loading is the first step of almost every pipeline that does image processing, and further analysis on images.
             The images to load need to be in the formats supported by <xref:System.Drawing.Bitmap>.
             For end-to-end image processing pipelines, and scenarios in your applications, see the
             [examples](https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started) in the machinelearning-samples github repository.</a>
            
             Check the See Also section for links to usage examples.
             ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.ML.ImageEstimatorsCatalog.LoadImages(Microsoft.ML.TransformsCatalog,System.String,System.String,System.String)" />
  </Docs>
  <Members>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.SchemaShape GetOutputSchema (Microsoft.ML.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.ML.SchemaShape GetOutputSchema(class Microsoft.ML.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.ImageLoadingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="override this.GetOutputSchema : Microsoft.ML.SchemaShape -&gt; Microsoft.ML.SchemaShape" Usage="imageLoadingEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.ImageAnalytics</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape" /> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>