<Type Name="UnbufferedStream" FullName="Microsoft.ML.Runtime.Internal.IO.UnbufferedStream">
  <TypeSignature Language="C#" Value="public sealed class UnbufferedStream : System.IO.FileStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit UnbufferedStream extends System.IO.FileStream implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UnbufferedStream&#xA;Inherits FileStream" />
  <TypeSignature Language="F#" Value="type UnbufferedStream = class&#xA;    inherit FileStream&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnbufferedStream sealed : System::IO::FileStream" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.FileStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Stream using unbuffered I/O for efficient reading from fast disk arrays.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnbufferedStream (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Internal.IO.UnbufferedStream : string -&gt; Microsoft.ML.Runtime.Internal.IO.UnbufferedStream" Usage="new Microsoft.ML.Runtime.Internal.IO.UnbufferedStream fileName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnbufferedStream(System::String ^ fileName);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; UnbufferedStream(Platform::String ^ fileName);" />
      <MemberSignature Language="C++ WINRT" Value=" UnbufferedStream(std::wstring const &amp; fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">name of file to open</param>
        <summary>
            Open a file for reading without NTFS caching.
            The stream should be accessed sequentially - seeking can be slow - and it will not
            support writing.
            </summary>
        <returns>Unbuffered file stream</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">fileName is null.</exception>
        <exception cref="T:System.ArgumentException">fileName is invalid.</exception>
        <exception cref="T:System.IO.FileNotFoundException">fileName cannot be found.</exception>
        <exception cref="T:System.IO.IOException"> An I/O error has occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferSize">
      <MemberSignature Language="C#" Value="public static int BufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.BufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferSize As Integer" />
      <MemberSignature Language="F#" Value="member this.BufferSize : int with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.BufferSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static property int BufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or Set the memory used for reading, in bytes.
            </summary>
        <value>To be added.</value>
        <remarks>
          <p>
            If the memory cannot be allocated, a backoff strategy will be used.
            </p>
          <p>
            The default is 8 MB.
            </p>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.CanRead" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get whether the stream supports reading - always true.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.CanSeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get whether the stream supports seeking. true, although performance
            might not be optimal.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.CanWrite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get whether the stream supports writing - always false.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="unbufferedStream.Close " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="C++ WINRT" Value=" override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Close the stream.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="unbufferedStream.Dispose disposing" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="C++ WINRT" Value=" override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true if disposing, false otherwise</param>
        <summary>
            Release the resources used for the unbuffered file.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Eof">
      <MemberSignature Language="C#" Value="public bool Eof ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Eof() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Eof" />
      <MemberSignature Language="VB.NET" Value="Public Function Eof () As Boolean" />
      <MemberSignature Language="F#" Value="member this.Eof : unit -&gt; bool" Usage="unbufferedStream.Eof " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Eof();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool Eof();" />
      <MemberSignature Language="C++ WINRT" Value="bool Eof();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Check if the end of file has been reached.
            </summary>
        <returns>true if no more bytes remain; false otherwise</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~UnbufferedStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="unbufferedStream.Finalize " />
      <MemberSignature Language="C++ CLI" Value="!UnbufferedStream ()" />
      <MemberSignature Language="C++ CX" Value="!UnbufferedStream ()" />
      <MemberSignature Language="C++ WINRT" Value="!UnbufferedStream ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Release resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="unbufferedStream.Flush " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="C++ WINRT" Value=" override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Write all pending data. This method does nothing.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public override bool IsAsync { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.IsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAsync As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsAsync : bool" Usage="Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.IsAsync" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAsync { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property bool IsAsync { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get whether the stream was opened asynchronously. Always false, but this does not
            matter for managed code.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Length" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property long long Length { long long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the Length of this file, in bytes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParallelRead">
      <MemberSignature Language="C#" Value="public static bool ParallelRead { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool ParallelRead" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.ParallelRead" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ParallelRead As Boolean" />
      <MemberSignature Language="F#" Value="member this.ParallelRead : bool with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.ParallelRead" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool ParallelRead { bool get(); void set(bool value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static property bool ParallelRead { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or Set whether to read in the background in a separate thread.
            </summary>
        <value>To be added.</value>
        <remarks>
          <p>
            This does not affect existing instances.
            </p>
          <p>
            Normally, it is faster to perform a multithreaded read, even on a
            single-processor machine. However, the thread creation cost does make
            it somewhat more expensive to create an instance.
            </p>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public int Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As Integer" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; int" Usage="unbufferedStream.Peek " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Peek();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; int Peek();" />
      <MemberSignature Language="C++ WINRT" Value="int Peek();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Retrieve the next byte in the stream, without advancing the position.
            </summary>
        <returns>the next byte, or -1 if at end of stream</returns>
        <remarks>This is not as efficient as block reading, because of overhead issues.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Position" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property long long Position { long long get(); void set(long long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or Set the position in the file, in bytes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public int Read (out byte* buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Read([out] unsigned int8*&amp; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Read(System.Byte*@)" />
      <MemberSignature Language="F#" Value="override this.Read :  -&gt; int" Usage="unbufferedStream.Read buffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Read([Runtime::InteropServices::Out] System::Byte* % buffer);" />
      <MemberSignature Language="C++ WINRT" Value="int Read([Runtime::InteropServices::Out] byte* &amp; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte*&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">returns a pointer to a (pinned) buffer of bytes read from the stream</param>
        <summary>
            Read a block of bytes from the stream and advance the position.
            </summary>
        <returns>
            the number of bytes read - this will be positive unless the end of
            stream has been reached, in which case it will be 0
            </returns>
        <remarks>The buffer returned here may be shared across calls to this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public int Read (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Read(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Read(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (buffer As Byte()) As Integer" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] -&gt; int" Usage="unbufferedStream.Read buffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Read(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; int Read(Platform::Array &lt;byte&gt; ^ buffer);" />
      <MemberSignature Language="C++ WINRT" Value="int Read(std::Array &lt;byte&gt; const &amp; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">the array in which the values are replaced by the bytes read
            </param>
        <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
        <returns>
            The total number of bytes read into the buffer. This will be 0 if the end
            of the stream has been reached, and is guaranteed to be less than buffer.Length only if
            fewer than buffer.Length bytes remain (and it will then equal the remainder of the bytes).
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public int Read (out byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Read([out] unsigned int8[]&amp; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Read(System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (ByRef buffer As Byte()) As Integer" />
      <MemberSignature Language="F#" Value="override this.Read :  -&gt; int" Usage="unbufferedStream.Read buffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Read([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % buffer);" />
      <MemberSignature Language="C++ WINRT" Value="int Read([Runtime::InteropServices::Out] std::Array &lt;byte&gt; const &amp; &amp; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">the array in which the values are replaced by the bytes read</param>
        <summary>
            Reads a block of bytes from the stream and writes the data into a buffer.
            The buffer is automatically allocated, but it may be shared across calls to this method.
            </summary>
        <returns>
            The total number of bytes read into the buffer. This will be 0 if the end
            of the stream has been reached, and is guaranteed to be less than buffer.Length only if
            fewer than buffer.Length bytes remain (and it will then equal the remainder of the bytes).
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="unbufferedStream.Read (buffer, offset, count)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override int Read(Platform::Array &lt;byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="C++ WINRT" Value=" override int Read(std::Array &lt;byte&gt; const &amp; buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">the array in which the values between offset and (offset + count - 1) are replaced by the bytes read</param>
        <param name="offset">The byte offset in array at which to begin reading. </param>
        <param name="count">The maximum number of bytes to read. </param>
        <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
        <returns>
            The total number of bytes read into the buffer. This will be 0 if the end
            of the stream has been reached, and is guaranteed to be less than count only if
            fewer than count bytes remain (and it will then equal the remainder of the bytes).
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The counts are out of range.</exception>
        <exception cref="T:System.ArgumentNullException">The buffer is null</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public override int ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.ReadByte" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadByte () As Integer" />
      <MemberSignature Language="F#" Value="override this.ReadByte : unit -&gt; int" Usage="unbufferedStream.ReadByte " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadByte();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override int ReadByte();" />
      <MemberSignature Language="C++ WINRT" Value=" override int ReadByte();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Retrieve the next byte in the stream and advance the position.
            </summary>
        <returns>the next byte, or -1 if at end of stream</returns>
        <remarks>This is not as efficient as block reading, because of overhead issues.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public long Seek (long offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Seek(int64 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Seek(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (offset As Long) As Long" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 -&gt; int64" Usage="unbufferedStream.Seek offset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Seek(long offset);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; long long Seek(long long offset);" />
      <MemberSignature Language="C++ WINRT" Value="long Seek(long offset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">the offset in bytes</param>
        <summary>
            Seek to a new position in the file, in bytes.
            </summary>
        <returns>the new position</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="unbufferedStream.Seek (offset, origin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">the offset in bytes</param>
        <param name="origin">the SeekOrigin to take the offset from</param>
        <summary>
            Seek to a new position in the file, in bytes.
            </summary>
        <returns>the new position</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="unbufferedStream.SetLength value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void SetLength(long long value);" />
      <MemberSignature Language="C++ WINRT" Value=" override void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">the length that the file will not be set to</param>
        <summary>
            Set the length of the file - not supported.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Always thrown.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.UnbufferedStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="unbufferedStream.Write (buffer, offset, count)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void Write(Platform::Array &lt;byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="C++ WINRT" Value=" override void Write(std::Array &lt;byte&gt; const &amp; buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">the buffer that will not be written</param>
        <param name="offset">the offset in buffer at which to not start writing</param>
        <param name="count">the number of bytes to not write</param>
        <summary>
            Write a section of buffer to the stream - not supported.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Always thrown.</exception>
      </Docs>
    </Member>
  </Members>
</Type>