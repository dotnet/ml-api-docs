<Type Name="ZStreamWriter" FullName="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter">
  <TypeSignature Language="C#" Value="public class ZStreamWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ZStreamWriter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ZStreamWriter" />
  <TypeSignature Language="F#" Value="type ZStreamWriter = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ZStreamWriter" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class ZStreamWriter" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class ZStreamWriter" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Class to create StreamWriters given file paths.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowLibraryFallback">
      <MemberSignature Language="C#" Value="public static bool AllowLibraryFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AllowLibraryFallback" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.AllowLibraryFallback" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AllowLibraryFallback As Boolean" />
      <MemberSignature Language="F#" Value="member this.AllowLibraryFallback : bool with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.AllowLibraryFallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AllowLibraryFallback { bool get(); void set(bool value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static property bool AllowLibraryFallback { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set whether to allow fallback to the compression library if executables
            are not found in the path. false by default. Using the fallback may result in
            slower performance and larger files. This setting is shared with ZStreamIn,
            ZStreamOut, ZStreamReader, and ZStreamWriter.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BreakChunksAtLines">
      <MemberSignature Language="C#" Value="public static bool BreakChunksAtLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool BreakChunksAtLines" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.BreakChunksAtLines" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BreakChunksAtLines As Boolean" />
      <MemberSignature Language="F#" Value="member this.BreakChunksAtLines : bool with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.BreakChunksAtLines" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool BreakChunksAtLines { bool get(); void set(bool value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static property bool BreakChunksAtLines { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set whether to break at line boundaries when using chunked streams.
            True by default, unlike <see cref="T:Microsoft.ML.Runtime.Internal.IO.ZStreamOut" />.
            </summary>
        <value>To be added.</value>
        <remarks>
            This will not necessarily have any effect. Most streams have no concept of chunks.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultLowFragmentation">
      <MemberSignature Language="C#" Value="public static bool DefaultLowFragmentation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool DefaultLowFragmentation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.DefaultLowFragmentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultLowFragmentation As Boolean" />
      <MemberSignature Language="F#" Value="member this.DefaultLowFragmentation : bool with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.DefaultLowFragmentation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool DefaultLowFragmentation { bool get(); void set(bool value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static property bool DefaultLowFragmentation { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set whether the Open method should use a LowFragmentationStream for files.
            true, by default.
            </summary>
        <value>To be added.</value>
        <remarks>
            The <see cref="T:Microsoft.ML.Runtime.Internal.IO.LowFragmentationStream" /> has strong advantages, increasing write
            speed and decreasing fragmentation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter Open (string outFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter Open(string outFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.Open(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (outFileName As String) As StreamWriter" />
      <MemberSignature Language="F#" Value="static member Open : string -&gt; System.IO.StreamWriter" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.Open outFileName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ Open(System::String ^ outFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outFileName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter Open (string outFileName, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter Open(string outFileName, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.Open(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (outFileName As String, append As Boolean) As StreamWriter" />
      <MemberSignature Language="F#" Value="static member Open : string * bool -&gt; System.IO.StreamWriter" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.Open (outFileName, append)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ Open(System::String ^ outFileName, bool append);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outFileName" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="outFileName">To be added.</param>
        <param name="append">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter Open (string outFileName, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter Open(string outFileName, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.Open(System.String,System.Text.Encoding)" />
      <MemberSignature Language="F#" Value="static member Open : string * System.Text.Encoding -&gt; System.IO.StreamWriter" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.Open (outFileName, encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ Open(System::String ^ outFileName, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outFileName" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="outFileName">To be added.</param>
        <param name="encoding">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter Open (string outFileName, bool append, bool breakChunksAtLines);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter Open(string outFileName, bool append, bool breakChunksAtLines) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.Open(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (outFileName As String, append As Boolean, breakChunksAtLines As Boolean) As StreamWriter" />
      <MemberSignature Language="F#" Value="static member Open : string * bool * bool -&gt; System.IO.StreamWriter" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.Open (outFileName, append, breakChunksAtLines)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ Open(System::String ^ outFileName, bool append, bool breakChunksAtLines);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outFileName" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="breakChunksAtLines" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="outFileName">To be added.</param>
        <param name="append">To be added.</param>
        <param name="breakChunksAtLines">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter Open (string outFileName, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter Open(string outFileName, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.Open(System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="F#" Value="static member Open : string * bool * System.Text.Encoding -&gt; System.IO.StreamWriter" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.Open (outFileName, append, encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ Open(System::String ^ outFileName, bool append, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outFileName" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="outFileName">To be added.</param>
        <param name="append">To be added.</param>
        <param name="encoding">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenUnbuffered">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter OpenUnbuffered (string outFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter OpenUnbuffered(string outFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.OpenUnbuffered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenUnbuffered (outFileName As String) As StreamWriter" />
      <MemberSignature Language="F#" Value="static member OpenUnbuffered : string -&gt; System.IO.StreamWriter" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.OpenUnbuffered outFileName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ OpenUnbuffered(System::String ^ outFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outFileName">file to write to</param>
        <summary>
            Open the given file (unbuffered, if possible).
            </summary>
        <returns>A StreamWriter for the file</returns>
        <remarks>
          <para>
            Unbuffered I/O can give better performance, especially on fast RAID arrays.
            It does not use the system file cache. However, for writing, this currently
            has no effect.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">fileName is null.</exception>
        <exception cref="T:System.ArgumentException">fileName is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The utilities needed to open a stream are not available.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenUnbuffered">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter OpenUnbuffered (string outFileName, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter OpenUnbuffered(string outFileName, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.OpenUnbuffered(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenUnbuffered (outFileName As String, append As Boolean) As StreamWriter" />
      <MemberSignature Language="F#" Value="static member OpenUnbuffered : string * bool -&gt; System.IO.StreamWriter" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.OpenUnbuffered (outFileName, append)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ OpenUnbuffered(System::String ^ outFileName, bool append);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outFileName" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="outFileName">file to write to</param>
        <param name="append">if true, append; if false, overwrite</param>
        <summary>
            Open the given file (unbuffered, if possible).
            </summary>
        <returns>A StreamWriter for the file</returns>
        <remarks>
          <para>
            Unbuffered I/O can give better performance, especially on fast RAID arrays.
            It does not use the system file cache. However, for writing, this currently
            has no effect.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">fileName is null.</exception>
        <exception cref="T:System.ArgumentException">fileName is invalid.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Append is specified, and fileName cannot be found.</exception>
        <exception cref="T:System.InvalidOperationException">The utilities needed to open a stream are not available.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenUnbuffered">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter OpenUnbuffered (string outFileName, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter OpenUnbuffered(string outFileName, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.OpenUnbuffered(System.String,System.Text.Encoding)" />
      <MemberSignature Language="F#" Value="static member OpenUnbuffered : string * System.Text.Encoding -&gt; System.IO.StreamWriter" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.OpenUnbuffered (outFileName, encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ OpenUnbuffered(System::String ^ outFileName, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outFileName" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="outFileName">file to write to</param>
        <param name="encoding">Encoding for writing</param>
        <summary>
            Open the given file (unbuffered, if possible).
            </summary>
        <returns>A StreamWriter for the file</returns>
        <remarks>
          <para>
            Unbuffered I/O can give better performance, especially on fast RAID arrays.
            It does not use the system file cache. However, for writing, this currently
            has no effect.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">fileName is null.</exception>
        <exception cref="T:System.ArgumentException">fileName is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The utilities needed to open a stream are not available.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenUnbuffered">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter OpenUnbuffered (string outFileName, bool append, bool breakChunksAtLines);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter OpenUnbuffered(string outFileName, bool append, bool breakChunksAtLines) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.OpenUnbuffered(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenUnbuffered (outFileName As String, append As Boolean, breakChunksAtLines As Boolean) As StreamWriter" />
      <MemberSignature Language="F#" Value="static member OpenUnbuffered : string * bool * bool -&gt; System.IO.StreamWriter" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.OpenUnbuffered (outFileName, append, breakChunksAtLines)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ OpenUnbuffered(System::String ^ outFileName, bool append, bool breakChunksAtLines);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outFileName" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="breakChunksAtLines" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="outFileName">file to write to</param>
        <param name="append">if true, append; if false, overwrite</param>
        <param name="breakChunksAtLines">if true, break at line boundaries when using chunked streams</param>
        <summary>
            Open the given file (unbuffered, if possible).
            </summary>
        <returns>A StreamWriter for the file</returns>
        <remarks>
          <para>
            Unbuffered I/O can give better performance, especially on fast RAID arrays.
            It does not use the system file cache. However, for writing, this currently
            has no effect.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">fileName is null.</exception>
        <exception cref="T:System.ArgumentException">fileName is invalid.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Append is specified, and fileName cannot be found.</exception>
        <exception cref="T:System.InvalidOperationException">The utilities needed to open a stream are not available.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenUnbuffered">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter OpenUnbuffered (string outFileName, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter OpenUnbuffered(string outFileName, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.OpenUnbuffered(System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="F#" Value="static member OpenUnbuffered : string * bool * System.Text.Encoding -&gt; System.IO.StreamWriter" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.OpenUnbuffered (outFileName, append, encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ OpenUnbuffered(System::String ^ outFileName, bool append, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outFileName" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="outFileName">file to write to</param>
        <param name="append">if true, append; if false, overwrite</param>
        <param name="encoding">Encoding for writing</param>
        <summary>
            Open the given file (unbuffered, if possible).
            </summary>
        <returns>A StreamWriter for the file</returns>
        <remarks>
          <para>
            Unbuffered I/O can give better performance, especially on fast RAID arrays.
            It does not use the system file cache. However, for writing, this currently
            has no effect.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">fileName is null.</exception>
        <exception cref="T:System.ArgumentException">fileName is invalid.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Append is specified, and fileName cannot be found.</exception>
        <exception cref="T:System.InvalidOperationException">The utilities needed to open a stream are not available.</exception>
      </Docs>
    </Member>
    <Member MemberName="UTF8Lenient">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF8Lenient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF8Lenient" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.UTF8Lenient" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF8Lenient As Encoding" />
      <MemberSignature Language="F#" Value="member this.UTF8Lenient : System.Text.Encoding" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.UTF8Lenient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF8Lenient { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A lenient UTF8 encoding that ignores problems and skips the BOM.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding WriteEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding WriteEncoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.WriteEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WriteEncoding As Encoding" />
      <MemberSignature Language="F#" Value="member this.WriteEncoding : System.Text.Encoding with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamWriter.WriteEncoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ WriteEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the encoding that is used for new StreamWriters.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>