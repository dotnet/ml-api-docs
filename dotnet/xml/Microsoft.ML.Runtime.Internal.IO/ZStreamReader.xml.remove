<Type Name="ZStreamReader" FullName="Microsoft.ML.Runtime.Internal.IO.ZStreamReader">
  <TypeSignature Language="C#" Value="public class ZStreamReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ZStreamReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Internal.IO.ZStreamReader" />
  <TypeSignature Language="VB.NET" Value="Public Class ZStreamReader" />
  <TypeSignature Language="F#" Value="type ZStreamReader = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Class to create StreamReaders given file paths.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowLibraryFallback">
      <MemberSignature Language="C#" Value="public static bool AllowLibraryFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AllowLibraryFallback" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamReader.AllowLibraryFallback" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AllowLibraryFallback As Boolean" />
      <MemberSignature Language="F#" Value="member this.AllowLibraryFallback : bool with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamReader.AllowLibraryFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set whether to allow fallback to the compression library if executables
            are not found in the path. false by default. Using the fallback may result in
            slower performance and larger files. This setting is shared with ZStreamIn,
            ZStreamOut, ZStreamReader, and ZStreamWriter.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultToLocalEncoding">
      <MemberSignature Language="C#" Value="public static bool DefaultToLocalEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool DefaultToLocalEncoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamReader.DefaultToLocalEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultToLocalEncoding As Boolean" />
      <MemberSignature Language="F#" Value="member this.DefaultToLocalEncoding : bool with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamReader.DefaultToLocalEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set whether to default to the local encoding, rather than a lenient UTF8.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FallbackExtension">
      <MemberSignature Language="C#" Value="public static string FallbackExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string FallbackExtension" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Internal.IO.ZStreamReader.FallbackExtension" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property FallbackExtension As String" />
      <MemberSignature Language="F#" Value="member this.FallbackExtension : string with get, set" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamReader.FallbackExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set extension to look to append when the given filename does not exist.
            If set to empty string (the default), try all known extensions;
            if set to null, disable.
            This is mapped to ZStreamIn.FallbackExtension.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader Open (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamReader Open(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamReader.Open(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (fileName As String) As StreamReader" />
      <MemberSignature Language="F#" Value="static member Open : string -&gt; System.IO.StreamReader" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamReader.Open fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader Open (string fileName, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamReader Open(string fileName, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamReader.Open(System.String,System.Text.Encoding)" />
      <MemberSignature Language="F#" Value="static member Open : string * System.Text.Encoding -&gt; System.IO.StreamReader" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamReader.Open (fileName, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="fileName">To be added.</param>
        <param name="encoding">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenBuffered">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader OpenBuffered (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamReader OpenBuffered(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamReader.OpenBuffered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenBuffered (fileName As String) As StreamReader" />
      <MemberSignature Language="F#" Value="static member OpenBuffered : string -&gt; System.IO.StreamReader" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamReader.OpenBuffered fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenBuffered">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader OpenBuffered (string fileName, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamReader OpenBuffered(string fileName, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamReader.OpenBuffered(System.String,System.Text.Encoding)" />
      <MemberSignature Language="F#" Value="static member OpenBuffered : string * System.Text.Encoding -&gt; System.IO.StreamReader" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamReader.OpenBuffered (fileName, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="fileName">To be added.</param>
        <param name="encoding">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenUnbuffered">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader OpenUnbuffered (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamReader OpenUnbuffered(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamReader.OpenUnbuffered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenUnbuffered (fileName As String) As StreamReader" />
      <MemberSignature Language="F#" Value="static member OpenUnbuffered : string -&gt; System.IO.StreamReader" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamReader.OpenUnbuffered fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">name of the file to open</param>
        <summary>
            Open the specified file (with unbuffered I/O, if possible).
            </summary>
        <returns>A StreamReader for the (possibly uncompressed) text</returns>
        <remarks>
          <para>
            Unbuffered I/O can give better performance, especially on fast RAID arrays.
            It does not use the system file cache. This is the only way to get speeds over
            60 MB/sec or more on reading (350 MB/sec or more is possible on a good array).
            </para>
          <para>
            While compressed files and special stream names will be understood, unbuffered I/O will
            not be enabled on anything but simple files.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">fileName is null.</exception>
        <exception cref="T:System.ArgumentException">fileName is invalid.</exception>
        <exception cref="T:System.IO.FileNotFoundException">fileName cannot be found.</exception>
        <exception cref="T:System.InvalidOperationException">The utilities needed to open a stream are not available.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenUnbuffered">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader OpenUnbuffered (string fileName, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamReader OpenUnbuffered(string fileName, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Internal.IO.ZStreamReader.OpenUnbuffered(System.String,System.Text.Encoding)" />
      <MemberSignature Language="F#" Value="static member OpenUnbuffered : string * System.Text.Encoding -&gt; System.IO.StreamReader" Usage="Microsoft.ML.Runtime.Internal.IO.ZStreamReader.OpenUnbuffered (fileName, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.InternalStreams</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="fileName">name of the file to open</param>
        <param name="encoding">the encoding to use</param>
        <summary>
            Open the specified file (with unbuffered I/O, if possible).
            </summary>
        <returns>A StreamReader for the (possibly uncompressed) text</returns>
        <remarks>
          <para>
            Unbuffered I/O can give better performance, especially on fast RAID arrays.
            It does not use the system file cache. This is the only way to get speeds over
            60 MB/sec or more on reading (350 MB/sec or more is possible on a good array).
            </para>
          <para>
            While compressed files and special stream names will be understood, unbuffered I/O will
            not be enabled on anything but simple files.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">fileName is null.</exception>
        <exception cref="T:System.ArgumentException">fileName is invalid.</exception>
        <exception cref="T:System.IO.FileNotFoundException">fileName cannot be found.</exception>
        <exception cref="T:System.InvalidOperationException">The utilities needed to open a stream are not available.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
