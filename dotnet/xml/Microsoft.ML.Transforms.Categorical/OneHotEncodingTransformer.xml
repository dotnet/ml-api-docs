<Type Name="OneHotEncodingTransformer" FullName="Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer">
  <TypeSignature Language="C#" Value="public sealed class OneHotEncodingTransformer : Microsoft.ML.Core.Data.ITransformer, Microsoft.ML.Model.ICanSaveModel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OneHotEncodingTransformer extends System.Object implements class Microsoft.ML.Core.Data.ITransformer, class Microsoft.ML.Model.ICanSaveModel" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OneHotEncodingTransformer&#xA;Implements ICanSaveModel, ITransformer" />
  <TypeSignature Language="F#" Value="type OneHotEncodingTransformer = class&#xA;    interface ITransformer&#xA;    interface ICanSaveModel" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Core.Data.ITransformer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.Model.ICanSaveModel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
        Converts the categorical value into an indicator array by building a dictionary of categories based on the data and using the id in the dictionary as the index in the array
      </summary>
    <remarks>
      <para>
        The CategoricalOneHotVectorizer transform passes through a data set, operating on text columns, to
        build a dictionary of categories.
        For each row, the entire text string appearing in the input column is defined as a category.</para>
      <para>The output of this transform is an indicator vector.</para>
        Each slot in this vector corresponds to a category in the dictionary, so its length is the size of the built dictionary.
        <para>The CategoricalOneHotVectorizer can be applied to one or more columns, in which case it builds and uses a separate dictionary
        for each column that it is applied to.</para><para>The <see cref="T:Microsoft.ML.Transforms.CategoricalTransformOutputKind" /> produces integer values and KeyType columns.
        The Key value is the one-based index of the slot set in the Ind/Bag options.
        If the Key option is not found, it is assigned the value zero.
        In the <see cref="F:Microsoft.ML.Transforms.CategoricalTransformOutputKind.Ind" />, <see cref="F:Microsoft.ML.Transforms.CategoricalTransformOutputKind.Bag" /> options are not found, they result in an all zero bit vector.
        <see cref="F:Microsoft.ML.Transforms.CategoricalTransformOutputKind.Ind" /> and <see cref="F:Microsoft.ML.Transforms.CategoricalTransformOutputKind.Bag" /> differ simply in how the bit-vectors generated from individual slots are aggregated:
        for Ind they are concatenated and for Bag they are added.
        When the source column is a singleton, the Ind and Bag options are identical.</para></remarks>
  </Docs>
  <Members>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.Data.DataView.Schema GetOutputSchema (Microsoft.Data.DataView.Schema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Data.DataView.Schema GetOutputSchema(class Microsoft.Data.DataView.Schema inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.GetOutputSchema(Microsoft.Data.DataView.Schema)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As Schema) As Schema" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.Data.DataView.Schema -&gt; Microsoft.Data.DataView.Schema&#xA;override this.GetOutputSchema : Microsoft.Data.DataView.Schema -&gt; Microsoft.Data.DataView.Schema" Usage="oneHotEncodingTransformer.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Core.Data.ITransformer.GetOutputSchema(Microsoft.Data.DataView.Schema)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Data.DataView.Schema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.Data.DataView.Schema" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRowToRowMapper">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.IRowToRowMapper GetRowToRowMapper (Microsoft.Data.DataView.Schema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.IRowToRowMapper GetRowToRowMapper(class Microsoft.Data.DataView.Schema inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.GetRowToRowMapper(Microsoft.Data.DataView.Schema)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRowToRowMapper (inputSchema As Schema) As IRowToRowMapper" />
      <MemberSignature Language="F#" Value="abstract member GetRowToRowMapper : Microsoft.Data.DataView.Schema -&gt; Microsoft.ML.Data.IRowToRowMapper&#xA;override this.GetRowToRowMapper : Microsoft.Data.DataView.Schema -&gt; Microsoft.ML.Data.IRowToRowMapper" Usage="oneHotEncodingTransformer.GetRowToRowMapper inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Core.Data.ITransformer.GetRowToRowMapper(Microsoft.Data.DataView.Schema)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.IRowToRowMapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.Data.DataView.Schema" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRowToRowMapper">
      <MemberSignature Language="C#" Value="public bool IsRowToRowMapper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRowToRowMapper" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.IsRowToRowMapper" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRowToRowMapper As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsRowToRowMapper : bool" Usage="Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.IsRowToRowMapper" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.Core.Data.ITransformer.IsRowToRowMapper</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (Microsoft.ML.Model.ModelSaveContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class Microsoft.ML.Model.ModelSaveContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.Save(Microsoft.ML.Model.ModelSaveContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (ctx As ModelSaveContext)" />
      <MemberSignature Language="F#" Value="abstract member Save : Microsoft.ML.Model.ModelSaveContext -&gt; unit&#xA;override this.Save : Microsoft.ML.Model.ModelSaveContext -&gt; unit" Usage="oneHotEncodingTransformer.Save ctx" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Model.ICanSaveModel.Save(Microsoft.ML.Model.ModelSaveContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.Model.ModelSaveContext" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public Microsoft.Data.DataView.IDataView Transform (Microsoft.Data.DataView.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Data.DataView.IDataView Transform(class Microsoft.Data.DataView.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.Transform(Microsoft.Data.DataView.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IDataView) As IDataView" />
      <MemberSignature Language="F#" Value="abstract member Transform : Microsoft.Data.DataView.IDataView -&gt; Microsoft.Data.DataView.IDataView&#xA;override this.Transform : Microsoft.Data.DataView.IDataView -&gt; Microsoft.Data.DataView.IDataView" Usage="oneHotEncodingTransformer.Transform input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Core.Data.ITransformer.Transform(Microsoft.Data.DataView.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Transforms</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Data.DataView.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.Data.DataView.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>