<Type Name="ValueToKeyMappingEstimator" FullName="Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator">
  <TypeSignature Language="C#" Value="public sealed class ValueToKeyMappingEstimator : Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Transforms.Categorical.TermTransform&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ValueToKeyMappingEstimator extends System.Object implements class Microsoft.ML.Core.Data.IEstimator`1&lt;class Microsoft.ML.Transforms.Categorical.TermTransform&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ValueToKeyMappingEstimator&#xA;Implements IEstimator(Of TermTransform)" />
  <TypeSignature Language="F#" Value="type ValueToKeyMappingEstimator = class&#xA;    interface IEstimator&lt;TermTransform&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.Core.Data.IEstimator&lt;Microsoft.ML.Transforms.Categorical.TermTransform&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
        Converts input values (words, numbers, etc.) to index in a dictionary.
      </summary>
    <remarks>
        The ValueToKeyMappingEstimator builds up term vocabularies (dictionaries).
        If multiple columns are used, each column builds/uses exactly one vocabulary.
        The output columns are KeyType-valued.
        The Key value is the one-based index of the item in the dictionary.
        If the key is not found in the dictionary, it is assigned the missing value indicator.
        This dictionary mapping values to keys is most commonly learnt from the unique values in input data,
        but can be defined through other means: either with the mapping defined directly on the command line, or as loaded from an external file.
      </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValueToKeyMappingEstimator (Microsoft.ML.Runtime.IHostEnvironment env, Microsoft.ML.Transforms.Categorical.TermTransform.ColumnInfo[] columns, string file = null, string termsColumn = null, Microsoft.ML.Runtime.IComponentFactory&lt;Microsoft.ML.Runtime.Data.IMultiStreamSource,Microsoft.ML.Runtime.Data.IDataLoader&gt; loaderFactory = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, class Microsoft.ML.Transforms.Categorical.TermTransform/ColumnInfo[] columns, string file, string termsColumn, class Microsoft.ML.Runtime.IComponentFactory`2&lt;class Microsoft.ML.Runtime.Data.IMultiStreamSource, class Microsoft.ML.Runtime.Data.IDataLoader&gt; loaderFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Categorical.TermTransform.ColumnInfo[],System.String,System.String,Microsoft.ML.Runtime.IComponentFactory{Microsoft.ML.Runtime.Data.IMultiStreamSource,Microsoft.ML.Runtime.Data.IDataLoader})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, columns As TermTransform.ColumnInfo(), Optional file As String = null, Optional termsColumn As String = null, Optional loaderFactory As IComponentFactory(Of IMultiStreamSource, IDataLoader) = null)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator : Microsoft.ML.Runtime.IHostEnvironment * Microsoft.ML.Transforms.Categorical.TermTransform.ColumnInfo[] * string * string * Microsoft.ML.Runtime.IComponentFactory&lt;Microsoft.ML.Runtime.Data.IMultiStreamSource, Microsoft.ML.Runtime.Data.IDataLoader&gt; -&gt; Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator" Usage="new Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator (env, columns, file, termsColumn, loaderFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="columns" Type="Microsoft.ML.Transforms.Categorical.TermTransform+ColumnInfo[]" />
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="termsColumn" Type="System.String" />
        <Parameter Name="loaderFactory" Type="Microsoft.ML.Runtime.IComponentFactory&lt;Microsoft.ML.Runtime.Data.IMultiStreamSource,Microsoft.ML.Runtime.Data.IDataLoader&gt;" />
      </Parameters>
      <Docs>
        <param name="env">To be added.</param>
        <param name="columns">To be added.</param>
        <param name="file">To be added.</param>
        <param name="termsColumn">To be added.</param>
        <param name="loaderFactory">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValueToKeyMappingEstimator (Microsoft.ML.Runtime.IHostEnvironment env, string inputColumn, string outputColumn = null, int maxNumTerms = 1000000, Microsoft.ML.Transforms.Categorical.TermTransform.SortOrder sort = Microsoft.ML.Transforms.Categorical.TermTransform+SortOrder.Occurrence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, string inputColumn, string outputColumn, int32 maxNumTerms, valuetype Microsoft.ML.Transforms.Categorical.TermTransform/SortOrder sort) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,Microsoft.ML.Transforms.Categorical.TermTransform.SortOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, inputColumn As String, Optional outputColumn As String = null, Optional maxNumTerms As Integer = 1000000, Optional sort As TermTransform.SortOrder = Microsoft.ML.Transforms.Categorical.TermTransform+SortOrder.Occurrence)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator : Microsoft.ML.Runtime.IHostEnvironment * string * string * int * Microsoft.ML.Transforms.Categorical.TermTransform.SortOrder -&gt; Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator" Usage="new Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator (env, inputColumn, outputColumn, maxNumTerms, sort)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="inputColumn" Type="System.String" />
        <Parameter Name="outputColumn" Type="System.String" />
        <Parameter Name="maxNumTerms" Type="System.Int32" />
        <Parameter Name="sort" Type="Microsoft.ML.Transforms.Categorical.TermTransform+SortOrder" />
      </Parameters>
      <Docs>
        <param name="env">Host Environment.</param>
        <param name="inputColumn">Name of the column to be transformed.</param>
        <param name="outputColumn">Name of the output column. If this is null '<paramref name="inputColumn" />' will be used.</param>
        <param name="maxNumTerms">Maximum number of keys to keep per column when auto-training.</param>
        <param name="sort">How items should be ordered when vectorized. By default, they will be in the order encountered.
            If by value items are sorted according to their default comparison, for example, text sorting will be case sensitive (for example, 'A' then 'Z' then 'a').</param>
        <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Transforms.Categorical.TermTransform Fit (Microsoft.ML.Runtime.Data.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Transforms.Categorical.TermTransform Fit(class Microsoft.ML.Runtime.Data.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator.Fit(Microsoft.ML.Runtime.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (input As IDataView) As TermTransform" />
      <MemberSignature Language="F#" Value="abstract member Fit : Microsoft.ML.Runtime.Data.IDataView -&gt; Microsoft.ML.Transforms.Categorical.TermTransform&#xA;override this.Fit : Microsoft.ML.Runtime.Data.IDataView -&gt; Microsoft.ML.Transforms.Categorical.TermTransform" Usage="valueToKeyMappingEstimator.Fit input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Core.Data.IEstimator`1.Fit(Microsoft.ML.Runtime.Data.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Transforms.Categorical.TermTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.Runtime.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Core.Data.SchemaShape GetOutputSchema (Microsoft.ML.Core.Data.SchemaShape inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Core.Data.SchemaShape GetOutputSchema(class Microsoft.ML.Core.Data.SchemaShape inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.Categorical.ValueToKeyMappingEstimator.GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As SchemaShape) As SchemaShape" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.Core.Data.SchemaShape -&gt; Microsoft.ML.Core.Data.SchemaShape&#xA;override this.GetOutputSchema : Microsoft.ML.Core.Data.SchemaShape -&gt; Microsoft.ML.Core.Data.SchemaShape" Usage="valueToKeyMappingEstimator.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Core.Data.IEstimator`1.GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Core.Data.SchemaShape</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.Core.Data.SchemaShape" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
