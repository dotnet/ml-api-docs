<Type Name="L1Optimizer" FullName="Microsoft.ML.Runtime.Numeric.L1Optimizer">
  <TypeSignature Language="C#" Value="public sealed class L1Optimizer : Microsoft.ML.Runtime.Numeric.Optimizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit L1Optimizer extends Microsoft.ML.Runtime.Numeric.Optimizer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Numeric.L1Optimizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class L1Optimizer&#xA;Inherits Optimizer" />
  <TypeSignature Language="F#" Value="type L1Optimizer = class&#xA;    inherit Optimizer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Runtime.Numeric.Optimizer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Orthant-Wise Limited-memory Quasi-Newton algorithm
            for optimization of smooth convex objectives plus L1-regularization
            If you use this code for published research, please cite
              Galen Andrew and Jianfeng Gao, "Scalable Training of L1-Regularized Log-Linear Models",	ICML 2007
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public L1Optimizer (Microsoft.ML.Runtime.IHostEnvironment env, int biasCount, float l1weight, int m = 20, bool keepDense = false, Microsoft.ML.Runtime.Numeric.ITerminationCriterion term = null, bool enforceNonNegativity = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, int32 biasCount, float32 l1weight, int32 m, bool keepDense, class Microsoft.ML.Runtime.Numeric.ITerminationCriterion term, bool enforceNonNegativity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Numeric.L1Optimizer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Int32,System.Single,System.Int32,System.Boolean,Microsoft.ML.Runtime.Numeric.ITerminationCriterion,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, biasCount As Integer, l1weight As Single, Optional m As Integer = 20, Optional keepDense As Boolean = false, Optional term As ITerminationCriterion = null, Optional enforceNonNegativity As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Numeric.L1Optimizer : Microsoft.ML.Runtime.IHostEnvironment * int * single * int * bool * Microsoft.ML.Runtime.Numeric.ITerminationCriterion * bool -&gt; Microsoft.ML.Runtime.Numeric.L1Optimizer" Usage="new Microsoft.ML.Runtime.Numeric.L1Optimizer (env, biasCount, l1weight, m, keepDense, term, enforceNonNegativity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="biasCount" Type="System.Int32" />
        <Parameter Name="l1weight" Type="System.Single" />
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="keepDense" Type="System.Boolean" />
        <Parameter Name="term" Type="Microsoft.ML.Runtime.Numeric.ITerminationCriterion" />
        <Parameter Name="enforceNonNegativity" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="env">The environment</param>
        <param name="biasCount">Number of biases</param>
        <param name="l1weight">Weight of L1 regularizer</param>
        <param name="m">The number of previous iterations to store</param>
        <param name="keepDense">Whether the optimizer will keep its internal state dense</param>
        <param name="term">Termination criterion</param>
        <param name="enforceNonNegativity">The flag enforcing the non-negativity constraint</param>
        <summary>
            Create an L1Optimizer with the supplied value of M and termination criterion
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>