<Type Name="Optimizer" FullName="Microsoft.ML.Runtime.Numeric.Optimizer">
  <TypeSignature Language="C#" Value="public class Optimizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Optimizer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Numeric.Optimizer" />
  <TypeSignature Language="VB.NET" Value="Public Class Optimizer" />
  <TypeSignature Language="F#" Value="type Optimizer = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Limited-memory BFGS quasi-Newton optimization routine
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Optimizer (Microsoft.ML.Runtime.IHostEnvironment env, int m = 20, bool keepDense = false, Microsoft.ML.Runtime.Numeric.ITerminationCriterion term = null, bool enforceNonNegativity = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.IHostEnvironment env, int32 m, bool keepDense, class Microsoft.ML.Runtime.Numeric.ITerminationCriterion term, bool enforceNonNegativity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Numeric.Optimizer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Int32,System.Boolean,Microsoft.ML.Runtime.Numeric.ITerminationCriterion,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (env As IHostEnvironment, Optional m As Integer = 20, Optional keepDense As Boolean = false, Optional term As ITerminationCriterion = null, Optional enforceNonNegativity As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Numeric.Optimizer : Microsoft.ML.Runtime.IHostEnvironment * int * bool * Microsoft.ML.Runtime.Numeric.ITerminationCriterion * bool -&gt; Microsoft.ML.Runtime.Numeric.Optimizer" Usage="new Microsoft.ML.Runtime.Numeric.Optimizer (env, m, keepDense, term, enforceNonNegativity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.Runtime.IHostEnvironment" />
        <Parameter Name="m" Type="System.Int32" />
        <Parameter Name="keepDense" Type="System.Boolean" />
        <Parameter Name="term" Type="Microsoft.ML.Runtime.Numeric.ITerminationCriterion" />
        <Parameter Name="enforceNonNegativity" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="env">The host environment</param>
        <param name="m">The number of previous iterations to store</param>
        <param name="keepDense">Whether the optimizer will keep its internal state dense</param>
        <param name="term">Termination criterion, defaults to MeanRelativeImprovement if null</param>
        <param name="enforceNonNegativity">The flag enforcing the non-negativity constraint</param>
        <summary>
            Create an optimizer with the supplied value of M and termination criterion
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnforceNonNegativity">
      <MemberSignature Language="C#" Value="protected readonly bool EnforceNonNegativity;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly bool EnforceNonNegativity" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Runtime.Numeric.Optimizer.EnforceNonNegativity" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly EnforceNonNegativity As Boolean " />
      <MemberSignature Language="F#" Value="val mutable EnforceNonNegativity : bool" Usage="Microsoft.ML.Runtime.Numeric.Optimizer.EnforceNonNegativity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Env">
      <MemberSignature Language="C#" Value="protected readonly Microsoft.ML.Runtime.IHostEnvironment Env;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly class Microsoft.ML.Runtime.IHostEnvironment Env" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Runtime.Numeric.Optimizer.Env" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Env As IHostEnvironment " />
      <MemberSignature Language="F#" Value="val mutable Env : Microsoft.ML.Runtime.IHostEnvironment" Usage="Microsoft.ML.Runtime.Numeric.Optimizer.Env" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Runtime.IHostEnvironment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The host environment to use for reporting progress and exceptions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepDense">
      <MemberSignature Language="C#" Value="protected readonly bool KeepDense;" />
      <MemberSignature Language="ILAsm" Value=".field family initonly bool KeepDense" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ML.Runtime.Numeric.Optimizer.KeepDense" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly KeepDense As Boolean " />
      <MemberSignature Language="F#" Value="val mutable KeepDense : bool" Usage="Microsoft.ML.Runtime.Numeric.Optimizer.KeepDense" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="M">
      <MemberSignature Language="C#" Value="public int M { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 M" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Numeric.Optimizer.M" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property M As Integer" />
      <MemberSignature Language="F#" Value="member this.M : int" Usage="Microsoft.ML.Runtime.Numeric.Optimizer.M" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Number of previous iterations to remember for estimate of Hessian.
            </summary>
        <value>To be added.</value>
        <remarks>
            Higher M means better approximation to Newton's method, but uses more memory,
            and requires more time to compute direction. The optimal setting of M is problem
            specific, depending on such factors as how expensive is function evaluation
            compared to choosing the direction, how easily approximable is the function's
            Hessian, etc.
            M = 15..20 is usually reasonable but if necessary even M=2 is better than
            gradient descent
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minimize">
      <MemberSignature Language="C#" Value="public void Minimize (Microsoft.ML.Runtime.Numeric.DifferentiableFunction function, ref Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt; initial, ref Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt; result, out float optimum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Minimize(class Microsoft.ML.Runtime.Numeric.DifferentiableFunction function, valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;&amp; initial, valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;&amp; result, [out] float32&amp; optimum) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Numeric.Optimizer.Minimize(Microsoft.ML.Runtime.Numeric.DifferentiableFunction,Microsoft.ML.Runtime.Data.VBuffer{System.Single}@,Microsoft.ML.Runtime.Data.VBuffer{System.Single}@,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Minimize (function As DifferentiableFunction, ByRef initial As VBuffer(Of Single), ByRef result As VBuffer(Of Single), ByRef optimum As Single)" />
      <MemberSignature Language="F#" Value="member this.Minimize : Microsoft.ML.Runtime.Numeric.DifferentiableFunction *  *  *  -&gt; unit" Usage="optimizer.Minimize (function, initial, result, optimum)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="Microsoft.ML.Runtime.Numeric.DifferentiableFunction" />
        <Parameter Name="initial" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;" RefType="ref" />
        <Parameter Name="result" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;" RefType="ref" />
        <Parameter Name="optimum" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="function">The function to minimize</param>
        <param name="initial">The initial point</param>
        <param name="result">The point at the optimum</param>
        <param name="optimum">The optimum function value</param>
        <summary>
            Minimize a function.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.ML.Runtime.Numeric.Optimizer.PrematureConvergenceException">Thrown if successive points are within numeric precision of each other, but termination condition is still unsatisfied.</exception>
      </Docs>
    </Member>
    <Member MemberName="Minimize">
      <MemberSignature Language="C#" Value="public void Minimize (Microsoft.ML.Runtime.Numeric.DifferentiableFunction function, ref Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt; initial, Microsoft.ML.Runtime.Numeric.ITerminationCriterion term, ref Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt; result, out float optimum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Minimize(class Microsoft.ML.Runtime.Numeric.DifferentiableFunction function, valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;&amp; initial, class Microsoft.ML.Runtime.Numeric.ITerminationCriterion term, valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;&amp; result, [out] float32&amp; optimum) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Numeric.Optimizer.Minimize(Microsoft.ML.Runtime.Numeric.DifferentiableFunction,Microsoft.ML.Runtime.Data.VBuffer{System.Single}@,Microsoft.ML.Runtime.Numeric.ITerminationCriterion,Microsoft.ML.Runtime.Data.VBuffer{System.Single}@,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Minimize (function As DifferentiableFunction, ByRef initial As VBuffer(Of Single), term As ITerminationCriterion, ByRef result As VBuffer(Of Single), ByRef optimum As Single)" />
      <MemberSignature Language="F#" Value="member this.Minimize : Microsoft.ML.Runtime.Numeric.DifferentiableFunction *  * Microsoft.ML.Runtime.Numeric.ITerminationCriterion *  *  -&gt; unit" Usage="optimizer.Minimize (function, initial, term, result, optimum)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="Microsoft.ML.Runtime.Numeric.DifferentiableFunction" />
        <Parameter Name="initial" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;" RefType="ref" />
        <Parameter Name="term" Type="Microsoft.ML.Runtime.Numeric.ITerminationCriterion" />
        <Parameter Name="result" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;" RefType="ref" />
        <Parameter Name="optimum" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="function">The function to minimize</param>
        <param name="initial">The initial point</param>
        <param name="term">termination criterion to use</param>
        <param name="result">The point at the optimum</param>
        <param name="optimum">The optimum function value</param>
        <summary>
            Minimize a function using the supplied termination criterion
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.ML.Runtime.Numeric.Optimizer.PrematureConvergenceException">Thrown if successive points are within numeric precision of each other, but termination condition is still unsatisfied.</exception>
      </Docs>
    </Member>
    <Member MemberName="Minimize">
      <MemberSignature Language="C#" Value="public void Minimize (Microsoft.ML.Runtime.Numeric.DifferentiableFunction function, ref Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt; initial, float tolerance, ref Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt; result, out float optimum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Minimize(class Microsoft.ML.Runtime.Numeric.DifferentiableFunction function, valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;&amp; initial, float32 tolerance, valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;&amp; result, [out] float32&amp; optimum) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Numeric.Optimizer.Minimize(Microsoft.ML.Runtime.Numeric.DifferentiableFunction,Microsoft.ML.Runtime.Data.VBuffer{System.Single}@,System.Single,Microsoft.ML.Runtime.Data.VBuffer{System.Single}@,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Minimize (function As DifferentiableFunction, ByRef initial As VBuffer(Of Single), tolerance As Single, ByRef result As VBuffer(Of Single), ByRef optimum As Single)" />
      <MemberSignature Language="F#" Value="member this.Minimize : Microsoft.ML.Runtime.Numeric.DifferentiableFunction *  * single *  *  -&gt; unit" Usage="optimizer.Minimize (function, initial, tolerance, result, optimum)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="Microsoft.ML.Runtime.Numeric.DifferentiableFunction" />
        <Parameter Name="initial" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;" RefType="ref" />
        <Parameter Name="tolerance" Type="System.Single" />
        <Parameter Name="result" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;" RefType="ref" />
        <Parameter Name="optimum" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="function">The function to minimize</param>
        <param name="initial">The initial point</param>
        <param name="tolerance">Convergence tolerance (smaller means more iterations, closer to exact optimum)</param>
        <param name="result">The point at the optimum</param>
        <param name="optimum">The optimum function value</param>
        <summary>
            Minimize a function using the MeanRelativeImprovement termination criterion with the supplied tolerance level
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.ML.Runtime.Numeric.Optimizer.PrematureConvergenceException">Thrown if successive points are within numeric precision of each other, but termination condition is still unsatisfied.</exception>
      </Docs>
    </Member>
    <Member MemberName="Quiet">
      <MemberSignature Language="C#" Value="public bool Quiet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Quiet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Numeric.Optimizer.Quiet" />
      <MemberSignature Language="VB.NET" Value="Public Property Quiet As Boolean" />
      <MemberSignature Language="F#" Value="member this.Quiet : bool with get, set" Usage="Microsoft.ML.Runtime.Numeric.Optimizer.Quiet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If true, suppresses all output.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalMemoryLimit">
      <MemberSignature Language="C#" Value="public long TotalMemoryLimit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 TotalMemoryLimit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Runtime.Numeric.Optimizer.TotalMemoryLimit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalMemoryLimit As Long" />
      <MemberSignature Language="F#" Value="member this.TotalMemoryLimit : int64" Usage="Microsoft.ML.Runtime.Numeric.Optimizer.TotalMemoryLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a bound on the total number of bytes allowed.
            If the whole application is using more than this, no more vectors will be allocated.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>