<Type Name="DifferentiableFunctionAggregator" FullName="Microsoft.ML.Runtime.Numeric.DifferentiableFunctionAggregator">
  <TypeSignature Language="C#" Value="public class DifferentiableFunctionAggregator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DifferentiableFunctionAggregator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Runtime.Numeric.DifferentiableFunctionAggregator" />
  <TypeSignature Language="VB.NET" Value="Public Class DifferentiableFunctionAggregator" />
  <TypeSignature Language="F#" Value="type DifferentiableFunctionAggregator = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Class to aggregate an indexed differentiable function into a single function, in parallel
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DifferentiableFunctionAggregator (Microsoft.ML.Runtime.Numeric.IndexedDifferentiableFunction func, int dim, int maxIndex, int threads = 64);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Runtime.Numeric.IndexedDifferentiableFunction func, int32 dim, int32 maxIndex, int32 threads) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Numeric.DifferentiableFunctionAggregator.#ctor(Microsoft.ML.Runtime.Numeric.IndexedDifferentiableFunction,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (func As IndexedDifferentiableFunction, dim As Integer, maxIndex As Integer, Optional threads As Integer = 64)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Runtime.Numeric.DifferentiableFunctionAggregator : Microsoft.ML.Runtime.Numeric.IndexedDifferentiableFunction * int * int * int -&gt; Microsoft.ML.Runtime.Numeric.DifferentiableFunctionAggregator" Usage="new Microsoft.ML.Runtime.Numeric.DifferentiableFunctionAggregator (func, dim, maxIndex, threads)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="func" Type="Microsoft.ML.Runtime.Numeric.IndexedDifferentiableFunction" />
        <Parameter Name="dim" Type="System.Int32" />
        <Parameter Name="maxIndex" Type="System.Int32" />
        <Parameter Name="threads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="func">Indexed function to use</param>
        <param name="dim">Dimensionality of the function</param>
        <param name="maxIndex">Max index of the function</param>
        <param name="threads">Number of threads to use</param>
        <summary>
            Creates a DifferentiableFunctionAggregator
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Eval">
      <MemberSignature Language="C#" Value="public float Eval (ref Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt; input, ref Microsoft.ML.Runtime.Data.VBuffer&lt;float&gt; gradient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 Eval(valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;&amp; input, valuetype Microsoft.ML.Runtime.Data.VBuffer`1&lt;float32&gt;&amp; gradient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Runtime.Numeric.DifferentiableFunctionAggregator.Eval(Microsoft.ML.Runtime.Data.VBuffer{System.Single}@,Microsoft.ML.Runtime.Data.VBuffer{System.Single}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Eval (ByRef input As VBuffer(Of Single), ByRef gradient As VBuffer(Of Single)) As Single" />
      <MemberSignature Language="F#" Value="member this.Eval :  *  -&gt; single" Usage="differentiableFunctionAggregator.Eval (input, gradient)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;" RefType="ref" />
        <Parameter Name="gradient" Type="Microsoft.ML.Runtime.Data.VBuffer&lt;System.Single&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="input">The point at which to evaluate the function</param>
        <param name="gradient">The gradient vector, which must be filled in (its initial contents are undefined)</param>
        <summary>
            Evaluate and sum the function over all indices, in parallel
            </summary>
        <returns>Function value</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>