<Type Name="ITransformer" FullName="Microsoft.ML.Core.Data.ITransformer">
  <TypeSignature Language="C#" Value="public interface ITransformer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITransformer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Core.Data.ITransformer" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITransformer" />
  <TypeSignature Language="F#" Value="type ITransformer = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            The transformer is a component that transforms data.
            It also supports 'schema propagation' to answer the question of 'how will the data with this schema look, after you transform it?'.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.Schema GetOutputSchema (Microsoft.ML.Data.Schema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.Schema GetOutputSchema(class Microsoft.ML.Data.Schema inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Core.Data.ITransformer.GetOutputSchema(Microsoft.ML.Data.Schema)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As Schema) As Schema" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.ML.Data.Schema -&gt; Microsoft.ML.Data.Schema" Usage="iTransformer.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.Schema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.Data.Schema" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>
            Schema propagation for transformers.
            Returns the output schema of the data, if the input schema is like the one provided.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRowToRowMapper">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.IRowToRowMapper GetRowToRowMapper (Microsoft.ML.Data.Schema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.IRowToRowMapper GetRowToRowMapper(class Microsoft.ML.Data.Schema inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Core.Data.ITransformer.GetRowToRowMapper(Microsoft.ML.Data.Schema)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRowToRowMapper (inputSchema As Schema) As IRowToRowMapper" />
      <MemberSignature Language="F#" Value="abstract member GetRowToRowMapper : Microsoft.ML.Data.Schema -&gt; Microsoft.ML.Data.IRowToRowMapper" Usage="iTransformer.GetRowToRowMapper inputSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.IRowToRowMapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.ML.Data.Schema" />
      </Parameters>
      <Docs>
        <param name="inputSchema">The input schema for which we should get the mapper.</param>
        <summary>
            Constructs a row-to-row mapper based on an input schema. If <see cref="P:Microsoft.ML.Core.Data.ITransformer.IsRowToRowMapper" />
            is <c>false</c>, then an exception should be thrown. If the input schema is in any way
            unsuitable for constructing the mapper, an exception should likewise be thrown.
            </summary>
        <returns>The row to row mapper.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRowToRowMapper">
      <MemberSignature Language="C#" Value="public bool IsRowToRowMapper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRowToRowMapper" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Core.Data.ITransformer.IsRowToRowMapper" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRowToRowMapper As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsRowToRowMapper : bool" Usage="Microsoft.ML.Core.Data.ITransformer.IsRowToRowMapper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether a call to <see cref="M:Microsoft.ML.Core.Data.ITransformer.GetRowToRowMapper(Microsoft.ML.Data.Schema)" /> should succeed, on an
            appropriate schema.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.IDataView Transform (Microsoft.ML.Data.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.IDataView Transform(class Microsoft.ML.Data.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Core.Data.ITransformer.Transform(Microsoft.ML.Data.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IDataView) As IDataView" />
      <MemberSignature Language="F#" Value="abstract member Transform : Microsoft.ML.Data.IDataView -&gt; Microsoft.ML.Data.IDataView" Usage="iTransformer.Transform input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.ML.Data.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>
            Take the data in, make transformations, output the data.
            Note that <see cref="T:Microsoft.ML.Data.IDataView" />'s are lazy, so no actual transformations happen here, just schema validation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>