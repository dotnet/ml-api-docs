<Type Name="IDataReader&lt;TSource&gt;" FullName="Microsoft.ML.Core.Data.IDataReader&lt;TSource&gt;">
  <TypeSignature Language="C#" Value="public interface IDataReader&lt;in TSource&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataReader`1&lt;- TSource&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Core.Data.IDataReader`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataReader(Of In TSource)" />
  <TypeSignature Language="F#" Value="type IDataReader&lt;'Source&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSource">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TSource">The type of input the reader takes.</typeparam>
    <summary>
            The 'data reader' takes a certain kind of input and turns it into an <see cref="T:Microsoft.ML.Data.IDataView" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.Schema GetOutputSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.Schema GetOutputSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Core.Data.IDataReader`1.GetOutputSchema" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema () As Schema" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : unit -&gt; Microsoft.ML.Data.Schema" Usage="iDataReader.GetOutputSchema " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.Schema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            The output schema of the reader.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.IDataView Read (TSource input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.IDataView Read(!TSource input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Core.Data.IDataReader`1.Read(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (input As TSource) As IDataView" />
      <MemberSignature Language="F#" Value="abstract member Read : 'Source -&gt; Microsoft.ML.Data.IDataView" Usage="iDataReader.Read input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TSource" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>
            Produce the data view from the specified input.
            Note that <see cref="T:Microsoft.ML.Data.IDataView" />'s are lazy, so no actual reading happens here, just schema validation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>